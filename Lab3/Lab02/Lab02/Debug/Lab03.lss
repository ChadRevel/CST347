
Lab03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002eb4  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  00402eb4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000022c  2000043c  004032f0  0002043c  2**2
                  ALLOC
  3 .stack        00003000  20000668  0040351c  0002043c  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002046a  2**0
                  CONTENTS, READONLY
  6 .debug_info   000140d8  00000000  00000000  000204c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002dba  00000000  00000000  0003459b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000684a  00000000  00000000  00037355  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007d8  00000000  00000000  0003db9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a08  00000000  00000000  0003e377  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000077b0  00000000  00000000  0003ed7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a201  00000000  00000000  0004652f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000695ec  00000000  00000000  00050730  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001520  00000000  00000000  000b9d1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	68 36 00 20 f1 26 40 00 ed 26 40 00 ed 26 40 00     h6. .&@..&@..&@.
  400010:	ed 26 40 00 ed 26 40 00 ed 26 40 00 00 00 00 00     .&@..&@..&@.....
	...
  40002c:	a1 02 40 00 ed 26 40 00 00 00 00 00 41 03 40 00     ..@..&@.....A.@.
  40003c:	a5 03 40 00 ed 26 40 00 ed 26 40 00 ed 26 40 00     ..@..&@..&@..&@.
  40004c:	ed 26 40 00 ed 26 40 00 ed 26 40 00 ed 26 40 00     .&@..&@..&@..&@.
  40005c:	ed 26 40 00 ed 26 40 00 ed 26 40 00 ed 26 40 00     .&@..&@..&@..&@.
  40006c:	ed 26 40 00 ed 26 40 00 ed 26 40 00 ed 26 40 00     .&@..&@..&@..&@.
  40007c:	ed 26 40 00 ed 26 40 00 ed 26 40 00 ed 26 40 00     .&@..&@..&@..&@.
  40008c:	ed 26 40 00 ed 26 40 00 ed 26 40 00 ed 26 40 00     .&@..&@..&@..&@.
  40009c:	ed 26 40 00 ed 26 40 00 ed 26 40 00 ed 26 40 00     .&@..&@..&@..&@.
  4000ac:	ed 26 40 00 ed 26 40 00 ed 26 40 00 ed 26 40 00     .&@..&@..&@..&@.
  4000bc:	ed 26 40 00 ed 26 40 00 ed 26 40 00 ed 26 40 00     .&@..&@..&@..&@.
  4000cc:	ed 26 40 00 ed 26 40 00 ed 26 40 00 ed 26 40 00     .&@..&@..&@..&@.
  4000dc:	ed 26 40 00 ed 26 40 00 ed 26 40 00 ed 26 40 00     .&@..&@..&@..&@.
  4000ec:	ed 26 40 00 ed 26 40 00 ed 26 40 00                 .&@..&@..&@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	2000043c 	.word	0x2000043c
  400114:	00000000 	.word	0x00000000
  400118:	00402eb4 	.word	0x00402eb4

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00402eb4 	.word	0x00402eb4
  400158:	20000440 	.word	0x20000440
  40015c:	00402eb4 	.word	0x00402eb4
  400160:	00000000 	.word	0x00000000

00400164 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400164:	f100 0308 	add.w	r3, r0, #8
  400168:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40016a:	f04f 32ff 	mov.w	r2, #4294967295
  40016e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400170:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400172:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400174:	2300      	movs	r3, #0
  400176:	6003      	str	r3, [r0, #0]
  400178:	4770      	bx	lr

0040017a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
  40017a:	2300      	movs	r3, #0
  40017c:	6103      	str	r3, [r0, #16]
  40017e:	4770      	bx	lr

00400180 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400180:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400182:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400184:	689a      	ldr	r2, [r3, #8]
  400186:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400188:	689a      	ldr	r2, [r3, #8]
  40018a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  40018c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
  40018e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400190:	6803      	ldr	r3, [r0, #0]
  400192:	3301      	adds	r3, #1
  400194:	6003      	str	r3, [r0, #0]
  400196:	4770      	bx	lr

00400198 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400198:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40019a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40019c:	f1b5 3fff 	cmp.w	r5, #4294967295
  4001a0:	d002      	beq.n	4001a8 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  4001a2:	f100 0208 	add.w	r2, r0, #8
  4001a6:	e002      	b.n	4001ae <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4001a8:	6902      	ldr	r2, [r0, #16]
  4001aa:	e004      	b.n	4001b6 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  4001ac:	461a      	mov	r2, r3
  4001ae:	6853      	ldr	r3, [r2, #4]
  4001b0:	681c      	ldr	r4, [r3, #0]
  4001b2:	42a5      	cmp	r5, r4
  4001b4:	d2fa      	bcs.n	4001ac <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4001b6:	6853      	ldr	r3, [r2, #4]
  4001b8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4001ba:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4001bc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4001be:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
  4001c0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4001c2:	6803      	ldr	r3, [r0, #0]
  4001c4:	3301      	adds	r3, #1
  4001c6:	6003      	str	r3, [r0, #0]
}
  4001c8:	bc30      	pop	{r4, r5}
  4001ca:	4770      	bx	lr

004001cc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
  4001cc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4001ce:	6842      	ldr	r2, [r0, #4]
  4001d0:	6881      	ldr	r1, [r0, #8]
  4001d2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4001d4:	6882      	ldr	r2, [r0, #8]
  4001d6:	6841      	ldr	r1, [r0, #4]
  4001d8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4001da:	685a      	ldr	r2, [r3, #4]
  4001dc:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4001de:	bf04      	itt	eq
  4001e0:	6882      	ldreq	r2, [r0, #8]
  4001e2:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
  4001e4:	2200      	movs	r2, #0
  4001e6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4001e8:	681a      	ldr	r2, [r3, #0]
  4001ea:	3a01      	subs	r2, #1
  4001ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  4001ee:	6818      	ldr	r0, [r3, #0]
}
  4001f0:	4770      	bx	lr
	...

004001f4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
  4001f4:	4808      	ldr	r0, [pc, #32]	; (400218 <prvPortStartFirstTask+0x24>)
  4001f6:	6800      	ldr	r0, [r0, #0]
  4001f8:	6800      	ldr	r0, [r0, #0]
  4001fa:	f380 8808 	msr	MSP, r0
  4001fe:	f04f 0000 	mov.w	r0, #0
  400202:	f380 8814 	msr	CONTROL, r0
  400206:	b662      	cpsie	i
  400208:	b661      	cpsie	f
  40020a:	f3bf 8f4f 	dsb	sy
  40020e:	f3bf 8f6f 	isb	sy
  400212:	df00      	svc	0
  400214:	bf00      	nop
  400216:	0000      	.short	0x0000
  400218:	e000ed08 	.word	0xe000ed08

0040021c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40021c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40022c <vPortEnableVFP+0x10>
  400220:	6801      	ldr	r1, [r0, #0]
  400222:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400226:	6001      	str	r1, [r0, #0]
  400228:	4770      	bx	lr
  40022a:	0000      	.short	0x0000
  40022c:	e000ed88 	.word	0xe000ed88

00400230 <prvTaskExitError>:
{
  400230:	b500      	push	{lr}
  400232:	b083      	sub	sp, #12
volatile uint32_t ulDummy = 0;
  400234:	2300      	movs	r3, #0
  400236:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
  400238:	4b0b      	ldr	r3, [pc, #44]	; (400268 <prvTaskExitError+0x38>)
  40023a:	681b      	ldr	r3, [r3, #0]
  40023c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400240:	d003      	beq.n	40024a <prvTaskExitError+0x1a>
  400242:	21e3      	movs	r1, #227	; 0xe3
  400244:	4809      	ldr	r0, [pc, #36]	; (40026c <prvTaskExitError+0x3c>)
  400246:	4b0a      	ldr	r3, [pc, #40]	; (400270 <prvTaskExitError+0x40>)
  400248:	4798      	blx	r3

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40024a:	f04f 0350 	mov.w	r3, #80	; 0x50
  40024e:	f383 8811 	msr	BASEPRI, r3
  400252:	f3bf 8f6f 	isb	sy
  400256:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
  40025a:	9b01      	ldr	r3, [sp, #4]
  40025c:	2b00      	cmp	r3, #0
  40025e:	d0fc      	beq.n	40025a <prvTaskExitError+0x2a>
}
  400260:	b003      	add	sp, #12
  400262:	f85d fb04 	ldr.w	pc, [sp], #4
  400266:	bf00      	nop
  400268:	20000000 	.word	0x20000000
  40026c:	00402d6c 	.word	0x00402d6c
  400270:	004029d9 	.word	0x004029d9

00400274 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400278:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  40027c:	f021 0101 	bic.w	r1, r1, #1
  400280:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400284:	4b05      	ldr	r3, [pc, #20]	; (40029c <pxPortInitialiseStack+0x28>)
  400286:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40028a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  40028e:	f06f 0302 	mvn.w	r3, #2
  400292:	f840 3c24 	str.w	r3, [r0, #-36]
}
  400296:	3844      	subs	r0, #68	; 0x44
  400298:	4770      	bx	lr
  40029a:	bf00      	nop
  40029c:	00400231 	.word	0x00400231

004002a0 <SVC_Handler>:
	__asm volatile (
  4002a0:	4b07      	ldr	r3, [pc, #28]	; (4002c0 <pxCurrentTCBConst2>)
  4002a2:	6819      	ldr	r1, [r3, #0]
  4002a4:	6808      	ldr	r0, [r1, #0]
  4002a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4002aa:	f380 8809 	msr	PSP, r0
  4002ae:	f3bf 8f6f 	isb	sy
  4002b2:	f04f 0000 	mov.w	r0, #0
  4002b6:	f380 8811 	msr	BASEPRI, r0
  4002ba:	4770      	bx	lr
  4002bc:	f3af 8000 	nop.w

004002c0 <pxCurrentTCBConst2>:
  4002c0:	20000478 	.word	0x20000478

004002c4 <vPortEnterCritical>:
{
  4002c4:	b508      	push	{r3, lr}
  4002c6:	f04f 0350 	mov.w	r3, #80	; 0x50
  4002ca:	f383 8811 	msr	BASEPRI, r3
  4002ce:	f3bf 8f6f 	isb	sy
  4002d2:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
  4002d6:	4a09      	ldr	r2, [pc, #36]	; (4002fc <vPortEnterCritical+0x38>)
  4002d8:	6813      	ldr	r3, [r2, #0]
  4002da:	3301      	adds	r3, #1
  4002dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4002de:	2b01      	cmp	r3, #1
  4002e0:	d000      	beq.n	4002e4 <vPortEnterCritical+0x20>
  4002e2:	bd08      	pop	{r3, pc}
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4002e4:	4b06      	ldr	r3, [pc, #24]	; (400300 <vPortEnterCritical+0x3c>)
  4002e6:	681b      	ldr	r3, [r3, #0]
  4002e8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4002ec:	d0f9      	beq.n	4002e2 <vPortEnterCritical+0x1e>
  4002ee:	f240 119f 	movw	r1, #415	; 0x19f
  4002f2:	4804      	ldr	r0, [pc, #16]	; (400304 <vPortEnterCritical+0x40>)
  4002f4:	4b04      	ldr	r3, [pc, #16]	; (400308 <vPortEnterCritical+0x44>)
  4002f6:	4798      	blx	r3
}
  4002f8:	e7f3      	b.n	4002e2 <vPortEnterCritical+0x1e>
  4002fa:	bf00      	nop
  4002fc:	20000000 	.word	0x20000000
  400300:	e000ed04 	.word	0xe000ed04
  400304:	00402d6c 	.word	0x00402d6c
  400308:	004029d9 	.word	0x004029d9

0040030c <vPortExitCritical>:
{
  40030c:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
  40030e:	4b08      	ldr	r3, [pc, #32]	; (400330 <vPortExitCritical+0x24>)
  400310:	681b      	ldr	r3, [r3, #0]
  400312:	b13b      	cbz	r3, 400324 <vPortExitCritical+0x18>
	uxCriticalNesting--;
  400314:	4a06      	ldr	r2, [pc, #24]	; (400330 <vPortExitCritical+0x24>)
  400316:	6813      	ldr	r3, [r2, #0]
  400318:	3b01      	subs	r3, #1
  40031a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40031c:	b90b      	cbnz	r3, 400322 <vPortExitCritical+0x16>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  40031e:	f383 8811 	msr	BASEPRI, r3
  400322:	bd08      	pop	{r3, pc}
	configASSERT( uxCriticalNesting );
  400324:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
  400328:	4802      	ldr	r0, [pc, #8]	; (400334 <vPortExitCritical+0x28>)
  40032a:	4b03      	ldr	r3, [pc, #12]	; (400338 <vPortExitCritical+0x2c>)
  40032c:	4798      	blx	r3
  40032e:	e7f1      	b.n	400314 <vPortExitCritical+0x8>
  400330:	20000000 	.word	0x20000000
  400334:	00402d6c 	.word	0x00402d6c
  400338:	004029d9 	.word	0x004029d9
  40033c:	00000000 	.word	0x00000000

00400340 <PendSV_Handler>:
	__asm volatile
  400340:	f3ef 8009 	mrs	r0, PSP
  400344:	f3bf 8f6f 	isb	sy
  400348:	4b15      	ldr	r3, [pc, #84]	; (4003a0 <pxCurrentTCBConst>)
  40034a:	681a      	ldr	r2, [r3, #0]
  40034c:	f01e 0f10 	tst.w	lr, #16
  400350:	bf08      	it	eq
  400352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40035a:	6010      	str	r0, [r2, #0]
  40035c:	e92d 0009 	stmdb	sp!, {r0, r3}
  400360:	f04f 0050 	mov.w	r0, #80	; 0x50
  400364:	f380 8811 	msr	BASEPRI, r0
  400368:	f3bf 8f4f 	dsb	sy
  40036c:	f3bf 8f6f 	isb	sy
  400370:	f001 faac 	bl	4018cc <vTaskSwitchContext>
  400374:	f04f 0000 	mov.w	r0, #0
  400378:	f380 8811 	msr	BASEPRI, r0
  40037c:	bc09      	pop	{r0, r3}
  40037e:	6819      	ldr	r1, [r3, #0]
  400380:	6808      	ldr	r0, [r1, #0]
  400382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400386:	f01e 0f10 	tst.w	lr, #16
  40038a:	bf08      	it	eq
  40038c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400390:	f380 8809 	msr	PSP, r0
  400394:	f3bf 8f6f 	isb	sy
  400398:	4770      	bx	lr
  40039a:	bf00      	nop
  40039c:	f3af 8000 	nop.w

004003a0 <pxCurrentTCBConst>:
  4003a0:	20000478 	.word	0x20000478

004003a4 <SysTick_Handler>:
{
  4003a4:	b508      	push	{r3, lr}
	__asm volatile
  4003a6:	f04f 0350 	mov.w	r3, #80	; 0x50
  4003aa:	f383 8811 	msr	BASEPRI, r3
  4003ae:	f3bf 8f6f 	isb	sy
  4003b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
  4003b6:	4b05      	ldr	r3, [pc, #20]	; (4003cc <SysTick_Handler+0x28>)
  4003b8:	4798      	blx	r3
  4003ba:	b118      	cbz	r0, 4003c4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4003bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4003c0:	4b03      	ldr	r3, [pc, #12]	; (4003d0 <SysTick_Handler+0x2c>)
  4003c2:	601a      	str	r2, [r3, #0]
	__asm volatile
  4003c4:	2300      	movs	r3, #0
  4003c6:	f383 8811 	msr	BASEPRI, r3
  4003ca:	bd08      	pop	{r3, pc}
  4003cc:	0040161d 	.word	0x0040161d
  4003d0:	e000ed04 	.word	0xe000ed04

004003d4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  4003d4:	4a08      	ldr	r2, [pc, #32]	; (4003f8 <vPortSetupTimerInterrupt+0x24>)
  4003d6:	2300      	movs	r3, #0
  4003d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  4003da:	4908      	ldr	r1, [pc, #32]	; (4003fc <vPortSetupTimerInterrupt+0x28>)
  4003dc:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4003de:	4b08      	ldr	r3, [pc, #32]	; (400400 <vPortSetupTimerInterrupt+0x2c>)
  4003e0:	681b      	ldr	r3, [r3, #0]
  4003e2:	4908      	ldr	r1, [pc, #32]	; (400404 <vPortSetupTimerInterrupt+0x30>)
  4003e4:	fba1 1303 	umull	r1, r3, r1, r3
  4003e8:	099b      	lsrs	r3, r3, #6
  4003ea:	3b01      	subs	r3, #1
  4003ec:	4906      	ldr	r1, [pc, #24]	; (400408 <vPortSetupTimerInterrupt+0x34>)
  4003ee:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4003f0:	2307      	movs	r3, #7
  4003f2:	6013      	str	r3, [r2, #0]
  4003f4:	4770      	bx	lr
  4003f6:	bf00      	nop
  4003f8:	e000e010 	.word	0xe000e010
  4003fc:	e000e018 	.word	0xe000e018
  400400:	20000008 	.word	0x20000008
  400404:	10624dd3 	.word	0x10624dd3
  400408:	e000e014 	.word	0xe000e014

0040040c <xPortStartScheduler>:
{
  40040c:	b510      	push	{r4, lr}
  40040e:	b082      	sub	sp, #8
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  400410:	4b36      	ldr	r3, [pc, #216]	; (4004ec <xPortStartScheduler+0xe0>)
  400412:	681a      	ldr	r2, [r3, #0]
  400414:	4b36      	ldr	r3, [pc, #216]	; (4004f0 <xPortStartScheduler+0xe4>)
  400416:	429a      	cmp	r2, r3
  400418:	d01e      	beq.n	400458 <xPortStartScheduler+0x4c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  40041a:	4b34      	ldr	r3, [pc, #208]	; (4004ec <xPortStartScheduler+0xe0>)
  40041c:	681a      	ldr	r2, [r3, #0]
  40041e:	4b35      	ldr	r3, [pc, #212]	; (4004f4 <xPortStartScheduler+0xe8>)
  400420:	429a      	cmp	r2, r3
  400422:	d01f      	beq.n	400464 <xPortStartScheduler+0x58>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400424:	4b34      	ldr	r3, [pc, #208]	; (4004f8 <xPortStartScheduler+0xec>)
  400426:	781a      	ldrb	r2, [r3, #0]
  400428:	b2d2      	uxtb	r2, r2
  40042a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40042c:	22ff      	movs	r2, #255	; 0xff
  40042e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400430:	781b      	ldrb	r3, [r3, #0]
  400432:	b2db      	uxtb	r3, r3
  400434:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400438:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40043c:	f003 0350 	and.w	r3, r3, #80	; 0x50
  400440:	4a2e      	ldr	r2, [pc, #184]	; (4004fc <xPortStartScheduler+0xf0>)
  400442:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400444:	2207      	movs	r2, #7
  400446:	4b2e      	ldr	r3, [pc, #184]	; (400500 <xPortStartScheduler+0xf4>)
  400448:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40044a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40044e:	f013 0f80 	tst.w	r3, #128	; 0x80
  400452:	d01e      	beq.n	400492 <xPortStartScheduler+0x86>
  400454:	2206      	movs	r2, #6
  400456:	e00c      	b.n	400472 <xPortStartScheduler+0x66>
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  400458:	f44f 7194 	mov.w	r1, #296	; 0x128
  40045c:	4829      	ldr	r0, [pc, #164]	; (400504 <xPortStartScheduler+0xf8>)
  40045e:	4b2a      	ldr	r3, [pc, #168]	; (400508 <xPortStartScheduler+0xfc>)
  400460:	4798      	blx	r3
  400462:	e7da      	b.n	40041a <xPortStartScheduler+0xe>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  400464:	f240 1129 	movw	r1, #297	; 0x129
  400468:	4826      	ldr	r0, [pc, #152]	; (400504 <xPortStartScheduler+0xf8>)
  40046a:	4b27      	ldr	r3, [pc, #156]	; (400508 <xPortStartScheduler+0xfc>)
  40046c:	4798      	blx	r3
  40046e:	e7d9      	b.n	400424 <xPortStartScheduler+0x18>
  400470:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400472:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400476:	005b      	lsls	r3, r3, #1
  400478:	b2db      	uxtb	r3, r3
  40047a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40047e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400482:	1e51      	subs	r1, r2, #1
  400484:	f013 0f80 	tst.w	r3, #128	; 0x80
  400488:	d1f2      	bne.n	400470 <xPortStartScheduler+0x64>
  40048a:	4b1d      	ldr	r3, [pc, #116]	; (400500 <xPortStartScheduler+0xf4>)
  40048c:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
  40048e:	2a03      	cmp	r2, #3
  400490:	d004      	beq.n	40049c <xPortStartScheduler+0x90>
  400492:	f44f 71ad 	mov.w	r1, #346	; 0x15a
  400496:	481b      	ldr	r0, [pc, #108]	; (400504 <xPortStartScheduler+0xf8>)
  400498:	4b1b      	ldr	r3, [pc, #108]	; (400508 <xPortStartScheduler+0xfc>)
  40049a:	4798      	blx	r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40049c:	4a18      	ldr	r2, [pc, #96]	; (400500 <xPortStartScheduler+0xf4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  40049e:	6813      	ldr	r3, [r2, #0]
  4004a0:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4004a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4004a6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4004a8:	9b01      	ldr	r3, [sp, #4]
  4004aa:	b2db      	uxtb	r3, r3
  4004ac:	4a12      	ldr	r2, [pc, #72]	; (4004f8 <xPortStartScheduler+0xec>)
  4004ae:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4004b0:	4b16      	ldr	r3, [pc, #88]	; (40050c <xPortStartScheduler+0x100>)
  4004b2:	681a      	ldr	r2, [r3, #0]
  4004b4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  4004b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4004ba:	681a      	ldr	r2, [r3, #0]
  4004bc:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  4004c0:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4004c2:	4b13      	ldr	r3, [pc, #76]	; (400510 <xPortStartScheduler+0x104>)
  4004c4:	4798      	blx	r3
	uxCriticalNesting = 0;
  4004c6:	2400      	movs	r4, #0
  4004c8:	4b12      	ldr	r3, [pc, #72]	; (400514 <xPortStartScheduler+0x108>)
  4004ca:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  4004cc:	4b12      	ldr	r3, [pc, #72]	; (400518 <xPortStartScheduler+0x10c>)
  4004ce:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4004d0:	4a12      	ldr	r2, [pc, #72]	; (40051c <xPortStartScheduler+0x110>)
  4004d2:	6813      	ldr	r3, [r2, #0]
  4004d4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4004d8:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4004da:	4b11      	ldr	r3, [pc, #68]	; (400520 <xPortStartScheduler+0x114>)
  4004dc:	4798      	blx	r3
	vTaskSwitchContext();
  4004de:	4b11      	ldr	r3, [pc, #68]	; (400524 <xPortStartScheduler+0x118>)
  4004e0:	4798      	blx	r3
	prvTaskExitError();
  4004e2:	4b11      	ldr	r3, [pc, #68]	; (400528 <xPortStartScheduler+0x11c>)
  4004e4:	4798      	blx	r3
}
  4004e6:	4620      	mov	r0, r4
  4004e8:	b002      	add	sp, #8
  4004ea:	bd10      	pop	{r4, pc}
  4004ec:	e000ed00 	.word	0xe000ed00
  4004f0:	410fc271 	.word	0x410fc271
  4004f4:	410fc270 	.word	0x410fc270
  4004f8:	e000e400 	.word	0xe000e400
  4004fc:	20000458 	.word	0x20000458
  400500:	2000045c 	.word	0x2000045c
  400504:	00402d6c 	.word	0x00402d6c
  400508:	004029d9 	.word	0x004029d9
  40050c:	e000ed20 	.word	0xe000ed20
  400510:	004003d5 	.word	0x004003d5
  400514:	20000000 	.word	0x20000000
  400518:	0040021d 	.word	0x0040021d
  40051c:	e000ef34 	.word	0xe000ef34
  400520:	004001f5 	.word	0x004001f5
  400524:	004018cd 	.word	0x004018cd
  400528:	00400231 	.word	0x00400231

0040052c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
  40052c:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
  40052e:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400532:	2b0f      	cmp	r3, #15
  400534:	d906      	bls.n	400544 <vPortValidateInterruptPriority+0x18>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400536:	4a0e      	ldr	r2, [pc, #56]	; (400570 <vPortValidateInterruptPriority+0x44>)
  400538:	5c9b      	ldrb	r3, [r3, r2]
  40053a:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40053c:	4a0d      	ldr	r2, [pc, #52]	; (400574 <vPortValidateInterruptPriority+0x48>)
  40053e:	7812      	ldrb	r2, [r2, #0]
  400540:	429a      	cmp	r2, r3
  400542:	d808      	bhi.n	400556 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400544:	4b0c      	ldr	r3, [pc, #48]	; (400578 <vPortValidateInterruptPriority+0x4c>)
  400546:	681b      	ldr	r3, [r3, #0]
  400548:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40054c:	4a0b      	ldr	r2, [pc, #44]	; (40057c <vPortValidateInterruptPriority+0x50>)
  40054e:	6812      	ldr	r2, [r2, #0]
  400550:	4293      	cmp	r3, r2
  400552:	d806      	bhi.n	400562 <vPortValidateInterruptPriority+0x36>
  400554:	bd08      	pop	{r3, pc}
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400556:	f240 21f2 	movw	r1, #754	; 0x2f2
  40055a:	4809      	ldr	r0, [pc, #36]	; (400580 <vPortValidateInterruptPriority+0x54>)
  40055c:	4b09      	ldr	r3, [pc, #36]	; (400584 <vPortValidateInterruptPriority+0x58>)
  40055e:	4798      	blx	r3
  400560:	e7f0      	b.n	400544 <vPortValidateInterruptPriority+0x18>
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400562:	f240 3102 	movw	r1, #770	; 0x302
  400566:	4806      	ldr	r0, [pc, #24]	; (400580 <vPortValidateInterruptPriority+0x54>)
  400568:	4b06      	ldr	r3, [pc, #24]	; (400584 <vPortValidateInterruptPriority+0x58>)
  40056a:	4798      	blx	r3
	}
  40056c:	e7f2      	b.n	400554 <vPortValidateInterruptPriority+0x28>
  40056e:	bf00      	nop
  400570:	e000e3f0 	.word	0xe000e3f0
  400574:	20000458 	.word	0x20000458
  400578:	e000ed0c 	.word	0xe000ed0c
  40057c:	2000045c 	.word	0x2000045c
  400580:	00402d6c 	.word	0x00402d6c
  400584:	004029d9 	.word	0x004029d9

00400588 <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
  400588:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  40058a:	4a13      	ldr	r2, [pc, #76]	; (4005d8 <prvInsertBlockIntoFreeList+0x50>)
  40058c:	e000      	b.n	400590 <prvInsertBlockIntoFreeList+0x8>
  40058e:	461a      	mov	r2, r3
  400590:	6813      	ldr	r3, [r2, #0]
  400592:	4283      	cmp	r3, r0
  400594:	d3fb      	bcc.n	40058e <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
  400596:	6851      	ldr	r1, [r2, #4]
  400598:	1854      	adds	r4, r2, r1
  40059a:	42a0      	cmp	r0, r4
  40059c:	d00a      	beq.n	4005b4 <prvInsertBlockIntoFreeList+0x2c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  40059e:	6841      	ldr	r1, [r0, #4]
  4005a0:	1844      	adds	r4, r0, r1
  4005a2:	42a3      	cmp	r3, r4
  4005a4:	d00b      	beq.n	4005be <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
  4005a6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  4005a8:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  4005aa:	bf18      	it	ne
  4005ac:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
  4005ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  4005b2:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  4005b4:	6840      	ldr	r0, [r0, #4]
  4005b6:	4401      	add	r1, r0
  4005b8:	6051      	str	r1, [r2, #4]
  4005ba:	4610      	mov	r0, r2
  4005bc:	e7ef      	b.n	40059e <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
  4005be:	4c07      	ldr	r4, [pc, #28]	; (4005dc <prvInsertBlockIntoFreeList+0x54>)
  4005c0:	6824      	ldr	r4, [r4, #0]
  4005c2:	42a3      	cmp	r3, r4
  4005c4:	d006      	beq.n	4005d4 <prvInsertBlockIntoFreeList+0x4c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4005c6:	685b      	ldr	r3, [r3, #4]
  4005c8:	4419      	add	r1, r3
  4005ca:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4005cc:	6813      	ldr	r3, [r2, #0]
  4005ce:	681b      	ldr	r3, [r3, #0]
  4005d0:	6003      	str	r3, [r0, #0]
  4005d2:	e7e9      	b.n	4005a8 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  4005d4:	6003      	str	r3, [r0, #0]
  4005d6:	e7e7      	b.n	4005a8 <prvInsertBlockIntoFreeList+0x20>
  4005d8:	20000470 	.word	0x20000470
  4005dc:	20000460 	.word	0x20000460

004005e0 <pvPortMalloc>:
{
  4005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4005e2:	4604      	mov	r4, r0
	configASSERT( pxEnd );
  4005e4:	4b2b      	ldr	r3, [pc, #172]	; (400694 <pvPortMalloc+0xb4>)
  4005e6:	681b      	ldr	r3, [r3, #0]
  4005e8:	b1c3      	cbz	r3, 40061c <pvPortMalloc+0x3c>
	vTaskSuspendAll();
  4005ea:	4b2b      	ldr	r3, [pc, #172]	; (400698 <pvPortMalloc+0xb8>)
  4005ec:	4798      	blx	r3
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
  4005ee:	4b2b      	ldr	r3, [pc, #172]	; (40069c <pvPortMalloc+0xbc>)
  4005f0:	681d      	ldr	r5, [r3, #0]
  4005f2:	4225      	tst	r5, r4
  4005f4:	d144      	bne.n	400680 <pvPortMalloc+0xa0>
			if( xWantedSize > 0 )
  4005f6:	2c00      	cmp	r4, #0
  4005f8:	d045      	beq.n	400686 <pvPortMalloc+0xa6>
				xWantedSize += xHeapStructSize;
  4005fa:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
  4005fe:	f012 0f07 	tst.w	r2, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400602:	bf1c      	itt	ne
  400604:	f022 0207 	bicne.w	r2, r2, #7
  400608:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
  40060a:	2a00      	cmp	r2, #0
  40060c:	d038      	beq.n	400680 <pvPortMalloc+0xa0>
  40060e:	4b24      	ldr	r3, [pc, #144]	; (4006a0 <pvPortMalloc+0xc0>)
  400610:	681e      	ldr	r6, [r3, #0]
  400612:	42b2      	cmp	r2, r6
  400614:	d834      	bhi.n	400680 <pvPortMalloc+0xa0>
				pxBlock = xStart.pxNextFreeBlock;
  400616:	4923      	ldr	r1, [pc, #140]	; (4006a4 <pvPortMalloc+0xc4>)
  400618:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40061a:	e006      	b.n	40062a <pvPortMalloc+0x4a>
	configASSERT( pxEnd );
  40061c:	218b      	movs	r1, #139	; 0x8b
  40061e:	4822      	ldr	r0, [pc, #136]	; (4006a8 <pvPortMalloc+0xc8>)
  400620:	4b22      	ldr	r3, [pc, #136]	; (4006ac <pvPortMalloc+0xcc>)
  400622:	4798      	blx	r3
  400624:	e7e1      	b.n	4005ea <pvPortMalloc+0xa>
  400626:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
  400628:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40062a:	6863      	ldr	r3, [r4, #4]
  40062c:	429a      	cmp	r2, r3
  40062e:	d902      	bls.n	400636 <pvPortMalloc+0x56>
  400630:	6823      	ldr	r3, [r4, #0]
  400632:	2b00      	cmp	r3, #0
  400634:	d1f7      	bne.n	400626 <pvPortMalloc+0x46>
				if( pxBlock != pxEnd )
  400636:	4b17      	ldr	r3, [pc, #92]	; (400694 <pvPortMalloc+0xb4>)
  400638:	681b      	ldr	r3, [r3, #0]
  40063a:	429c      	cmp	r4, r3
  40063c:	d020      	beq.n	400680 <pvPortMalloc+0xa0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
  40063e:	680f      	ldr	r7, [r1, #0]
  400640:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  400642:	6823      	ldr	r3, [r4, #0]
  400644:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  400646:	6863      	ldr	r3, [r4, #4]
  400648:	1a9b      	subs	r3, r3, r2
  40064a:	2b10      	cmp	r3, #16
  40064c:	d812      	bhi.n	400674 <pvPortMalloc+0x94>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
  40064e:	6862      	ldr	r2, [r4, #4]
  400650:	1ab6      	subs	r6, r6, r2
  400652:	4913      	ldr	r1, [pc, #76]	; (4006a0 <pvPortMalloc+0xc0>)
  400654:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
  400656:	4916      	ldr	r1, [pc, #88]	; (4006b0 <pvPortMalloc+0xd0>)
  400658:	6809      	ldr	r1, [r1, #0]
  40065a:	428e      	cmp	r6, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
  40065c:	bf3c      	itt	cc
  40065e:	4914      	ldrcc	r1, [pc, #80]	; (4006b0 <pvPortMalloc+0xd0>)
  400660:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
  400662:	4315      	orrs	r5, r2
  400664:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
  400666:	2300      	movs	r3, #0
  400668:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
  40066a:	4b12      	ldr	r3, [pc, #72]	; (4006b4 <pvPortMalloc+0xd4>)
  40066c:	4798      	blx	r3
		if( pvReturn == NULL )
  40066e:	b167      	cbz	r7, 40068a <pvPortMalloc+0xaa>
}
  400670:	4638      	mov	r0, r7
  400672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
  400674:	18a0      	adds	r0, r4, r2
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  400676:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
  400678:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  40067a:	4b0f      	ldr	r3, [pc, #60]	; (4006b8 <pvPortMalloc+0xd8>)
  40067c:	4798      	blx	r3
  40067e:	e7e6      	b.n	40064e <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
  400680:	4b0c      	ldr	r3, [pc, #48]	; (4006b4 <pvPortMalloc+0xd4>)
  400682:	4798      	blx	r3
  400684:	e001      	b.n	40068a <pvPortMalloc+0xaa>
  400686:	4b0b      	ldr	r3, [pc, #44]	; (4006b4 <pvPortMalloc+0xd4>)
  400688:	4798      	blx	r3
			vApplicationMallocFailedHook();
  40068a:	4b0c      	ldr	r3, [pc, #48]	; (4006bc <pvPortMalloc+0xdc>)
  40068c:	4798      	blx	r3
  40068e:	2700      	movs	r7, #0
	return pvReturn;
  400690:	e7ee      	b.n	400670 <pvPortMalloc+0x90>
  400692:	bf00      	nop
  400694:	20000460 	.word	0x20000460
  400698:	00401601 	.word	0x00401601
  40069c:	20000464 	.word	0x20000464
  4006a0:	20000468 	.word	0x20000468
  4006a4:	20000470 	.word	0x20000470
  4006a8:	00402d9c 	.word	0x00402d9c
  4006ac:	004029d9 	.word	0x004029d9
  4006b0:	2000046c 	.word	0x2000046c
  4006b4:	00401759 	.word	0x00401759
  4006b8:	00400589 	.word	0x00400589
  4006bc:	00402a05 	.word	0x00402a05

004006c0 <vPortFree>:
	if( pv != NULL )
  4006c0:	2800      	cmp	r0, #0
  4006c2:	d040      	beq.n	400746 <vPortFree+0x86>
{
  4006c4:	b510      	push	{r4, lr}
  4006c6:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  4006c8:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4006cc:	4b1e      	ldr	r3, [pc, #120]	; (400748 <vPortFree+0x88>)
  4006ce:	681b      	ldr	r3, [r3, #0]
  4006d0:	421a      	tst	r2, r3
  4006d2:	d011      	beq.n	4006f8 <vPortFree+0x38>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
  4006d4:	f850 3c08 	ldr.w	r3, [r0, #-8]
  4006d8:	b1f3      	cbz	r3, 400718 <vPortFree+0x58>
  4006da:	f44f 7190 	mov.w	r1, #288	; 0x120
  4006de:	481b      	ldr	r0, [pc, #108]	; (40074c <vPortFree+0x8c>)
  4006e0:	4b1b      	ldr	r3, [pc, #108]	; (400750 <vPortFree+0x90>)
  4006e2:	4798      	blx	r3
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
  4006e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4006e8:	4a17      	ldr	r2, [pc, #92]	; (400748 <vPortFree+0x88>)
  4006ea:	6812      	ldr	r2, [r2, #0]
  4006ec:	4213      	tst	r3, r2
  4006ee:	d002      	beq.n	4006f6 <vPortFree+0x36>
			if( pxLink->pxNextFreeBlock == NULL )
  4006f0:	f854 1c08 	ldr.w	r1, [r4, #-8]
  4006f4:	b1a1      	cbz	r1, 400720 <vPortFree+0x60>
  4006f6:	bd10      	pop	{r4, pc}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  4006f8:	f240 111f 	movw	r1, #287	; 0x11f
  4006fc:	4813      	ldr	r0, [pc, #76]	; (40074c <vPortFree+0x8c>)
  4006fe:	4b14      	ldr	r3, [pc, #80]	; (400750 <vPortFree+0x90>)
  400700:	4798      	blx	r3
		configASSERT( pxLink->pxNextFreeBlock == NULL );
  400702:	f854 3c08 	ldr.w	r3, [r4, #-8]
  400706:	2b00      	cmp	r3, #0
  400708:	d1e7      	bne.n	4006da <vPortFree+0x1a>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
  40070a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40070e:	4a0e      	ldr	r2, [pc, #56]	; (400748 <vPortFree+0x88>)
  400710:	6812      	ldr	r2, [r2, #0]
  400712:	4213      	tst	r3, r2
  400714:	d0ef      	beq.n	4006f6 <vPortFree+0x36>
  400716:	e003      	b.n	400720 <vPortFree+0x60>
  400718:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40071c:	4a0a      	ldr	r2, [pc, #40]	; (400748 <vPortFree+0x88>)
  40071e:	6812      	ldr	r2, [r2, #0]
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
  400720:	ea23 0302 	bic.w	r3, r3, r2
  400724:	f844 3c04 	str.w	r3, [r4, #-4]
				vTaskSuspendAll();
  400728:	4b0a      	ldr	r3, [pc, #40]	; (400754 <vPortFree+0x94>)
  40072a:	4798      	blx	r3
					xFreeBytesRemaining += pxLink->xBlockSize;
  40072c:	4a0a      	ldr	r2, [pc, #40]	; (400758 <vPortFree+0x98>)
  40072e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  400732:	6811      	ldr	r1, [r2, #0]
  400734:	440b      	add	r3, r1
  400736:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
  400738:	f1a4 0008 	sub.w	r0, r4, #8
  40073c:	4b07      	ldr	r3, [pc, #28]	; (40075c <vPortFree+0x9c>)
  40073e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400740:	4b07      	ldr	r3, [pc, #28]	; (400760 <vPortFree+0xa0>)
  400742:	4798      	blx	r3
}
  400744:	bd10      	pop	{r4, pc}
  400746:	4770      	bx	lr
  400748:	20000464 	.word	0x20000464
  40074c:	00402d9c 	.word	0x00402d9c
  400750:	004029d9 	.word	0x004029d9
  400754:	00401601 	.word	0x00401601
  400758:	20000468 	.word	0x20000468
  40075c:	00400589 	.word	0x00400589
  400760:	00401759 	.word	0x00401759

00400764 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
  400764:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400768:	4605      	mov	r5, r0
BaseType_t xDefinedRegions = 0;
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
  40076a:	4b35      	ldr	r3, [pc, #212]	; (400840 <vPortDefineHeapRegions+0xdc>)
  40076c:	681b      	ldr	r3, [r3, #0]
  40076e:	b123      	cbz	r3, 40077a <vPortDefineHeapRegions+0x16>
  400770:	f240 1193 	movw	r1, #403	; 0x193
  400774:	4833      	ldr	r0, [pc, #204]	; (400844 <vPortDefineHeapRegions+0xe0>)
  400776:	4b34      	ldr	r3, [pc, #208]	; (400848 <vPortDefineHeapRegions+0xe4>)
  400778:	4798      	blx	r3

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );

	while( pxHeapRegion->xSizeInBytes > 0 )
  40077a:	f8d5 b004 	ldr.w	fp, [r5, #4]
  40077e:	f1bb 0f00 	cmp.w	fp, #0
  400782:	d052      	beq.n	40082a <vPortDefineHeapRegions+0xc6>
  400784:	3508      	adds	r5, #8
  400786:	2600      	movs	r6, #0
  400788:	46b0      	mov	r8, r6
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
  40078a:	4f2d      	ldr	r7, [pc, #180]	; (400840 <vPortDefineHeapRegions+0xdc>)

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
  40078c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 400844 <vPortDefineHeapRegions+0xe0>
  400790:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 400848 <vPortDefineHeapRegions+0xe4>
  400794:	e01d      	b.n	4007d2 <vPortDefineHeapRegions+0x6e>
			configASSERT( pxEnd != NULL );
  400796:	683b      	ldr	r3, [r7, #0]
  400798:	b373      	cbz	r3, 4007f8 <vPortDefineHeapRegions+0x94>
			configASSERT( xAddress > ( size_t ) pxEnd );
  40079a:	683b      	ldr	r3, [r7, #0]
  40079c:	42a3      	cmp	r3, r4
  40079e:	d230      	bcs.n	400802 <vPortDefineHeapRegions+0x9e>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
  4007a0:	6839      	ldr	r1, [r7, #0]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
  4007a2:	eb0b 0304 	add.w	r3, fp, r4
		xAddress -= xHeapStructSize;
  4007a6:	3b08      	subs	r3, #8
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
  4007a8:	f023 0307 	bic.w	r3, r3, #7
		pxEnd = ( BlockLink_t * ) xAddress;
  4007ac:	603b      	str	r3, [r7, #0]
		pxEnd->xBlockSize = 0;
  4007ae:	2200      	movs	r2, #0
  4007b0:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
  4007b2:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
  4007b4:	4622      	mov	r2, r4
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
  4007b6:	1b18      	subs	r0, r3, r4
  4007b8:	6060      	str	r0, [r4, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
  4007ba:	6023      	str	r3, [r4, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
  4007bc:	b101      	cbz	r1, 4007c0 <vPortDefineHeapRegions+0x5c>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
  4007be:	600c      	str	r4, [r1, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
  4007c0:	6853      	ldr	r3, [r2, #4]
  4007c2:	4498      	add	r8, r3

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
  4007c4:	3601      	adds	r6, #1
  4007c6:	3508      	adds	r5, #8
	while( pxHeapRegion->xSizeInBytes > 0 )
  4007c8:	f855 bc04 	ldr.w	fp, [r5, #-4]
  4007cc:	f1bb 0f00 	cmp.w	fp, #0
  4007d0:	d01c      	beq.n	40080c <vPortDefineHeapRegions+0xa8>
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
  4007d2:	f855 4c08 	ldr.w	r4, [r5, #-8]
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  4007d6:	f014 0f07 	tst.w	r4, #7
  4007da:	d006      	beq.n	4007ea <vPortDefineHeapRegions+0x86>
			xAddress += ( portBYTE_ALIGNMENT - 1 );
  4007dc:	1de2      	adds	r2, r4, #7
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
  4007de:	f022 0207 	bic.w	r2, r2, #7
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
  4007e2:	44a3      	add	fp, r4
  4007e4:	ebab 0b02 	sub.w	fp, fp, r2
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
  4007e8:	4614      	mov	r4, r2
		if( xDefinedRegions == 0 )
  4007ea:	2e00      	cmp	r6, #0
  4007ec:	d1d3      	bne.n	400796 <vPortDefineHeapRegions+0x32>
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
  4007ee:	4b17      	ldr	r3, [pc, #92]	; (40084c <vPortDefineHeapRegions+0xe8>)
  4007f0:	601c      	str	r4, [r3, #0]
			xStart.xBlockSize = ( size_t ) 0;
  4007f2:	2200      	movs	r2, #0
  4007f4:	605a      	str	r2, [r3, #4]
  4007f6:	e7d3      	b.n	4007a0 <vPortDefineHeapRegions+0x3c>
			configASSERT( pxEnd != NULL );
  4007f8:	f44f 71da 	mov.w	r1, #436	; 0x1b4
  4007fc:	4650      	mov	r0, sl
  4007fe:	47c8      	blx	r9
  400800:	e7cb      	b.n	40079a <vPortDefineHeapRegions+0x36>
			configASSERT( xAddress > ( size_t ) pxEnd );
  400802:	f240 11b7 	movw	r1, #439	; 0x1b7
  400806:	4650      	mov	r0, sl
  400808:	47c8      	blx	r9
  40080a:	e7c9      	b.n	4007a0 <vPortDefineHeapRegions+0x3c>
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
  40080c:	4b10      	ldr	r3, [pc, #64]	; (400850 <vPortDefineHeapRegions+0xec>)
  40080e:	f8c3 8000 	str.w	r8, [r3]
	xFreeBytesRemaining = xTotalHeapSize;
  400812:	4b10      	ldr	r3, [pc, #64]	; (400854 <vPortDefineHeapRegions+0xf0>)
  400814:	f8c3 8000 	str.w	r8, [r3]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
  400818:	f1b8 0f00 	cmp.w	r8, #0
  40081c:	d00a      	beq.n	400834 <vPortDefineHeapRegions+0xd0>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
  40081e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400822:	4b0d      	ldr	r3, [pc, #52]	; (400858 <vPortDefineHeapRegions+0xf4>)
  400824:	601a      	str	r2, [r3, #0]
}
  400826:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
  40082a:	2300      	movs	r3, #0
  40082c:	4a08      	ldr	r2, [pc, #32]	; (400850 <vPortDefineHeapRegions+0xec>)
  40082e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
  400830:	4a08      	ldr	r2, [pc, #32]	; (400854 <vPortDefineHeapRegions+0xf0>)
  400832:	6013      	str	r3, [r2, #0]
	configASSERT( xTotalHeapSize );
  400834:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  400838:	4802      	ldr	r0, [pc, #8]	; (400844 <vPortDefineHeapRegions+0xe0>)
  40083a:	4b03      	ldr	r3, [pc, #12]	; (400848 <vPortDefineHeapRegions+0xe4>)
  40083c:	4798      	blx	r3
  40083e:	e7ee      	b.n	40081e <vPortDefineHeapRegions+0xba>
  400840:	20000460 	.word	0x20000460
  400844:	00402d9c 	.word	0x00402d9c
  400848:	004029d9 	.word	0x004029d9
  40084c:	20000470 	.word	0x20000470
  400850:	2000046c 	.word	0x2000046c
  400854:	20000468 	.word	0x20000468
  400858:	20000464 	.word	0x20000464

0040085c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
  40085c:	b510      	push	{r4, lr}
  40085e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  400860:	4b04      	ldr	r3, [pc, #16]	; (400874 <prvIsQueueEmpty+0x18>)
  400862:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  400864:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  400866:	4b04      	ldr	r3, [pc, #16]	; (400878 <prvIsQueueEmpty+0x1c>)
  400868:	4798      	blx	r3

	return xReturn;
}
  40086a:	fab4 f084 	clz	r0, r4
  40086e:	0940      	lsrs	r0, r0, #5
  400870:	bd10      	pop	{r4, pc}
  400872:	bf00      	nop
  400874:	004002c5 	.word	0x004002c5
  400878:	0040030d 	.word	0x0040030d

0040087c <prvCopyDataToQueue>:
{
  40087c:	b570      	push	{r4, r5, r6, lr}
  40087e:	4604      	mov	r4, r0
  400880:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400882:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400884:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400886:	b95a      	cbnz	r2, 4008a0 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400888:	6803      	ldr	r3, [r0, #0]
BaseType_t xReturn = pdFALSE;
  40088a:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40088c:	b113      	cbz	r3, 400894 <prvCopyDataToQueue+0x18>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  40088e:	3501      	adds	r5, #1
  400890:	63a5      	str	r5, [r4, #56]	; 0x38
}
  400892:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
  400894:	68a0      	ldr	r0, [r4, #8]
  400896:	4b17      	ldr	r3, [pc, #92]	; (4008f4 <prvCopyDataToQueue+0x78>)
  400898:	4798      	blx	r3
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
  40089a:	2300      	movs	r3, #0
  40089c:	60a3      	str	r3, [r4, #8]
  40089e:	e7f6      	b.n	40088e <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
  4008a0:	b96e      	cbnz	r6, 4008be <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  4008a2:	6840      	ldr	r0, [r0, #4]
  4008a4:	4b14      	ldr	r3, [pc, #80]	; (4008f8 <prvCopyDataToQueue+0x7c>)
  4008a6:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  4008a8:	6863      	ldr	r3, [r4, #4]
  4008aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4008ac:	4413      	add	r3, r2
  4008ae:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4008b0:	68a2      	ldr	r2, [r4, #8]
  4008b2:	4293      	cmp	r3, r2
  4008b4:	d319      	bcc.n	4008ea <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4008b6:	6823      	ldr	r3, [r4, #0]
  4008b8:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
  4008ba:	2000      	movs	r0, #0
  4008bc:	e7e7      	b.n	40088e <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
  4008be:	68c0      	ldr	r0, [r0, #12]
  4008c0:	4b0d      	ldr	r3, [pc, #52]	; (4008f8 <prvCopyDataToQueue+0x7c>)
  4008c2:	4798      	blx	r3
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
  4008c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4008c6:	4252      	negs	r2, r2
  4008c8:	68e3      	ldr	r3, [r4, #12]
  4008ca:	4413      	add	r3, r2
  4008cc:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4008ce:	6821      	ldr	r1, [r4, #0]
  4008d0:	428b      	cmp	r3, r1
  4008d2:	d202      	bcs.n	4008da <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
  4008d4:	68a3      	ldr	r3, [r4, #8]
  4008d6:	441a      	add	r2, r3
  4008d8:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4008da:	2e02      	cmp	r6, #2
  4008dc:	d001      	beq.n	4008e2 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
  4008de:	2000      	movs	r0, #0
  4008e0:	e7d5      	b.n	40088e <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  4008e2:	b125      	cbz	r5, 4008ee <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
  4008e4:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  4008e6:	2000      	movs	r0, #0
  4008e8:	e7d1      	b.n	40088e <prvCopyDataToQueue+0x12>
  4008ea:	2000      	movs	r0, #0
  4008ec:	e7cf      	b.n	40088e <prvCopyDataToQueue+0x12>
  4008ee:	2000      	movs	r0, #0
  4008f0:	e7cd      	b.n	40088e <prvCopyDataToQueue+0x12>
  4008f2:	bf00      	nop
  4008f4:	00401c89 	.word	0x00401c89
  4008f8:	00402a7d 	.word	0x00402a7d

004008fc <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4008fc:	b570      	push	{r4, r5, r6, lr}
  4008fe:	b082      	sub	sp, #8
  400900:	9001      	str	r0, [sp, #4]
  400902:	460e      	mov	r6, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400904:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400906:	b15c      	cbz	r4, 400920 <prvNotifyQueueSetContainer+0x24>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400908:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40090a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40090c:	429a      	cmp	r2, r3
  40090e:	d20d      	bcs.n	40092c <prvNotifyQueueSetContainer+0x30>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400910:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400912:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400914:	429a      	cmp	r2, r3
  400916:	d30f      	bcc.n	400938 <prvNotifyQueueSetContainer+0x3c>
	BaseType_t xReturn = pdFALSE;
  400918:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40091a:	4630      	mov	r0, r6
  40091c:	b002      	add	sp, #8
  40091e:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxQueueSetContainer );
  400920:	f640 3145 	movw	r1, #2885	; 0xb45
  400924:	4812      	ldr	r0, [pc, #72]	; (400970 <prvNotifyQueueSetContainer+0x74>)
  400926:	4b13      	ldr	r3, [pc, #76]	; (400974 <prvNotifyQueueSetContainer+0x78>)
  400928:	4798      	blx	r3
  40092a:	e7ed      	b.n	400908 <prvNotifyQueueSetContainer+0xc>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40092c:	f640 3146 	movw	r1, #2886	; 0xb46
  400930:	480f      	ldr	r0, [pc, #60]	; (400970 <prvNotifyQueueSetContainer+0x74>)
  400932:	4b10      	ldr	r3, [pc, #64]	; (400974 <prvNotifyQueueSetContainer+0x78>)
  400934:	4798      	blx	r3
  400936:	e7eb      	b.n	400910 <prvNotifyQueueSetContainer+0x14>
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  400938:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  40093c:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40093e:	4632      	mov	r2, r6
  400940:	a901      	add	r1, sp, #4
  400942:	4620      	mov	r0, r4
  400944:	4b0c      	ldr	r3, [pc, #48]	; (400978 <prvNotifyQueueSetContainer+0x7c>)
  400946:	4798      	blx	r3
  400948:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
  40094a:	f1b5 3fff 	cmp.w	r5, #4294967295
  40094e:	d004      	beq.n	40095a <prvNotifyQueueSetContainer+0x5e>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  400950:	3501      	adds	r5, #1
  400952:	b26d      	sxtb	r5, r5
  400954:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  400958:	e7df      	b.n	40091a <prvNotifyQueueSetContainer+0x1e>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  40095a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40095c:	2b00      	cmp	r3, #0
  40095e:	d0dc      	beq.n	40091a <prvNotifyQueueSetContainer+0x1e>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400960:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400964:	4b05      	ldr	r3, [pc, #20]	; (40097c <prvNotifyQueueSetContainer+0x80>)
  400966:	4798      	blx	r3
  400968:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  40096a:	bf18      	it	ne
  40096c:	2601      	movne	r6, #1
  40096e:	e7d4      	b.n	40091a <prvNotifyQueueSetContainer+0x1e>
  400970:	00402dc8 	.word	0x00402dc8
  400974:	004029d9 	.word	0x004029d9
  400978:	0040087d 	.word	0x0040087d
  40097c:	00401b29 	.word	0x00401b29

00400980 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400980:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400982:	b172      	cbz	r2, 4009a2 <prvCopyDataFromQueue+0x22>
{
  400984:	b510      	push	{r4, lr}
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  400986:	68c3      	ldr	r3, [r0, #12]
  400988:	4413      	add	r3, r2
  40098a:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40098c:	6884      	ldr	r4, [r0, #8]
  40098e:	42a3      	cmp	r3, r4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
  400990:	bf24      	itt	cs
  400992:	6803      	ldrcs	r3, [r0, #0]
  400994:	60c3      	strcs	r3, [r0, #12]
  400996:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  400998:	68c1      	ldr	r1, [r0, #12]
  40099a:	4620      	mov	r0, r4
  40099c:	4b01      	ldr	r3, [pc, #4]	; (4009a4 <prvCopyDataFromQueue+0x24>)
  40099e:	4798      	blx	r3
  4009a0:	bd10      	pop	{r4, pc}
  4009a2:	4770      	bx	lr
  4009a4:	00402a7d 	.word	0x00402a7d

004009a8 <prvUnlockQueue>:
{
  4009a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009ac:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  4009ae:	4b23      	ldr	r3, [pc, #140]	; (400a3c <prvUnlockQueue+0x94>)
  4009b0:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
  4009b2:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  4009b6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  4009b8:	2c00      	cmp	r4, #0
  4009ba:	dd19      	ble.n	4009f0 <prvUnlockQueue+0x48>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  4009bc:	4e20      	ldr	r6, [pc, #128]	; (400a40 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
  4009be:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400a4c <prvUnlockQueue+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009c2:	4f20      	ldr	r7, [pc, #128]	; (400a44 <prvUnlockQueue+0x9c>)
  4009c4:	e008      	b.n	4009d8 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4009c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  4009c8:	b193      	cbz	r3, 4009f0 <prvUnlockQueue+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009ca:	f105 0024 	add.w	r0, r5, #36	; 0x24
  4009ce:	47b8      	blx	r7
  4009d0:	b960      	cbnz	r0, 4009ec <prvUnlockQueue+0x44>
  4009d2:	3c01      	subs	r4, #1
  4009d4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  4009d6:	b15c      	cbz	r4, 4009f0 <prvUnlockQueue+0x48>
				if( pxQueue->pxQueueSetContainer != NULL )
  4009d8:	6cab      	ldr	r3, [r5, #72]	; 0x48
  4009da:	2b00      	cmp	r3, #0
  4009dc:	d0f3      	beq.n	4009c6 <prvUnlockQueue+0x1e>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  4009de:	2100      	movs	r1, #0
  4009e0:	4628      	mov	r0, r5
  4009e2:	47b0      	blx	r6
  4009e4:	2800      	cmp	r0, #0
  4009e6:	d0f4      	beq.n	4009d2 <prvUnlockQueue+0x2a>
						vTaskMissedYield();
  4009e8:	47c0      	blx	r8
  4009ea:	e7f2      	b.n	4009d2 <prvUnlockQueue+0x2a>
							vTaskMissedYield();
  4009ec:	47c0      	blx	r8
  4009ee:	e7f0      	b.n	4009d2 <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
  4009f0:	23ff      	movs	r3, #255	; 0xff
  4009f2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
  4009f6:	4b14      	ldr	r3, [pc, #80]	; (400a48 <prvUnlockQueue+0xa0>)
  4009f8:	4798      	blx	r3
	taskENTER_CRITICAL();
  4009fa:	4b10      	ldr	r3, [pc, #64]	; (400a3c <prvUnlockQueue+0x94>)
  4009fc:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
  4009fe:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  400a02:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  400a04:	2c00      	cmp	r4, #0
  400a06:	dd12      	ble.n	400a2e <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a08:	692b      	ldr	r3, [r5, #16]
  400a0a:	b183      	cbz	r3, 400a2e <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a0c:	f105 0710 	add.w	r7, r5, #16
  400a10:	4e0c      	ldr	r6, [pc, #48]	; (400a44 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  400a12:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400a4c <prvUnlockQueue+0xa4>
  400a16:	e004      	b.n	400a22 <prvUnlockQueue+0x7a>
  400a18:	3c01      	subs	r4, #1
  400a1a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  400a1c:	b13c      	cbz	r4, 400a2e <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a1e:	692b      	ldr	r3, [r5, #16]
  400a20:	b12b      	cbz	r3, 400a2e <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a22:	4638      	mov	r0, r7
  400a24:	47b0      	blx	r6
  400a26:	2800      	cmp	r0, #0
  400a28:	d0f6      	beq.n	400a18 <prvUnlockQueue+0x70>
					vTaskMissedYield();
  400a2a:	47c0      	blx	r8
  400a2c:	e7f4      	b.n	400a18 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
  400a2e:	23ff      	movs	r3, #255	; 0xff
  400a30:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
  400a34:	4b04      	ldr	r3, [pc, #16]	; (400a48 <prvUnlockQueue+0xa0>)
  400a36:	4798      	blx	r3
  400a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a3c:	004002c5 	.word	0x004002c5
  400a40:	004008fd 	.word	0x004008fd
  400a44:	00401b29 	.word	0x00401b29
  400a48:	0040030d 	.word	0x0040030d
  400a4c:	00401c5d 	.word	0x00401c5d

00400a50 <xQueueGenericReset>:
{
  400a50:	b538      	push	{r3, r4, r5, lr}
  400a52:	460d      	mov	r5, r1
	configASSERT( pxQueue );
  400a54:	4604      	mov	r4, r0
  400a56:	b1d0      	cbz	r0, 400a8e <xQueueGenericReset+0x3e>
	taskENTER_CRITICAL();
  400a58:	4b1b      	ldr	r3, [pc, #108]	; (400ac8 <xQueueGenericReset+0x78>)
  400a5a:	4798      	blx	r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400a5c:	6822      	ldr	r2, [r4, #0]
  400a5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400a60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400a62:	fb03 f301 	mul.w	r3, r3, r1
  400a66:	18d0      	adds	r0, r2, r3
  400a68:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400a6a:	2000      	movs	r0, #0
  400a6c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400a6e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400a70:	1a5b      	subs	r3, r3, r1
  400a72:	4413      	add	r3, r2
  400a74:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  400a76:	23ff      	movs	r3, #255	; 0xff
  400a78:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  400a7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  400a80:	b9d5      	cbnz	r5, 400ab8 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a82:	6923      	ldr	r3, [r4, #16]
  400a84:	b94b      	cbnz	r3, 400a9a <xQueueGenericReset+0x4a>
	taskEXIT_CRITICAL();
  400a86:	4b11      	ldr	r3, [pc, #68]	; (400acc <xQueueGenericReset+0x7c>)
  400a88:	4798      	blx	r3
}
  400a8a:	2001      	movs	r0, #1
  400a8c:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
  400a8e:	f240 1103 	movw	r1, #259	; 0x103
  400a92:	480f      	ldr	r0, [pc, #60]	; (400ad0 <xQueueGenericReset+0x80>)
  400a94:	4b0f      	ldr	r3, [pc, #60]	; (400ad4 <xQueueGenericReset+0x84>)
  400a96:	4798      	blx	r3
  400a98:	e7de      	b.n	400a58 <xQueueGenericReset+0x8>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a9a:	f104 0010 	add.w	r0, r4, #16
  400a9e:	4b0e      	ldr	r3, [pc, #56]	; (400ad8 <xQueueGenericReset+0x88>)
  400aa0:	4798      	blx	r3
  400aa2:	2800      	cmp	r0, #0
  400aa4:	d0ef      	beq.n	400a86 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
  400aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400aaa:	4b0c      	ldr	r3, [pc, #48]	; (400adc <xQueueGenericReset+0x8c>)
  400aac:	601a      	str	r2, [r3, #0]
  400aae:	f3bf 8f4f 	dsb	sy
  400ab2:	f3bf 8f6f 	isb	sy
  400ab6:	e7e6      	b.n	400a86 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400ab8:	f104 0010 	add.w	r0, r4, #16
  400abc:	4d08      	ldr	r5, [pc, #32]	; (400ae0 <xQueueGenericReset+0x90>)
  400abe:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400ac0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ac4:	47a8      	blx	r5
  400ac6:	e7de      	b.n	400a86 <xQueueGenericReset+0x36>
  400ac8:	004002c5 	.word	0x004002c5
  400acc:	0040030d 	.word	0x0040030d
  400ad0:	00402dc8 	.word	0x00402dc8
  400ad4:	004029d9 	.word	0x004029d9
  400ad8:	00401b29 	.word	0x00401b29
  400adc:	e000ed04 	.word	0xe000ed04
  400ae0:	00400165 	.word	0x00400165

00400ae4 <xQueueGenericCreate>:
	{
  400ae4:	b570      	push	{r4, r5, r6, lr}
  400ae6:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400ae8:	4606      	mov	r6, r0
  400aea:	b1a0      	cbz	r0, 400b16 <xQueueGenericCreate+0x32>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400aec:	fb05 f006 	mul.w	r0, r5, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
  400af0:	304c      	adds	r0, #76	; 0x4c
  400af2:	4b0d      	ldr	r3, [pc, #52]	; (400b28 <xQueueGenericCreate+0x44>)
  400af4:	4798      	blx	r3
		if( pxNewQueue != NULL )
  400af6:	4604      	mov	r4, r0
  400af8:	b158      	cbz	r0, 400b12 <xQueueGenericCreate+0x2e>
	if( uxItemSize == ( UBaseType_t ) 0 )
  400afa:	b195      	cbz	r5, 400b22 <xQueueGenericCreate+0x3e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400afc:	f100 034c 	add.w	r3, r0, #76	; 0x4c
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  400b00:	6003      	str	r3, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
  400b02:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  400b04:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400b06:	2101      	movs	r1, #1
  400b08:	4620      	mov	r0, r4
  400b0a:	4b08      	ldr	r3, [pc, #32]	; (400b2c <xQueueGenericCreate+0x48>)
  400b0c:	4798      	blx	r3
		pxNewQueue->pxQueueSetContainer = NULL;
  400b0e:	2300      	movs	r3, #0
  400b10:	64a3      	str	r3, [r4, #72]	; 0x48
	}
  400b12:	4620      	mov	r0, r4
  400b14:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400b16:	f44f 71bb 	mov.w	r1, #374	; 0x176
  400b1a:	4805      	ldr	r0, [pc, #20]	; (400b30 <xQueueGenericCreate+0x4c>)
  400b1c:	4b05      	ldr	r3, [pc, #20]	; (400b34 <xQueueGenericCreate+0x50>)
  400b1e:	4798      	blx	r3
  400b20:	e7e4      	b.n	400aec <xQueueGenericCreate+0x8>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400b22:	6020      	str	r0, [r4, #0]
  400b24:	e7ed      	b.n	400b02 <xQueueGenericCreate+0x1e>
  400b26:	bf00      	nop
  400b28:	004005e1 	.word	0x004005e1
  400b2c:	00400a51 	.word	0x00400a51
  400b30:	00402dc8 	.word	0x00402dc8
  400b34:	004029d9 	.word	0x004029d9

00400b38 <xQueueGenericSend>:
{
  400b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b3c:	b085      	sub	sp, #20
  400b3e:	4689      	mov	r9, r1
  400b40:	9201      	str	r2, [sp, #4]
  400b42:	461e      	mov	r6, r3
	configASSERT( pxQueue );
  400b44:	4604      	mov	r4, r0
  400b46:	b1a8      	cbz	r0, 400b74 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400b48:	f1b9 0f00 	cmp.w	r9, #0
  400b4c:	d018      	beq.n	400b80 <xQueueGenericSend+0x48>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400b4e:	2e02      	cmp	r6, #2
  400b50:	d01f      	beq.n	400b92 <xQueueGenericSend+0x5a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400b52:	4b67      	ldr	r3, [pc, #412]	; (400cf0 <xQueueGenericSend+0x1b8>)
  400b54:	4798      	blx	r3
  400b56:	b930      	cbnz	r0, 400b66 <xQueueGenericSend+0x2e>
  400b58:	9b01      	ldr	r3, [sp, #4]
  400b5a:	b123      	cbz	r3, 400b66 <xQueueGenericSend+0x2e>
  400b5c:	f240 21f6 	movw	r1, #758	; 0x2f6
  400b60:	4864      	ldr	r0, [pc, #400]	; (400cf4 <xQueueGenericSend+0x1bc>)
  400b62:	4b65      	ldr	r3, [pc, #404]	; (400cf8 <xQueueGenericSend+0x1c0>)
  400b64:	4798      	blx	r3
{
  400b66:	f04f 0a00 	mov.w	sl, #0
		taskENTER_CRITICAL();
  400b6a:	4d64      	ldr	r5, [pc, #400]	; (400cfc <xQueueGenericSend+0x1c4>)
					vTaskInternalSetTimeOutState( &xTimeOut );
  400b6c:	4f64      	ldr	r7, [pc, #400]	; (400d00 <xQueueGenericSend+0x1c8>)
					portYIELD_WITHIN_API();
  400b6e:	f8df 819c 	ldr.w	r8, [pc, #412]	; 400d0c <xQueueGenericSend+0x1d4>
  400b72:	e05f      	b.n	400c34 <xQueueGenericSend+0xfc>
	configASSERT( pxQueue );
  400b74:	f240 21f1 	movw	r1, #753	; 0x2f1
  400b78:	485e      	ldr	r0, [pc, #376]	; (400cf4 <xQueueGenericSend+0x1bc>)
  400b7a:	4b5f      	ldr	r3, [pc, #380]	; (400cf8 <xQueueGenericSend+0x1c0>)
  400b7c:	4798      	blx	r3
  400b7e:	e7e3      	b.n	400b48 <xQueueGenericSend+0x10>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400b80:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400b82:	2b00      	cmp	r3, #0
  400b84:	d0e3      	beq.n	400b4e <xQueueGenericSend+0x16>
  400b86:	f240 21f2 	movw	r1, #754	; 0x2f2
  400b8a:	485a      	ldr	r0, [pc, #360]	; (400cf4 <xQueueGenericSend+0x1bc>)
  400b8c:	4b5a      	ldr	r3, [pc, #360]	; (400cf8 <xQueueGenericSend+0x1c0>)
  400b8e:	4798      	blx	r3
  400b90:	e7dd      	b.n	400b4e <xQueueGenericSend+0x16>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400b92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400b94:	2b01      	cmp	r3, #1
  400b96:	d0dc      	beq.n	400b52 <xQueueGenericSend+0x1a>
  400b98:	f240 21f3 	movw	r1, #755	; 0x2f3
  400b9c:	4855      	ldr	r0, [pc, #340]	; (400cf4 <xQueueGenericSend+0x1bc>)
  400b9e:	4b56      	ldr	r3, [pc, #344]	; (400cf8 <xQueueGenericSend+0x1c0>)
  400ba0:	4798      	blx	r3
  400ba2:	e7d6      	b.n	400b52 <xQueueGenericSend+0x1a>
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  400ba4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400ba6:	4632      	mov	r2, r6
  400ba8:	4649      	mov	r1, r9
  400baa:	4620      	mov	r0, r4
  400bac:	4b55      	ldr	r3, [pc, #340]	; (400d04 <xQueueGenericSend+0x1cc>)
  400bae:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  400bb0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400bb2:	b1ab      	cbz	r3, 400be0 <xQueueGenericSend+0xa8>
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400bb4:	2e02      	cmp	r6, #2
  400bb6:	f000 8097 	beq.w	400ce8 <xQueueGenericSend+0x1b0>
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  400bba:	4631      	mov	r1, r6
  400bbc:	4620      	mov	r0, r4
  400bbe:	4b52      	ldr	r3, [pc, #328]	; (400d08 <xQueueGenericSend+0x1d0>)
  400bc0:	4798      	blx	r3
  400bc2:	b138      	cbz	r0, 400bd4 <xQueueGenericSend+0x9c>
							queueYIELD_IF_USING_PREEMPTION();
  400bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400bc8:	4b50      	ldr	r3, [pc, #320]	; (400d0c <xQueueGenericSend+0x1d4>)
  400bca:	601a      	str	r2, [r3, #0]
  400bcc:	f3bf 8f4f 	dsb	sy
  400bd0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  400bd4:	4b4e      	ldr	r3, [pc, #312]	; (400d10 <xQueueGenericSend+0x1d8>)
  400bd6:	4798      	blx	r3
				return pdPASS;
  400bd8:	2001      	movs	r0, #1
}
  400bda:	b005      	add	sp, #20
  400bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400be2:	b953      	cbnz	r3, 400bfa <xQueueGenericSend+0xc2>
						else if( xYieldRequired != pdFALSE )
  400be4:	2800      	cmp	r0, #0
  400be6:	d0f5      	beq.n	400bd4 <xQueueGenericSend+0x9c>
							queueYIELD_IF_USING_PREEMPTION();
  400be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400bec:	4b47      	ldr	r3, [pc, #284]	; (400d0c <xQueueGenericSend+0x1d4>)
  400bee:	601a      	str	r2, [r3, #0]
  400bf0:	f3bf 8f4f 	dsb	sy
  400bf4:	f3bf 8f6f 	isb	sy
  400bf8:	e7ec      	b.n	400bd4 <xQueueGenericSend+0x9c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400bfa:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400bfe:	4b45      	ldr	r3, [pc, #276]	; (400d14 <xQueueGenericSend+0x1dc>)
  400c00:	4798      	blx	r3
  400c02:	2800      	cmp	r0, #0
  400c04:	d0e6      	beq.n	400bd4 <xQueueGenericSend+0x9c>
								queueYIELD_IF_USING_PREEMPTION();
  400c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c0a:	4b40      	ldr	r3, [pc, #256]	; (400d0c <xQueueGenericSend+0x1d4>)
  400c0c:	601a      	str	r2, [r3, #0]
  400c0e:	f3bf 8f4f 	dsb	sy
  400c12:	f3bf 8f6f 	isb	sy
  400c16:	e7dd      	b.n	400bd4 <xQueueGenericSend+0x9c>
					taskEXIT_CRITICAL();
  400c18:	4b3d      	ldr	r3, [pc, #244]	; (400d10 <xQueueGenericSend+0x1d8>)
  400c1a:	4798      	blx	r3
					return errQUEUE_FULL;
  400c1c:	2000      	movs	r0, #0
  400c1e:	e7dc      	b.n	400bda <xQueueGenericSend+0xa2>
					vTaskInternalSetTimeOutState( &xTimeOut );
  400c20:	a802      	add	r0, sp, #8
  400c22:	47b8      	blx	r7
  400c24:	e013      	b.n	400c4e <xQueueGenericSend+0x116>
				prvUnlockQueue( pxQueue );
  400c26:	4620      	mov	r0, r4
  400c28:	4b3b      	ldr	r3, [pc, #236]	; (400d18 <xQueueGenericSend+0x1e0>)
  400c2a:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400c2c:	4b3b      	ldr	r3, [pc, #236]	; (400d1c <xQueueGenericSend+0x1e4>)
  400c2e:	4798      	blx	r3
  400c30:	f04f 0a01 	mov.w	sl, #1
		taskENTER_CRITICAL();
  400c34:	47a8      	blx	r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400c36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400c38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400c3a:	429a      	cmp	r2, r3
  400c3c:	d3b2      	bcc.n	400ba4 <xQueueGenericSend+0x6c>
  400c3e:	2e02      	cmp	r6, #2
  400c40:	d048      	beq.n	400cd4 <xQueueGenericSend+0x19c>
				if( xTicksToWait == ( TickType_t ) 0 )
  400c42:	9b01      	ldr	r3, [sp, #4]
  400c44:	2b00      	cmp	r3, #0
  400c46:	d0e7      	beq.n	400c18 <xQueueGenericSend+0xe0>
				else if( xEntryTimeSet == pdFALSE )
  400c48:	f1ba 0f00 	cmp.w	sl, #0
  400c4c:	d0e8      	beq.n	400c20 <xQueueGenericSend+0xe8>
		taskEXIT_CRITICAL();
  400c4e:	4b30      	ldr	r3, [pc, #192]	; (400d10 <xQueueGenericSend+0x1d8>)
  400c50:	4798      	blx	r3
		vTaskSuspendAll();
  400c52:	4b33      	ldr	r3, [pc, #204]	; (400d20 <xQueueGenericSend+0x1e8>)
  400c54:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400c56:	47a8      	blx	r5
  400c58:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400c5c:	b25b      	sxtb	r3, r3
  400c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c62:	bf04      	itt	eq
  400c64:	2300      	moveq	r3, #0
  400c66:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  400c6a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400c6e:	b25b      	sxtb	r3, r3
  400c70:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c74:	bf04      	itt	eq
  400c76:	2300      	moveq	r3, #0
  400c78:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  400c7c:	4b24      	ldr	r3, [pc, #144]	; (400d10 <xQueueGenericSend+0x1d8>)
  400c7e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400c80:	a901      	add	r1, sp, #4
  400c82:	a802      	add	r0, sp, #8
  400c84:	4b27      	ldr	r3, [pc, #156]	; (400d24 <xQueueGenericSend+0x1ec>)
  400c86:	4798      	blx	r3
  400c88:	b9e8      	cbnz	r0, 400cc6 <xQueueGenericSend+0x18e>
	taskENTER_CRITICAL();
  400c8a:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400c8c:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400c90:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  400c94:	4b1e      	ldr	r3, [pc, #120]	; (400d10 <xQueueGenericSend+0x1d8>)
  400c96:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400c98:	45d3      	cmp	fp, sl
  400c9a:	d1c4      	bne.n	400c26 <xQueueGenericSend+0xee>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400c9c:	9901      	ldr	r1, [sp, #4]
  400c9e:	f104 0010 	add.w	r0, r4, #16
  400ca2:	4b21      	ldr	r3, [pc, #132]	; (400d28 <xQueueGenericSend+0x1f0>)
  400ca4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400ca6:	4620      	mov	r0, r4
  400ca8:	4b1b      	ldr	r3, [pc, #108]	; (400d18 <xQueueGenericSend+0x1e0>)
  400caa:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400cac:	4b1b      	ldr	r3, [pc, #108]	; (400d1c <xQueueGenericSend+0x1e4>)
  400cae:	4798      	blx	r3
  400cb0:	2800      	cmp	r0, #0
  400cb2:	d1bd      	bne.n	400c30 <xQueueGenericSend+0xf8>
					portYIELD_WITHIN_API();
  400cb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400cb8:	f8c8 3000 	str.w	r3, [r8]
  400cbc:	f3bf 8f4f 	dsb	sy
  400cc0:	f3bf 8f6f 	isb	sy
  400cc4:	e7b4      	b.n	400c30 <xQueueGenericSend+0xf8>
			prvUnlockQueue( pxQueue );
  400cc6:	4620      	mov	r0, r4
  400cc8:	4b13      	ldr	r3, [pc, #76]	; (400d18 <xQueueGenericSend+0x1e0>)
  400cca:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400ccc:	4b13      	ldr	r3, [pc, #76]	; (400d1c <xQueueGenericSend+0x1e4>)
  400cce:	4798      	blx	r3
			return errQUEUE_FULL;
  400cd0:	2000      	movs	r0, #0
  400cd2:	e782      	b.n	400bda <xQueueGenericSend+0xa2>
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  400cd4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400cd6:	2202      	movs	r2, #2
  400cd8:	4649      	mov	r1, r9
  400cda:	4620      	mov	r0, r4
  400cdc:	4b09      	ldr	r3, [pc, #36]	; (400d04 <xQueueGenericSend+0x1cc>)
  400cde:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  400ce0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ce2:	2b00      	cmp	r3, #0
  400ce4:	f43f af7c 	beq.w	400be0 <xQueueGenericSend+0xa8>
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400ce8:	2d00      	cmp	r5, #0
  400cea:	f43f af66 	beq.w	400bba <xQueueGenericSend+0x82>
  400cee:	e771      	b.n	400bd4 <xQueueGenericSend+0x9c>
  400cf0:	00401c69 	.word	0x00401c69
  400cf4:	00402dc8 	.word	0x00402dc8
  400cf8:	004029d9 	.word	0x004029d9
  400cfc:	004002c5 	.word	0x004002c5
  400d00:	00401bbd 	.word	0x00401bbd
  400d04:	0040087d 	.word	0x0040087d
  400d08:	004008fd 	.word	0x004008fd
  400d0c:	e000ed04 	.word	0xe000ed04
  400d10:	0040030d 	.word	0x0040030d
  400d14:	00401b29 	.word	0x00401b29
  400d18:	004009a9 	.word	0x004009a9
  400d1c:	00401759 	.word	0x00401759
  400d20:	00401601 	.word	0x00401601
  400d24:	00401bd5 	.word	0x00401bd5
  400d28:	00401aa1 	.word	0x00401aa1

00400d2c <xQueueGenericSendFromISR>:
{
  400d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400d30:	460f      	mov	r7, r1
  400d32:	4691      	mov	r9, r2
  400d34:	461e      	mov	r6, r3
	configASSERT( pxQueue );
  400d36:	4604      	mov	r4, r0
  400d38:	b1c8      	cbz	r0, 400d6e <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400d3a:	b1f7      	cbz	r7, 400d7a <xQueueGenericSendFromISR+0x4e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400d3c:	2e02      	cmp	r6, #2
  400d3e:	d025      	beq.n	400d8c <xQueueGenericSendFromISR+0x60>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400d40:	4b32      	ldr	r3, [pc, #200]	; (400e0c <xQueueGenericSendFromISR+0xe0>)
  400d42:	4798      	blx	r3
	__asm volatile
  400d44:	f3ef 8811 	mrs	r8, BASEPRI
  400d48:	f04f 0350 	mov.w	r3, #80	; 0x50
  400d4c:	f383 8811 	msr	BASEPRI, r3
  400d50:	f3bf 8f6f 	isb	sy
  400d54:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400d58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400d5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d5c:	429a      	cmp	r2, r3
  400d5e:	d31e      	bcc.n	400d9e <xQueueGenericSendFromISR+0x72>
  400d60:	2e02      	cmp	r6, #2
  400d62:	d01c      	beq.n	400d9e <xQueueGenericSendFromISR+0x72>
			xReturn = errQUEUE_FULL;
  400d64:	2000      	movs	r0, #0
	__asm volatile
  400d66:	f388 8811 	msr	BASEPRI, r8
}
  400d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( pxQueue );
  400d6e:	f240 31c3 	movw	r1, #963	; 0x3c3
  400d72:	4827      	ldr	r0, [pc, #156]	; (400e10 <xQueueGenericSendFromISR+0xe4>)
  400d74:	4b27      	ldr	r3, [pc, #156]	; (400e14 <xQueueGenericSendFromISR+0xe8>)
  400d76:	4798      	blx	r3
  400d78:	e7df      	b.n	400d3a <xQueueGenericSendFromISR+0xe>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400d7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400d7c:	2b00      	cmp	r3, #0
  400d7e:	d0dd      	beq.n	400d3c <xQueueGenericSendFromISR+0x10>
  400d80:	f44f 7171 	mov.w	r1, #964	; 0x3c4
  400d84:	4822      	ldr	r0, [pc, #136]	; (400e10 <xQueueGenericSendFromISR+0xe4>)
  400d86:	4b23      	ldr	r3, [pc, #140]	; (400e14 <xQueueGenericSendFromISR+0xe8>)
  400d88:	4798      	blx	r3
  400d8a:	e7d7      	b.n	400d3c <xQueueGenericSendFromISR+0x10>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400d8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d8e:	2b01      	cmp	r3, #1
  400d90:	d0d6      	beq.n	400d40 <xQueueGenericSendFromISR+0x14>
  400d92:	f240 31c5 	movw	r1, #965	; 0x3c5
  400d96:	481e      	ldr	r0, [pc, #120]	; (400e10 <xQueueGenericSendFromISR+0xe4>)
  400d98:	4b1e      	ldr	r3, [pc, #120]	; (400e14 <xQueueGenericSendFromISR+0xe8>)
  400d9a:	4798      	blx	r3
  400d9c:	e7d0      	b.n	400d40 <xQueueGenericSendFromISR+0x14>
			const int8_t cTxLock = pxQueue->cTxLock;
  400d9e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  400da2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400da4:	4632      	mov	r2, r6
  400da6:	4639      	mov	r1, r7
  400da8:	4620      	mov	r0, r4
  400daa:	4b1b      	ldr	r3, [pc, #108]	; (400e18 <xQueueGenericSendFromISR+0xec>)
  400dac:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
  400dae:	f1b5 3fff 	cmp.w	r5, #4294967295
  400db2:	d005      	beq.n	400dc0 <xQueueGenericSendFromISR+0x94>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  400db4:	3501      	adds	r5, #1
  400db6:	b26d      	sxtb	r5, r5
  400db8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			xReturn = pdPASS;
  400dbc:	2001      	movs	r0, #1
  400dbe:	e7d2      	b.n	400d66 <xQueueGenericSendFromISR+0x3a>
					if( pxQueue->pxQueueSetContainer != NULL )
  400dc0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400dc2:	b15b      	cbz	r3, 400ddc <xQueueGenericSendFromISR+0xb0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  400dc4:	4631      	mov	r1, r6
  400dc6:	4620      	mov	r0, r4
  400dc8:	4b14      	ldr	r3, [pc, #80]	; (400e1c <xQueueGenericSendFromISR+0xf0>)
  400dca:	4798      	blx	r3
  400dcc:	b1b0      	cbz	r0, 400dfc <xQueueGenericSendFromISR+0xd0>
							if( pxHigherPriorityTaskWoken != NULL )
  400dce:	f1b9 0f00 	cmp.w	r9, #0
  400dd2:	d015      	beq.n	400e00 <xQueueGenericSendFromISR+0xd4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  400dd4:	2001      	movs	r0, #1
  400dd6:	f8c9 0000 	str.w	r0, [r9]
  400dda:	e7c4      	b.n	400d66 <xQueueGenericSendFromISR+0x3a>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400ddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400dde:	b90b      	cbnz	r3, 400de4 <xQueueGenericSendFromISR+0xb8>
			xReturn = pdPASS;
  400de0:	2001      	movs	r0, #1
  400de2:	e7c0      	b.n	400d66 <xQueueGenericSendFromISR+0x3a>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400de4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400de8:	4b0d      	ldr	r3, [pc, #52]	; (400e20 <xQueueGenericSendFromISR+0xf4>)
  400dea:	4798      	blx	r3
  400dec:	b150      	cbz	r0, 400e04 <xQueueGenericSendFromISR+0xd8>
								if( pxHigherPriorityTaskWoken != NULL )
  400dee:	f1b9 0f00 	cmp.w	r9, #0
  400df2:	d009      	beq.n	400e08 <xQueueGenericSendFromISR+0xdc>
									*pxHigherPriorityTaskWoken = pdTRUE;
  400df4:	2001      	movs	r0, #1
  400df6:	f8c9 0000 	str.w	r0, [r9]
  400dfa:	e7b4      	b.n	400d66 <xQueueGenericSendFromISR+0x3a>
			xReturn = pdPASS;
  400dfc:	2001      	movs	r0, #1
  400dfe:	e7b2      	b.n	400d66 <xQueueGenericSendFromISR+0x3a>
  400e00:	2001      	movs	r0, #1
  400e02:	e7b0      	b.n	400d66 <xQueueGenericSendFromISR+0x3a>
  400e04:	2001      	movs	r0, #1
  400e06:	e7ae      	b.n	400d66 <xQueueGenericSendFromISR+0x3a>
  400e08:	2001      	movs	r0, #1
  400e0a:	e7ac      	b.n	400d66 <xQueueGenericSendFromISR+0x3a>
  400e0c:	0040052d 	.word	0x0040052d
  400e10:	00402dc8 	.word	0x00402dc8
  400e14:	004029d9 	.word	0x004029d9
  400e18:	0040087d 	.word	0x0040087d
  400e1c:	004008fd 	.word	0x004008fd
  400e20:	00401b29 	.word	0x00401b29

00400e24 <xQueueReceive>:
{
  400e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400e28:	b084      	sub	sp, #16
  400e2a:	4688      	mov	r8, r1
  400e2c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
  400e2e:	4604      	mov	r4, r0
  400e30:	b198      	cbz	r0, 400e5a <xQueueReceive+0x36>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e32:	f1b8 0f00 	cmp.w	r8, #0
  400e36:	d016      	beq.n	400e66 <xQueueReceive+0x42>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400e38:	4b4d      	ldr	r3, [pc, #308]	; (400f70 <xQueueReceive+0x14c>)
  400e3a:	4798      	blx	r3
  400e3c:	b930      	cbnz	r0, 400e4c <xQueueReceive+0x28>
  400e3e:	9b01      	ldr	r3, [sp, #4]
  400e40:	b123      	cbz	r3, 400e4c <xQueueReceive+0x28>
  400e42:	f240 5109 	movw	r1, #1289	; 0x509
  400e46:	484b      	ldr	r0, [pc, #300]	; (400f74 <xQueueReceive+0x150>)
  400e48:	4b4b      	ldr	r3, [pc, #300]	; (400f78 <xQueueReceive+0x154>)
  400e4a:	4798      	blx	r3
{
  400e4c:	f04f 0a00 	mov.w	sl, #0
		taskENTER_CRITICAL();
  400e50:	4d4a      	ldr	r5, [pc, #296]	; (400f7c <xQueueReceive+0x158>)
					vTaskInternalSetTimeOutState( &xTimeOut );
  400e52:	4e4b      	ldr	r6, [pc, #300]	; (400f80 <xQueueReceive+0x15c>)
					portYIELD_WITHIN_API();
  400e54:	f8df 9138 	ldr.w	r9, [pc, #312]	; 400f90 <xQueueReceive+0x16c>
  400e58:	e044      	b.n	400ee4 <xQueueReceive+0xc0>
	configASSERT( ( pxQueue ) );
  400e5a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
  400e5e:	4845      	ldr	r0, [pc, #276]	; (400f74 <xQueueReceive+0x150>)
  400e60:	4b45      	ldr	r3, [pc, #276]	; (400f78 <xQueueReceive+0x154>)
  400e62:	4798      	blx	r3
  400e64:	e7e5      	b.n	400e32 <xQueueReceive+0xe>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400e68:	2b00      	cmp	r3, #0
  400e6a:	d0e5      	beq.n	400e38 <xQueueReceive+0x14>
  400e6c:	f240 5104 	movw	r1, #1284	; 0x504
  400e70:	4840      	ldr	r0, [pc, #256]	; (400f74 <xQueueReceive+0x150>)
  400e72:	4b41      	ldr	r3, [pc, #260]	; (400f78 <xQueueReceive+0x154>)
  400e74:	4798      	blx	r3
  400e76:	e7df      	b.n	400e38 <xQueueReceive+0x14>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400e78:	4641      	mov	r1, r8
  400e7a:	4620      	mov	r0, r4
  400e7c:	4b41      	ldr	r3, [pc, #260]	; (400f84 <xQueueReceive+0x160>)
  400e7e:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  400e80:	1e7b      	subs	r3, r7, #1
  400e82:	63a3      	str	r3, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400e84:	6923      	ldr	r3, [r4, #16]
  400e86:	b92b      	cbnz	r3, 400e94 <xQueueReceive+0x70>
				taskEXIT_CRITICAL();
  400e88:	4b3f      	ldr	r3, [pc, #252]	; (400f88 <xQueueReceive+0x164>)
  400e8a:	4798      	blx	r3
				return pdPASS;
  400e8c:	2001      	movs	r0, #1
}
  400e8e:	b004      	add	sp, #16
  400e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400e94:	f104 0010 	add.w	r0, r4, #16
  400e98:	4b3c      	ldr	r3, [pc, #240]	; (400f8c <xQueueReceive+0x168>)
  400e9a:	4798      	blx	r3
  400e9c:	2800      	cmp	r0, #0
  400e9e:	d0f3      	beq.n	400e88 <xQueueReceive+0x64>
						queueYIELD_IF_USING_PREEMPTION();
  400ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400ea4:	4b3a      	ldr	r3, [pc, #232]	; (400f90 <xQueueReceive+0x16c>)
  400ea6:	601a      	str	r2, [r3, #0]
  400ea8:	f3bf 8f4f 	dsb	sy
  400eac:	f3bf 8f6f 	isb	sy
  400eb0:	e7ea      	b.n	400e88 <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
  400eb2:	4b35      	ldr	r3, [pc, #212]	; (400f88 <xQueueReceive+0x164>)
  400eb4:	4798      	blx	r3
					return errQUEUE_EMPTY;
  400eb6:	2000      	movs	r0, #0
  400eb8:	e7e9      	b.n	400e8e <xQueueReceive+0x6a>
					vTaskInternalSetTimeOutState( &xTimeOut );
  400eba:	a802      	add	r0, sp, #8
  400ebc:	47b0      	blx	r6
  400ebe:	e01b      	b.n	400ef8 <xQueueReceive+0xd4>
				prvUnlockQueue( pxQueue );
  400ec0:	4620      	mov	r0, r4
  400ec2:	4b34      	ldr	r3, [pc, #208]	; (400f94 <xQueueReceive+0x170>)
  400ec4:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400ec6:	4b34      	ldr	r3, [pc, #208]	; (400f98 <xQueueReceive+0x174>)
  400ec8:	4798      	blx	r3
  400eca:	e009      	b.n	400ee0 <xQueueReceive+0xbc>
			prvUnlockQueue( pxQueue );
  400ecc:	4620      	mov	r0, r4
  400ece:	4b31      	ldr	r3, [pc, #196]	; (400f94 <xQueueReceive+0x170>)
  400ed0:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400ed2:	4b31      	ldr	r3, [pc, #196]	; (400f98 <xQueueReceive+0x174>)
  400ed4:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400ed6:	4620      	mov	r0, r4
  400ed8:	4b30      	ldr	r3, [pc, #192]	; (400f9c <xQueueReceive+0x178>)
  400eda:	4798      	blx	r3
  400edc:	2800      	cmp	r0, #0
  400ede:	d144      	bne.n	400f6a <xQueueReceive+0x146>
  400ee0:	f04f 0a01 	mov.w	sl, #1
		taskENTER_CRITICAL();
  400ee4:	47a8      	blx	r5
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400ee6:	6ba7      	ldr	r7, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  400ee8:	2f00      	cmp	r7, #0
  400eea:	d1c5      	bne.n	400e78 <xQueueReceive+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
  400eec:	9b01      	ldr	r3, [sp, #4]
  400eee:	2b00      	cmp	r3, #0
  400ef0:	d0df      	beq.n	400eb2 <xQueueReceive+0x8e>
				else if( xEntryTimeSet == pdFALSE )
  400ef2:	f1ba 0f00 	cmp.w	sl, #0
  400ef6:	d0e0      	beq.n	400eba <xQueueReceive+0x96>
		taskEXIT_CRITICAL();
  400ef8:	4b23      	ldr	r3, [pc, #140]	; (400f88 <xQueueReceive+0x164>)
  400efa:	4798      	blx	r3
		vTaskSuspendAll();
  400efc:	4b28      	ldr	r3, [pc, #160]	; (400fa0 <xQueueReceive+0x17c>)
  400efe:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400f00:	47a8      	blx	r5
  400f02:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400f06:	b25b      	sxtb	r3, r3
  400f08:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f0c:	bf04      	itt	eq
  400f0e:	2300      	moveq	r3, #0
  400f10:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  400f14:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400f18:	b25b      	sxtb	r3, r3
  400f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f1e:	bf04      	itt	eq
  400f20:	2300      	moveq	r3, #0
  400f22:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  400f26:	4b18      	ldr	r3, [pc, #96]	; (400f88 <xQueueReceive+0x164>)
  400f28:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400f2a:	a901      	add	r1, sp, #4
  400f2c:	a802      	add	r0, sp, #8
  400f2e:	4b1d      	ldr	r3, [pc, #116]	; (400fa4 <xQueueReceive+0x180>)
  400f30:	4798      	blx	r3
  400f32:	2800      	cmp	r0, #0
  400f34:	d1ca      	bne.n	400ecc <xQueueReceive+0xa8>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400f36:	4620      	mov	r0, r4
  400f38:	4b18      	ldr	r3, [pc, #96]	; (400f9c <xQueueReceive+0x178>)
  400f3a:	4798      	blx	r3
  400f3c:	2800      	cmp	r0, #0
  400f3e:	d0bf      	beq.n	400ec0 <xQueueReceive+0x9c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400f40:	9901      	ldr	r1, [sp, #4]
  400f42:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400f46:	4b18      	ldr	r3, [pc, #96]	; (400fa8 <xQueueReceive+0x184>)
  400f48:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400f4a:	4620      	mov	r0, r4
  400f4c:	4b11      	ldr	r3, [pc, #68]	; (400f94 <xQueueReceive+0x170>)
  400f4e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400f50:	4b11      	ldr	r3, [pc, #68]	; (400f98 <xQueueReceive+0x174>)
  400f52:	4798      	blx	r3
  400f54:	2800      	cmp	r0, #0
  400f56:	d1c3      	bne.n	400ee0 <xQueueReceive+0xbc>
					portYIELD_WITHIN_API();
  400f58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400f5c:	f8c9 3000 	str.w	r3, [r9]
  400f60:	f3bf 8f4f 	dsb	sy
  400f64:	f3bf 8f6f 	isb	sy
  400f68:	e7ba      	b.n	400ee0 <xQueueReceive+0xbc>
				return errQUEUE_EMPTY;
  400f6a:	2000      	movs	r0, #0
  400f6c:	e78f      	b.n	400e8e <xQueueReceive+0x6a>
  400f6e:	bf00      	nop
  400f70:	00401c69 	.word	0x00401c69
  400f74:	00402dc8 	.word	0x00402dc8
  400f78:	004029d9 	.word	0x004029d9
  400f7c:	004002c5 	.word	0x004002c5
  400f80:	00401bbd 	.word	0x00401bbd
  400f84:	00400981 	.word	0x00400981
  400f88:	0040030d 	.word	0x0040030d
  400f8c:	00401b29 	.word	0x00401b29
  400f90:	e000ed04 	.word	0xe000ed04
  400f94:	004009a9 	.word	0x004009a9
  400f98:	00401759 	.word	0x00401759
  400f9c:	0040085d 	.word	0x0040085d
  400fa0:	00401601 	.word	0x00401601
  400fa4:	00401bd5 	.word	0x00401bd5
  400fa8:	00401aa1 	.word	0x00401aa1

00400fac <vQueueAddToRegistry>:
	{
  400fac:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  400fae:	4b0b      	ldr	r3, [pc, #44]	; (400fdc <vQueueAddToRegistry+0x30>)
  400fb0:	681b      	ldr	r3, [r3, #0]
  400fb2:	b153      	cbz	r3, 400fca <vQueueAddToRegistry+0x1e>
  400fb4:	2301      	movs	r3, #1
  400fb6:	4c09      	ldr	r4, [pc, #36]	; (400fdc <vQueueAddToRegistry+0x30>)
  400fb8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  400fbc:	b132      	cbz	r2, 400fcc <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  400fbe:	3301      	adds	r3, #1
  400fc0:	2b08      	cmp	r3, #8
  400fc2:	d1f9      	bne.n	400fb8 <vQueueAddToRegistry+0xc>
	}
  400fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
  400fc8:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  400fca:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  400fcc:	4a03      	ldr	r2, [pc, #12]	; (400fdc <vQueueAddToRegistry+0x30>)
  400fce:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  400fd2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  400fd6:	6058      	str	r0, [r3, #4]
				break;
  400fd8:	e7f4      	b.n	400fc4 <vQueueAddToRegistry+0x18>
  400fda:	bf00      	nop
  400fdc:	20000604 	.word	0x20000604

00400fe0 <vQueueWaitForMessageRestricted>:
	{
  400fe0:	b570      	push	{r4, r5, r6, lr}
  400fe2:	4604      	mov	r4, r0
  400fe4:	460d      	mov	r5, r1
  400fe6:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  400fe8:	4b11      	ldr	r3, [pc, #68]	; (401030 <vQueueWaitForMessageRestricted+0x50>)
  400fea:	4798      	blx	r3
  400fec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400ff0:	b25b      	sxtb	r3, r3
  400ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ff6:	bf04      	itt	eq
  400ff8:	2300      	moveq	r3, #0
  400ffa:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  400ffe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401002:	b25b      	sxtb	r3, r3
  401004:	f1b3 3fff 	cmp.w	r3, #4294967295
  401008:	bf04      	itt	eq
  40100a:	2300      	moveq	r3, #0
  40100c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  401010:	4b08      	ldr	r3, [pc, #32]	; (401034 <vQueueWaitForMessageRestricted+0x54>)
  401012:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401014:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401016:	b11b      	cbz	r3, 401020 <vQueueWaitForMessageRestricted+0x40>
		prvUnlockQueue( pxQueue );
  401018:	4620      	mov	r0, r4
  40101a:	4b07      	ldr	r3, [pc, #28]	; (401038 <vQueueWaitForMessageRestricted+0x58>)
  40101c:	4798      	blx	r3
  40101e:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401020:	4632      	mov	r2, r6
  401022:	4629      	mov	r1, r5
  401024:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401028:	4b04      	ldr	r3, [pc, #16]	; (40103c <vQueueWaitForMessageRestricted+0x5c>)
  40102a:	4798      	blx	r3
  40102c:	e7f4      	b.n	401018 <vQueueWaitForMessageRestricted+0x38>
  40102e:	bf00      	nop
  401030:	004002c5 	.word	0x004002c5
  401034:	0040030d 	.word	0x0040030d
  401038:	004009a9 	.word	0x004009a9
  40103c:	00401ae1 	.word	0x00401ae1

00401040 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401040:	4b08      	ldr	r3, [pc, #32]	; (401064 <prvResetNextTaskUnblockTime+0x24>)
  401042:	681b      	ldr	r3, [r3, #0]
  401044:	681b      	ldr	r3, [r3, #0]
  401046:	b13b      	cbz	r3, 401058 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401048:	4b06      	ldr	r3, [pc, #24]	; (401064 <prvResetNextTaskUnblockTime+0x24>)
  40104a:	681b      	ldr	r3, [r3, #0]
  40104c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  40104e:	68db      	ldr	r3, [r3, #12]
  401050:	685a      	ldr	r2, [r3, #4]
  401052:	4b05      	ldr	r3, [pc, #20]	; (401068 <prvResetNextTaskUnblockTime+0x28>)
  401054:	601a      	str	r2, [r3, #0]
  401056:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401058:	f04f 32ff 	mov.w	r2, #4294967295
  40105c:	4b02      	ldr	r3, [pc, #8]	; (401068 <prvResetNextTaskUnblockTime+0x28>)
  40105e:	601a      	str	r2, [r3, #0]
  401060:	4770      	bx	lr
  401062:	bf00      	nop
  401064:	2000047c 	.word	0x2000047c
  401068:	20000568 	.word	0x20000568

0040106c <prvTaskIsTaskSuspended>:
	{
  40106c:	b510      	push	{r4, lr}
		configASSERT( xTask );
  40106e:	4604      	mov	r4, r0
  401070:	b128      	cbz	r0, 40107e <prvTaskIsTaskSuspended+0x12>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  401072:	6962      	ldr	r2, [r4, #20]
  401074:	4b0a      	ldr	r3, [pc, #40]	; (4010a0 <prvTaskIsTaskSuspended+0x34>)
  401076:	429a      	cmp	r2, r3
  401078:	d007      	beq.n	40108a <prvTaskIsTaskSuspended+0x1e>
	BaseType_t xReturn = pdFALSE;
  40107a:	2000      	movs	r0, #0
  40107c:	bd10      	pop	{r4, pc}
		configASSERT( xTask );
  40107e:	f240 710e 	movw	r1, #1806	; 0x70e
  401082:	4808      	ldr	r0, [pc, #32]	; (4010a4 <prvTaskIsTaskSuspended+0x38>)
  401084:	4b08      	ldr	r3, [pc, #32]	; (4010a8 <prvTaskIsTaskSuspended+0x3c>)
  401086:	4798      	blx	r3
  401088:	e7f3      	b.n	401072 <prvTaskIsTaskSuspended+0x6>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  40108a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  40108c:	4b07      	ldr	r3, [pc, #28]	; (4010ac <prvTaskIsTaskSuspended+0x40>)
  40108e:	4298      	cmp	r0, r3
  401090:	d003      	beq.n	40109a <prvTaskIsTaskSuspended+0x2e>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
  401092:	fab0 f080 	clz	r0, r0
  401096:	0940      	lsrs	r0, r0, #5
  401098:	bd10      	pop	{r4, pc}
	BaseType_t xReturn = pdFALSE;
  40109a:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  40109c:	bd10      	pop	{r4, pc}
  40109e:	bf00      	nop
  4010a0:	20000588 	.word	0x20000588
  4010a4:	00402de0 	.word	0x00402de0
  4010a8:	004029d9 	.word	0x004029d9
  4010ac:	20000570 	.word	0x20000570

004010b0 <prvIdleTask>:
{
  4010b0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  4010b2:	4d16      	ldr	r5, [pc, #88]	; (40110c <prvIdleTask+0x5c>)
			taskENTER_CRITICAL();
  4010b4:	f8df 806c 	ldr.w	r8, [pc, #108]	; 401124 <prvIdleTask+0x74>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4010b8:	4f15      	ldr	r7, [pc, #84]	; (401110 <prvIdleTask+0x60>)
				taskYIELD();
  4010ba:	f8df 906c 	ldr.w	r9, [pc, #108]	; 401128 <prvIdleTask+0x78>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  4010be:	682b      	ldr	r3, [r5, #0]
  4010c0:	b1bb      	cbz	r3, 4010f2 <prvIdleTask+0x42>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4010c2:	4e14      	ldr	r6, [pc, #80]	; (401114 <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
  4010c4:	47c0      	blx	r8
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4010c6:	68fb      	ldr	r3, [r7, #12]
  4010c8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4010ca:	1d20      	adds	r0, r4, #4
  4010cc:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
  4010ce:	4a12      	ldr	r2, [pc, #72]	; (401118 <prvIdleTask+0x68>)
  4010d0:	6813      	ldr	r3, [r2, #0]
  4010d2:	3b01      	subs	r3, #1
  4010d4:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
  4010d6:	682b      	ldr	r3, [r5, #0]
  4010d8:	3b01      	subs	r3, #1
  4010da:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
  4010dc:	4b0f      	ldr	r3, [pc, #60]	; (40111c <prvIdleTask+0x6c>)
  4010de:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
  4010e0:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4010e2:	f8df a048 	ldr.w	sl, [pc, #72]	; 40112c <prvIdleTask+0x7c>
  4010e6:	47d0      	blx	sl
			vPortFree( pxTCB );
  4010e8:	4620      	mov	r0, r4
  4010ea:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  4010ec:	682b      	ldr	r3, [r5, #0]
  4010ee:	2b00      	cmp	r3, #0
  4010f0:	d1e8      	bne.n	4010c4 <prvIdleTask+0x14>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4010f2:	4b0b      	ldr	r3, [pc, #44]	; (401120 <prvIdleTask+0x70>)
  4010f4:	681b      	ldr	r3, [r3, #0]
  4010f6:	2b01      	cmp	r3, #1
  4010f8:	d9e1      	bls.n	4010be <prvIdleTask+0xe>
				taskYIELD();
  4010fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4010fe:	f8c9 3000 	str.w	r3, [r9]
  401102:	f3bf 8f4f 	dsb	sy
  401106:	f3bf 8f6f 	isb	sy
  40110a:	e7d8      	b.n	4010be <prvIdleTask+0xe>
  40110c:	20000528 	.word	0x20000528
  401110:	2000059c 	.word	0x2000059c
  401114:	004001cd 	.word	0x004001cd
  401118:	20000524 	.word	0x20000524
  40111c:	0040030d 	.word	0x0040030d
  401120:	20000484 	.word	0x20000484
  401124:	004002c5 	.word	0x004002c5
  401128:	e000ed04 	.word	0xe000ed04
  40112c:	004006c1 	.word	0x004006c1

00401130 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  401130:	b570      	push	{r4, r5, r6, lr}
  401132:	4604      	mov	r4, r0
  401134:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  401136:	4b1d      	ldr	r3, [pc, #116]	; (4011ac <prvAddCurrentTaskToDelayedList+0x7c>)
  401138:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  40113a:	4b1d      	ldr	r3, [pc, #116]	; (4011b0 <prvAddCurrentTaskToDelayedList+0x80>)
  40113c:	6818      	ldr	r0, [r3, #0]
  40113e:	3004      	adds	r0, #4
  401140:	4b1c      	ldr	r3, [pc, #112]	; (4011b4 <prvAddCurrentTaskToDelayedList+0x84>)
  401142:	4798      	blx	r3
  401144:	b948      	cbnz	r0, 40115a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
  401146:	4b1a      	ldr	r3, [pc, #104]	; (4011b0 <prvAddCurrentTaskToDelayedList+0x80>)
  401148:	681a      	ldr	r2, [r3, #0]
  40114a:	491b      	ldr	r1, [pc, #108]	; (4011b8 <prvAddCurrentTaskToDelayedList+0x88>)
  40114c:	680b      	ldr	r3, [r1, #0]
  40114e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401150:	2201      	movs	r2, #1
  401152:	4082      	lsls	r2, r0
  401154:	ea23 0302 	bic.w	r3, r3, r2
  401158:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  40115a:	f1b4 3fff 	cmp.w	r4, #4294967295
  40115e:	d013      	beq.n	401188 <prvAddCurrentTaskToDelayedList+0x58>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  401160:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  401162:	4b13      	ldr	r3, [pc, #76]	; (4011b0 <prvAddCurrentTaskToDelayedList+0x80>)
  401164:	681b      	ldr	r3, [r3, #0]
  401166:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
  401168:	42a5      	cmp	r5, r4
  40116a:	d816      	bhi.n	40119a <prvAddCurrentTaskToDelayedList+0x6a>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40116c:	4b13      	ldr	r3, [pc, #76]	; (4011bc <prvAddCurrentTaskToDelayedList+0x8c>)
  40116e:	6818      	ldr	r0, [r3, #0]
  401170:	4b0f      	ldr	r3, [pc, #60]	; (4011b0 <prvAddCurrentTaskToDelayedList+0x80>)
  401172:	6819      	ldr	r1, [r3, #0]
  401174:	3104      	adds	r1, #4
  401176:	4b12      	ldr	r3, [pc, #72]	; (4011c0 <prvAddCurrentTaskToDelayedList+0x90>)
  401178:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  40117a:	4b12      	ldr	r3, [pc, #72]	; (4011c4 <prvAddCurrentTaskToDelayedList+0x94>)
  40117c:	681b      	ldr	r3, [r3, #0]
  40117e:	429c      	cmp	r4, r3
				{
					xNextTaskUnblockTime = xTimeToWake;
  401180:	bf3c      	itt	cc
  401182:	4b10      	ldrcc	r3, [pc, #64]	; (4011c4 <prvAddCurrentTaskToDelayedList+0x94>)
  401184:	601c      	strcc	r4, [r3, #0]
  401186:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  401188:	2e00      	cmp	r6, #0
  40118a:	d0e9      	beq.n	401160 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40118c:	4b08      	ldr	r3, [pc, #32]	; (4011b0 <prvAddCurrentTaskToDelayedList+0x80>)
  40118e:	6819      	ldr	r1, [r3, #0]
  401190:	3104      	adds	r1, #4
  401192:	480d      	ldr	r0, [pc, #52]	; (4011c8 <prvAddCurrentTaskToDelayedList+0x98>)
  401194:	4b0d      	ldr	r3, [pc, #52]	; (4011cc <prvAddCurrentTaskToDelayedList+0x9c>)
  401196:	4798      	blx	r3
  401198:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40119a:	4b0d      	ldr	r3, [pc, #52]	; (4011d0 <prvAddCurrentTaskToDelayedList+0xa0>)
  40119c:	6818      	ldr	r0, [r3, #0]
  40119e:	4b04      	ldr	r3, [pc, #16]	; (4011b0 <prvAddCurrentTaskToDelayedList+0x80>)
  4011a0:	6819      	ldr	r1, [r3, #0]
  4011a2:	3104      	adds	r1, #4
  4011a4:	4b06      	ldr	r3, [pc, #24]	; (4011c0 <prvAddCurrentTaskToDelayedList+0x90>)
  4011a6:	4798      	blx	r3
  4011a8:	bd70      	pop	{r4, r5, r6, pc}
  4011aa:	bf00      	nop
  4011ac:	200005b0 	.word	0x200005b0
  4011b0:	20000478 	.word	0x20000478
  4011b4:	004001cd 	.word	0x004001cd
  4011b8:	20000538 	.word	0x20000538
  4011bc:	2000047c 	.word	0x2000047c
  4011c0:	00400199 	.word	0x00400199
  4011c4:	20000568 	.word	0x20000568
  4011c8:	20000588 	.word	0x20000588
  4011cc:	00400181 	.word	0x00400181
  4011d0:	20000480 	.word	0x20000480

004011d4 <xTaskCreate>:
	{
  4011d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011d8:	b083      	sub	sp, #12
  4011da:	4683      	mov	fp, r0
  4011dc:	460d      	mov	r5, r1
  4011de:	9301      	str	r3, [sp, #4]
  4011e0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
  4011e4:	0097      	lsls	r7, r2, #2
  4011e6:	4638      	mov	r0, r7
  4011e8:	4b61      	ldr	r3, [pc, #388]	; (401370 <xTaskCreate+0x19c>)
  4011ea:	4798      	blx	r3
			if( pxStack != NULL )
  4011ec:	2800      	cmp	r0, #0
  4011ee:	f000 8092 	beq.w	401316 <xTaskCreate+0x142>
  4011f2:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
  4011f4:	2064      	movs	r0, #100	; 0x64
  4011f6:	4b5e      	ldr	r3, [pc, #376]	; (401370 <xTaskCreate+0x19c>)
  4011f8:	4798      	blx	r3
				if( pxNewTCB != NULL )
  4011fa:	4604      	mov	r4, r0
  4011fc:	2800      	cmp	r0, #0
  4011fe:	f000 8087 	beq.w	401310 <xTaskCreate+0x13c>
					pxNewTCB->pxStack = pxStack;
  401202:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  401204:	463a      	mov	r2, r7
  401206:	21a5      	movs	r1, #165	; 0xa5
  401208:	4630      	mov	r0, r6
  40120a:	4b5a      	ldr	r3, [pc, #360]	; (401374 <xTaskCreate+0x1a0>)
  40120c:	4798      	blx	r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
  40120e:	3f04      	subs	r7, #4
  401210:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401212:	441f      	add	r7, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
  401214:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
  401218:	2d00      	cmp	r5, #0
  40121a:	d07f      	beq.n	40131c <xTaskCreate+0x148>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  40121c:	782b      	ldrb	r3, [r5, #0]
  40121e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
  401222:	782b      	ldrb	r3, [r5, #0]
  401224:	b163      	cbz	r3, 401240 <xTaskCreate+0x6c>
  401226:	462b      	mov	r3, r5
  401228:	f104 0234 	add.w	r2, r4, #52	; 0x34
  40122c:	f105 0113 	add.w	r1, r5, #19
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  401230:	7858      	ldrb	r0, [r3, #1]
  401232:	f802 0f01 	strb.w	r0, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
  401236:	f813 0f01 	ldrb.w	r0, [r3, #1]!
  40123a:	b108      	cbz	r0, 401240 <xTaskCreate+0x6c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40123c:	428b      	cmp	r3, r1
  40123e:	d1f7      	bne.n	401230 <xTaskCreate+0x5c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401240:	2300      	movs	r3, #0
  401242:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  401246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401248:	2d07      	cmp	r5, #7
  40124a:	bf28      	it	cs
  40124c:	2507      	movcs	r5, #7
	pxNewTCB->uxPriority = uxPriority;
  40124e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
  401250:	64a5      	str	r5, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
  401252:	2600      	movs	r6, #0
  401254:	64e6      	str	r6, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  401256:	f104 0804 	add.w	r8, r4, #4
  40125a:	4640      	mov	r0, r8
  40125c:	f8df 9168 	ldr.w	r9, [pc, #360]	; 4013c8 <xTaskCreate+0x1f4>
  401260:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  401262:	f104 0018 	add.w	r0, r4, #24
  401266:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  401268:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40126a:	f1c5 0508 	rsb	r5, r5, #8
  40126e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  401270:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
  401272:	6526      	str	r6, [r4, #80]	; 0x50
  401274:	6566      	str	r6, [r4, #84]	; 0x54
  401276:	65a6      	str	r6, [r4, #88]	; 0x58
		pxNewTCB->ulNotifiedValue = 0;
  401278:	65e6      	str	r6, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  40127a:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40127e:	9a01      	ldr	r2, [sp, #4]
  401280:	4659      	mov	r1, fp
  401282:	4638      	mov	r0, r7
  401284:	4b3c      	ldr	r3, [pc, #240]	; (401378 <xTaskCreate+0x1a4>)
  401286:	4798      	blx	r3
  401288:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
  40128a:	f1ba 0f00 	cmp.w	sl, #0
  40128e:	d001      	beq.n	401294 <xTaskCreate+0xc0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401290:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
  401294:	4b39      	ldr	r3, [pc, #228]	; (40137c <xTaskCreate+0x1a8>)
  401296:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
  401298:	4a39      	ldr	r2, [pc, #228]	; (401380 <xTaskCreate+0x1ac>)
  40129a:	6813      	ldr	r3, [r2, #0]
  40129c:	3301      	adds	r3, #1
  40129e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  4012a0:	4b38      	ldr	r3, [pc, #224]	; (401384 <xTaskCreate+0x1b0>)
  4012a2:	681b      	ldr	r3, [r3, #0]
  4012a4:	2b00      	cmp	r3, #0
  4012a6:	d03d      	beq.n	401324 <xTaskCreate+0x150>
			if( xSchedulerRunning == pdFALSE )
  4012a8:	4b37      	ldr	r3, [pc, #220]	; (401388 <xTaskCreate+0x1b4>)
  4012aa:	681b      	ldr	r3, [r3, #0]
  4012ac:	b93b      	cbnz	r3, 4012be <xTaskCreate+0xea>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  4012ae:	4b35      	ldr	r3, [pc, #212]	; (401384 <xTaskCreate+0x1b0>)
  4012b0:	681b      	ldr	r3, [r3, #0]
  4012b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4012b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4012b6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
  4012b8:	bf9c      	itt	ls
  4012ba:	4b32      	ldrls	r3, [pc, #200]	; (401384 <xTaskCreate+0x1b0>)
  4012bc:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
  4012be:	4a33      	ldr	r2, [pc, #204]	; (40138c <xTaskCreate+0x1b8>)
  4012c0:	6813      	ldr	r3, [r2, #0]
  4012c2:	3301      	adds	r3, #1
  4012c4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
  4012c6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4012c8:	4a31      	ldr	r2, [pc, #196]	; (401390 <xTaskCreate+0x1bc>)
  4012ca:	6811      	ldr	r1, [r2, #0]
  4012cc:	2301      	movs	r3, #1
  4012ce:	4083      	lsls	r3, r0
  4012d0:	430b      	orrs	r3, r1
  4012d2:	6013      	str	r3, [r2, #0]
  4012d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4012d8:	4641      	mov	r1, r8
  4012da:	4b2e      	ldr	r3, [pc, #184]	; (401394 <xTaskCreate+0x1c0>)
  4012dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4012e0:	4b2d      	ldr	r3, [pc, #180]	; (401398 <xTaskCreate+0x1c4>)
  4012e2:	4798      	blx	r3
	taskEXIT_CRITICAL();
  4012e4:	4b2d      	ldr	r3, [pc, #180]	; (40139c <xTaskCreate+0x1c8>)
  4012e6:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
  4012e8:	4b27      	ldr	r3, [pc, #156]	; (401388 <xTaskCreate+0x1b4>)
  4012ea:	681b      	ldr	r3, [r3, #0]
  4012ec:	2b00      	cmp	r3, #0
  4012ee:	d039      	beq.n	401364 <xTaskCreate+0x190>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  4012f0:	4b24      	ldr	r3, [pc, #144]	; (401384 <xTaskCreate+0x1b0>)
  4012f2:	681b      	ldr	r3, [r3, #0]
  4012f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4012f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4012f8:	429a      	cmp	r2, r3
  4012fa:	d237      	bcs.n	40136c <xTaskCreate+0x198>
			taskYIELD_IF_USING_PREEMPTION();
  4012fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401300:	4b27      	ldr	r3, [pc, #156]	; (4013a0 <xTaskCreate+0x1cc>)
  401302:	601a      	str	r2, [r3, #0]
  401304:	f3bf 8f4f 	dsb	sy
  401308:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  40130c:	2001      	movs	r0, #1
  40130e:	e02a      	b.n	401366 <xTaskCreate+0x192>
					vPortFree( pxStack );
  401310:	4630      	mov	r0, r6
  401312:	4b24      	ldr	r3, [pc, #144]	; (4013a4 <xTaskCreate+0x1d0>)
  401314:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401316:	f04f 30ff 	mov.w	r0, #4294967295
  40131a:	e024      	b.n	401366 <xTaskCreate+0x192>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
  40131c:	2300      	movs	r3, #0
  40131e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  401322:	e790      	b.n	401246 <xTaskCreate+0x72>
			pxCurrentTCB = pxNewTCB;
  401324:	4b17      	ldr	r3, [pc, #92]	; (401384 <xTaskCreate+0x1b0>)
  401326:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401328:	6813      	ldr	r3, [r2, #0]
  40132a:	2b01      	cmp	r3, #1
  40132c:	d1c7      	bne.n	4012be <xTaskCreate+0xea>
  40132e:	4d19      	ldr	r5, [pc, #100]	; (401394 <xTaskCreate+0x1c0>)
  401330:	f105 07a0 	add.w	r7, r5, #160	; 0xa0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401334:	4e1c      	ldr	r6, [pc, #112]	; (4013a8 <xTaskCreate+0x1d4>)
  401336:	4628      	mov	r0, r5
  401338:	47b0      	blx	r6
  40133a:	3514      	adds	r5, #20
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  40133c:	42af      	cmp	r7, r5
  40133e:	d1fa      	bne.n	401336 <xTaskCreate+0x162>
	vListInitialise( &xDelayedTaskList1 );
  401340:	4f1a      	ldr	r7, [pc, #104]	; (4013ac <xTaskCreate+0x1d8>)
  401342:	4638      	mov	r0, r7
  401344:	4d18      	ldr	r5, [pc, #96]	; (4013a8 <xTaskCreate+0x1d4>)
  401346:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401348:	4e19      	ldr	r6, [pc, #100]	; (4013b0 <xTaskCreate+0x1dc>)
  40134a:	4630      	mov	r0, r6
  40134c:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  40134e:	4819      	ldr	r0, [pc, #100]	; (4013b4 <xTaskCreate+0x1e0>)
  401350:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  401352:	4819      	ldr	r0, [pc, #100]	; (4013b8 <xTaskCreate+0x1e4>)
  401354:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  401356:	4819      	ldr	r0, [pc, #100]	; (4013bc <xTaskCreate+0x1e8>)
  401358:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  40135a:	4b19      	ldr	r3, [pc, #100]	; (4013c0 <xTaskCreate+0x1ec>)
  40135c:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  40135e:	4b19      	ldr	r3, [pc, #100]	; (4013c4 <xTaskCreate+0x1f0>)
  401360:	601e      	str	r6, [r3, #0]
  401362:	e7ac      	b.n	4012be <xTaskCreate+0xea>
			xReturn = pdPASS;
  401364:	2001      	movs	r0, #1
	}
  401366:	b003      	add	sp, #12
  401368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  40136c:	2001      	movs	r0, #1
		return xReturn;
  40136e:	e7fa      	b.n	401366 <xTaskCreate+0x192>
  401370:	004005e1 	.word	0x004005e1
  401374:	00402bb1 	.word	0x00402bb1
  401378:	00400275 	.word	0x00400275
  40137c:	004002c5 	.word	0x004002c5
  401380:	20000524 	.word	0x20000524
  401384:	20000478 	.word	0x20000478
  401388:	20000584 	.word	0x20000584
  40138c:	20000534 	.word	0x20000534
  401390:	20000538 	.word	0x20000538
  401394:	20000484 	.word	0x20000484
  401398:	00400181 	.word	0x00400181
  40139c:	0040030d 	.word	0x0040030d
  4013a0:	e000ed04 	.word	0xe000ed04
  4013a4:	004006c1 	.word	0x004006c1
  4013a8:	00400165 	.word	0x00400165
  4013ac:	2000053c 	.word	0x2000053c
  4013b0:	20000550 	.word	0x20000550
  4013b4:	20000570 	.word	0x20000570
  4013b8:	2000059c 	.word	0x2000059c
  4013bc:	20000588 	.word	0x20000588
  4013c0:	2000047c 	.word	0x2000047c
  4013c4:	20000480 	.word	0x20000480
  4013c8:	0040017b 	.word	0x0040017b

004013cc <vTaskDelete>:
	{
  4013cc:	b538      	push	{r3, r4, r5, lr}
  4013ce:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
  4013d0:	4b2c      	ldr	r3, [pc, #176]	; (401484 <vTaskDelete+0xb8>)
  4013d2:	4798      	blx	r3
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
  4013d4:	2c00      	cmp	r4, #0
  4013d6:	d036      	beq.n	401446 <vTaskDelete+0x7a>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  4013d8:	1d25      	adds	r5, r4, #4
  4013da:	4628      	mov	r0, r5
  4013dc:	4b2a      	ldr	r3, [pc, #168]	; (401488 <vTaskDelete+0xbc>)
  4013de:	4798      	blx	r3
  4013e0:	b970      	cbnz	r0, 401400 <vTaskDelete+0x34>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4013e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4013e4:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  4013e8:	009b      	lsls	r3, r3, #2
  4013ea:	4928      	ldr	r1, [pc, #160]	; (40148c <vTaskDelete+0xc0>)
  4013ec:	58cb      	ldr	r3, [r1, r3]
  4013ee:	b93b      	cbnz	r3, 401400 <vTaskDelete+0x34>
  4013f0:	4827      	ldr	r0, [pc, #156]	; (401490 <vTaskDelete+0xc4>)
  4013f2:	6803      	ldr	r3, [r0, #0]
  4013f4:	2101      	movs	r1, #1
  4013f6:	fa01 f202 	lsl.w	r2, r1, r2
  4013fa:	ea23 0202 	bic.w	r2, r3, r2
  4013fe:	6002      	str	r2, [r0, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401400:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  401402:	b11b      	cbz	r3, 40140c <vTaskDelete+0x40>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401404:	f104 0018 	add.w	r0, r4, #24
  401408:	4b1f      	ldr	r3, [pc, #124]	; (401488 <vTaskDelete+0xbc>)
  40140a:	4798      	blx	r3
			uxTaskNumber++;
  40140c:	4a21      	ldr	r2, [pc, #132]	; (401494 <vTaskDelete+0xc8>)
  40140e:	6813      	ldr	r3, [r2, #0]
  401410:	3301      	adds	r3, #1
  401412:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
  401414:	4b20      	ldr	r3, [pc, #128]	; (401498 <vTaskDelete+0xcc>)
  401416:	681b      	ldr	r3, [r3, #0]
  401418:	429c      	cmp	r4, r3
  40141a:	d017      	beq.n	40144c <vTaskDelete+0x80>
				--uxCurrentNumberOfTasks;
  40141c:	4a1f      	ldr	r2, [pc, #124]	; (40149c <vTaskDelete+0xd0>)
  40141e:	6813      	ldr	r3, [r2, #0]
  401420:	3b01      	subs	r3, #1
  401422:	6013      	str	r3, [r2, #0]
			vPortFree( pxTCB->pxStack );
  401424:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401426:	4d1e      	ldr	r5, [pc, #120]	; (4014a0 <vTaskDelete+0xd4>)
  401428:	47a8      	blx	r5
			vPortFree( pxTCB );
  40142a:	4620      	mov	r0, r4
  40142c:	47a8      	blx	r5
				prvResetNextTaskUnblockTime();
  40142e:	4b1d      	ldr	r3, [pc, #116]	; (4014a4 <vTaskDelete+0xd8>)
  401430:	4798      	blx	r3
		taskEXIT_CRITICAL();
  401432:	4b1d      	ldr	r3, [pc, #116]	; (4014a8 <vTaskDelete+0xdc>)
  401434:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401436:	4b1d      	ldr	r3, [pc, #116]	; (4014ac <vTaskDelete+0xe0>)
  401438:	681b      	ldr	r3, [r3, #0]
  40143a:	b11b      	cbz	r3, 401444 <vTaskDelete+0x78>
			if( pxTCB == pxCurrentTCB )
  40143c:	4b16      	ldr	r3, [pc, #88]	; (401498 <vTaskDelete+0xcc>)
  40143e:	681b      	ldr	r3, [r3, #0]
  401440:	429c      	cmp	r4, r3
  401442:	d00c      	beq.n	40145e <vTaskDelete+0x92>
  401444:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
  401446:	4b14      	ldr	r3, [pc, #80]	; (401498 <vTaskDelete+0xcc>)
  401448:	681c      	ldr	r4, [r3, #0]
  40144a:	e7c5      	b.n	4013d8 <vTaskDelete+0xc>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
  40144c:	4629      	mov	r1, r5
  40144e:	4818      	ldr	r0, [pc, #96]	; (4014b0 <vTaskDelete+0xe4>)
  401450:	4b18      	ldr	r3, [pc, #96]	; (4014b4 <vTaskDelete+0xe8>)
  401452:	4798      	blx	r3
				++uxDeletedTasksWaitingCleanUp;
  401454:	4a18      	ldr	r2, [pc, #96]	; (4014b8 <vTaskDelete+0xec>)
  401456:	6813      	ldr	r3, [r2, #0]
  401458:	3301      	adds	r3, #1
  40145a:	6013      	str	r3, [r2, #0]
  40145c:	e7e9      	b.n	401432 <vTaskDelete+0x66>
				configASSERT( uxSchedulerSuspended == 0 );
  40145e:	4b17      	ldr	r3, [pc, #92]	; (4014bc <vTaskDelete+0xf0>)
  401460:	681b      	ldr	r3, [r3, #0]
  401462:	b943      	cbnz	r3, 401476 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
  401464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401468:	4b15      	ldr	r3, [pc, #84]	; (4014c0 <vTaskDelete+0xf4>)
  40146a:	601a      	str	r2, [r3, #0]
  40146c:	f3bf 8f4f 	dsb	sy
  401470:	f3bf 8f6f 	isb	sy
	}
  401474:	e7e6      	b.n	401444 <vTaskDelete+0x78>
				configASSERT( uxSchedulerSuspended == 0 );
  401476:	f240 41d2 	movw	r1, #1234	; 0x4d2
  40147a:	4812      	ldr	r0, [pc, #72]	; (4014c4 <vTaskDelete+0xf8>)
  40147c:	4b12      	ldr	r3, [pc, #72]	; (4014c8 <vTaskDelete+0xfc>)
  40147e:	4798      	blx	r3
  401480:	e7f0      	b.n	401464 <vTaskDelete+0x98>
  401482:	bf00      	nop
  401484:	004002c5 	.word	0x004002c5
  401488:	004001cd 	.word	0x004001cd
  40148c:	20000484 	.word	0x20000484
  401490:	20000538 	.word	0x20000538
  401494:	20000534 	.word	0x20000534
  401498:	20000478 	.word	0x20000478
  40149c:	20000524 	.word	0x20000524
  4014a0:	004006c1 	.word	0x004006c1
  4014a4:	00401041 	.word	0x00401041
  4014a8:	0040030d 	.word	0x0040030d
  4014ac:	20000584 	.word	0x20000584
  4014b0:	2000059c 	.word	0x2000059c
  4014b4:	00400181 	.word	0x00400181
  4014b8:	20000528 	.word	0x20000528
  4014bc:	20000530 	.word	0x20000530
  4014c0:	e000ed04 	.word	0xe000ed04
  4014c4:	00402de0 	.word	0x00402de0
  4014c8:	004029d9 	.word	0x004029d9

004014cc <vTaskResume>:
	{
  4014cc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( xTaskToResume );
  4014ce:	b168      	cbz	r0, 4014ec <vTaskResume+0x20>
  4014d0:	4604      	mov	r4, r0
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
  4014d2:	4b1c      	ldr	r3, [pc, #112]	; (401544 <vTaskResume+0x78>)
  4014d4:	681b      	ldr	r3, [r3, #0]
  4014d6:	4298      	cmp	r0, r3
  4014d8:	d032      	beq.n	401540 <vTaskResume+0x74>
			taskENTER_CRITICAL();
  4014da:	4b1b      	ldr	r3, [pc, #108]	; (401548 <vTaskResume+0x7c>)
  4014dc:	4798      	blx	r3
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
  4014de:	4620      	mov	r0, r4
  4014e0:	4b1a      	ldr	r3, [pc, #104]	; (40154c <vTaskResume+0x80>)
  4014e2:	4798      	blx	r3
  4014e4:	b950      	cbnz	r0, 4014fc <vTaskResume+0x30>
			taskEXIT_CRITICAL();
  4014e6:	4b1a      	ldr	r3, [pc, #104]	; (401550 <vTaskResume+0x84>)
  4014e8:	4798      	blx	r3
	}
  4014ea:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( xTaskToResume );
  4014ec:	f44f 61e7 	mov.w	r1, #1848	; 0x738
  4014f0:	4818      	ldr	r0, [pc, #96]	; (401554 <vTaskResume+0x88>)
  4014f2:	4b19      	ldr	r3, [pc, #100]	; (401558 <vTaskResume+0x8c>)
  4014f4:	4798      	blx	r3
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
  4014f6:	4b13      	ldr	r3, [pc, #76]	; (401544 <vTaskResume+0x78>)
  4014f8:	681b      	ldr	r3, [r3, #0]
  4014fa:	bd38      	pop	{r3, r4, r5, pc}
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
  4014fc:	1d25      	adds	r5, r4, #4
  4014fe:	4628      	mov	r0, r5
  401500:	4b16      	ldr	r3, [pc, #88]	; (40155c <vTaskResume+0x90>)
  401502:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
  401504:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401506:	4a16      	ldr	r2, [pc, #88]	; (401560 <vTaskResume+0x94>)
  401508:	6811      	ldr	r1, [r2, #0]
  40150a:	2301      	movs	r3, #1
  40150c:	4083      	lsls	r3, r0
  40150e:	430b      	orrs	r3, r1
  401510:	6013      	str	r3, [r2, #0]
  401512:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401516:	4629      	mov	r1, r5
  401518:	4b12      	ldr	r3, [pc, #72]	; (401564 <vTaskResume+0x98>)
  40151a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40151e:	4b12      	ldr	r3, [pc, #72]	; (401568 <vTaskResume+0x9c>)
  401520:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401522:	4b08      	ldr	r3, [pc, #32]	; (401544 <vTaskResume+0x78>)
  401524:	681b      	ldr	r3, [r3, #0]
  401526:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40152a:	429a      	cmp	r2, r3
  40152c:	d3db      	bcc.n	4014e6 <vTaskResume+0x1a>
						taskYIELD_IF_USING_PREEMPTION();
  40152e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401532:	4b0e      	ldr	r3, [pc, #56]	; (40156c <vTaskResume+0xa0>)
  401534:	601a      	str	r2, [r3, #0]
  401536:	f3bf 8f4f 	dsb	sy
  40153a:	f3bf 8f6f 	isb	sy
  40153e:	e7d2      	b.n	4014e6 <vTaskResume+0x1a>
  401540:	bd38      	pop	{r3, r4, r5, pc}
  401542:	bf00      	nop
  401544:	20000478 	.word	0x20000478
  401548:	004002c5 	.word	0x004002c5
  40154c:	0040106d 	.word	0x0040106d
  401550:	0040030d 	.word	0x0040030d
  401554:	00402de0 	.word	0x00402de0
  401558:	004029d9 	.word	0x004029d9
  40155c:	004001cd 	.word	0x004001cd
  401560:	20000538 	.word	0x20000538
  401564:	20000484 	.word	0x20000484
  401568:	00400181 	.word	0x00400181
  40156c:	e000ed04 	.word	0xe000ed04

00401570 <vTaskStartScheduler>:
{
  401570:	b510      	push	{r4, lr}
  401572:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
  401574:	4b17      	ldr	r3, [pc, #92]	; (4015d4 <vTaskStartScheduler+0x64>)
  401576:	9301      	str	r3, [sp, #4]
  401578:	2300      	movs	r3, #0
  40157a:	9300      	str	r3, [sp, #0]
  40157c:	2282      	movs	r2, #130	; 0x82
  40157e:	4916      	ldr	r1, [pc, #88]	; (4015d8 <vTaskStartScheduler+0x68>)
  401580:	4816      	ldr	r0, [pc, #88]	; (4015dc <vTaskStartScheduler+0x6c>)
  401582:	4c17      	ldr	r4, [pc, #92]	; (4015e0 <vTaskStartScheduler+0x70>)
  401584:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401586:	2801      	cmp	r0, #1
  401588:	d004      	beq.n	401594 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  40158a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40158e:	d01a      	beq.n	4015c6 <vTaskStartScheduler+0x56>
}
  401590:	b002      	add	sp, #8
  401592:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  401594:	4b13      	ldr	r3, [pc, #76]	; (4015e4 <vTaskStartScheduler+0x74>)
  401596:	4798      	blx	r3
	if( xReturn == pdPASS )
  401598:	2801      	cmp	r0, #1
  40159a:	d1f6      	bne.n	40158a <vTaskStartScheduler+0x1a>
	__asm volatile
  40159c:	f04f 0350 	mov.w	r3, #80	; 0x50
  4015a0:	f383 8811 	msr	BASEPRI, r3
  4015a4:	f3bf 8f6f 	isb	sy
  4015a8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
  4015ac:	f04f 32ff 	mov.w	r2, #4294967295
  4015b0:	4b0d      	ldr	r3, [pc, #52]	; (4015e8 <vTaskStartScheduler+0x78>)
  4015b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4015b4:	2201      	movs	r2, #1
  4015b6:	4b0d      	ldr	r3, [pc, #52]	; (4015ec <vTaskStartScheduler+0x7c>)
  4015b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
  4015ba:	2200      	movs	r2, #0
  4015bc:	4b0c      	ldr	r3, [pc, #48]	; (4015f0 <vTaskStartScheduler+0x80>)
  4015be:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  4015c0:	4b0c      	ldr	r3, [pc, #48]	; (4015f4 <vTaskStartScheduler+0x84>)
  4015c2:	4798      	blx	r3
  4015c4:	e7e4      	b.n	401590 <vTaskStartScheduler+0x20>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  4015c6:	f44f 6102 	mov.w	r1, #2080	; 0x820
  4015ca:	480b      	ldr	r0, [pc, #44]	; (4015f8 <vTaskStartScheduler+0x88>)
  4015cc:	4b0b      	ldr	r3, [pc, #44]	; (4015fc <vTaskStartScheduler+0x8c>)
  4015ce:	4798      	blx	r3
}
  4015d0:	e7de      	b.n	401590 <vTaskStartScheduler+0x20>
  4015d2:	bf00      	nop
  4015d4:	20000564 	.word	0x20000564
  4015d8:	00402df8 	.word	0x00402df8
  4015dc:	004010b1 	.word	0x004010b1
  4015e0:	004011d5 	.word	0x004011d5
  4015e4:	00401dfd 	.word	0x00401dfd
  4015e8:	20000568 	.word	0x20000568
  4015ec:	20000584 	.word	0x20000584
  4015f0:	200005b0 	.word	0x200005b0
  4015f4:	0040040d 	.word	0x0040040d
  4015f8:	00402de0 	.word	0x00402de0
  4015fc:	004029d9 	.word	0x004029d9

00401600 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401600:	4a02      	ldr	r2, [pc, #8]	; (40160c <vTaskSuspendAll+0xc>)
  401602:	6813      	ldr	r3, [r2, #0]
  401604:	3301      	adds	r3, #1
  401606:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
  401608:	4770      	bx	lr
  40160a:	bf00      	nop
  40160c:	20000530 	.word	0x20000530

00401610 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401610:	4b01      	ldr	r3, [pc, #4]	; (401618 <xTaskGetTickCount+0x8>)
  401612:	6818      	ldr	r0, [r3, #0]
}
  401614:	4770      	bx	lr
  401616:	bf00      	nop
  401618:	200005b0 	.word	0x200005b0

0040161c <xTaskIncrementTick>:
{
  40161c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401620:	4b3d      	ldr	r3, [pc, #244]	; (401718 <xTaskIncrementTick+0xfc>)
  401622:	681b      	ldr	r3, [r3, #0]
  401624:	2b00      	cmp	r3, #0
  401626:	d170      	bne.n	40170a <xTaskIncrementTick+0xee>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  401628:	4b3c      	ldr	r3, [pc, #240]	; (40171c <xTaskIncrementTick+0x100>)
  40162a:	681a      	ldr	r2, [r3, #0]
  40162c:	f102 0801 	add.w	r8, r2, #1
		xTickCount = xConstTickCount;
  401630:	f8c3 8000 	str.w	r8, [r3]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  401634:	f1b8 0f00 	cmp.w	r8, #0
  401638:	d10f      	bne.n	40165a <xTaskIncrementTick+0x3e>
			taskSWITCH_DELAYED_LISTS();
  40163a:	4b39      	ldr	r3, [pc, #228]	; (401720 <xTaskIncrementTick+0x104>)
  40163c:	681b      	ldr	r3, [r3, #0]
  40163e:	681b      	ldr	r3, [r3, #0]
  401640:	bb1b      	cbnz	r3, 40168a <xTaskIncrementTick+0x6e>
  401642:	4a37      	ldr	r2, [pc, #220]	; (401720 <xTaskIncrementTick+0x104>)
  401644:	6811      	ldr	r1, [r2, #0]
  401646:	4b37      	ldr	r3, [pc, #220]	; (401724 <xTaskIncrementTick+0x108>)
  401648:	6818      	ldr	r0, [r3, #0]
  40164a:	6010      	str	r0, [r2, #0]
  40164c:	6019      	str	r1, [r3, #0]
  40164e:	4a36      	ldr	r2, [pc, #216]	; (401728 <xTaskIncrementTick+0x10c>)
  401650:	6813      	ldr	r3, [r2, #0]
  401652:	3301      	adds	r3, #1
  401654:	6013      	str	r3, [r2, #0]
  401656:	4b35      	ldr	r3, [pc, #212]	; (40172c <xTaskIncrementTick+0x110>)
  401658:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
  40165a:	4b35      	ldr	r3, [pc, #212]	; (401730 <xTaskIncrementTick+0x114>)
  40165c:	681b      	ldr	r3, [r3, #0]
  40165e:	4598      	cmp	r8, r3
  401660:	d219      	bcs.n	401696 <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
  401662:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401664:	4b33      	ldr	r3, [pc, #204]	; (401734 <xTaskIncrementTick+0x118>)
  401666:	681b      	ldr	r3, [r3, #0]
  401668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40166a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40166e:	009b      	lsls	r3, r3, #2
  401670:	4a31      	ldr	r2, [pc, #196]	; (401738 <xTaskIncrementTick+0x11c>)
  401672:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
  401674:	2b02      	cmp	r3, #2
  401676:	bf28      	it	cs
  401678:	2501      	movcs	r5, #1
		if( xYieldPending != pdFALSE )
  40167a:	4b30      	ldr	r3, [pc, #192]	; (40173c <xTaskIncrementTick+0x120>)
  40167c:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  40167e:	2b00      	cmp	r3, #0
}
  401680:	bf0c      	ite	eq
  401682:	4628      	moveq	r0, r5
  401684:	2001      	movne	r0, #1
  401686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			taskSWITCH_DELAYED_LISTS();
  40168a:	f640 217f 	movw	r1, #2687	; 0xa7f
  40168e:	482c      	ldr	r0, [pc, #176]	; (401740 <xTaskIncrementTick+0x124>)
  401690:	4b2c      	ldr	r3, [pc, #176]	; (401744 <xTaskIncrementTick+0x128>)
  401692:	4798      	blx	r3
  401694:	e7d5      	b.n	401642 <xTaskIncrementTick+0x26>
  401696:	2500      	movs	r5, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401698:	4f21      	ldr	r7, [pc, #132]	; (401720 <xTaskIncrementTick+0x104>)
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  40169a:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 401750 <xTaskIncrementTick+0x134>
					prvAddTaskToReadyList( pxTCB );
  40169e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 401754 <xTaskIncrementTick+0x138>
  4016a2:	e021      	b.n	4016e8 <xTaskIncrementTick+0xcc>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4016a4:	f04f 32ff 	mov.w	r2, #4294967295
  4016a8:	4b21      	ldr	r3, [pc, #132]	; (401730 <xTaskIncrementTick+0x114>)
  4016aa:	601a      	str	r2, [r3, #0]
					break;
  4016ac:	e7da      	b.n	401664 <xTaskIncrementTick+0x48>
						xNextTaskUnblockTime = xItemValue;
  4016ae:	4a20      	ldr	r2, [pc, #128]	; (401730 <xTaskIncrementTick+0x114>)
  4016b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
  4016b2:	e7d7      	b.n	401664 <xTaskIncrementTick+0x48>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4016b4:	f104 0018 	add.w	r0, r4, #24
  4016b8:	47d0      	blx	sl
					prvAddTaskToReadyList( pxTCB );
  4016ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4016bc:	f8d9 2000 	ldr.w	r2, [r9]
  4016c0:	2301      	movs	r3, #1
  4016c2:	4083      	lsls	r3, r0
  4016c4:	4313      	orrs	r3, r2
  4016c6:	f8c9 3000 	str.w	r3, [r9]
  4016ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4016ce:	4631      	mov	r1, r6
  4016d0:	4b19      	ldr	r3, [pc, #100]	; (401738 <xTaskIncrementTick+0x11c>)
  4016d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4016d6:	4b1c      	ldr	r3, [pc, #112]	; (401748 <xTaskIncrementTick+0x12c>)
  4016d8:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4016da:	4b16      	ldr	r3, [pc, #88]	; (401734 <xTaskIncrementTick+0x118>)
  4016dc:	681b      	ldr	r3, [r3, #0]
  4016de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
  4016e2:	429a      	cmp	r2, r3
  4016e4:	bf28      	it	cs
  4016e6:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4016e8:	683b      	ldr	r3, [r7, #0]
  4016ea:	681b      	ldr	r3, [r3, #0]
  4016ec:	2b00      	cmp	r3, #0
  4016ee:	d0d9      	beq.n	4016a4 <xTaskIncrementTick+0x88>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4016f0:	683b      	ldr	r3, [r7, #0]
  4016f2:	68db      	ldr	r3, [r3, #12]
  4016f4:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  4016f6:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
  4016f8:	4598      	cmp	r8, r3
  4016fa:	d3d8      	bcc.n	4016ae <xTaskIncrementTick+0x92>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4016fc:	1d26      	adds	r6, r4, #4
  4016fe:	4630      	mov	r0, r6
  401700:	47d0      	blx	sl
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401702:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  401704:	2b00      	cmp	r3, #0
  401706:	d1d5      	bne.n	4016b4 <xTaskIncrementTick+0x98>
  401708:	e7d7      	b.n	4016ba <xTaskIncrementTick+0x9e>
		++uxPendedTicks;
  40170a:	4a10      	ldr	r2, [pc, #64]	; (40174c <xTaskIncrementTick+0x130>)
  40170c:	6813      	ldr	r3, [r2, #0]
  40170e:	3301      	adds	r3, #1
  401710:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
  401712:	2500      	movs	r5, #0
  401714:	e7b1      	b.n	40167a <xTaskIncrementTick+0x5e>
  401716:	bf00      	nop
  401718:	20000530 	.word	0x20000530
  40171c:	200005b0 	.word	0x200005b0
  401720:	2000047c 	.word	0x2000047c
  401724:	20000480 	.word	0x20000480
  401728:	2000056c 	.word	0x2000056c
  40172c:	00401041 	.word	0x00401041
  401730:	20000568 	.word	0x20000568
  401734:	20000478 	.word	0x20000478
  401738:	20000484 	.word	0x20000484
  40173c:	200005b4 	.word	0x200005b4
  401740:	00402de0 	.word	0x00402de0
  401744:	004029d9 	.word	0x004029d9
  401748:	00400181 	.word	0x00400181
  40174c:	2000052c 	.word	0x2000052c
  401750:	004001cd 	.word	0x004001cd
  401754:	20000538 	.word	0x20000538

00401758 <xTaskResumeAll>:
{
  401758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
  40175c:	4b34      	ldr	r3, [pc, #208]	; (401830 <xTaskResumeAll+0xd8>)
  40175e:	681b      	ldr	r3, [r3, #0]
  401760:	2b00      	cmp	r3, #0
  401762:	d033      	beq.n	4017cc <xTaskResumeAll+0x74>
	taskENTER_CRITICAL();
  401764:	4b33      	ldr	r3, [pc, #204]	; (401834 <xTaskResumeAll+0xdc>)
  401766:	4798      	blx	r3
		--uxSchedulerSuspended;
  401768:	4b31      	ldr	r3, [pc, #196]	; (401830 <xTaskResumeAll+0xd8>)
  40176a:	681a      	ldr	r2, [r3, #0]
  40176c:	3a01      	subs	r2, #1
  40176e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401770:	681b      	ldr	r3, [r3, #0]
  401772:	2b00      	cmp	r3, #0
  401774:	d153      	bne.n	40181e <xTaskResumeAll+0xc6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401776:	4b30      	ldr	r3, [pc, #192]	; (401838 <xTaskResumeAll+0xe0>)
  401778:	681b      	ldr	r3, [r3, #0]
  40177a:	2b00      	cmp	r3, #0
  40177c:	d02c      	beq.n	4017d8 <xTaskResumeAll+0x80>
  40177e:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401780:	4e2e      	ldr	r6, [pc, #184]	; (40183c <xTaskResumeAll+0xe4>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401782:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 401870 <xTaskResumeAll+0x118>
					prvAddTaskToReadyList( pxTCB );
  401786:	4f2e      	ldr	r7, [pc, #184]	; (401840 <xTaskResumeAll+0xe8>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401788:	6833      	ldr	r3, [r6, #0]
  40178a:	b33b      	cbz	r3, 4017dc <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  40178c:	68f3      	ldr	r3, [r6, #12]
  40178e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401790:	f104 0018 	add.w	r0, r4, #24
  401794:	47c0      	blx	r8
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401796:	1d25      	adds	r5, r4, #4
  401798:	4628      	mov	r0, r5
  40179a:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  40179c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40179e:	683a      	ldr	r2, [r7, #0]
  4017a0:	2301      	movs	r3, #1
  4017a2:	4083      	lsls	r3, r0
  4017a4:	4313      	orrs	r3, r2
  4017a6:	603b      	str	r3, [r7, #0]
  4017a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4017ac:	4629      	mov	r1, r5
  4017ae:	4b25      	ldr	r3, [pc, #148]	; (401844 <xTaskResumeAll+0xec>)
  4017b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4017b4:	4b24      	ldr	r3, [pc, #144]	; (401848 <xTaskResumeAll+0xf0>)
  4017b6:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4017b8:	4b24      	ldr	r3, [pc, #144]	; (40184c <xTaskResumeAll+0xf4>)
  4017ba:	681b      	ldr	r3, [r3, #0]
  4017bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4017c0:	429a      	cmp	r2, r3
  4017c2:	d3e1      	bcc.n	401788 <xTaskResumeAll+0x30>
						xYieldPending = pdTRUE;
  4017c4:	2201      	movs	r2, #1
  4017c6:	4b22      	ldr	r3, [pc, #136]	; (401850 <xTaskResumeAll+0xf8>)
  4017c8:	601a      	str	r2, [r3, #0]
  4017ca:	e7dd      	b.n	401788 <xTaskResumeAll+0x30>
	configASSERT( uxSchedulerSuspended );
  4017cc:	f640 0185 	movw	r1, #2181	; 0x885
  4017d0:	4820      	ldr	r0, [pc, #128]	; (401854 <xTaskResumeAll+0xfc>)
  4017d2:	4b21      	ldr	r3, [pc, #132]	; (401858 <xTaskResumeAll+0x100>)
  4017d4:	4798      	blx	r3
  4017d6:	e7c5      	b.n	401764 <xTaskResumeAll+0xc>
BaseType_t xAlreadyYielded = pdFALSE;
  4017d8:	2400      	movs	r4, #0
  4017da:	e021      	b.n	401820 <xTaskResumeAll+0xc8>
				if( pxTCB != NULL )
  4017dc:	b10c      	cbz	r4, 4017e2 <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
  4017de:	4b1f      	ldr	r3, [pc, #124]	; (40185c <xTaskResumeAll+0x104>)
  4017e0:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  4017e2:	4b1f      	ldr	r3, [pc, #124]	; (401860 <xTaskResumeAll+0x108>)
  4017e4:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  4017e6:	b16c      	cbz	r4, 401804 <xTaskResumeAll+0xac>
							if( xTaskIncrementTick() != pdFALSE )
  4017e8:	4d1e      	ldr	r5, [pc, #120]	; (401864 <xTaskResumeAll+0x10c>)
								xYieldPending = pdTRUE;
  4017ea:	4f19      	ldr	r7, [pc, #100]	; (401850 <xTaskResumeAll+0xf8>)
  4017ec:	2601      	movs	r6, #1
  4017ee:	e001      	b.n	4017f4 <xTaskResumeAll+0x9c>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  4017f0:	3c01      	subs	r4, #1
  4017f2:	d004      	beq.n	4017fe <xTaskResumeAll+0xa6>
							if( xTaskIncrementTick() != pdFALSE )
  4017f4:	47a8      	blx	r5
  4017f6:	2800      	cmp	r0, #0
  4017f8:	d0fa      	beq.n	4017f0 <xTaskResumeAll+0x98>
								xYieldPending = pdTRUE;
  4017fa:	603e      	str	r6, [r7, #0]
  4017fc:	e7f8      	b.n	4017f0 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
  4017fe:	2200      	movs	r2, #0
  401800:	4b17      	ldr	r3, [pc, #92]	; (401860 <xTaskResumeAll+0x108>)
  401802:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
  401804:	4b12      	ldr	r3, [pc, #72]	; (401850 <xTaskResumeAll+0xf8>)
  401806:	681b      	ldr	r3, [r3, #0]
  401808:	b17b      	cbz	r3, 40182a <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
  40180a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40180e:	4b16      	ldr	r3, [pc, #88]	; (401868 <xTaskResumeAll+0x110>)
  401810:	601a      	str	r2, [r3, #0]
  401812:	f3bf 8f4f 	dsb	sy
  401816:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  40181a:	2401      	movs	r4, #1
  40181c:	e000      	b.n	401820 <xTaskResumeAll+0xc8>
BaseType_t xAlreadyYielded = pdFALSE;
  40181e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401820:	4b12      	ldr	r3, [pc, #72]	; (40186c <xTaskResumeAll+0x114>)
  401822:	4798      	blx	r3
}
  401824:	4620      	mov	r0, r4
  401826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
  40182a:	2400      	movs	r4, #0
  40182c:	e7f8      	b.n	401820 <xTaskResumeAll+0xc8>
  40182e:	bf00      	nop
  401830:	20000530 	.word	0x20000530
  401834:	004002c5 	.word	0x004002c5
  401838:	20000524 	.word	0x20000524
  40183c:	20000570 	.word	0x20000570
  401840:	20000538 	.word	0x20000538
  401844:	20000484 	.word	0x20000484
  401848:	00400181 	.word	0x00400181
  40184c:	20000478 	.word	0x20000478
  401850:	200005b4 	.word	0x200005b4
  401854:	00402de0 	.word	0x00402de0
  401858:	004029d9 	.word	0x004029d9
  40185c:	00401041 	.word	0x00401041
  401860:	2000052c 	.word	0x2000052c
  401864:	0040161d 	.word	0x0040161d
  401868:	e000ed04 	.word	0xe000ed04
  40186c:	0040030d 	.word	0x0040030d
  401870:	004001cd 	.word	0x004001cd

00401874 <vTaskDelay>:
	{
  401874:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  401876:	b160      	cbz	r0, 401892 <vTaskDelay+0x1e>
  401878:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  40187a:	4b0d      	ldr	r3, [pc, #52]	; (4018b0 <vTaskDelay+0x3c>)
  40187c:	681b      	ldr	r3, [r3, #0]
  40187e:	b98b      	cbnz	r3, 4018a4 <vTaskDelay+0x30>
			vTaskSuspendAll();
  401880:	4b0c      	ldr	r3, [pc, #48]	; (4018b4 <vTaskDelay+0x40>)
  401882:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  401884:	2100      	movs	r1, #0
  401886:	4620      	mov	r0, r4
  401888:	4b0b      	ldr	r3, [pc, #44]	; (4018b8 <vTaskDelay+0x44>)
  40188a:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  40188c:	4b0b      	ldr	r3, [pc, #44]	; (4018bc <vTaskDelay+0x48>)
  40188e:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  401890:	b938      	cbnz	r0, 4018a2 <vTaskDelay+0x2e>
			portYIELD_WITHIN_API();
  401892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401896:	4b0a      	ldr	r3, [pc, #40]	; (4018c0 <vTaskDelay+0x4c>)
  401898:	601a      	str	r2, [r3, #0]
  40189a:	f3bf 8f4f 	dsb	sy
  40189e:	f3bf 8f6f 	isb	sy
  4018a2:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
  4018a4:	f240 513c 	movw	r1, #1340	; 0x53c
  4018a8:	4806      	ldr	r0, [pc, #24]	; (4018c4 <vTaskDelay+0x50>)
  4018aa:	4b07      	ldr	r3, [pc, #28]	; (4018c8 <vTaskDelay+0x54>)
  4018ac:	4798      	blx	r3
  4018ae:	e7e7      	b.n	401880 <vTaskDelay+0xc>
  4018b0:	20000530 	.word	0x20000530
  4018b4:	00401601 	.word	0x00401601
  4018b8:	00401131 	.word	0x00401131
  4018bc:	00401759 	.word	0x00401759
  4018c0:	e000ed04 	.word	0xe000ed04
  4018c4:	00402de0 	.word	0x00402de0
  4018c8:	004029d9 	.word	0x004029d9

004018cc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4018cc:	4b2b      	ldr	r3, [pc, #172]	; (40197c <vTaskSwitchContext+0xb0>)
  4018ce:	681b      	ldr	r3, [r3, #0]
  4018d0:	2b00      	cmp	r3, #0
  4018d2:	d134      	bne.n	40193e <vTaskSwitchContext+0x72>
{
  4018d4:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4018d6:	2200      	movs	r2, #0
  4018d8:	4b29      	ldr	r3, [pc, #164]	; (401980 <vTaskSwitchContext+0xb4>)
  4018da:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4018dc:	4b29      	ldr	r3, [pc, #164]	; (401984 <vTaskSwitchContext+0xb8>)
  4018de:	681b      	ldr	r3, [r3, #0]
  4018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4018e2:	681a      	ldr	r2, [r3, #0]
  4018e4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4018e8:	d02d      	beq.n	401946 <vTaskSwitchContext+0x7a>
  4018ea:	4b26      	ldr	r3, [pc, #152]	; (401984 <vTaskSwitchContext+0xb8>)
  4018ec:	6818      	ldr	r0, [r3, #0]
  4018ee:	6819      	ldr	r1, [r3, #0]
  4018f0:	3134      	adds	r1, #52	; 0x34
  4018f2:	4b25      	ldr	r3, [pc, #148]	; (401988 <vTaskSwitchContext+0xbc>)
  4018f4:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4018f6:	4b25      	ldr	r3, [pc, #148]	; (40198c <vTaskSwitchContext+0xc0>)
  4018f8:	681c      	ldr	r4, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  4018fa:	fab4 f484 	clz	r4, r4
  4018fe:	b2e4      	uxtb	r4, r4
  401900:	f1c4 041f 	rsb	r4, r4, #31
  401904:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  401908:	009b      	lsls	r3, r3, #2
  40190a:	4a21      	ldr	r2, [pc, #132]	; (401990 <vTaskSwitchContext+0xc4>)
  40190c:	58d3      	ldr	r3, [r2, r3]
  40190e:	b33b      	cbz	r3, 401960 <vTaskSwitchContext+0x94>
  401910:	4b1f      	ldr	r3, [pc, #124]	; (401990 <vTaskSwitchContext+0xc4>)
  401912:	00a2      	lsls	r2, r4, #2
  401914:	1911      	adds	r1, r2, r4
  401916:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  40191a:	6848      	ldr	r0, [r1, #4]
  40191c:	6840      	ldr	r0, [r0, #4]
  40191e:	6048      	str	r0, [r1, #4]
  401920:	4422      	add	r2, r4
  401922:	460b      	mov	r3, r1
  401924:	3308      	adds	r3, #8
  401926:	4298      	cmp	r0, r3
  401928:	d020      	beq.n	40196c <vTaskSwitchContext+0xa0>
  40192a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40192e:	4b18      	ldr	r3, [pc, #96]	; (401990 <vTaskSwitchContext+0xc4>)
  401930:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  401934:	6863      	ldr	r3, [r4, #4]
  401936:	68da      	ldr	r2, [r3, #12]
  401938:	4b12      	ldr	r3, [pc, #72]	; (401984 <vTaskSwitchContext+0xb8>)
  40193a:	601a      	str	r2, [r3, #0]
  40193c:	bd10      	pop	{r4, pc}
		xYieldPending = pdTRUE;
  40193e:	2201      	movs	r2, #1
  401940:	4b0f      	ldr	r3, [pc, #60]	; (401980 <vTaskSwitchContext+0xb4>)
  401942:	601a      	str	r2, [r3, #0]
  401944:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  401946:	685a      	ldr	r2, [r3, #4]
  401948:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40194c:	d1cd      	bne.n	4018ea <vTaskSwitchContext+0x1e>
  40194e:	689a      	ldr	r2, [r3, #8]
  401950:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401954:	d1c9      	bne.n	4018ea <vTaskSwitchContext+0x1e>
  401956:	68db      	ldr	r3, [r3, #12]
  401958:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  40195c:	d1c5      	bne.n	4018ea <vTaskSwitchContext+0x1e>
  40195e:	e7ca      	b.n	4018f6 <vTaskSwitchContext+0x2a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401960:	f640 31b7 	movw	r1, #2999	; 0xbb7
  401964:	480b      	ldr	r0, [pc, #44]	; (401994 <vTaskSwitchContext+0xc8>)
  401966:	4b0c      	ldr	r3, [pc, #48]	; (401998 <vTaskSwitchContext+0xcc>)
  401968:	4798      	blx	r3
  40196a:	e7d1      	b.n	401910 <vTaskSwitchContext+0x44>
  40196c:	6841      	ldr	r1, [r0, #4]
  40196e:	4613      	mov	r3, r2
  401970:	4a07      	ldr	r2, [pc, #28]	; (401990 <vTaskSwitchContext+0xc4>)
  401972:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401976:	6059      	str	r1, [r3, #4]
  401978:	e7d7      	b.n	40192a <vTaskSwitchContext+0x5e>
  40197a:	bf00      	nop
  40197c:	20000530 	.word	0x20000530
  401980:	200005b4 	.word	0x200005b4
  401984:	20000478 	.word	0x20000478
  401988:	00402a19 	.word	0x00402a19
  40198c:	20000538 	.word	0x20000538
  401990:	20000484 	.word	0x20000484
  401994:	00402de0 	.word	0x00402de0
  401998:	004029d9 	.word	0x004029d9

0040199c <vTaskSuspend>:
	{
  40199c:	b538      	push	{r3, r4, r5, lr}
  40199e:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
  4019a0:	4b2f      	ldr	r3, [pc, #188]	; (401a60 <vTaskSuspend+0xc4>)
  4019a2:	4798      	blx	r3
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
  4019a4:	2c00      	cmp	r4, #0
  4019a6:	d02f      	beq.n	401a08 <vTaskSuspend+0x6c>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  4019a8:	1d25      	adds	r5, r4, #4
  4019aa:	4628      	mov	r0, r5
  4019ac:	4b2d      	ldr	r3, [pc, #180]	; (401a64 <vTaskSuspend+0xc8>)
  4019ae:	4798      	blx	r3
  4019b0:	b970      	cbnz	r0, 4019d0 <vTaskSuspend+0x34>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4019b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4019b4:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  4019b8:	009b      	lsls	r3, r3, #2
  4019ba:	492b      	ldr	r1, [pc, #172]	; (401a68 <vTaskSuspend+0xcc>)
  4019bc:	58cb      	ldr	r3, [r1, r3]
  4019be:	b93b      	cbnz	r3, 4019d0 <vTaskSuspend+0x34>
  4019c0:	482a      	ldr	r0, [pc, #168]	; (401a6c <vTaskSuspend+0xd0>)
  4019c2:	6803      	ldr	r3, [r0, #0]
  4019c4:	2101      	movs	r1, #1
  4019c6:	fa01 f202 	lsl.w	r2, r1, r2
  4019ca:	ea23 0202 	bic.w	r2, r3, r2
  4019ce:	6002      	str	r2, [r0, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4019d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4019d2:	b11b      	cbz	r3, 4019dc <vTaskSuspend+0x40>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4019d4:	f104 0018 	add.w	r0, r4, #24
  4019d8:	4b22      	ldr	r3, [pc, #136]	; (401a64 <vTaskSuspend+0xc8>)
  4019da:	4798      	blx	r3
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
  4019dc:	4629      	mov	r1, r5
  4019de:	4824      	ldr	r0, [pc, #144]	; (401a70 <vTaskSuspend+0xd4>)
  4019e0:	4b24      	ldr	r3, [pc, #144]	; (401a74 <vTaskSuspend+0xd8>)
  4019e2:	4798      	blx	r3
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
  4019e4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
  4019e8:	b2db      	uxtb	r3, r3
  4019ea:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  4019ec:	bf04      	itt	eq
  4019ee:	2300      	moveq	r3, #0
  4019f0:	f884 3060 	strbeq.w	r3, [r4, #96]	; 0x60
		taskEXIT_CRITICAL();
  4019f4:	4b20      	ldr	r3, [pc, #128]	; (401a78 <vTaskSuspend+0xdc>)
  4019f6:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  4019f8:	4b20      	ldr	r3, [pc, #128]	; (401a7c <vTaskSuspend+0xe0>)
  4019fa:	681b      	ldr	r3, [r3, #0]
  4019fc:	b93b      	cbnz	r3, 401a0e <vTaskSuspend+0x72>
		if( pxTCB == pxCurrentTCB )
  4019fe:	4b20      	ldr	r3, [pc, #128]	; (401a80 <vTaskSuspend+0xe4>)
  401a00:	681b      	ldr	r3, [r3, #0]
  401a02:	429c      	cmp	r4, r3
  401a04:	d00a      	beq.n	401a1c <vTaskSuspend+0x80>
  401a06:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
  401a08:	4b1d      	ldr	r3, [pc, #116]	; (401a80 <vTaskSuspend+0xe4>)
  401a0a:	681c      	ldr	r4, [r3, #0]
  401a0c:	e7cc      	b.n	4019a8 <vTaskSuspend+0xc>
			taskENTER_CRITICAL();
  401a0e:	4b14      	ldr	r3, [pc, #80]	; (401a60 <vTaskSuspend+0xc4>)
  401a10:	4798      	blx	r3
				prvResetNextTaskUnblockTime();
  401a12:	4b1c      	ldr	r3, [pc, #112]	; (401a84 <vTaskSuspend+0xe8>)
  401a14:	4798      	blx	r3
			taskEXIT_CRITICAL();
  401a16:	4b18      	ldr	r3, [pc, #96]	; (401a78 <vTaskSuspend+0xdc>)
  401a18:	4798      	blx	r3
  401a1a:	e7f0      	b.n	4019fe <vTaskSuspend+0x62>
			if( xSchedulerRunning != pdFALSE )
  401a1c:	4b17      	ldr	r3, [pc, #92]	; (401a7c <vTaskSuspend+0xe0>)
  401a1e:	681b      	ldr	r3, [r3, #0]
  401a20:	b18b      	cbz	r3, 401a46 <vTaskSuspend+0xaa>
				configASSERT( uxSchedulerSuspended == 0 );
  401a22:	4b19      	ldr	r3, [pc, #100]	; (401a88 <vTaskSuspend+0xec>)
  401a24:	681b      	ldr	r3, [r3, #0]
  401a26:	b943      	cbnz	r3, 401a3a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
  401a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401a2c:	4b17      	ldr	r3, [pc, #92]	; (401a8c <vTaskSuspend+0xf0>)
  401a2e:	601a      	str	r2, [r3, #0]
  401a30:	f3bf 8f4f 	dsb	sy
  401a34:	f3bf 8f6f 	isb	sy
  401a38:	bd38      	pop	{r3, r4, r5, pc}
				configASSERT( uxSchedulerSuspended == 0 );
  401a3a:	f240 61e4 	movw	r1, #1764	; 0x6e4
  401a3e:	4814      	ldr	r0, [pc, #80]	; (401a90 <vTaskSuspend+0xf4>)
  401a40:	4b14      	ldr	r3, [pc, #80]	; (401a94 <vTaskSuspend+0xf8>)
  401a42:	4798      	blx	r3
  401a44:	e7f0      	b.n	401a28 <vTaskSuspend+0x8c>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
  401a46:	4b0a      	ldr	r3, [pc, #40]	; (401a70 <vTaskSuspend+0xd4>)
  401a48:	681a      	ldr	r2, [r3, #0]
  401a4a:	4b13      	ldr	r3, [pc, #76]	; (401a98 <vTaskSuspend+0xfc>)
  401a4c:	681b      	ldr	r3, [r3, #0]
  401a4e:	429a      	cmp	r2, r3
  401a50:	d002      	beq.n	401a58 <vTaskSuspend+0xbc>
					vTaskSwitchContext();
  401a52:	4b12      	ldr	r3, [pc, #72]	; (401a9c <vTaskSuspend+0x100>)
  401a54:	4798      	blx	r3
	}
  401a56:	e7d6      	b.n	401a06 <vTaskSuspend+0x6a>
					pxCurrentTCB = NULL;
  401a58:	2200      	movs	r2, #0
  401a5a:	4b09      	ldr	r3, [pc, #36]	; (401a80 <vTaskSuspend+0xe4>)
  401a5c:	601a      	str	r2, [r3, #0]
  401a5e:	bd38      	pop	{r3, r4, r5, pc}
  401a60:	004002c5 	.word	0x004002c5
  401a64:	004001cd 	.word	0x004001cd
  401a68:	20000484 	.word	0x20000484
  401a6c:	20000538 	.word	0x20000538
  401a70:	20000588 	.word	0x20000588
  401a74:	00400181 	.word	0x00400181
  401a78:	0040030d 	.word	0x0040030d
  401a7c:	20000584 	.word	0x20000584
  401a80:	20000478 	.word	0x20000478
  401a84:	00401041 	.word	0x00401041
  401a88:	20000530 	.word	0x20000530
  401a8c:	e000ed04 	.word	0xe000ed04
  401a90:	00402de0 	.word	0x00402de0
  401a94:	004029d9 	.word	0x004029d9
  401a98:	20000524 	.word	0x20000524
  401a9c:	004018cd 	.word	0x004018cd

00401aa0 <vTaskPlaceOnEventList>:
{
  401aa0:	b538      	push	{r3, r4, r5, lr}
  401aa2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
  401aa4:	4605      	mov	r5, r0
  401aa6:	b150      	cbz	r0, 401abe <vTaskPlaceOnEventList+0x1e>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401aa8:	4b08      	ldr	r3, [pc, #32]	; (401acc <vTaskPlaceOnEventList+0x2c>)
  401aaa:	6819      	ldr	r1, [r3, #0]
  401aac:	3118      	adds	r1, #24
  401aae:	4628      	mov	r0, r5
  401ab0:	4b07      	ldr	r3, [pc, #28]	; (401ad0 <vTaskPlaceOnEventList+0x30>)
  401ab2:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  401ab4:	2101      	movs	r1, #1
  401ab6:	4620      	mov	r0, r4
  401ab8:	4b06      	ldr	r3, [pc, #24]	; (401ad4 <vTaskPlaceOnEventList+0x34>)
  401aba:	4798      	blx	r3
  401abc:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxEventList );
  401abe:	f640 31ce 	movw	r1, #3022	; 0xbce
  401ac2:	4805      	ldr	r0, [pc, #20]	; (401ad8 <vTaskPlaceOnEventList+0x38>)
  401ac4:	4b05      	ldr	r3, [pc, #20]	; (401adc <vTaskPlaceOnEventList+0x3c>)
  401ac6:	4798      	blx	r3
  401ac8:	e7ee      	b.n	401aa8 <vTaskPlaceOnEventList+0x8>
  401aca:	bf00      	nop
  401acc:	20000478 	.word	0x20000478
  401ad0:	00400199 	.word	0x00400199
  401ad4:	00401131 	.word	0x00401131
  401ad8:	00402de0 	.word	0x00402de0
  401adc:	004029d9 	.word	0x004029d9

00401ae0 <vTaskPlaceOnEventListRestricted>:
	{
  401ae0:	b570      	push	{r4, r5, r6, lr}
  401ae2:	460d      	mov	r5, r1
  401ae4:	4614      	mov	r4, r2
		configASSERT( pxEventList );
  401ae6:	4606      	mov	r6, r0
  401ae8:	b170      	cbz	r0, 401b08 <vTaskPlaceOnEventListRestricted+0x28>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401aea:	4b0a      	ldr	r3, [pc, #40]	; (401b14 <vTaskPlaceOnEventListRestricted+0x34>)
  401aec:	6819      	ldr	r1, [r3, #0]
  401aee:	3118      	adds	r1, #24
  401af0:	4630      	mov	r0, r6
  401af2:	4b09      	ldr	r3, [pc, #36]	; (401b18 <vTaskPlaceOnEventListRestricted+0x38>)
  401af4:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
  401af6:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  401af8:	4621      	mov	r1, r4
  401afa:	bf0c      	ite	eq
  401afc:	4628      	moveq	r0, r5
  401afe:	f04f 30ff 	movne.w	r0, #4294967295
  401b02:	4b06      	ldr	r3, [pc, #24]	; (401b1c <vTaskPlaceOnEventListRestricted+0x3c>)
  401b04:	4798      	blx	r3
  401b06:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
  401b08:	f640 31f9 	movw	r1, #3065	; 0xbf9
  401b0c:	4804      	ldr	r0, [pc, #16]	; (401b20 <vTaskPlaceOnEventListRestricted+0x40>)
  401b0e:	4b05      	ldr	r3, [pc, #20]	; (401b24 <vTaskPlaceOnEventListRestricted+0x44>)
  401b10:	4798      	blx	r3
  401b12:	e7ea      	b.n	401aea <vTaskPlaceOnEventListRestricted+0xa>
  401b14:	20000478 	.word	0x20000478
  401b18:	00400181 	.word	0x00400181
  401b1c:	00401131 	.word	0x00401131
  401b20:	00402de0 	.word	0x00402de0
  401b24:	004029d9 	.word	0x004029d9

00401b28 <xTaskRemoveFromEventList>:
{
  401b28:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401b2a:	68c3      	ldr	r3, [r0, #12]
  401b2c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401b2e:	b32c      	cbz	r4, 401b7c <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401b30:	f104 0518 	add.w	r5, r4, #24
  401b34:	4628      	mov	r0, r5
  401b36:	4b17      	ldr	r3, [pc, #92]	; (401b94 <xTaskRemoveFromEventList+0x6c>)
  401b38:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401b3a:	4b17      	ldr	r3, [pc, #92]	; (401b98 <xTaskRemoveFromEventList+0x70>)
  401b3c:	681b      	ldr	r3, [r3, #0]
  401b3e:	bb1b      	cbnz	r3, 401b88 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  401b40:	1d25      	adds	r5, r4, #4
  401b42:	4628      	mov	r0, r5
  401b44:	4b13      	ldr	r3, [pc, #76]	; (401b94 <xTaskRemoveFromEventList+0x6c>)
  401b46:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401b48:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401b4a:	4a14      	ldr	r2, [pc, #80]	; (401b9c <xTaskRemoveFromEventList+0x74>)
  401b4c:	6811      	ldr	r1, [r2, #0]
  401b4e:	2301      	movs	r3, #1
  401b50:	4083      	lsls	r3, r0
  401b52:	430b      	orrs	r3, r1
  401b54:	6013      	str	r3, [r2, #0]
  401b56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401b5a:	4629      	mov	r1, r5
  401b5c:	4b10      	ldr	r3, [pc, #64]	; (401ba0 <xTaskRemoveFromEventList+0x78>)
  401b5e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401b62:	4b10      	ldr	r3, [pc, #64]	; (401ba4 <xTaskRemoveFromEventList+0x7c>)
  401b64:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401b66:	4b10      	ldr	r3, [pc, #64]	; (401ba8 <xTaskRemoveFromEventList+0x80>)
  401b68:	681b      	ldr	r3, [r3, #0]
  401b6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401b6e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
  401b70:	bf83      	ittte	hi
  401b72:	2001      	movhi	r0, #1
  401b74:	4b0d      	ldrhi	r3, [pc, #52]	; (401bac <xTaskRemoveFromEventList+0x84>)
  401b76:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
  401b78:	2000      	movls	r0, #0
}
  401b7a:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxUnblockedTCB );
  401b7c:	f640 4129 	movw	r1, #3113	; 0xc29
  401b80:	480b      	ldr	r0, [pc, #44]	; (401bb0 <xTaskRemoveFromEventList+0x88>)
  401b82:	4b0c      	ldr	r3, [pc, #48]	; (401bb4 <xTaskRemoveFromEventList+0x8c>)
  401b84:	4798      	blx	r3
  401b86:	e7d3      	b.n	401b30 <xTaskRemoveFromEventList+0x8>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401b88:	4629      	mov	r1, r5
  401b8a:	480b      	ldr	r0, [pc, #44]	; (401bb8 <xTaskRemoveFromEventList+0x90>)
  401b8c:	4b05      	ldr	r3, [pc, #20]	; (401ba4 <xTaskRemoveFromEventList+0x7c>)
  401b8e:	4798      	blx	r3
  401b90:	e7e9      	b.n	401b66 <xTaskRemoveFromEventList+0x3e>
  401b92:	bf00      	nop
  401b94:	004001cd 	.word	0x004001cd
  401b98:	20000530 	.word	0x20000530
  401b9c:	20000538 	.word	0x20000538
  401ba0:	20000484 	.word	0x20000484
  401ba4:	00400181 	.word	0x00400181
  401ba8:	20000478 	.word	0x20000478
  401bac:	200005b4 	.word	0x200005b4
  401bb0:	00402de0 	.word	0x00402de0
  401bb4:	004029d9 	.word	0x004029d9
  401bb8:	20000570 	.word	0x20000570

00401bbc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401bbc:	4b03      	ldr	r3, [pc, #12]	; (401bcc <vTaskInternalSetTimeOutState+0x10>)
  401bbe:	681b      	ldr	r3, [r3, #0]
  401bc0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401bc2:	4b03      	ldr	r3, [pc, #12]	; (401bd0 <vTaskInternalSetTimeOutState+0x14>)
  401bc4:	681b      	ldr	r3, [r3, #0]
  401bc6:	6043      	str	r3, [r0, #4]
  401bc8:	4770      	bx	lr
  401bca:	bf00      	nop
  401bcc:	2000056c 	.word	0x2000056c
  401bd0:	200005b0 	.word	0x200005b0

00401bd4 <xTaskCheckForTimeOut>:
{
  401bd4:	b570      	push	{r4, r5, r6, lr}
  401bd6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
  401bd8:	4605      	mov	r5, r0
  401bda:	b1d0      	cbz	r0, 401c12 <xTaskCheckForTimeOut+0x3e>
	configASSERT( pxTicksToWait );
  401bdc:	b1fc      	cbz	r4, 401c1e <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
  401bde:	4b18      	ldr	r3, [pc, #96]	; (401c40 <xTaskCheckForTimeOut+0x6c>)
  401be0:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  401be2:	4b18      	ldr	r3, [pc, #96]	; (401c44 <xTaskCheckForTimeOut+0x70>)
  401be4:	681b      	ldr	r3, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  401be6:	6822      	ldr	r2, [r4, #0]
  401be8:	f1b2 3fff 	cmp.w	r2, #4294967295
  401bec:	d024      	beq.n	401c38 <xTaskCheckForTimeOut+0x64>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  401bee:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401bf0:	4815      	ldr	r0, [pc, #84]	; (401c48 <xTaskCheckForTimeOut+0x74>)
  401bf2:	6800      	ldr	r0, [r0, #0]
  401bf4:	682e      	ldr	r6, [r5, #0]
  401bf6:	4286      	cmp	r6, r0
  401bf8:	d001      	beq.n	401bfe <xTaskCheckForTimeOut+0x2a>
  401bfa:	428b      	cmp	r3, r1
  401bfc:	d21e      	bcs.n	401c3c <xTaskCheckForTimeOut+0x68>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  401bfe:	1a5b      	subs	r3, r3, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  401c00:	4293      	cmp	r3, r2
  401c02:	d312      	bcc.n	401c2a <xTaskCheckForTimeOut+0x56>
			*pxTicksToWait = 0;
  401c04:	2300      	movs	r3, #0
  401c06:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
  401c08:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  401c0a:	4b10      	ldr	r3, [pc, #64]	; (401c4c <xTaskCheckForTimeOut+0x78>)
  401c0c:	4798      	blx	r3
}
  401c0e:	4620      	mov	r0, r4
  401c10:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
  401c12:	f640 4194 	movw	r1, #3220	; 0xc94
  401c16:	480e      	ldr	r0, [pc, #56]	; (401c50 <xTaskCheckForTimeOut+0x7c>)
  401c18:	4b0e      	ldr	r3, [pc, #56]	; (401c54 <xTaskCheckForTimeOut+0x80>)
  401c1a:	4798      	blx	r3
  401c1c:	e7de      	b.n	401bdc <xTaskCheckForTimeOut+0x8>
	configASSERT( pxTicksToWait );
  401c1e:	f640 4195 	movw	r1, #3221	; 0xc95
  401c22:	480b      	ldr	r0, [pc, #44]	; (401c50 <xTaskCheckForTimeOut+0x7c>)
  401c24:	4b0b      	ldr	r3, [pc, #44]	; (401c54 <xTaskCheckForTimeOut+0x80>)
  401c26:	4798      	blx	r3
  401c28:	e7d9      	b.n	401bde <xTaskCheckForTimeOut+0xa>
			*pxTicksToWait -= xElapsedTime;
  401c2a:	1ad3      	subs	r3, r2, r3
  401c2c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  401c2e:	4628      	mov	r0, r5
  401c30:	4b09      	ldr	r3, [pc, #36]	; (401c58 <xTaskCheckForTimeOut+0x84>)
  401c32:	4798      	blx	r3
			xReturn = pdFALSE;
  401c34:	2400      	movs	r4, #0
  401c36:	e7e8      	b.n	401c0a <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
  401c38:	2400      	movs	r4, #0
  401c3a:	e7e6      	b.n	401c0a <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
  401c3c:	2401      	movs	r4, #1
  401c3e:	e7e4      	b.n	401c0a <xTaskCheckForTimeOut+0x36>
  401c40:	004002c5 	.word	0x004002c5
  401c44:	200005b0 	.word	0x200005b0
  401c48:	2000056c 	.word	0x2000056c
  401c4c:	0040030d 	.word	0x0040030d
  401c50:	00402de0 	.word	0x00402de0
  401c54:	004029d9 	.word	0x004029d9
  401c58:	00401bbd 	.word	0x00401bbd

00401c5c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  401c5c:	2201      	movs	r2, #1
  401c5e:	4b01      	ldr	r3, [pc, #4]	; (401c64 <vTaskMissedYield+0x8>)
  401c60:	601a      	str	r2, [r3, #0]
  401c62:	4770      	bx	lr
  401c64:	200005b4 	.word	0x200005b4

00401c68 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
  401c68:	4b05      	ldr	r3, [pc, #20]	; (401c80 <xTaskGetSchedulerState+0x18>)
  401c6a:	681b      	ldr	r3, [r3, #0]
  401c6c:	b133      	cbz	r3, 401c7c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c6e:	4b05      	ldr	r3, [pc, #20]	; (401c84 <xTaskGetSchedulerState+0x1c>)
  401c70:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
  401c72:	2b00      	cmp	r3, #0
  401c74:	bf0c      	ite	eq
  401c76:	2002      	moveq	r0, #2
  401c78:	2000      	movne	r0, #0
  401c7a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  401c7c:	2001      	movs	r0, #1
	}
  401c7e:	4770      	bx	lr
  401c80:	20000584 	.word	0x20000584
  401c84:	20000530 	.word	0x20000530

00401c88 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  401c88:	2800      	cmp	r0, #0
  401c8a:	d046      	beq.n	401d1a <xTaskPriorityDisinherit+0x92>
	{
  401c8c:	b538      	push	{r3, r4, r5, lr}
  401c8e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
  401c90:	4b24      	ldr	r3, [pc, #144]	; (401d24 <xTaskPriorityDisinherit+0x9c>)
  401c92:	681b      	ldr	r3, [r3, #0]
  401c94:	4298      	cmp	r0, r3
  401c96:	d004      	beq.n	401ca2 <xTaskPriorityDisinherit+0x1a>
  401c98:	f640 71d1 	movw	r1, #4049	; 0xfd1
  401c9c:	4822      	ldr	r0, [pc, #136]	; (401d28 <xTaskPriorityDisinherit+0xa0>)
  401c9e:	4b23      	ldr	r3, [pc, #140]	; (401d2c <xTaskPriorityDisinherit+0xa4>)
  401ca0:	4798      	blx	r3
			configASSERT( pxTCB->uxMutexesHeld );
  401ca2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401ca4:	b14b      	cbz	r3, 401cba <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
  401ca6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401ca8:	3b01      	subs	r3, #1
  401caa:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401cac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401cae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  401cb0:	4291      	cmp	r1, r2
  401cb2:	d034      	beq.n	401d1e <xTaskPriorityDisinherit+0x96>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401cb4:	b13b      	cbz	r3, 401cc6 <xTaskPriorityDisinherit+0x3e>
	BaseType_t xReturn = pdFALSE;
  401cb6:	2000      	movs	r0, #0
	}
  401cb8:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB->uxMutexesHeld );
  401cba:	f640 71d2 	movw	r1, #4050	; 0xfd2
  401cbe:	481a      	ldr	r0, [pc, #104]	; (401d28 <xTaskPriorityDisinherit+0xa0>)
  401cc0:	4b1a      	ldr	r3, [pc, #104]	; (401d2c <xTaskPriorityDisinherit+0xa4>)
  401cc2:	4798      	blx	r3
  401cc4:	e7ef      	b.n	401ca6 <xTaskPriorityDisinherit+0x1e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401cc6:	1d25      	adds	r5, r4, #4
  401cc8:	4628      	mov	r0, r5
  401cca:	4b19      	ldr	r3, [pc, #100]	; (401d30 <xTaskPriorityDisinherit+0xa8>)
  401ccc:	4798      	blx	r3
  401cce:	b970      	cbnz	r0, 401cee <xTaskPriorityDisinherit+0x66>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401cd0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401cd2:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  401cd6:	009b      	lsls	r3, r3, #2
  401cd8:	4916      	ldr	r1, [pc, #88]	; (401d34 <xTaskPriorityDisinherit+0xac>)
  401cda:	58cb      	ldr	r3, [r1, r3]
  401cdc:	b93b      	cbnz	r3, 401cee <xTaskPriorityDisinherit+0x66>
  401cde:	4816      	ldr	r0, [pc, #88]	; (401d38 <xTaskPriorityDisinherit+0xb0>)
  401ce0:	6803      	ldr	r3, [r0, #0]
  401ce2:	2101      	movs	r1, #1
  401ce4:	fa01 f202 	lsl.w	r2, r1, r2
  401ce8:	ea23 0202 	bic.w	r2, r3, r2
  401cec:	6002      	str	r2, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401cee:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  401cf0:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401cf2:	f1c0 0308 	rsb	r3, r0, #8
  401cf6:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  401cf8:	4a0f      	ldr	r2, [pc, #60]	; (401d38 <xTaskPriorityDisinherit+0xb0>)
  401cfa:	6811      	ldr	r1, [r2, #0]
  401cfc:	2401      	movs	r4, #1
  401cfe:	fa04 f300 	lsl.w	r3, r4, r0
  401d02:	430b      	orrs	r3, r1
  401d04:	6013      	str	r3, [r2, #0]
  401d06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401d0a:	4629      	mov	r1, r5
  401d0c:	4b09      	ldr	r3, [pc, #36]	; (401d34 <xTaskPriorityDisinherit+0xac>)
  401d0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401d12:	4b0a      	ldr	r3, [pc, #40]	; (401d3c <xTaskPriorityDisinherit+0xb4>)
  401d14:	4798      	blx	r3
					xReturn = pdTRUE;
  401d16:	4620      	mov	r0, r4
  401d18:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  401d1a:	2000      	movs	r0, #0
  401d1c:	4770      	bx	lr
  401d1e:	2000      	movs	r0, #0
  401d20:	bd38      	pop	{r3, r4, r5, pc}
  401d22:	bf00      	nop
  401d24:	20000478 	.word	0x20000478
  401d28:	00402de0 	.word	0x00402de0
  401d2c:	004029d9 	.word	0x004029d9
  401d30:	004001cd 	.word	0x004001cd
  401d34:	20000484 	.word	0x20000484
  401d38:	20000538 	.word	0x20000538
  401d3c:	00400181 	.word	0x00400181

00401d40 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  401d40:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401d42:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401d44:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  401d46:	4291      	cmp	r1, r2
  401d48:	d80c      	bhi.n	401d64 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401d4a:	1ad2      	subs	r2, r2, r3
  401d4c:	6983      	ldr	r3, [r0, #24]
  401d4e:	429a      	cmp	r2, r3
  401d50:	d301      	bcc.n	401d56 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401d52:	2001      	movs	r0, #1
  401d54:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401d56:	1d01      	adds	r1, r0, #4
  401d58:	4b09      	ldr	r3, [pc, #36]	; (401d80 <prvInsertTimerInActiveList+0x40>)
  401d5a:	6818      	ldr	r0, [r3, #0]
  401d5c:	4b09      	ldr	r3, [pc, #36]	; (401d84 <prvInsertTimerInActiveList+0x44>)
  401d5e:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401d60:	2000      	movs	r0, #0
  401d62:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401d64:	429a      	cmp	r2, r3
  401d66:	d201      	bcs.n	401d6c <prvInsertTimerInActiveList+0x2c>
  401d68:	4299      	cmp	r1, r3
  401d6a:	d206      	bcs.n	401d7a <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401d6c:	1d01      	adds	r1, r0, #4
  401d6e:	4b06      	ldr	r3, [pc, #24]	; (401d88 <prvInsertTimerInActiveList+0x48>)
  401d70:	6818      	ldr	r0, [r3, #0]
  401d72:	4b04      	ldr	r3, [pc, #16]	; (401d84 <prvInsertTimerInActiveList+0x44>)
  401d74:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401d76:	2000      	movs	r0, #0
  401d78:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
  401d7a:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
  401d7c:	bd08      	pop	{r3, pc}
  401d7e:	bf00      	nop
  401d80:	200005bc 	.word	0x200005bc
  401d84:	00400199 	.word	0x00400199
  401d88:	200005b8 	.word	0x200005b8

00401d8c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401d8c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401d8e:	4b10      	ldr	r3, [pc, #64]	; (401dd0 <prvCheckForValidListAndQueue+0x44>)
  401d90:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401d92:	4b10      	ldr	r3, [pc, #64]	; (401dd4 <prvCheckForValidListAndQueue+0x48>)
  401d94:	681b      	ldr	r3, [r3, #0]
  401d96:	b113      	cbz	r3, 401d9e <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401d98:	4b0f      	ldr	r3, [pc, #60]	; (401dd8 <prvCheckForValidListAndQueue+0x4c>)
  401d9a:	4798      	blx	r3
  401d9c:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  401d9e:	4d0f      	ldr	r5, [pc, #60]	; (401ddc <prvCheckForValidListAndQueue+0x50>)
  401da0:	4628      	mov	r0, r5
  401da2:	4e0f      	ldr	r6, [pc, #60]	; (401de0 <prvCheckForValidListAndQueue+0x54>)
  401da4:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401da6:	4c0f      	ldr	r4, [pc, #60]	; (401de4 <prvCheckForValidListAndQueue+0x58>)
  401da8:	4620      	mov	r0, r4
  401daa:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401dac:	4b0e      	ldr	r3, [pc, #56]	; (401de8 <prvCheckForValidListAndQueue+0x5c>)
  401dae:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401db0:	4b0e      	ldr	r3, [pc, #56]	; (401dec <prvCheckForValidListAndQueue+0x60>)
  401db2:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401db4:	2200      	movs	r2, #0
  401db6:	2110      	movs	r1, #16
  401db8:	2005      	movs	r0, #5
  401dba:	4b0d      	ldr	r3, [pc, #52]	; (401df0 <prvCheckForValidListAndQueue+0x64>)
  401dbc:	4798      	blx	r3
  401dbe:	4b05      	ldr	r3, [pc, #20]	; (401dd4 <prvCheckForValidListAndQueue+0x48>)
  401dc0:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  401dc2:	2800      	cmp	r0, #0
  401dc4:	d0e8      	beq.n	401d98 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401dc6:	490b      	ldr	r1, [pc, #44]	; (401df4 <prvCheckForValidListAndQueue+0x68>)
  401dc8:	4b0b      	ldr	r3, [pc, #44]	; (401df8 <prvCheckForValidListAndQueue+0x6c>)
  401dca:	4798      	blx	r3
  401dcc:	e7e4      	b.n	401d98 <prvCheckForValidListAndQueue+0xc>
  401dce:	bf00      	nop
  401dd0:	004002c5 	.word	0x004002c5
  401dd4:	200005ec 	.word	0x200005ec
  401dd8:	0040030d 	.word	0x0040030d
  401ddc:	200005c0 	.word	0x200005c0
  401de0:	00400165 	.word	0x00400165
  401de4:	200005d4 	.word	0x200005d4
  401de8:	200005b8 	.word	0x200005b8
  401dec:	200005bc 	.word	0x200005bc
  401df0:	00400ae5 	.word	0x00400ae5
  401df4:	00402e00 	.word	0x00402e00
  401df8:	00400fad 	.word	0x00400fad

00401dfc <xTimerCreateTimerTask>:
{
  401dfc:	b510      	push	{r4, lr}
  401dfe:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
  401e00:	4b0d      	ldr	r3, [pc, #52]	; (401e38 <xTimerCreateTimerTask+0x3c>)
  401e02:	4798      	blx	r3
	if( xTimerQueue != NULL )
  401e04:	4b0d      	ldr	r3, [pc, #52]	; (401e3c <xTimerCreateTimerTask+0x40>)
  401e06:	681b      	ldr	r3, [r3, #0]
  401e08:	b17b      	cbz	r3, 401e2a <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
  401e0a:	4b0d      	ldr	r3, [pc, #52]	; (401e40 <xTimerCreateTimerTask+0x44>)
  401e0c:	9301      	str	r3, [sp, #4]
  401e0e:	2307      	movs	r3, #7
  401e10:	9300      	str	r3, [sp, #0]
  401e12:	2300      	movs	r3, #0
  401e14:	f44f 7282 	mov.w	r2, #260	; 0x104
  401e18:	490a      	ldr	r1, [pc, #40]	; (401e44 <xTimerCreateTimerTask+0x48>)
  401e1a:	480b      	ldr	r0, [pc, #44]	; (401e48 <xTimerCreateTimerTask+0x4c>)
  401e1c:	4c0b      	ldr	r4, [pc, #44]	; (401e4c <xTimerCreateTimerTask+0x50>)
  401e1e:	47a0      	blx	r4
	configASSERT( xReturn );
  401e20:	4603      	mov	r3, r0
  401e22:	b110      	cbz	r0, 401e2a <xTimerCreateTimerTask+0x2e>
}
  401e24:	4618      	mov	r0, r3
  401e26:	b002      	add	sp, #8
  401e28:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
  401e2a:	f240 1113 	movw	r1, #275	; 0x113
  401e2e:	4808      	ldr	r0, [pc, #32]	; (401e50 <xTimerCreateTimerTask+0x54>)
  401e30:	4b08      	ldr	r3, [pc, #32]	; (401e54 <xTimerCreateTimerTask+0x58>)
  401e32:	4798      	blx	r3
  401e34:	2300      	movs	r3, #0
	return xReturn;
  401e36:	e7f5      	b.n	401e24 <xTimerCreateTimerTask+0x28>
  401e38:	00401d8d 	.word	0x00401d8d
  401e3c:	200005ec 	.word	0x200005ec
  401e40:	200005f0 	.word	0x200005f0
  401e44:	00402e08 	.word	0x00402e08
  401e48:	00401f85 	.word	0x00401f85
  401e4c:	004011d5 	.word	0x004011d5
  401e50:	00402e10 	.word	0x00402e10
  401e54:	004029d9 	.word	0x004029d9

00401e58 <xTimerGenericCommand>:
{
  401e58:	b5f0      	push	{r4, r5, r6, r7, lr}
  401e5a:	b085      	sub	sp, #20
  401e5c:	460c      	mov	r4, r1
  401e5e:	4616      	mov	r6, r2
  401e60:	461f      	mov	r7, r3
	configASSERT( xTimer );
  401e62:	4605      	mov	r5, r0
  401e64:	b1b0      	cbz	r0, 401e94 <xTimerGenericCommand+0x3c>
	if( xTimerQueue != NULL )
  401e66:	4b12      	ldr	r3, [pc, #72]	; (401eb0 <xTimerGenericCommand+0x58>)
  401e68:	6818      	ldr	r0, [r3, #0]
  401e6a:	b1f8      	cbz	r0, 401eac <xTimerGenericCommand+0x54>
		xMessage.xMessageID = xCommandID;
  401e6c:	9400      	str	r4, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  401e6e:	9601      	str	r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
  401e70:	9502      	str	r5, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  401e72:	2c05      	cmp	r4, #5
  401e74:	dc14      	bgt.n	401ea0 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401e76:	4b0f      	ldr	r3, [pc, #60]	; (401eb4 <xTimerGenericCommand+0x5c>)
  401e78:	4798      	blx	r3
  401e7a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  401e7c:	f04f 0300 	mov.w	r3, #0
  401e80:	bf0c      	ite	eq
  401e82:	9a0a      	ldreq	r2, [sp, #40]	; 0x28
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401e84:	461a      	movne	r2, r3
  401e86:	4669      	mov	r1, sp
  401e88:	4809      	ldr	r0, [pc, #36]	; (401eb0 <xTimerGenericCommand+0x58>)
  401e8a:	6800      	ldr	r0, [r0, #0]
  401e8c:	4c0a      	ldr	r4, [pc, #40]	; (401eb8 <xTimerGenericCommand+0x60>)
  401e8e:	47a0      	blx	r4
}
  401e90:	b005      	add	sp, #20
  401e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( xTimer );
  401e94:	f44f 71c1 	mov.w	r1, #386	; 0x182
  401e98:	4808      	ldr	r0, [pc, #32]	; (401ebc <xTimerGenericCommand+0x64>)
  401e9a:	4b09      	ldr	r3, [pc, #36]	; (401ec0 <xTimerGenericCommand+0x68>)
  401e9c:	4798      	blx	r3
  401e9e:	e7e2      	b.n	401e66 <xTimerGenericCommand+0xe>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401ea0:	2300      	movs	r3, #0
  401ea2:	463a      	mov	r2, r7
  401ea4:	4669      	mov	r1, sp
  401ea6:	4c07      	ldr	r4, [pc, #28]	; (401ec4 <xTimerGenericCommand+0x6c>)
  401ea8:	47a0      	blx	r4
  401eaa:	e7f1      	b.n	401e90 <xTimerGenericCommand+0x38>
BaseType_t xReturn = pdFAIL;
  401eac:	2000      	movs	r0, #0
	return xReturn;
  401eae:	e7ef      	b.n	401e90 <xTimerGenericCommand+0x38>
  401eb0:	200005ec 	.word	0x200005ec
  401eb4:	00401c69 	.word	0x00401c69
  401eb8:	00400b39 	.word	0x00400b39
  401ebc:	00402e10 	.word	0x00402e10
  401ec0:	004029d9 	.word	0x004029d9
  401ec4:	00400d2d 	.word	0x00400d2d

00401ec8 <prvSampleTimeNow>:
{
  401ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401ecc:	b082      	sub	sp, #8
  401ece:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  401ed0:	4b23      	ldr	r3, [pc, #140]	; (401f60 <prvSampleTimeNow+0x98>)
  401ed2:	4798      	blx	r3
  401ed4:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  401ed6:	4b23      	ldr	r3, [pc, #140]	; (401f64 <prvSampleTimeNow+0x9c>)
  401ed8:	681b      	ldr	r3, [r3, #0]
  401eda:	4298      	cmp	r0, r3
  401edc:	d316      	bcc.n	401f0c <prvSampleTimeNow+0x44>
		*pxTimerListsWereSwitched = pdFALSE;
  401ede:	2300      	movs	r3, #0
  401ee0:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  401ee4:	4b1f      	ldr	r3, [pc, #124]	; (401f64 <prvSampleTimeNow+0x9c>)
  401ee6:	601f      	str	r7, [r3, #0]
}
  401ee8:	4638      	mov	r0, r7
  401eea:	b002      	add	sp, #8
  401eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401ef0:	2100      	movs	r1, #0
  401ef2:	9100      	str	r1, [sp, #0]
  401ef4:	460b      	mov	r3, r1
  401ef6:	4652      	mov	r2, sl
  401ef8:	4620      	mov	r0, r4
  401efa:	4c1b      	ldr	r4, [pc, #108]	; (401f68 <prvSampleTimeNow+0xa0>)
  401efc:	47a0      	blx	r4
				configASSERT( xResult );
  401efe:	b938      	cbnz	r0, 401f10 <prvSampleTimeNow+0x48>
  401f00:	f44f 7161 	mov.w	r1, #900	; 0x384
  401f04:	4819      	ldr	r0, [pc, #100]	; (401f6c <prvSampleTimeNow+0xa4>)
  401f06:	4b1a      	ldr	r3, [pc, #104]	; (401f70 <prvSampleTimeNow+0xa8>)
  401f08:	4798      	blx	r3
  401f0a:	e001      	b.n	401f10 <prvSampleTimeNow+0x48>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401f0c:	4d19      	ldr	r5, [pc, #100]	; (401f74 <prvSampleTimeNow+0xac>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401f0e:	4e1a      	ldr	r6, [pc, #104]	; (401f78 <prvSampleTimeNow+0xb0>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401f10:	682b      	ldr	r3, [r5, #0]
  401f12:	681a      	ldr	r2, [r3, #0]
  401f14:	b1d2      	cbz	r2, 401f4c <prvSampleTimeNow+0x84>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401f16:	68db      	ldr	r3, [r3, #12]
  401f18:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401f1c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401f1e:	f104 0904 	add.w	r9, r4, #4
  401f22:	4648      	mov	r0, r9
  401f24:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401f26:	6a23      	ldr	r3, [r4, #32]
  401f28:	4620      	mov	r0, r4
  401f2a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401f2c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  401f30:	f013 0f04 	tst.w	r3, #4
  401f34:	d0ec      	beq.n	401f10 <prvSampleTimeNow+0x48>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  401f36:	69a3      	ldr	r3, [r4, #24]
  401f38:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  401f3a:	459a      	cmp	sl, r3
  401f3c:	d2d8      	bcs.n	401ef0 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  401f3e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401f40:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401f42:	4649      	mov	r1, r9
  401f44:	6828      	ldr	r0, [r5, #0]
  401f46:	4b0d      	ldr	r3, [pc, #52]	; (401f7c <prvSampleTimeNow+0xb4>)
  401f48:	4798      	blx	r3
  401f4a:	e7e1      	b.n	401f10 <prvSampleTimeNow+0x48>
	pxCurrentTimerList = pxOverflowTimerList;
  401f4c:	4a0c      	ldr	r2, [pc, #48]	; (401f80 <prvSampleTimeNow+0xb8>)
  401f4e:	6810      	ldr	r0, [r2, #0]
  401f50:	4908      	ldr	r1, [pc, #32]	; (401f74 <prvSampleTimeNow+0xac>)
  401f52:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  401f54:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  401f56:	2301      	movs	r3, #1
  401f58:	f8c8 3000 	str.w	r3, [r8]
  401f5c:	e7c2      	b.n	401ee4 <prvSampleTimeNow+0x1c>
  401f5e:	bf00      	nop
  401f60:	00401611 	.word	0x00401611
  401f64:	200005e8 	.word	0x200005e8
  401f68:	00401e59 	.word	0x00401e59
  401f6c:	00402e10 	.word	0x00402e10
  401f70:	004029d9 	.word	0x004029d9
  401f74:	200005b8 	.word	0x200005b8
  401f78:	004001cd 	.word	0x004001cd
  401f7c:	00400199 	.word	0x00400199
  401f80:	200005bc 	.word	0x200005bc

00401f84 <prvTimerTask>:
{
  401f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f88:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401f8a:	4e75      	ldr	r6, [pc, #468]	; (402160 <prvTimerTask+0x1dc>)
			( void ) xTaskResumeAll();
  401f8c:	4f75      	ldr	r7, [pc, #468]	; (402164 <prvTimerTask+0x1e0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401f8e:	4d76      	ldr	r5, [pc, #472]	; (402168 <prvTimerTask+0x1e4>)
					portYIELD_WITHIN_API();
  401f90:	f8df 9200 	ldr.w	r9, [pc, #512]	; 402194 <prvTimerTask+0x210>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401f94:	f8df 8200 	ldr.w	r8, [pc, #512]	; 402198 <prvTimerTask+0x214>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401f98:	6833      	ldr	r3, [r6, #0]
  401f9a:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  401f9c:	b31a      	cbz	r2, 401fe6 <prvTimerTask+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401f9e:	68db      	ldr	r3, [r3, #12]
  401fa0:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
  401fa4:	4b71      	ldr	r3, [pc, #452]	; (40216c <prvTimerTask+0x1e8>)
  401fa6:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401fa8:	a804      	add	r0, sp, #16
  401faa:	4b71      	ldr	r3, [pc, #452]	; (402170 <prvTimerTask+0x1ec>)
  401fac:	4798      	blx	r3
  401fae:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401fb0:	9a04      	ldr	r2, [sp, #16]
  401fb2:	2a00      	cmp	r2, #0
  401fb4:	d152      	bne.n	40205c <prvTimerTask+0xd8>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401fb6:	4550      	cmp	r0, sl
  401fb8:	d326      	bcc.n	402008 <prvTimerTask+0x84>
				( void ) xTaskResumeAll();
  401fba:	47b8      	blx	r7
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401fbc:	6833      	ldr	r3, [r6, #0]
  401fbe:	68db      	ldr	r3, [r3, #12]
  401fc0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401fc4:	f10b 0004 	add.w	r0, fp, #4
  401fc8:	47c0      	blx	r8
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401fca:	f89b 3024 	ldrb.w	r3, [fp, #36]	; 0x24
  401fce:	f013 0f04 	tst.w	r3, #4
  401fd2:	d12a      	bne.n	40202a <prvTimerTask+0xa6>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
  401fd4:	f023 0301 	bic.w	r3, r3, #1
  401fd8:	f88b 3024 	strb.w	r3, [fp, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401fdc:	f8db 3020 	ldr.w	r3, [fp, #32]
  401fe0:	4658      	mov	r0, fp
  401fe2:	4798      	blx	r3
  401fe4:	e01f      	b.n	402026 <prvTimerTask+0xa2>
	vTaskSuspendAll();
  401fe6:	4b61      	ldr	r3, [pc, #388]	; (40216c <prvTimerTask+0x1e8>)
  401fe8:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401fea:	a804      	add	r0, sp, #16
  401fec:	4b60      	ldr	r3, [pc, #384]	; (402170 <prvTimerTask+0x1ec>)
  401fee:	4798      	blx	r3
  401ff0:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401ff2:	9b04      	ldr	r3, [sp, #16]
  401ff4:	2b00      	cmp	r3, #0
  401ff6:	d131      	bne.n	40205c <prvTimerTask+0xd8>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  401ff8:	4b5e      	ldr	r3, [pc, #376]	; (402174 <prvTimerTask+0x1f0>)
  401ffa:	681b      	ldr	r3, [r3, #0]
  401ffc:	681a      	ldr	r2, [r3, #0]
  401ffe:	fab2 f282 	clz	r2, r2
  402002:	0952      	lsrs	r2, r2, #5
		xNextExpireTime = ( TickType_t ) 0U;
  402004:	f04f 0a00 	mov.w	sl, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402008:	ebaa 0104 	sub.w	r1, sl, r4
  40200c:	6828      	ldr	r0, [r5, #0]
  40200e:	4b5a      	ldr	r3, [pc, #360]	; (402178 <prvTimerTask+0x1f4>)
  402010:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402012:	47b8      	blx	r7
  402014:	b938      	cbnz	r0, 402026 <prvTimerTask+0xa2>
					portYIELD_WITHIN_API();
  402016:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40201a:	f8c9 3000 	str.w	r3, [r9]
  40201e:	f3bf 8f4f 	dsb	sy
  402022:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402026:	4c55      	ldr	r4, [pc, #340]	; (40217c <prvTimerTask+0x1f8>)
  402028:	e021      	b.n	40206e <prvTimerTask+0xea>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
  40202a:	f8db 1018 	ldr.w	r1, [fp, #24]
  40202e:	4653      	mov	r3, sl
  402030:	4622      	mov	r2, r4
  402032:	4451      	add	r1, sl
  402034:	4658      	mov	r0, fp
  402036:	4c52      	ldr	r4, [pc, #328]	; (402180 <prvTimerTask+0x1fc>)
  402038:	47a0      	blx	r4
  40203a:	2800      	cmp	r0, #0
  40203c:	d0ce      	beq.n	401fdc <prvTimerTask+0x58>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40203e:	2100      	movs	r1, #0
  402040:	9100      	str	r1, [sp, #0]
  402042:	460b      	mov	r3, r1
  402044:	4652      	mov	r2, sl
  402046:	4658      	mov	r0, fp
  402048:	4c4e      	ldr	r4, [pc, #312]	; (402184 <prvTimerTask+0x200>)
  40204a:	47a0      	blx	r4
			configASSERT( xResult );
  40204c:	2800      	cmp	r0, #0
  40204e:	d1c5      	bne.n	401fdc <prvTimerTask+0x58>
  402050:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
  402054:	484c      	ldr	r0, [pc, #304]	; (402188 <prvTimerTask+0x204>)
  402056:	4b4d      	ldr	r3, [pc, #308]	; (40218c <prvTimerTask+0x208>)
  402058:	4798      	blx	r3
  40205a:	e7bf      	b.n	401fdc <prvTimerTask+0x58>
			( void ) xTaskResumeAll();
  40205c:	47b8      	blx	r7
  40205e:	e7e2      	b.n	402026 <prvTimerTask+0xa2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402060:	9907      	ldr	r1, [sp, #28]
  402062:	9806      	ldr	r0, [sp, #24]
  402064:	9b05      	ldr	r3, [sp, #20]
  402066:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402068:	9b04      	ldr	r3, [sp, #16]
  40206a:	2b00      	cmp	r3, #0
  40206c:	da08      	bge.n	402080 <prvTimerTask+0xfc>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40206e:	2200      	movs	r2, #0
  402070:	a904      	add	r1, sp, #16
  402072:	6828      	ldr	r0, [r5, #0]
  402074:	47a0      	blx	r4
  402076:	2800      	cmp	r0, #0
  402078:	d08e      	beq.n	401f98 <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  40207a:	9b04      	ldr	r3, [sp, #16]
  40207c:	2b00      	cmp	r3, #0
  40207e:	dbef      	blt.n	402060 <prvTimerTask+0xdc>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402080:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  402084:	f8da 3014 	ldr.w	r3, [sl, #20]
  402088:	b113      	cbz	r3, 402090 <prvTimerTask+0x10c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40208a:	f10a 0004 	add.w	r0, sl, #4
  40208e:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402090:	a803      	add	r0, sp, #12
  402092:	4b37      	ldr	r3, [pc, #220]	; (402170 <prvTimerTask+0x1ec>)
  402094:	4798      	blx	r3
  402096:	4683      	mov	fp, r0
			switch( xMessage.xMessageID )
  402098:	9b04      	ldr	r3, [sp, #16]
  40209a:	2b09      	cmp	r3, #9
  40209c:	d8e7      	bhi.n	40206e <prvTimerTask+0xea>
  40209e:	e8df f003 	tbb	[pc, r3]
  4020a2:	0505      	.short	0x0505
  4020a4:	51383105 	.word	0x51383105
  4020a8:	38310505 	.word	0x38310505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  4020ac:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  4020b0:	f043 0301 	orr.w	r3, r3, #1
  4020b4:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  4020b8:	9905      	ldr	r1, [sp, #20]
  4020ba:	f8da 0018 	ldr.w	r0, [sl, #24]
  4020be:	460b      	mov	r3, r1
  4020c0:	465a      	mov	r2, fp
  4020c2:	4401      	add	r1, r0
  4020c4:	4650      	mov	r0, sl
  4020c6:	4c2e      	ldr	r4, [pc, #184]	; (402180 <prvTimerTask+0x1fc>)
  4020c8:	47a0      	blx	r4
  4020ca:	2800      	cmp	r0, #0
  4020cc:	d0ab      	beq.n	402026 <prvTimerTask+0xa2>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4020ce:	f8da 3020 	ldr.w	r3, [sl, #32]
  4020d2:	4650      	mov	r0, sl
  4020d4:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  4020d6:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  4020da:	f013 0f04 	tst.w	r3, #4
  4020de:	d0a2      	beq.n	402026 <prvTimerTask+0xa2>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4020e0:	f8da 2018 	ldr.w	r2, [sl, #24]
  4020e4:	2100      	movs	r1, #0
  4020e6:	9100      	str	r1, [sp, #0]
  4020e8:	460b      	mov	r3, r1
  4020ea:	9805      	ldr	r0, [sp, #20]
  4020ec:	4402      	add	r2, r0
  4020ee:	4650      	mov	r0, sl
  4020f0:	4c24      	ldr	r4, [pc, #144]	; (402184 <prvTimerTask+0x200>)
  4020f2:	47a0      	blx	r4
							configASSERT( xResult );
  4020f4:	2800      	cmp	r0, #0
  4020f6:	d196      	bne.n	402026 <prvTimerTask+0xa2>
  4020f8:	f240 3113 	movw	r1, #787	; 0x313
  4020fc:	4822      	ldr	r0, [pc, #136]	; (402188 <prvTimerTask+0x204>)
  4020fe:	4b23      	ldr	r3, [pc, #140]	; (40218c <prvTimerTask+0x208>)
  402100:	4798      	blx	r3
  402102:	e790      	b.n	402026 <prvTimerTask+0xa2>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
  402104:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  402108:	f023 0301 	bic.w	r3, r3, #1
  40210c:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
  402110:	e789      	b.n	402026 <prvTimerTask+0xa2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  402112:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  402116:	f043 0301 	orr.w	r3, r3, #1
  40211a:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  40211e:	9b05      	ldr	r3, [sp, #20]
  402120:	f8ca 3018 	str.w	r3, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402124:	b143      	cbz	r3, 402138 <prvTimerTask+0x1b4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402126:	f8da 1018 	ldr.w	r1, [sl, #24]
  40212a:	465b      	mov	r3, fp
  40212c:	465a      	mov	r2, fp
  40212e:	4459      	add	r1, fp
  402130:	4650      	mov	r0, sl
  402132:	4c13      	ldr	r4, [pc, #76]	; (402180 <prvTimerTask+0x1fc>)
  402134:	47a0      	blx	r4
  402136:	e776      	b.n	402026 <prvTimerTask+0xa2>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402138:	f240 312b 	movw	r1, #811	; 0x32b
  40213c:	4812      	ldr	r0, [pc, #72]	; (402188 <prvTimerTask+0x204>)
  40213e:	4b13      	ldr	r3, [pc, #76]	; (40218c <prvTimerTask+0x208>)
  402140:	4798      	blx	r3
  402142:	e7f0      	b.n	402126 <prvTimerTask+0x1a2>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
  402144:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  402148:	f013 0f02 	tst.w	r3, #2
  40214c:	d004      	beq.n	402158 <prvTimerTask+0x1d4>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
  40214e:	f023 0301 	bic.w	r3, r3, #1
  402152:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
  402156:	e766      	b.n	402026 <prvTimerTask+0xa2>
							vPortFree( pxTimer );
  402158:	4650      	mov	r0, sl
  40215a:	4b0d      	ldr	r3, [pc, #52]	; (402190 <prvTimerTask+0x20c>)
  40215c:	4798      	blx	r3
  40215e:	e762      	b.n	402026 <prvTimerTask+0xa2>
  402160:	200005b8 	.word	0x200005b8
  402164:	00401759 	.word	0x00401759
  402168:	200005ec 	.word	0x200005ec
  40216c:	00401601 	.word	0x00401601
  402170:	00401ec9 	.word	0x00401ec9
  402174:	200005bc 	.word	0x200005bc
  402178:	00400fe1 	.word	0x00400fe1
  40217c:	00400e25 	.word	0x00400e25
  402180:	00401d41 	.word	0x00401d41
  402184:	00401e59 	.word	0x00401e59
  402188:	00402e10 	.word	0x00402e10
  40218c:	004029d9 	.word	0x004029d9
  402190:	004006c1 	.word	0x004006c1
  402194:	e000ed04 	.word	0xe000ed04
  402198:	004001cd 	.word	0x004001cd

0040219c <intitializeLEDDriver>:
#include "ledDriver.h"
#include "myDefines.h"


void intitializeLEDDriver(void)
{
  40219c:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40219e:	2009      	movs	r0, #9
  4021a0:	4c0e      	ldr	r4, [pc, #56]	; (4021dc <intitializeLEDDriver+0x40>)
  4021a2:	47a0      	blx	r4
  4021a4:	200a      	movs	r0, #10
  4021a6:	47a0      	blx	r4
  4021a8:	200b      	movs	r0, #11
  4021aa:	47a0      	blx	r4
  4021ac:	200c      	movs	r0, #12
  4021ae:	47a0      	blx	r4
  4021b0:	200d      	movs	r0, #13
  4021b2:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4021b4:	4b0a      	ldr	r3, [pc, #40]	; (4021e0 <intitializeLEDDriver+0x44>)
  4021b6:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
  4021ba:	611c      	str	r4, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4021bc:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4021c0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  4021c4:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4021c6:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4021ca:	4a06      	ldr	r2, [pc, #24]	; (4021e4 <intitializeLEDDriver+0x48>)
  4021cc:	2102      	movs	r1, #2
  4021ce:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4021d0:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4021d4:	635c      	str	r4, [r3, #52]	; 0x34
  4021d6:	6358      	str	r0, [r3, #52]	; 0x34
  4021d8:	6351      	str	r1, [r2, #52]	; 0x34
  4021da:	bd10      	pop	{r4, pc}
  4021dc:	00402699 	.word	0x00402699
  4021e0:	400e1400 	.word	0x400e1400
  4021e4:	400e1600 	.word	0x400e1600

004021e8 <readLED>:
	1 = EXT_LED1
	2 = EXT_LED2
	3 = EXT_LED3
	*/
	//if the led number is 1, then that will be for the external led #1
	if (uiLedNum == 1)
  4021e8:	2801      	cmp	r0, #1
  4021ea:	d008      	beq.n	4021fe <readLED+0x16>
	{
		return ioport_get_pin_level(EXT_LED1);
	}
	//else if the led number is 2, then that will be for the external led #2
	else if (uiLedNum == 2)
  4021ec:	2802      	cmp	r0, #2
  4021ee:	d00b      	beq.n	402208 <readLED+0x20>
	{
		return ioport_get_pin_level(EXT_LED2);
	}
	//else if the led number is 3, then that will be for the external led #3 
	else if (uiLedNum == 3)
  4021f0:	2803      	cmp	r0, #3
  4021f2:	d00e      	beq.n	402212 <readLED+0x2a>
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4021f4:	4b09      	ldr	r3, [pc, #36]	; (40221c <readLED+0x34>)
  4021f6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
		return ioport_get_pin_level(EXT_LED3);
	}
	//else the ioport will be set for the on board led
	else
	{
		return ioport_get_pin_level(LED_0_PIN);
  4021f8:	f3c0 5080 	ubfx	r0, r0, #22, #1
	}
	
}
  4021fc:	4770      	bx	lr
  4021fe:	4b07      	ldr	r3, [pc, #28]	; (40221c <readLED+0x34>)
  402200:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
		return ioport_get_pin_level(EXT_LED1);
  402202:	f3c0 7000 	ubfx	r0, r0, #28, #1
  402206:	4770      	bx	lr
  402208:	4b04      	ldr	r3, [pc, #16]	; (40221c <readLED+0x34>)
  40220a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
		return ioport_get_pin_level(EXT_LED2);
  40220c:	f3c0 4040 	ubfx	r0, r0, #17, #1
  402210:	4770      	bx	lr
  402212:	4b03      	ldr	r3, [pc, #12]	; (402220 <readLED+0x38>)
  402214:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
		return ioport_get_pin_level(EXT_LED3);
  402216:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40221a:	4770      	bx	lr
  40221c:	400e1400 	.word	0x400e1400
  402220:	400e1600 	.word	0x400e1600

00402224 <setLED>:

uint8_t setLED(uint8_t uiLedNum, uint8_t uiLedValue)
{
  402224:	b508      	push	{r3, lr}
/*
Sets the LED to a specified value (ON/OFF)
*/
		//if the led number is 1, then set the pin level
		//to on for for the external led #1, and then return the readLED
		if (uiLedNum == 1)
  402226:	2801      	cmp	r0, #1
  402228:	d00c      	beq.n	402244 <setLED+0x20>
			ioport_set_pin_level(EXT_LED1, uiLedValue);
			return readLED(uiLedNum);			
		}
		//else if the led number is 2, then set the pin level
		//to on for for the external led #2, and then return the readLED
		else if (uiLedNum == 2)
  40222a:	2802      	cmp	r0, #2
  40222c:	d018      	beq.n	402260 <setLED+0x3c>
			ioport_set_pin_level(EXT_LED2, uiLedValue);
			return readLED(uiLedNum);			
		}
		//else if the led number is 3, then set the pin level
		//to on for for the external led #3, and then return the readLED
		else if (uiLedNum == 3)
  40222e:	2803      	cmp	r0, #3
  402230:	d024      	beq.n	40227c <setLED+0x58>
	if (level) {
  402232:	2900      	cmp	r1, #0
  402234:	d030      	beq.n	402298 <setLED+0x74>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402236:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40223a:	4b1a      	ldr	r3, [pc, #104]	; (4022a4 <setLED+0x80>)
  40223c:	631a      	str	r2, [r3, #48]	; 0x30
		}
		//else set the on board led to on, then return the readLED
		else
		{
			ioport_set_pin_level(LED_0_PIN, uiLedValue);
			return readLED(uiLedNum);
  40223e:	4b1a      	ldr	r3, [pc, #104]	; (4022a8 <setLED+0x84>)
  402240:	4798      	blx	r3
		}
}
  402242:	bd08      	pop	{r3, pc}
	if (level) {
  402244:	b139      	cbz	r1, 402256 <setLED+0x32>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40224a:	4b16      	ldr	r3, [pc, #88]	; (4022a4 <setLED+0x80>)
  40224c:	631a      	str	r2, [r3, #48]	; 0x30
			return readLED(uiLedNum);			
  40224e:	2001      	movs	r0, #1
  402250:	4b15      	ldr	r3, [pc, #84]	; (4022a8 <setLED+0x84>)
  402252:	4798      	blx	r3
  402254:	bd08      	pop	{r3, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40225a:	4b12      	ldr	r3, [pc, #72]	; (4022a4 <setLED+0x80>)
  40225c:	635a      	str	r2, [r3, #52]	; 0x34
  40225e:	e7f6      	b.n	40224e <setLED+0x2a>
	if (level) {
  402260:	b139      	cbz	r1, 402272 <setLED+0x4e>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402262:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  402266:	4b0f      	ldr	r3, [pc, #60]	; (4022a4 <setLED+0x80>)
  402268:	631a      	str	r2, [r3, #48]	; 0x30
			return readLED(uiLedNum);			
  40226a:	2002      	movs	r0, #2
  40226c:	4b0e      	ldr	r3, [pc, #56]	; (4022a8 <setLED+0x84>)
  40226e:	4798      	blx	r3
  402270:	bd08      	pop	{r3, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402272:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  402276:	4b0b      	ldr	r3, [pc, #44]	; (4022a4 <setLED+0x80>)
  402278:	635a      	str	r2, [r3, #52]	; 0x34
  40227a:	e7f6      	b.n	40226a <setLED+0x46>
	if (level) {
  40227c:	b139      	cbz	r1, 40228e <setLED+0x6a>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40227e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402282:	4b08      	ldr	r3, [pc, #32]	; (4022a4 <setLED+0x80>)
  402284:	631a      	str	r2, [r3, #48]	; 0x30
			return readLED(uiLedNum);	
  402286:	2003      	movs	r0, #3
  402288:	4b07      	ldr	r3, [pc, #28]	; (4022a8 <setLED+0x84>)
  40228a:	4798      	blx	r3
  40228c:	bd08      	pop	{r3, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40228e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402292:	4b04      	ldr	r3, [pc, #16]	; (4022a4 <setLED+0x80>)
  402294:	635a      	str	r2, [r3, #52]	; 0x34
  402296:	e7f6      	b.n	402286 <setLED+0x62>
  402298:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40229c:	4b01      	ldr	r3, [pc, #4]	; (4022a4 <setLED+0x80>)
  40229e:	635a      	str	r2, [r3, #52]	; 0x34
  4022a0:	e7cd      	b.n	40223e <setLED+0x1a>
  4022a2:	bf00      	nop
  4022a4:	400e1400 	.word	0x400e1400
  4022a8:	004021e9 	.word	0x004021e9

004022ac <toggleLED>:

uint8_t toggleLED(uint8_t uiLedNum)
{
  4022ac:	b510      	push	{r4, lr}
  4022ae:	4604      	mov	r4, r0
/*
Toggles the LED
If the led is on, then turn it off
If the led is off, then turn it on
*/
	if (readLED(uiLedNum) == 1)
  4022b0:	4b04      	ldr	r3, [pc, #16]	; (4022c4 <toggleLED+0x18>)
  4022b2:	4798      	blx	r3
  4022b4:	2801      	cmp	r0, #1
	{
		return setLED(uiLedNum, 0);
  4022b6:	bf0c      	ite	eq
  4022b8:	2100      	moveq	r1, #0
		
	}
	else
		return setLED(uiLedNum, 1);
  4022ba:	2101      	movne	r1, #1
  4022bc:	4620      	mov	r0, r4
  4022be:	4b02      	ldr	r3, [pc, #8]	; (4022c8 <toggleLED+0x1c>)
  4022c0:	4798      	blx	r3
	
	
}
  4022c2:	bd10      	pop	{r4, pc}
  4022c4:	004021e9 	.word	0x004021e9
  4022c8:	00402225 	.word	0x00402225

004022cc <initializeButtonDriver>:
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4022cc:	4b1a      	ldr	r3, [pc, #104]	; (402338 <initializeButtonDriver+0x6c>)
  4022ce:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4022d2:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4022d4:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4022d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4022dc:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4022de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4022e2:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4022e4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4022e8:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4022ea:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  4022ec:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4022f0:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4022f2:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  4022f6:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4022f8:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4022fa:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  4022fe:	6758      	str	r0, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  402300:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402302:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402306:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  402308:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40230a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40230e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  402310:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  402314:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402316:	6f58      	ldr	r0, [r3, #116]	; 0x74
  402318:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  40231c:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40231e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402322:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  402326:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ESR = mask;
  40232a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40232e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  402332:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  402336:	4770      	bx	lr
  402338:	400e1400 	.word	0x400e1400

0040233c <readButton>:
}

uint8_t readButton(uint8_t uiButtonNum)
{
	//if the button number is 1, then it is for the external button #1
	if (uiButtonNum == 1)
  40233c:	2801      	cmp	r0, #1
  40233e:	d006      	beq.n	40234e <readButton+0x12>
	{
		return ioport_get_pin_level(EXT_SW1);
	}
	//else if it is 2, then it is for the external button #2
	else if (uiButtonNum == 2)
  402340:	2802      	cmp	r0, #2
  402342:	d009      	beq.n	402358 <readButton+0x1c>
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402344:	4b07      	ldr	r3, [pc, #28]	; (402364 <readButton+0x28>)
  402346:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
	{
		return ioport_get_pin_level(EXT_SW2);
	}
	//else it is the built in board button
	else
		return ioport_get_pin_level(BUTTON_0_PIN);
  402348:	f3c0 0080 	ubfx	r0, r0, #2, #1

  40234c:	4770      	bx	lr
  40234e:	4b06      	ldr	r3, [pc, #24]	; (402368 <readButton+0x2c>)
  402350:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
		return ioport_get_pin_level(EXT_SW1);
  402352:	f3c0 6080 	ubfx	r0, r0, #26, #1
  402356:	4770      	bx	lr
  402358:	4b03      	ldr	r3, [pc, #12]	; (402368 <readButton+0x2c>)
  40235a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
		return ioport_get_pin_level(EXT_SW2);
  40235c:	f3c0 7080 	ubfx	r0, r0, #30, #1
  402360:	4770      	bx	lr
  402362:	bf00      	nop
  402364:	400e0e00 	.word	0x400e0e00
  402368:	400e1400 	.word	0x400e1400

0040236c <taskHeartBeat>:
	}

}
		
void taskHeartBeat (void * pvParamaters)		
{
  40236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40236e:	4604      	mov	r4, r0
		{
			vTaskDelay(xDelay2);
		}
		else
		{
			vTaskDelay(xDelay);
  402370:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
  402374:	4d11      	ldr	r5, [pc, #68]	; (4023bc <taskHeartBeat+0x50>)
				toggleLED(LED3);
  402376:	4e12      	ldr	r6, [pc, #72]	; (4023c0 <taskHeartBeat+0x54>)
  402378:	e004      	b.n	402384 <taskHeartBeat+0x18>
				toggleLED(LED0);
  40237a:	2000      	movs	r0, #0
  40237c:	47b0      	blx	r6
			vTaskDelay(xDelay2);
  40237e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  402382:	47a8      	blx	r5
		switch(ledNum)
  402384:	2c03      	cmp	r4, #3
  402386:	d816      	bhi.n	4023b6 <taskHeartBeat+0x4a>
  402388:	a301      	add	r3, pc, #4	; (adr r3, 402390 <taskHeartBeat+0x24>)
  40238a:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
  40238e:	bf00      	nop
  402390:	0040237b 	.word	0x0040237b
  402394:	004023a1 	.word	0x004023a1
  402398:	004023ab 	.word	0x004023ab
  40239c:	004023b1 	.word	0x004023b1
				toggleLED(LED1);
  4023a0:	2001      	movs	r0, #1
  4023a2:	47b0      	blx	r6
			vTaskDelay(xDelay);
  4023a4:	4638      	mov	r0, r7
  4023a6:	47a8      	blx	r5
  4023a8:	e7ec      	b.n	402384 <taskHeartBeat+0x18>
				toggleLED(LED2);
  4023aa:	2002      	movs	r0, #2
  4023ac:	47b0      	blx	r6
			break;
  4023ae:	e7f9      	b.n	4023a4 <taskHeartBeat+0x38>
				toggleLED(LED3);
  4023b0:	2003      	movs	r0, #3
  4023b2:	47b0      	blx	r6
			break;
  4023b4:	e7f6      	b.n	4023a4 <taskHeartBeat+0x38>
		if (ledNum == 0)
  4023b6:	2c00      	cmp	r4, #0
  4023b8:	d0e1      	beq.n	40237e <taskHeartBeat+0x12>
  4023ba:	e7f3      	b.n	4023a4 <taskHeartBeat+0x38>
  4023bc:	00401875 	.word	0x00401875
  4023c0:	004022ad 	.word	0x004022ad

004023c4 <taskSystemControl>:
{
  4023c4:	b580      	push	{r7, lr}
  4023c6:	b082      	sub	sp, #8
xTaskCreate(taskHeartBeat, "LED0 Heart Beat", configMINIMAL_STACK_SIZE, (void *) 0, 1, &LEDHandle0);
  4023c8:	4b33      	ldr	r3, [pc, #204]	; (402498 <taskSystemControl+0xd4>)
  4023ca:	9301      	str	r3, [sp, #4]
  4023cc:	2301      	movs	r3, #1
  4023ce:	9300      	str	r3, [sp, #0]
  4023d0:	2300      	movs	r3, #0
  4023d2:	2282      	movs	r2, #130	; 0x82
  4023d4:	4931      	ldr	r1, [pc, #196]	; (40249c <taskSystemControl+0xd8>)
  4023d6:	4832      	ldr	r0, [pc, #200]	; (4024a0 <taskSystemControl+0xdc>)
  4023d8:	4c32      	ldr	r4, [pc, #200]	; (4024a4 <taskSystemControl+0xe0>)
  4023da:	47a0      	blx	r4
		if (readButton(SW1) == 1)
  4023dc:	4c32      	ldr	r4, [pc, #200]	; (4024a8 <taskSystemControl+0xe4>)
			if (LEDHandle1 != NULL)
  4023de:	4d33      	ldr	r5, [pc, #204]	; (4024ac <taskSystemControl+0xe8>)
			else if (LEDHandle2 != NULL)
  4023e0:	4e33      	ldr	r6, [pc, #204]	; (4024b0 <taskSystemControl+0xec>)
  4023e2:	e009      	b.n	4023f8 <taskSystemControl+0x34>
			if (LEDHandle1 == NULL)
  4023e4:	682b      	ldr	r3, [r5, #0]
  4023e6:	b1cb      	cbz	r3, 40241c <taskSystemControl+0x58>
			else if (LEDHandle2 == NULL)
  4023e8:	6833      	ldr	r3, [r6, #0]
  4023ea:	b303      	cbz	r3, 40242e <taskSystemControl+0x6a>
			else if (LEDHandle3 == NULL)
  4023ec:	4b31      	ldr	r3, [pc, #196]	; (4024b4 <taskSystemControl+0xf0>)
  4023ee:	681b      	ldr	r3, [r3, #0]
  4023f0:	b33b      	cbz	r3, 402442 <taskSystemControl+0x7e>
		vTaskDelay(xDelay3);
  4023f2:	2064      	movs	r0, #100	; 0x64
  4023f4:	4b30      	ldr	r3, [pc, #192]	; (4024b8 <taskSystemControl+0xf4>)
  4023f6:	4798      	blx	r3
		if (readButton(SW1) == 1)
  4023f8:	2001      	movs	r0, #1
  4023fa:	47a0      	blx	r4
  4023fc:	2801      	cmp	r0, #1
  4023fe:	d0f1      	beq.n	4023e4 <taskSystemControl+0x20>
		else if (readButton(SW2) == 1)
  402400:	2002      	movs	r0, #2
  402402:	47a0      	blx	r4
  402404:	2801      	cmp	r0, #1
  402406:	d027      	beq.n	402458 <taskSystemControl+0x94>
		else if (readButton(SW0) == 1)
  402408:	2000      	movs	r0, #0
  40240a:	47a0      	blx	r4
  40240c:	2801      	cmp	r0, #1
  40240e:	d1f0      	bne.n	4023f2 <taskSystemControl+0x2e>
			if (LEDHandle1 != NULL)
  402410:	6828      	ldr	r0, [r5, #0]
  402412:	2800      	cmp	r0, #0
  402414:	d031      	beq.n	40247a <taskSystemControl+0xb6>
				vTaskSuspend(LEDHandle1);
  402416:	4b29      	ldr	r3, [pc, #164]	; (4024bc <taskSystemControl+0xf8>)
  402418:	4798      	blx	r3
  40241a:	e7ea      	b.n	4023f2 <taskSystemControl+0x2e>
				xTaskCreate(taskHeartBeat, "LED1 Heart Beat", configMINIMAL_STACK_SIZE, (void *) 1, 1, &LEDHandle1);
  40241c:	9501      	str	r5, [sp, #4]
  40241e:	2301      	movs	r3, #1
  402420:	9300      	str	r3, [sp, #0]
  402422:	2282      	movs	r2, #130	; 0x82
  402424:	4926      	ldr	r1, [pc, #152]	; (4024c0 <taskSystemControl+0xfc>)
  402426:	481e      	ldr	r0, [pc, #120]	; (4024a0 <taskSystemControl+0xdc>)
  402428:	4f1e      	ldr	r7, [pc, #120]	; (4024a4 <taskSystemControl+0xe0>)
  40242a:	47b8      	blx	r7
  40242c:	e7e1      	b.n	4023f2 <taskSystemControl+0x2e>
				xTaskCreate(taskHeartBeat, "LED2 Heart Beat", configMINIMAL_STACK_SIZE, (void *) 2, 1, &LEDHandle2);
  40242e:	9601      	str	r6, [sp, #4]
  402430:	2301      	movs	r3, #1
  402432:	9300      	str	r3, [sp, #0]
  402434:	2302      	movs	r3, #2
  402436:	2282      	movs	r2, #130	; 0x82
  402438:	4922      	ldr	r1, [pc, #136]	; (4024c4 <taskSystemControl+0x100>)
  40243a:	4819      	ldr	r0, [pc, #100]	; (4024a0 <taskSystemControl+0xdc>)
  40243c:	4f19      	ldr	r7, [pc, #100]	; (4024a4 <taskSystemControl+0xe0>)
  40243e:	47b8      	blx	r7
  402440:	e7d7      	b.n	4023f2 <taskSystemControl+0x2e>
				xTaskCreate(taskHeartBeat, "LED3 Heart Beat", configMINIMAL_STACK_SIZE, (void *) 3, 1, &LEDHandle3);					
  402442:	4b1c      	ldr	r3, [pc, #112]	; (4024b4 <taskSystemControl+0xf0>)
  402444:	9301      	str	r3, [sp, #4]
  402446:	2301      	movs	r3, #1
  402448:	9300      	str	r3, [sp, #0]
  40244a:	2303      	movs	r3, #3
  40244c:	2282      	movs	r2, #130	; 0x82
  40244e:	491e      	ldr	r1, [pc, #120]	; (4024c8 <taskSystemControl+0x104>)
  402450:	4813      	ldr	r0, [pc, #76]	; (4024a0 <taskSystemControl+0xdc>)
  402452:	4f14      	ldr	r7, [pc, #80]	; (4024a4 <taskSystemControl+0xe0>)
  402454:	47b8      	blx	r7
  402456:	e7cc      	b.n	4023f2 <taskSystemControl+0x2e>
			if (LEDHandle3 != NULL)
  402458:	4b16      	ldr	r3, [pc, #88]	; (4024b4 <taskSystemControl+0xf0>)
  40245a:	6818      	ldr	r0, [r3, #0]
  40245c:	b110      	cbz	r0, 402464 <taskSystemControl+0xa0>
				vTaskDelete(LEDHandle3);
  40245e:	4b1b      	ldr	r3, [pc, #108]	; (4024cc <taskSystemControl+0x108>)
  402460:	4798      	blx	r3
  402462:	e7c6      	b.n	4023f2 <taskSystemControl+0x2e>
			else if (LEDHandle2 != NULL)
  402464:	6830      	ldr	r0, [r6, #0]
  402466:	b110      	cbz	r0, 40246e <taskSystemControl+0xaa>
				vTaskDelete(LEDHandle2);
  402468:	4b18      	ldr	r3, [pc, #96]	; (4024cc <taskSystemControl+0x108>)
  40246a:	4798      	blx	r3
  40246c:	e7c1      	b.n	4023f2 <taskSystemControl+0x2e>
			else if (LEDHandle1 != NULL)
  40246e:	6828      	ldr	r0, [r5, #0]
  402470:	2800      	cmp	r0, #0
  402472:	d0be      	beq.n	4023f2 <taskSystemControl+0x2e>
				vTaskDelete(LEDHandle1);
  402474:	4b15      	ldr	r3, [pc, #84]	; (4024cc <taskSystemControl+0x108>)
  402476:	4798      	blx	r3
  402478:	e7bb      	b.n	4023f2 <taskSystemControl+0x2e>
			else if (LEDHandle2 != NULL)
  40247a:	6830      	ldr	r0, [r6, #0]
  40247c:	b110      	cbz	r0, 402484 <taskSystemControl+0xc0>
				vTaskSuspend(LEDHandle2);
  40247e:	4b0f      	ldr	r3, [pc, #60]	; (4024bc <taskSystemControl+0xf8>)
  402480:	4798      	blx	r3
  402482:	e7b6      	b.n	4023f2 <taskSystemControl+0x2e>
			else if (LEDHandle3 != NULL)
  402484:	4b0b      	ldr	r3, [pc, #44]	; (4024b4 <taskSystemControl+0xf0>)
  402486:	6818      	ldr	r0, [r3, #0]
  402488:	b110      	cbz	r0, 402490 <taskSystemControl+0xcc>
				vTaskSuspend(LEDHandle3);
  40248a:	4b0c      	ldr	r3, [pc, #48]	; (4024bc <taskSystemControl+0xf8>)
  40248c:	4798      	blx	r3
  40248e:	e7b0      	b.n	4023f2 <taskSystemControl+0x2e>
				vTaskResume(LEDHandle1);
  402490:	2000      	movs	r0, #0
  402492:	4b0f      	ldr	r3, [pc, #60]	; (4024d0 <taskSystemControl+0x10c>)
  402494:	4798      	blx	r3
  402496:	e7ac      	b.n	4023f2 <taskSystemControl+0x2e>
  402498:	200005f4 	.word	0x200005f4
  40249c:	00402e2c 	.word	0x00402e2c
  4024a0:	0040236d 	.word	0x0040236d
  4024a4:	004011d5 	.word	0x004011d5
  4024a8:	0040233d 	.word	0x0040233d
  4024ac:	200005f8 	.word	0x200005f8
  4024b0:	200005fc 	.word	0x200005fc
  4024b4:	20000600 	.word	0x20000600
  4024b8:	00401875 	.word	0x00401875
  4024bc:	0040199d 	.word	0x0040199d
  4024c0:	00402e3c 	.word	0x00402e3c
  4024c4:	00402e4c 	.word	0x00402e4c
  4024c8:	00402e5c 	.word	0x00402e5c
  4024cc:	004013cd 	.word	0x004013cd
  4024d0:	004014cd 	.word	0x004014cd

004024d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4024d4:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4024d6:	480e      	ldr	r0, [pc, #56]	; (402510 <sysclk_init+0x3c>)
  4024d8:	4b0e      	ldr	r3, [pc, #56]	; (402514 <sysclk_init+0x40>)
  4024da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4024dc:	213e      	movs	r1, #62	; 0x3e
  4024de:	2000      	movs	r0, #0
  4024e0:	4b0d      	ldr	r3, [pc, #52]	; (402518 <sysclk_init+0x44>)
  4024e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4024e4:	4c0d      	ldr	r4, [pc, #52]	; (40251c <sysclk_init+0x48>)
  4024e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4024e8:	2800      	cmp	r0, #0
  4024ea:	d0fc      	beq.n	4024e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4024ec:	4b0c      	ldr	r3, [pc, #48]	; (402520 <sysclk_init+0x4c>)
  4024ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4024f0:	4a0c      	ldr	r2, [pc, #48]	; (402524 <sysclk_init+0x50>)
  4024f2:	4b0d      	ldr	r3, [pc, #52]	; (402528 <sysclk_init+0x54>)
  4024f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  4024f6:	4c0d      	ldr	r4, [pc, #52]	; (40252c <sysclk_init+0x58>)
  4024f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4024fa:	2800      	cmp	r0, #0
  4024fc:	d0fc      	beq.n	4024f8 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4024fe:	2010      	movs	r0, #16
  402500:	4b0b      	ldr	r3, [pc, #44]	; (402530 <sysclk_init+0x5c>)
  402502:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402504:	4b0b      	ldr	r3, [pc, #44]	; (402534 <sysclk_init+0x60>)
  402506:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402508:	480b      	ldr	r0, [pc, #44]	; (402538 <sysclk_init+0x64>)
  40250a:	4b02      	ldr	r3, [pc, #8]	; (402514 <sysclk_init+0x40>)
  40250c:	4798      	blx	r3
  40250e:	bd10      	pop	{r4, pc}
  402510:	07270e00 	.word	0x07270e00
  402514:	004028c5 	.word	0x004028c5
  402518:	00402615 	.word	0x00402615
  40251c:	00402669 	.word	0x00402669
  402520:	00402679 	.word	0x00402679
  402524:	200f3f01 	.word	0x200f3f01
  402528:	400e0400 	.word	0x400e0400
  40252c:	00402689 	.word	0x00402689
  402530:	004025b1 	.word	0x004025b1
  402534:	004027b9 	.word	0x004027b9
  402538:	05b8d800 	.word	0x05b8d800

0040253c <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  40253c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40253e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402542:	4b18      	ldr	r3, [pc, #96]	; (4025a4 <board_init+0x68>)
  402544:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  402546:	2009      	movs	r0, #9
  402548:	4c17      	ldr	r4, [pc, #92]	; (4025a8 <board_init+0x6c>)
  40254a:	47a0      	blx	r4
  40254c:	200a      	movs	r0, #10
  40254e:	47a0      	blx	r4
  402550:	200b      	movs	r0, #11
  402552:	47a0      	blx	r4
  402554:	200c      	movs	r0, #12
  402556:	47a0      	blx	r4
  402558:	200d      	movs	r0, #13
  40255a:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40255c:	4b13      	ldr	r3, [pc, #76]	; (4025ac <board_init+0x70>)
  40255e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402562:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402564:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402568:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40256a:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  40256e:	2204      	movs	r2, #4
  402570:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402572:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  402576:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402578:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40257c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40257e:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  402580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402584:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402586:	f021 0104 	bic.w	r1, r1, #4
  40258a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40258c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40258e:	f021 0104 	bic.w	r1, r1, #4
  402592:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  402594:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402598:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  40259c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  4025a0:	bd10      	pop	{r4, pc}
  4025a2:	bf00      	nop
  4025a4:	400e1850 	.word	0x400e1850
  4025a8:	00402699 	.word	0x00402699
  4025ac:	400e1400 	.word	0x400e1400

004025b0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4025b0:	4a17      	ldr	r2, [pc, #92]	; (402610 <pmc_switch_mck_to_pllack+0x60>)
  4025b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4025b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4025b8:	4318      	orrs	r0, r3
  4025ba:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4025bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4025be:	f013 0f08 	tst.w	r3, #8
  4025c2:	d10a      	bne.n	4025da <pmc_switch_mck_to_pllack+0x2a>
  4025c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4025c8:	4911      	ldr	r1, [pc, #68]	; (402610 <pmc_switch_mck_to_pllack+0x60>)
  4025ca:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4025cc:	f012 0f08 	tst.w	r2, #8
  4025d0:	d103      	bne.n	4025da <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4025d2:	3b01      	subs	r3, #1
  4025d4:	d1f9      	bne.n	4025ca <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4025d6:	2001      	movs	r0, #1
  4025d8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4025da:	4a0d      	ldr	r2, [pc, #52]	; (402610 <pmc_switch_mck_to_pllack+0x60>)
  4025dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4025de:	f023 0303 	bic.w	r3, r3, #3
  4025e2:	f043 0302 	orr.w	r3, r3, #2
  4025e6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4025e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4025ea:	f013 0f08 	tst.w	r3, #8
  4025ee:	d10a      	bne.n	402606 <pmc_switch_mck_to_pllack+0x56>
  4025f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4025f4:	4906      	ldr	r1, [pc, #24]	; (402610 <pmc_switch_mck_to_pllack+0x60>)
  4025f6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4025f8:	f012 0f08 	tst.w	r2, #8
  4025fc:	d105      	bne.n	40260a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4025fe:	3b01      	subs	r3, #1
  402600:	d1f9      	bne.n	4025f6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  402602:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402604:	4770      	bx	lr
	return 0;
  402606:	2000      	movs	r0, #0
  402608:	4770      	bx	lr
  40260a:	2000      	movs	r0, #0
  40260c:	4770      	bx	lr
  40260e:	bf00      	nop
  402610:	400e0400 	.word	0x400e0400

00402614 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402614:	b9c8      	cbnz	r0, 40264a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402616:	4a11      	ldr	r2, [pc, #68]	; (40265c <pmc_switch_mainck_to_xtal+0x48>)
  402618:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40261a:	0209      	lsls	r1, r1, #8
  40261c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40261e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402622:	f023 0303 	bic.w	r3, r3, #3
  402626:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40262a:	f043 0301 	orr.w	r3, r3, #1
  40262e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402630:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402632:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402634:	f013 0f01 	tst.w	r3, #1
  402638:	d0fb      	beq.n	402632 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40263a:	4a08      	ldr	r2, [pc, #32]	; (40265c <pmc_switch_mainck_to_xtal+0x48>)
  40263c:	6a13      	ldr	r3, [r2, #32]
  40263e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402646:	6213      	str	r3, [r2, #32]
  402648:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40264a:	4904      	ldr	r1, [pc, #16]	; (40265c <pmc_switch_mainck_to_xtal+0x48>)
  40264c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40264e:	4a04      	ldr	r2, [pc, #16]	; (402660 <pmc_switch_mainck_to_xtal+0x4c>)
  402650:	401a      	ands	r2, r3
  402652:	4b04      	ldr	r3, [pc, #16]	; (402664 <pmc_switch_mainck_to_xtal+0x50>)
  402654:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402656:	620b      	str	r3, [r1, #32]
  402658:	4770      	bx	lr
  40265a:	bf00      	nop
  40265c:	400e0400 	.word	0x400e0400
  402660:	fec8fffc 	.word	0xfec8fffc
  402664:	01370002 	.word	0x01370002

00402668 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402668:	4b02      	ldr	r3, [pc, #8]	; (402674 <pmc_osc_is_ready_mainck+0xc>)
  40266a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40266c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402670:	4770      	bx	lr
  402672:	bf00      	nop
  402674:	400e0400 	.word	0x400e0400

00402678 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402678:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40267c:	4b01      	ldr	r3, [pc, #4]	; (402684 <pmc_disable_pllack+0xc>)
  40267e:	629a      	str	r2, [r3, #40]	; 0x28
  402680:	4770      	bx	lr
  402682:	bf00      	nop
  402684:	400e0400 	.word	0x400e0400

00402688 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402688:	4b02      	ldr	r3, [pc, #8]	; (402694 <pmc_is_locked_pllack+0xc>)
  40268a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40268c:	f000 0002 	and.w	r0, r0, #2
  402690:	4770      	bx	lr
  402692:	bf00      	nop
  402694:	400e0400 	.word	0x400e0400

00402698 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  402698:	282f      	cmp	r0, #47	; 0x2f
  40269a:	d81e      	bhi.n	4026da <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40269c:	281f      	cmp	r0, #31
  40269e:	d80c      	bhi.n	4026ba <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4026a0:	4b11      	ldr	r3, [pc, #68]	; (4026e8 <pmc_enable_periph_clk+0x50>)
  4026a2:	699a      	ldr	r2, [r3, #24]
  4026a4:	2301      	movs	r3, #1
  4026a6:	4083      	lsls	r3, r0
  4026a8:	4393      	bics	r3, r2
  4026aa:	d018      	beq.n	4026de <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4026ac:	2301      	movs	r3, #1
  4026ae:	fa03 f000 	lsl.w	r0, r3, r0
  4026b2:	4b0d      	ldr	r3, [pc, #52]	; (4026e8 <pmc_enable_periph_clk+0x50>)
  4026b4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4026b6:	2000      	movs	r0, #0
  4026b8:	4770      	bx	lr
		ul_id -= 32;
  4026ba:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4026bc:	4b0a      	ldr	r3, [pc, #40]	; (4026e8 <pmc_enable_periph_clk+0x50>)
  4026be:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4026c2:	2301      	movs	r3, #1
  4026c4:	4083      	lsls	r3, r0
  4026c6:	4393      	bics	r3, r2
  4026c8:	d00b      	beq.n	4026e2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4026ca:	2301      	movs	r3, #1
  4026cc:	fa03 f000 	lsl.w	r0, r3, r0
  4026d0:	4b05      	ldr	r3, [pc, #20]	; (4026e8 <pmc_enable_periph_clk+0x50>)
  4026d2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4026d6:	2000      	movs	r0, #0
  4026d8:	4770      	bx	lr
		return 1;
  4026da:	2001      	movs	r0, #1
  4026dc:	4770      	bx	lr
	return 0;
  4026de:	2000      	movs	r0, #0
  4026e0:	4770      	bx	lr
  4026e2:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4026e4:	4770      	bx	lr
  4026e6:	bf00      	nop
  4026e8:	400e0400 	.word	0x400e0400

004026ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4026ec:	e7fe      	b.n	4026ec <Dummy_Handler>
	...

004026f0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4026f0:	b500      	push	{lr}
  4026f2:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4026f4:	4b25      	ldr	r3, [pc, #148]	; (40278c <Reset_Handler+0x9c>)
  4026f6:	4a26      	ldr	r2, [pc, #152]	; (402790 <Reset_Handler+0xa0>)
  4026f8:	429a      	cmp	r2, r3
  4026fa:	d010      	beq.n	40271e <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  4026fc:	4b25      	ldr	r3, [pc, #148]	; (402794 <Reset_Handler+0xa4>)
  4026fe:	4a23      	ldr	r2, [pc, #140]	; (40278c <Reset_Handler+0x9c>)
  402700:	429a      	cmp	r2, r3
  402702:	d20c      	bcs.n	40271e <Reset_Handler+0x2e>
  402704:	3b01      	subs	r3, #1
  402706:	1a9b      	subs	r3, r3, r2
  402708:	f023 0303 	bic.w	r3, r3, #3
  40270c:	3304      	adds	r3, #4
  40270e:	4413      	add	r3, r2
  402710:	491f      	ldr	r1, [pc, #124]	; (402790 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  402712:	f851 0b04 	ldr.w	r0, [r1], #4
  402716:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  40271a:	429a      	cmp	r2, r3
  40271c:	d1f9      	bne.n	402712 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40271e:	4b1e      	ldr	r3, [pc, #120]	; (402798 <Reset_Handler+0xa8>)
  402720:	4a1e      	ldr	r2, [pc, #120]	; (40279c <Reset_Handler+0xac>)
  402722:	429a      	cmp	r2, r3
  402724:	d20a      	bcs.n	40273c <Reset_Handler+0x4c>
  402726:	3b01      	subs	r3, #1
  402728:	1a9b      	subs	r3, r3, r2
  40272a:	f023 0303 	bic.w	r3, r3, #3
  40272e:	3304      	adds	r3, #4
  402730:	4413      	add	r3, r2
		*pDest++ = 0;
  402732:	2100      	movs	r1, #0
  402734:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  402738:	4293      	cmp	r3, r2
  40273a:	d1fb      	bne.n	402734 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40273c:	4a18      	ldr	r2, [pc, #96]	; (4027a0 <Reset_Handler+0xb0>)
  40273e:	4b19      	ldr	r3, [pc, #100]	; (4027a4 <Reset_Handler+0xb4>)
  402740:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402744:	6093      	str	r3, [r2, #8]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  402746:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40274a:	fab3 f383 	clz	r3, r3
  40274e:	095b      	lsrs	r3, r3, #5
  402750:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402752:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  402754:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402758:	2200      	movs	r2, #0
  40275a:	4b13      	ldr	r3, [pc, #76]	; (4027a8 <Reset_Handler+0xb8>)
  40275c:	701a      	strb	r2, [r3, #0]
	return flags;
  40275e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402760:	4a12      	ldr	r2, [pc, #72]	; (4027ac <Reset_Handler+0xbc>)
  402762:	6813      	ldr	r3, [r2, #0]
  402764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402768:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  40276a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40276e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402772:	b129      	cbz	r1, 402780 <Reset_Handler+0x90>
		cpu_irq_enable();
  402774:	2201      	movs	r2, #1
  402776:	4b0c      	ldr	r3, [pc, #48]	; (4027a8 <Reset_Handler+0xb8>)
  402778:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  40277a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40277e:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  402780:	4b0b      	ldr	r3, [pc, #44]	; (4027b0 <Reset_Handler+0xc0>)
  402782:	4798      	blx	r3

	/* Branch to main function */
	main();
  402784:	4b0b      	ldr	r3, [pc, #44]	; (4027b4 <Reset_Handler+0xc4>)
  402786:	4798      	blx	r3
  402788:	e7fe      	b.n	402788 <Reset_Handler+0x98>
  40278a:	bf00      	nop
  40278c:	20000000 	.word	0x20000000
  402790:	00402eb4 	.word	0x00402eb4
  402794:	2000043c 	.word	0x2000043c
  402798:	20000668 	.word	0x20000668
  40279c:	2000043c 	.word	0x2000043c
  4027a0:	e000ed00 	.word	0xe000ed00
  4027a4:	00400000 	.word	0x00400000
  4027a8:	20000004 	.word	0x20000004
  4027ac:	e000ed88 	.word	0xe000ed88
  4027b0:	00402a2d 	.word	0x00402a2d
  4027b4:	00402939 	.word	0x00402939

004027b8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4027b8:	4b3b      	ldr	r3, [pc, #236]	; (4028a8 <SystemCoreClockUpdate+0xf0>)
  4027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4027bc:	f003 0303 	and.w	r3, r3, #3
  4027c0:	2b01      	cmp	r3, #1
  4027c2:	d01d      	beq.n	402800 <SystemCoreClockUpdate+0x48>
  4027c4:	b183      	cbz	r3, 4027e8 <SystemCoreClockUpdate+0x30>
  4027c6:	2b02      	cmp	r3, #2
  4027c8:	d036      	beq.n	402838 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4027ca:	4b37      	ldr	r3, [pc, #220]	; (4028a8 <SystemCoreClockUpdate+0xf0>)
  4027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4027ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4027d2:	2b70      	cmp	r3, #112	; 0x70
  4027d4:	d05f      	beq.n	402896 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  4027d6:	4b34      	ldr	r3, [pc, #208]	; (4028a8 <SystemCoreClockUpdate+0xf0>)
  4027d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4027da:	4934      	ldr	r1, [pc, #208]	; (4028ac <SystemCoreClockUpdate+0xf4>)
  4027dc:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4027e0:	680b      	ldr	r3, [r1, #0]
  4027e2:	40d3      	lsrs	r3, r2
  4027e4:	600b      	str	r3, [r1, #0]
  4027e6:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4027e8:	4b31      	ldr	r3, [pc, #196]	; (4028b0 <SystemCoreClockUpdate+0xf8>)
  4027ea:	695b      	ldr	r3, [r3, #20]
  4027ec:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4027f0:	bf14      	ite	ne
  4027f2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4027f6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4027fa:	4b2c      	ldr	r3, [pc, #176]	; (4028ac <SystemCoreClockUpdate+0xf4>)
  4027fc:	601a      	str	r2, [r3, #0]
  4027fe:	e7e4      	b.n	4027ca <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402800:	4b29      	ldr	r3, [pc, #164]	; (4028a8 <SystemCoreClockUpdate+0xf0>)
  402802:	6a1b      	ldr	r3, [r3, #32]
  402804:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402808:	d003      	beq.n	402812 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40280a:	4a2a      	ldr	r2, [pc, #168]	; (4028b4 <SystemCoreClockUpdate+0xfc>)
  40280c:	4b27      	ldr	r3, [pc, #156]	; (4028ac <SystemCoreClockUpdate+0xf4>)
  40280e:	601a      	str	r2, [r3, #0]
  402810:	e7db      	b.n	4027ca <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402812:	4a29      	ldr	r2, [pc, #164]	; (4028b8 <SystemCoreClockUpdate+0x100>)
  402814:	4b25      	ldr	r3, [pc, #148]	; (4028ac <SystemCoreClockUpdate+0xf4>)
  402816:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402818:	4b23      	ldr	r3, [pc, #140]	; (4028a8 <SystemCoreClockUpdate+0xf0>)
  40281a:	6a1b      	ldr	r3, [r3, #32]
  40281c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402820:	2b10      	cmp	r3, #16
  402822:	d005      	beq.n	402830 <SystemCoreClockUpdate+0x78>
  402824:	2b20      	cmp	r3, #32
  402826:	d1d0      	bne.n	4027ca <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  402828:	4a22      	ldr	r2, [pc, #136]	; (4028b4 <SystemCoreClockUpdate+0xfc>)
  40282a:	4b20      	ldr	r3, [pc, #128]	; (4028ac <SystemCoreClockUpdate+0xf4>)
  40282c:	601a      	str	r2, [r3, #0]
				break;
  40282e:	e7cc      	b.n	4027ca <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  402830:	4a22      	ldr	r2, [pc, #136]	; (4028bc <SystemCoreClockUpdate+0x104>)
  402832:	4b1e      	ldr	r3, [pc, #120]	; (4028ac <SystemCoreClockUpdate+0xf4>)
  402834:	601a      	str	r2, [r3, #0]
				break;
  402836:	e7c8      	b.n	4027ca <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402838:	4b1b      	ldr	r3, [pc, #108]	; (4028a8 <SystemCoreClockUpdate+0xf0>)
  40283a:	6a1b      	ldr	r3, [r3, #32]
  40283c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402840:	d016      	beq.n	402870 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402842:	4a1c      	ldr	r2, [pc, #112]	; (4028b4 <SystemCoreClockUpdate+0xfc>)
  402844:	4b19      	ldr	r3, [pc, #100]	; (4028ac <SystemCoreClockUpdate+0xf4>)
  402846:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  402848:	4b17      	ldr	r3, [pc, #92]	; (4028a8 <SystemCoreClockUpdate+0xf0>)
  40284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40284c:	f003 0303 	and.w	r3, r3, #3
  402850:	2b02      	cmp	r3, #2
  402852:	d1ba      	bne.n	4027ca <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402854:	4a14      	ldr	r2, [pc, #80]	; (4028a8 <SystemCoreClockUpdate+0xf0>)
  402856:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402858:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40285a:	4814      	ldr	r0, [pc, #80]	; (4028ac <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40285c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  402860:	6803      	ldr	r3, [r0, #0]
  402862:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402866:	b2d2      	uxtb	r2, r2
  402868:	fbb3 f3f2 	udiv	r3, r3, r2
  40286c:	6003      	str	r3, [r0, #0]
  40286e:	e7ac      	b.n	4027ca <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402870:	4a11      	ldr	r2, [pc, #68]	; (4028b8 <SystemCoreClockUpdate+0x100>)
  402872:	4b0e      	ldr	r3, [pc, #56]	; (4028ac <SystemCoreClockUpdate+0xf4>)
  402874:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402876:	4b0c      	ldr	r3, [pc, #48]	; (4028a8 <SystemCoreClockUpdate+0xf0>)
  402878:	6a1b      	ldr	r3, [r3, #32]
  40287a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40287e:	2b10      	cmp	r3, #16
  402880:	d005      	beq.n	40288e <SystemCoreClockUpdate+0xd6>
  402882:	2b20      	cmp	r3, #32
  402884:	d1e0      	bne.n	402848 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  402886:	4a0b      	ldr	r2, [pc, #44]	; (4028b4 <SystemCoreClockUpdate+0xfc>)
  402888:	4b08      	ldr	r3, [pc, #32]	; (4028ac <SystemCoreClockUpdate+0xf4>)
  40288a:	601a      	str	r2, [r3, #0]
				break;
  40288c:	e7dc      	b.n	402848 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  40288e:	4a0b      	ldr	r2, [pc, #44]	; (4028bc <SystemCoreClockUpdate+0x104>)
  402890:	4b06      	ldr	r3, [pc, #24]	; (4028ac <SystemCoreClockUpdate+0xf4>)
  402892:	601a      	str	r2, [r3, #0]
				break;
  402894:	e7d8      	b.n	402848 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  402896:	4a05      	ldr	r2, [pc, #20]	; (4028ac <SystemCoreClockUpdate+0xf4>)
  402898:	6813      	ldr	r3, [r2, #0]
  40289a:	4909      	ldr	r1, [pc, #36]	; (4028c0 <SystemCoreClockUpdate+0x108>)
  40289c:	fba1 1303 	umull	r1, r3, r1, r3
  4028a0:	085b      	lsrs	r3, r3, #1
  4028a2:	6013      	str	r3, [r2, #0]
  4028a4:	4770      	bx	lr
  4028a6:	bf00      	nop
  4028a8:	400e0400 	.word	0x400e0400
  4028ac:	20000008 	.word	0x20000008
  4028b0:	400e1810 	.word	0x400e1810
  4028b4:	00b71b00 	.word	0x00b71b00
  4028b8:	003d0900 	.word	0x003d0900
  4028bc:	007a1200 	.word	0x007a1200
  4028c0:	aaaaaaab 	.word	0xaaaaaaab

004028c4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4028c4:	4b12      	ldr	r3, [pc, #72]	; (402910 <system_init_flash+0x4c>)
  4028c6:	4298      	cmp	r0, r3
  4028c8:	d911      	bls.n	4028ee <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4028ca:	4b12      	ldr	r3, [pc, #72]	; (402914 <system_init_flash+0x50>)
  4028cc:	4298      	cmp	r0, r3
  4028ce:	d913      	bls.n	4028f8 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4028d0:	4b11      	ldr	r3, [pc, #68]	; (402918 <system_init_flash+0x54>)
  4028d2:	4298      	cmp	r0, r3
  4028d4:	d914      	bls.n	402900 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4028d6:	4b11      	ldr	r3, [pc, #68]	; (40291c <system_init_flash+0x58>)
  4028d8:	4298      	cmp	r0, r3
  4028da:	d915      	bls.n	402908 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4028dc:	4b10      	ldr	r3, [pc, #64]	; (402920 <system_init_flash+0x5c>)
  4028de:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4028e0:	bf94      	ite	ls
  4028e2:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4028e6:	4a0f      	ldrhi	r2, [pc, #60]	; (402924 <system_init_flash+0x60>)
  4028e8:	4b0f      	ldr	r3, [pc, #60]	; (402928 <system_init_flash+0x64>)
  4028ea:	601a      	str	r2, [r3, #0]
  4028ec:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4028ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4028f2:	4b0d      	ldr	r3, [pc, #52]	; (402928 <system_init_flash+0x64>)
  4028f4:	601a      	str	r2, [r3, #0]
  4028f6:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4028f8:	4a0c      	ldr	r2, [pc, #48]	; (40292c <system_init_flash+0x68>)
  4028fa:	4b0b      	ldr	r3, [pc, #44]	; (402928 <system_init_flash+0x64>)
  4028fc:	601a      	str	r2, [r3, #0]
  4028fe:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402900:	4a0b      	ldr	r2, [pc, #44]	; (402930 <system_init_flash+0x6c>)
  402902:	4b09      	ldr	r3, [pc, #36]	; (402928 <system_init_flash+0x64>)
  402904:	601a      	str	r2, [r3, #0]
  402906:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402908:	4a0a      	ldr	r2, [pc, #40]	; (402934 <system_init_flash+0x70>)
  40290a:	4b07      	ldr	r3, [pc, #28]	; (402928 <system_init_flash+0x64>)
  40290c:	601a      	str	r2, [r3, #0]
  40290e:	4770      	bx	lr
  402910:	01312cff 	.word	0x01312cff
  402914:	026259ff 	.word	0x026259ff
  402918:	039386ff 	.word	0x039386ff
  40291c:	04c4b3ff 	.word	0x04c4b3ff
  402920:	05f5e0ff 	.word	0x05f5e0ff
  402924:	04000500 	.word	0x04000500
  402928:	400e0a00 	.word	0x400e0a00
  40292c:	04000100 	.word	0x04000100
  402930:	04000200 	.word	0x04000200
  402934:	04000300 	.word	0x04000300

00402938 <main>:
extern char _estack;

//make message enum that is increase or decrease. So the queue can send anything across.

int main (void)
{
  402938:	b500      	push	{lr}
  40293a:	b08b      	sub	sp, #44	; 0x2c
       vPortDefineHeapRegions( xHeapRegions );
}
static void prvMiscInitialisation( void )
{
       /* Initialize the SAM system */
       sysclk_init();
  40293c:	4b1b      	ldr	r3, [pc, #108]	; (4029ac <main+0x74>)
  40293e:	4798      	blx	r3
       board_init();
  402940:	4b1b      	ldr	r3, [pc, #108]	; (4029b0 <main+0x78>)
  402942:	4798      	blx	r3
       pucHeapStart = ( uint8_t * ) ( ( ( ( uint32_t ) &mainHEAP_START ) + 7 ) & ~0x07ul );
  402944:	4a1b      	ldr	r2, [pc, #108]	; (4029b4 <main+0x7c>)
       ulHeapSize = ( uint32_t ) ( ( uint32_t ) pucHeapEnd - ( uint32_t ) &mainHEAP_START );
  402946:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
  40294a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
       ulHeapSize &= ~0x07ul;
  40294e:	f023 0307 	bic.w	r3, r3, #7
       pucHeapStart = ( uint8_t * ) ( ( ( ( uint32_t ) &mainHEAP_START ) + 7 ) & ~0x07ul );
  402952:	3207      	adds	r2, #7
  402954:	f022 0207 	bic.w	r2, r2, #7
       HeapRegion_t xHeapRegions[] = {
  402958:	9202      	str	r2, [sp, #8]
       ulHeapSize -= 1024;
  40295a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
       HeapRegion_t xHeapRegions[] = {
  40295e:	9303      	str	r3, [sp, #12]
  402960:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  402964:	9304      	str	r3, [sp, #16]
  402966:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40296a:	9305      	str	r3, [sp, #20]
  40296c:	f04f 42c6 	mov.w	r2, #1660944384	; 0x63000000
  402970:	9206      	str	r2, [sp, #24]
  402972:	9307      	str	r3, [sp, #28]
  402974:	2400      	movs	r4, #0
  402976:	9408      	str	r4, [sp, #32]
  402978:	9409      	str	r4, [sp, #36]	; 0x24
       vPortDefineHeapRegions( xHeapRegions );
  40297a:	a802      	add	r0, sp, #8
  40297c:	4b0e      	ldr	r3, [pc, #56]	; (4029b8 <main+0x80>)
  40297e:	4798      	blx	r3
       prvInitialiseHeap();
       pmc_enable_periph_clk(ID_PIOA);
  402980:	2009      	movs	r0, #9
  402982:	4d0e      	ldr	r5, [pc, #56]	; (4029bc <main+0x84>)
  402984:	47a8      	blx	r5
       pmc_enable_periph_clk(ID_PIOB);
  402986:	200a      	movs	r0, #10
  402988:	47a8      	blx	r5
	intitializeLEDDriver();
  40298a:	4b0d      	ldr	r3, [pc, #52]	; (4029c0 <main+0x88>)
  40298c:	4798      	blx	r3
	initializeButtonDriver();
  40298e:	4b0d      	ldr	r3, [pc, #52]	; (4029c4 <main+0x8c>)
  402990:	4798      	blx	r3
	xTaskCreate(taskSystemControl,                       // Function Called by task
  402992:	9401      	str	r4, [sp, #4]
  402994:	2301      	movs	r3, #1
  402996:	9300      	str	r3, [sp, #0]
  402998:	4623      	mov	r3, r4
  40299a:	2282      	movs	r2, #130	; 0x82
  40299c:	490a      	ldr	r1, [pc, #40]	; (4029c8 <main+0x90>)
  40299e:	480b      	ldr	r0, [pc, #44]	; (4029cc <main+0x94>)
  4029a0:	4c0b      	ldr	r4, [pc, #44]	; (4029d0 <main+0x98>)
  4029a2:	47a0      	blx	r4
	vTaskStartScheduler();
  4029a4:	4b0b      	ldr	r3, [pc, #44]	; (4029d4 <main+0x9c>)
  4029a6:	4798      	blx	r3
  4029a8:	e7fe      	b.n	4029a8 <main+0x70>
  4029aa:	bf00      	nop
  4029ac:	004024d5 	.word	0x004024d5
  4029b0:	0040253d 	.word	0x0040253d
  4029b4:	20003668 	.word	0x20003668
  4029b8:	00400765 	.word	0x00400765
  4029bc:	00402699 	.word	0x00402699
  4029c0:	0040219d 	.word	0x0040219d
  4029c4:	004022cd 	.word	0x004022cd
  4029c8:	00402e6c 	.word	0x00402e6c
  4029cc:	004023c5 	.word	0x004023c5
  4029d0:	004011d5 	.word	0x004011d5
  4029d4:	00401571 	.word	0x00401571

004029d8 <vAssertCalled>:
}

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
  4029d8:	b082      	sub	sp, #8
       volatile uint32_t ulBlockVariable = 0UL;
  4029da:	2300      	movs	r3, #0
  4029dc:	9301      	str	r3, [sp, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4029de:	f04f 0350 	mov.w	r3, #80	; 0x50
  4029e2:	f383 8811 	msr	BASEPRI, r3
  4029e6:	f3bf 8f6f 	isb	sy
  4029ea:	f3bf 8f4f 	dsb	sy

       /* Setting ulBlockVariable to a non-zero value in the debugger will allow
       this function to be exited. */
       taskDISABLE_INTERRUPTS();
       {
              while( ulBlockVariable == 0UL )
  4029ee:	9b01      	ldr	r3, [sp, #4]
  4029f0:	b91b      	cbnz	r3, 4029fa <vAssertCalled+0x22>
              {
                     __asm volatile( "NOP" );
  4029f2:	bf00      	nop
              while( ulBlockVariable == 0UL )
  4029f4:	9b01      	ldr	r3, [sp, #4]
  4029f6:	2b00      	cmp	r3, #0
  4029f8:	d0fb      	beq.n	4029f2 <vAssertCalled+0x1a>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4029fa:	2300      	movs	r3, #0
  4029fc:	f383 8811 	msr	BASEPRI, r3
              }
       }
       taskENABLE_INTERRUPTS();
}
  402a00:	b002      	add	sp, #8
  402a02:	4770      	bx	lr

00402a04 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
  402a04:	b508      	push	{r3, lr}
       /* Called if a call to pvPortMalloc() fails because there is insufficient
       free memory available in the FreeRTOS heap.  pvPortMalloc() is called
       internally by FreeRTOS API functions that create tasks, queues, software
       timers, and semaphores.  The size of the FreeRTOS heap is set by the
       configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
       vAssertCalled( __FILE__, __LINE__ );
  402a06:	2197      	movs	r1, #151	; 0x97
  402a08:	4801      	ldr	r0, [pc, #4]	; (402a10 <vApplicationMallocFailedHook+0xc>)
  402a0a:	4b02      	ldr	r3, [pc, #8]	; (402a14 <vApplicationMallocFailedHook+0x10>)
  402a0c:	4798      	blx	r3
  402a0e:	bd08      	pop	{r3, pc}
  402a10:	00402e7c 	.word	0x00402e7c
  402a14:	004029d9 	.word	0x004029d9

00402a18 <vApplicationStackOverflowHook>:
	__asm volatile
  402a18:	f04f 0350 	mov.w	r3, #80	; 0x50
  402a1c:	f383 8811 	msr	BASEPRI, r3
  402a20:	f3bf 8f6f 	isb	sy
  402a24:	f3bf 8f4f 	dsb	sy
  402a28:	e7fe      	b.n	402a28 <vApplicationStackOverflowHook+0x10>
	...

00402a2c <__libc_init_array>:
  402a2c:	b570      	push	{r4, r5, r6, lr}
  402a2e:	4e0f      	ldr	r6, [pc, #60]	; (402a6c <__libc_init_array+0x40>)
  402a30:	4d0f      	ldr	r5, [pc, #60]	; (402a70 <__libc_init_array+0x44>)
  402a32:	1b76      	subs	r6, r6, r5
  402a34:	10b6      	asrs	r6, r6, #2
  402a36:	bf18      	it	ne
  402a38:	2400      	movne	r4, #0
  402a3a:	d005      	beq.n	402a48 <__libc_init_array+0x1c>
  402a3c:	3401      	adds	r4, #1
  402a3e:	f855 3b04 	ldr.w	r3, [r5], #4
  402a42:	4798      	blx	r3
  402a44:	42a6      	cmp	r6, r4
  402a46:	d1f9      	bne.n	402a3c <__libc_init_array+0x10>
  402a48:	4e0a      	ldr	r6, [pc, #40]	; (402a74 <__libc_init_array+0x48>)
  402a4a:	4d0b      	ldr	r5, [pc, #44]	; (402a78 <__libc_init_array+0x4c>)
  402a4c:	1b76      	subs	r6, r6, r5
  402a4e:	f000 fa1f 	bl	402e90 <_init>
  402a52:	10b6      	asrs	r6, r6, #2
  402a54:	bf18      	it	ne
  402a56:	2400      	movne	r4, #0
  402a58:	d006      	beq.n	402a68 <__libc_init_array+0x3c>
  402a5a:	3401      	adds	r4, #1
  402a5c:	f855 3b04 	ldr.w	r3, [r5], #4
  402a60:	4798      	blx	r3
  402a62:	42a6      	cmp	r6, r4
  402a64:	d1f9      	bne.n	402a5a <__libc_init_array+0x2e>
  402a66:	bd70      	pop	{r4, r5, r6, pc}
  402a68:	bd70      	pop	{r4, r5, r6, pc}
  402a6a:	bf00      	nop
  402a6c:	00402e9c 	.word	0x00402e9c
  402a70:	00402e9c 	.word	0x00402e9c
  402a74:	00402ea4 	.word	0x00402ea4
  402a78:	00402e9c 	.word	0x00402e9c

00402a7c <memcpy>:
  402a7c:	4684      	mov	ip, r0
  402a7e:	ea41 0300 	orr.w	r3, r1, r0
  402a82:	f013 0303 	ands.w	r3, r3, #3
  402a86:	d16d      	bne.n	402b64 <memcpy+0xe8>
  402a88:	3a40      	subs	r2, #64	; 0x40
  402a8a:	d341      	bcc.n	402b10 <memcpy+0x94>
  402a8c:	f851 3b04 	ldr.w	r3, [r1], #4
  402a90:	f840 3b04 	str.w	r3, [r0], #4
  402a94:	f851 3b04 	ldr.w	r3, [r1], #4
  402a98:	f840 3b04 	str.w	r3, [r0], #4
  402a9c:	f851 3b04 	ldr.w	r3, [r1], #4
  402aa0:	f840 3b04 	str.w	r3, [r0], #4
  402aa4:	f851 3b04 	ldr.w	r3, [r1], #4
  402aa8:	f840 3b04 	str.w	r3, [r0], #4
  402aac:	f851 3b04 	ldr.w	r3, [r1], #4
  402ab0:	f840 3b04 	str.w	r3, [r0], #4
  402ab4:	f851 3b04 	ldr.w	r3, [r1], #4
  402ab8:	f840 3b04 	str.w	r3, [r0], #4
  402abc:	f851 3b04 	ldr.w	r3, [r1], #4
  402ac0:	f840 3b04 	str.w	r3, [r0], #4
  402ac4:	f851 3b04 	ldr.w	r3, [r1], #4
  402ac8:	f840 3b04 	str.w	r3, [r0], #4
  402acc:	f851 3b04 	ldr.w	r3, [r1], #4
  402ad0:	f840 3b04 	str.w	r3, [r0], #4
  402ad4:	f851 3b04 	ldr.w	r3, [r1], #4
  402ad8:	f840 3b04 	str.w	r3, [r0], #4
  402adc:	f851 3b04 	ldr.w	r3, [r1], #4
  402ae0:	f840 3b04 	str.w	r3, [r0], #4
  402ae4:	f851 3b04 	ldr.w	r3, [r1], #4
  402ae8:	f840 3b04 	str.w	r3, [r0], #4
  402aec:	f851 3b04 	ldr.w	r3, [r1], #4
  402af0:	f840 3b04 	str.w	r3, [r0], #4
  402af4:	f851 3b04 	ldr.w	r3, [r1], #4
  402af8:	f840 3b04 	str.w	r3, [r0], #4
  402afc:	f851 3b04 	ldr.w	r3, [r1], #4
  402b00:	f840 3b04 	str.w	r3, [r0], #4
  402b04:	f851 3b04 	ldr.w	r3, [r1], #4
  402b08:	f840 3b04 	str.w	r3, [r0], #4
  402b0c:	3a40      	subs	r2, #64	; 0x40
  402b0e:	d2bd      	bcs.n	402a8c <memcpy+0x10>
  402b10:	3230      	adds	r2, #48	; 0x30
  402b12:	d311      	bcc.n	402b38 <memcpy+0xbc>
  402b14:	f851 3b04 	ldr.w	r3, [r1], #4
  402b18:	f840 3b04 	str.w	r3, [r0], #4
  402b1c:	f851 3b04 	ldr.w	r3, [r1], #4
  402b20:	f840 3b04 	str.w	r3, [r0], #4
  402b24:	f851 3b04 	ldr.w	r3, [r1], #4
  402b28:	f840 3b04 	str.w	r3, [r0], #4
  402b2c:	f851 3b04 	ldr.w	r3, [r1], #4
  402b30:	f840 3b04 	str.w	r3, [r0], #4
  402b34:	3a10      	subs	r2, #16
  402b36:	d2ed      	bcs.n	402b14 <memcpy+0x98>
  402b38:	320c      	adds	r2, #12
  402b3a:	d305      	bcc.n	402b48 <memcpy+0xcc>
  402b3c:	f851 3b04 	ldr.w	r3, [r1], #4
  402b40:	f840 3b04 	str.w	r3, [r0], #4
  402b44:	3a04      	subs	r2, #4
  402b46:	d2f9      	bcs.n	402b3c <memcpy+0xc0>
  402b48:	3204      	adds	r2, #4
  402b4a:	d008      	beq.n	402b5e <memcpy+0xe2>
  402b4c:	07d2      	lsls	r2, r2, #31
  402b4e:	bf1c      	itt	ne
  402b50:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402b54:	f800 3b01 	strbne.w	r3, [r0], #1
  402b58:	d301      	bcc.n	402b5e <memcpy+0xe2>
  402b5a:	880b      	ldrh	r3, [r1, #0]
  402b5c:	8003      	strh	r3, [r0, #0]
  402b5e:	4660      	mov	r0, ip
  402b60:	4770      	bx	lr
  402b62:	bf00      	nop
  402b64:	2a08      	cmp	r2, #8
  402b66:	d313      	bcc.n	402b90 <memcpy+0x114>
  402b68:	078b      	lsls	r3, r1, #30
  402b6a:	d08d      	beq.n	402a88 <memcpy+0xc>
  402b6c:	f010 0303 	ands.w	r3, r0, #3
  402b70:	d08a      	beq.n	402a88 <memcpy+0xc>
  402b72:	f1c3 0304 	rsb	r3, r3, #4
  402b76:	1ad2      	subs	r2, r2, r3
  402b78:	07db      	lsls	r3, r3, #31
  402b7a:	bf1c      	itt	ne
  402b7c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402b80:	f800 3b01 	strbne.w	r3, [r0], #1
  402b84:	d380      	bcc.n	402a88 <memcpy+0xc>
  402b86:	f831 3b02 	ldrh.w	r3, [r1], #2
  402b8a:	f820 3b02 	strh.w	r3, [r0], #2
  402b8e:	e77b      	b.n	402a88 <memcpy+0xc>
  402b90:	3a04      	subs	r2, #4
  402b92:	d3d9      	bcc.n	402b48 <memcpy+0xcc>
  402b94:	3a01      	subs	r2, #1
  402b96:	f811 3b01 	ldrb.w	r3, [r1], #1
  402b9a:	f800 3b01 	strb.w	r3, [r0], #1
  402b9e:	d2f9      	bcs.n	402b94 <memcpy+0x118>
  402ba0:	780b      	ldrb	r3, [r1, #0]
  402ba2:	7003      	strb	r3, [r0, #0]
  402ba4:	784b      	ldrb	r3, [r1, #1]
  402ba6:	7043      	strb	r3, [r0, #1]
  402ba8:	788b      	ldrb	r3, [r1, #2]
  402baa:	7083      	strb	r3, [r0, #2]
  402bac:	4660      	mov	r0, ip
  402bae:	4770      	bx	lr

00402bb0 <memset>:
  402bb0:	b470      	push	{r4, r5, r6}
  402bb2:	0786      	lsls	r6, r0, #30
  402bb4:	d046      	beq.n	402c44 <memset+0x94>
  402bb6:	1e54      	subs	r4, r2, #1
  402bb8:	2a00      	cmp	r2, #0
  402bba:	d041      	beq.n	402c40 <memset+0x90>
  402bbc:	b2ca      	uxtb	r2, r1
  402bbe:	4603      	mov	r3, r0
  402bc0:	e002      	b.n	402bc8 <memset+0x18>
  402bc2:	f114 34ff 	adds.w	r4, r4, #4294967295
  402bc6:	d33b      	bcc.n	402c40 <memset+0x90>
  402bc8:	f803 2b01 	strb.w	r2, [r3], #1
  402bcc:	079d      	lsls	r5, r3, #30
  402bce:	d1f8      	bne.n	402bc2 <memset+0x12>
  402bd0:	2c03      	cmp	r4, #3
  402bd2:	d92e      	bls.n	402c32 <memset+0x82>
  402bd4:	b2cd      	uxtb	r5, r1
  402bd6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402bda:	2c0f      	cmp	r4, #15
  402bdc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402be0:	d919      	bls.n	402c16 <memset+0x66>
  402be2:	f103 0210 	add.w	r2, r3, #16
  402be6:	4626      	mov	r6, r4
  402be8:	3e10      	subs	r6, #16
  402bea:	2e0f      	cmp	r6, #15
  402bec:	f842 5c10 	str.w	r5, [r2, #-16]
  402bf0:	f842 5c0c 	str.w	r5, [r2, #-12]
  402bf4:	f842 5c08 	str.w	r5, [r2, #-8]
  402bf8:	f842 5c04 	str.w	r5, [r2, #-4]
  402bfc:	f102 0210 	add.w	r2, r2, #16
  402c00:	d8f2      	bhi.n	402be8 <memset+0x38>
  402c02:	f1a4 0210 	sub.w	r2, r4, #16
  402c06:	f022 020f 	bic.w	r2, r2, #15
  402c0a:	f004 040f 	and.w	r4, r4, #15
  402c0e:	3210      	adds	r2, #16
  402c10:	2c03      	cmp	r4, #3
  402c12:	4413      	add	r3, r2
  402c14:	d90d      	bls.n	402c32 <memset+0x82>
  402c16:	461e      	mov	r6, r3
  402c18:	4622      	mov	r2, r4
  402c1a:	3a04      	subs	r2, #4
  402c1c:	2a03      	cmp	r2, #3
  402c1e:	f846 5b04 	str.w	r5, [r6], #4
  402c22:	d8fa      	bhi.n	402c1a <memset+0x6a>
  402c24:	1f22      	subs	r2, r4, #4
  402c26:	f022 0203 	bic.w	r2, r2, #3
  402c2a:	3204      	adds	r2, #4
  402c2c:	4413      	add	r3, r2
  402c2e:	f004 0403 	and.w	r4, r4, #3
  402c32:	b12c      	cbz	r4, 402c40 <memset+0x90>
  402c34:	b2c9      	uxtb	r1, r1
  402c36:	441c      	add	r4, r3
  402c38:	f803 1b01 	strb.w	r1, [r3], #1
  402c3c:	429c      	cmp	r4, r3
  402c3e:	d1fb      	bne.n	402c38 <memset+0x88>
  402c40:	bc70      	pop	{r4, r5, r6}
  402c42:	4770      	bx	lr
  402c44:	4614      	mov	r4, r2
  402c46:	4603      	mov	r3, r0
  402c48:	e7c2      	b.n	402bd0 <memset+0x20>
  402c4a:	bf00      	nop

00402c4c <register_fini>:
  402c4c:	4b02      	ldr	r3, [pc, #8]	; (402c58 <register_fini+0xc>)
  402c4e:	b113      	cbz	r3, 402c56 <register_fini+0xa>
  402c50:	4802      	ldr	r0, [pc, #8]	; (402c5c <register_fini+0x10>)
  402c52:	f000 b805 	b.w	402c60 <atexit>
  402c56:	4770      	bx	lr
  402c58:	00000000 	.word	0x00000000
  402c5c:	00402c6d 	.word	0x00402c6d

00402c60 <atexit>:
  402c60:	2300      	movs	r3, #0
  402c62:	4601      	mov	r1, r0
  402c64:	461a      	mov	r2, r3
  402c66:	4618      	mov	r0, r3
  402c68:	f000 b81e 	b.w	402ca8 <__register_exitproc>

00402c6c <__libc_fini_array>:
  402c6c:	b538      	push	{r3, r4, r5, lr}
  402c6e:	4c0a      	ldr	r4, [pc, #40]	; (402c98 <__libc_fini_array+0x2c>)
  402c70:	4d0a      	ldr	r5, [pc, #40]	; (402c9c <__libc_fini_array+0x30>)
  402c72:	1b64      	subs	r4, r4, r5
  402c74:	10a4      	asrs	r4, r4, #2
  402c76:	d00a      	beq.n	402c8e <__libc_fini_array+0x22>
  402c78:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402c7c:	3b01      	subs	r3, #1
  402c7e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402c82:	3c01      	subs	r4, #1
  402c84:	f855 3904 	ldr.w	r3, [r5], #-4
  402c88:	4798      	blx	r3
  402c8a:	2c00      	cmp	r4, #0
  402c8c:	d1f9      	bne.n	402c82 <__libc_fini_array+0x16>
  402c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402c92:	f000 b907 	b.w	402ea4 <_fini>
  402c96:	bf00      	nop
  402c98:	00402eb4 	.word	0x00402eb4
  402c9c:	00402eb0 	.word	0x00402eb0

00402ca0 <__retarget_lock_acquire_recursive>:
  402ca0:	4770      	bx	lr
  402ca2:	bf00      	nop

00402ca4 <__retarget_lock_release_recursive>:
  402ca4:	4770      	bx	lr
  402ca6:	bf00      	nop

00402ca8 <__register_exitproc>:
  402ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402cac:	4d2c      	ldr	r5, [pc, #176]	; (402d60 <__register_exitproc+0xb8>)
  402cae:	4606      	mov	r6, r0
  402cb0:	6828      	ldr	r0, [r5, #0]
  402cb2:	4698      	mov	r8, r3
  402cb4:	460f      	mov	r7, r1
  402cb6:	4691      	mov	r9, r2
  402cb8:	f7ff fff2 	bl	402ca0 <__retarget_lock_acquire_recursive>
  402cbc:	4b29      	ldr	r3, [pc, #164]	; (402d64 <__register_exitproc+0xbc>)
  402cbe:	681c      	ldr	r4, [r3, #0]
  402cc0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402cc4:	2b00      	cmp	r3, #0
  402cc6:	d03e      	beq.n	402d46 <__register_exitproc+0x9e>
  402cc8:	685a      	ldr	r2, [r3, #4]
  402cca:	2a1f      	cmp	r2, #31
  402ccc:	dc1c      	bgt.n	402d08 <__register_exitproc+0x60>
  402cce:	f102 0e01 	add.w	lr, r2, #1
  402cd2:	b176      	cbz	r6, 402cf2 <__register_exitproc+0x4a>
  402cd4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402cd8:	2401      	movs	r4, #1
  402cda:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402cde:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402ce2:	4094      	lsls	r4, r2
  402ce4:	4320      	orrs	r0, r4
  402ce6:	2e02      	cmp	r6, #2
  402ce8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402cec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402cf0:	d023      	beq.n	402d3a <__register_exitproc+0x92>
  402cf2:	3202      	adds	r2, #2
  402cf4:	f8c3 e004 	str.w	lr, [r3, #4]
  402cf8:	6828      	ldr	r0, [r5, #0]
  402cfa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  402cfe:	f7ff ffd1 	bl	402ca4 <__retarget_lock_release_recursive>
  402d02:	2000      	movs	r0, #0
  402d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402d08:	4b17      	ldr	r3, [pc, #92]	; (402d68 <__register_exitproc+0xc0>)
  402d0a:	b30b      	cbz	r3, 402d50 <__register_exitproc+0xa8>
  402d0c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402d10:	f3af 8000 	nop.w
  402d14:	4603      	mov	r3, r0
  402d16:	b1d8      	cbz	r0, 402d50 <__register_exitproc+0xa8>
  402d18:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402d1c:	6002      	str	r2, [r0, #0]
  402d1e:	2100      	movs	r1, #0
  402d20:	6041      	str	r1, [r0, #4]
  402d22:	460a      	mov	r2, r1
  402d24:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402d28:	f04f 0e01 	mov.w	lr, #1
  402d2c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402d30:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402d34:	2e00      	cmp	r6, #0
  402d36:	d0dc      	beq.n	402cf2 <__register_exitproc+0x4a>
  402d38:	e7cc      	b.n	402cd4 <__register_exitproc+0x2c>
  402d3a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  402d3e:	430c      	orrs	r4, r1
  402d40:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402d44:	e7d5      	b.n	402cf2 <__register_exitproc+0x4a>
  402d46:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402d4a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  402d4e:	e7bb      	b.n	402cc8 <__register_exitproc+0x20>
  402d50:	6828      	ldr	r0, [r5, #0]
  402d52:	f7ff ffa7 	bl	402ca4 <__retarget_lock_release_recursive>
  402d56:	f04f 30ff 	mov.w	r0, #4294967295
  402d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402d5e:	bf00      	nop
  402d60:	20000438 	.word	0x20000438
  402d64:	00402e8c 	.word	0x00402e8c
  402d68:	00000000 	.word	0x00000000
  402d6c:	732f2e2e 	.word	0x732f2e2e
  402d70:	462f6372 	.word	0x462f6372
  402d74:	52656572 	.word	0x52656572
  402d78:	2f534f54 	.word	0x2f534f54
  402d7c:	74726f70 	.word	0x74726f70
  402d80:	656c6261 	.word	0x656c6261
  402d84:	4343472f 	.word	0x4343472f
  402d88:	4d52412f 	.word	0x4d52412f
  402d8c:	344d435f 	.word	0x344d435f
  402d90:	6f702f46 	.word	0x6f702f46
  402d94:	632e7472 	.word	0x632e7472
  402d98:	00000000 	.word	0x00000000
  402d9c:	732f2e2e 	.word	0x732f2e2e
  402da0:	462f6372 	.word	0x462f6372
  402da4:	52656572 	.word	0x52656572
  402da8:	2f534f54 	.word	0x2f534f54
  402dac:	74726f70 	.word	0x74726f70
  402db0:	656c6261 	.word	0x656c6261
  402db4:	6d654d2f 	.word	0x6d654d2f
  402db8:	676e614d 	.word	0x676e614d
  402dbc:	6165682f 	.word	0x6165682f
  402dc0:	2e355f70 	.word	0x2e355f70
  402dc4:	00000063 	.word	0x00000063
  402dc8:	732f2e2e 	.word	0x732f2e2e
  402dcc:	462f6372 	.word	0x462f6372
  402dd0:	52656572 	.word	0x52656572
  402dd4:	2f534f54 	.word	0x2f534f54
  402dd8:	75657571 	.word	0x75657571
  402ddc:	00632e65 	.word	0x00632e65
  402de0:	732f2e2e 	.word	0x732f2e2e
  402de4:	462f6372 	.word	0x462f6372
  402de8:	52656572 	.word	0x52656572
  402dec:	2f534f54 	.word	0x2f534f54
  402df0:	6b736174 	.word	0x6b736174
  402df4:	00632e73 	.word	0x00632e73
  402df8:	454c4449 	.word	0x454c4449
  402dfc:	00000000 	.word	0x00000000
  402e00:	51726d54 	.word	0x51726d54
  402e04:	00000000 	.word	0x00000000
  402e08:	20726d54 	.word	0x20726d54
  402e0c:	00637653 	.word	0x00637653
  402e10:	732f2e2e 	.word	0x732f2e2e
  402e14:	462f6372 	.word	0x462f6372
  402e18:	52656572 	.word	0x52656572
  402e1c:	2f534f54 	.word	0x2f534f54
  402e20:	656d6974 	.word	0x656d6974
  402e24:	632e7372 	.word	0x632e7372
  402e28:	00000000 	.word	0x00000000
  402e2c:	3044454c 	.word	0x3044454c
  402e30:	61654820 	.word	0x61654820
  402e34:	42207472 	.word	0x42207472
  402e38:	00746165 	.word	0x00746165
  402e3c:	3144454c 	.word	0x3144454c
  402e40:	61654820 	.word	0x61654820
  402e44:	42207472 	.word	0x42207472
  402e48:	00746165 	.word	0x00746165
  402e4c:	3244454c 	.word	0x3244454c
  402e50:	61654820 	.word	0x61654820
  402e54:	42207472 	.word	0x42207472
  402e58:	00746165 	.word	0x00746165
  402e5c:	3344454c 	.word	0x3344454c
  402e60:	61654820 	.word	0x61654820
  402e64:	42207472 	.word	0x42207472
  402e68:	00746165 	.word	0x00746165
  402e6c:	4220794d 	.word	0x4220794d
  402e70:	6f747475 	.word	0x6f747475
  402e74:	6154206e 	.word	0x6154206e
  402e78:	00006b73 	.word	0x00006b73
  402e7c:	732f2e2e 	.word	0x732f2e2e
  402e80:	6d2f6372 	.word	0x6d2f6372
  402e84:	2e6e6961 	.word	0x2e6e6961
  402e88:	00000063 	.word	0x00000063

00402e8c <_global_impure_ptr>:
  402e8c:	20000010                                ... 

00402e90 <_init>:
  402e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402e92:	bf00      	nop
  402e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402e96:	bc08      	pop	{r3}
  402e98:	469e      	mov	lr, r3
  402e9a:	4770      	bx	lr

00402e9c <__init_array_start>:
  402e9c:	00402c4d 	.word	0x00402c4d

00402ea0 <__frame_dummy_init_array_entry>:
  402ea0:	0040011d                                ..@.

00402ea4 <_fini>:
  402ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402ea6:	bf00      	nop
  402ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402eaa:	bc08      	pop	{r3}
  402eac:	469e      	mov	lr, r3
  402eae:	4770      	bx	lr

00402eb0 <__fini_array_start>:
  402eb0:	004000f9 	.word	0x004000f9
