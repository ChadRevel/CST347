
Lab03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032ec  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000045c  20000000  004032ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002a8  2000045c  00403748  0002045c  2**2
                  ALLOC
  3 .stack        00003004  20000704  004039f0  0002045c  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002048a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00015f26  00000000  00000000  000204e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fd6  00000000  00000000  00036409  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006bd6  00000000  00000000  000393df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008a0  00000000  00000000  0003ffb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000998  00000000  00000000  00040855  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018690  00000000  00000000  000411ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b16a  00000000  00000000  0005987d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00069853  00000000  00000000  000649e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001778  00000000  00000000  000ce23c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	08 37 00 20 35 28 40 00 31 28 40 00 31 28 40 00     .7. 5(@.1(@.1(@.
  400010:	31 28 40 00 31 28 40 00 31 28 40 00 00 00 00 00     1(@.1(@.1(@.....
	...
  40002c:	a1 02 40 00 31 28 40 00 00 00 00 00 41 03 40 00     ..@.1(@.....A.@.
  40003c:	a5 03 40 00 31 28 40 00 31 28 40 00 31 28 40 00     ..@.1(@.1(@.1(@.
  40004c:	31 28 40 00 31 28 40 00 31 28 40 00 31 28 40 00     1(@.1(@.1(@.1(@.
  40005c:	31 28 40 00 31 28 40 00 31 28 40 00 31 28 40 00     1(@.1(@.1(@.1(@.
  40006c:	31 28 40 00 31 28 40 00 31 28 40 00 31 28 40 00     1(@.1(@.1(@.1(@.
  40007c:	31 28 40 00 31 28 40 00 31 28 40 00 31 28 40 00     1(@.1(@.1(@.1(@.
  40008c:	31 28 40 00 31 28 40 00 31 28 40 00 31 28 40 00     1(@.1(@.1(@.1(@.
  40009c:	31 28 40 00 31 28 40 00 31 28 40 00 31 28 40 00     1(@.1(@.1(@.1(@.
  4000ac:	31 28 40 00 31 28 40 00 31 28 40 00 31 28 40 00     1(@.1(@.1(@.1(@.
  4000bc:	31 28 40 00 31 28 40 00 31 28 40 00 31 28 40 00     1(@.1(@.1(@.1(@.
  4000cc:	31 28 40 00 31 28 40 00 31 28 40 00 31 28 40 00     1(@.1(@.1(@.1(@.
  4000dc:	31 28 40 00 31 28 40 00 31 28 40 00 31 28 40 00     1(@.1(@.1(@.1(@.
  4000ec:	31 28 40 00 31 28 40 00 31 28 40 00                 1(@.1(@.1(@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	2000045c 	.word	0x2000045c
  400114:	00000000 	.word	0x00000000
  400118:	004032ec 	.word	0x004032ec

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	004032ec 	.word	0x004032ec
  400158:	20000460 	.word	0x20000460
  40015c:	004032ec 	.word	0x004032ec
  400160:	00000000 	.word	0x00000000

00400164 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400164:	f100 0308 	add.w	r3, r0, #8
  400168:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40016a:	f04f 32ff 	mov.w	r2, #4294967295
  40016e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400170:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400172:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400174:	2300      	movs	r3, #0
  400176:	6003      	str	r3, [r0, #0]
  400178:	4770      	bx	lr

0040017a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
  40017a:	2300      	movs	r3, #0
  40017c:	6103      	str	r3, [r0, #16]
  40017e:	4770      	bx	lr

00400180 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400180:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400182:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400184:	689a      	ldr	r2, [r3, #8]
  400186:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400188:	689a      	ldr	r2, [r3, #8]
  40018a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  40018c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
  40018e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400190:	6803      	ldr	r3, [r0, #0]
  400192:	3301      	adds	r3, #1
  400194:	6003      	str	r3, [r0, #0]
  400196:	4770      	bx	lr

00400198 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400198:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40019a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40019c:	f1b5 3fff 	cmp.w	r5, #4294967295
  4001a0:	d002      	beq.n	4001a8 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  4001a2:	f100 0208 	add.w	r2, r0, #8
  4001a6:	e002      	b.n	4001ae <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4001a8:	6902      	ldr	r2, [r0, #16]
  4001aa:	e004      	b.n	4001b6 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  4001ac:	461a      	mov	r2, r3
  4001ae:	6853      	ldr	r3, [r2, #4]
  4001b0:	681c      	ldr	r4, [r3, #0]
  4001b2:	42a5      	cmp	r5, r4
  4001b4:	d2fa      	bcs.n	4001ac <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4001b6:	6853      	ldr	r3, [r2, #4]
  4001b8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4001ba:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4001bc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4001be:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
  4001c0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4001c2:	6803      	ldr	r3, [r0, #0]
  4001c4:	3301      	adds	r3, #1
  4001c6:	6003      	str	r3, [r0, #0]
}
  4001c8:	bc30      	pop	{r4, r5}
  4001ca:	4770      	bx	lr

004001cc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
  4001cc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4001ce:	6842      	ldr	r2, [r0, #4]
  4001d0:	6881      	ldr	r1, [r0, #8]
  4001d2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4001d4:	6882      	ldr	r2, [r0, #8]
  4001d6:	6841      	ldr	r1, [r0, #4]
  4001d8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4001da:	685a      	ldr	r2, [r3, #4]
  4001dc:	4290      	cmp	r0, r2
  4001de:	d006      	beq.n	4001ee <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
  4001e0:	2200      	movs	r2, #0
  4001e2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4001e4:	681a      	ldr	r2, [r3, #0]
  4001e6:	3a01      	subs	r2, #1
  4001e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  4001ea:	6818      	ldr	r0, [r3, #0]
}
  4001ec:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4001ee:	6882      	ldr	r2, [r0, #8]
  4001f0:	605a      	str	r2, [r3, #4]
  4001f2:	e7f5      	b.n	4001e0 <uxListRemove+0x14>

004001f4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
  4001f4:	4808      	ldr	r0, [pc, #32]	; (400218 <prvPortStartFirstTask+0x24>)
  4001f6:	6800      	ldr	r0, [r0, #0]
  4001f8:	6800      	ldr	r0, [r0, #0]
  4001fa:	f380 8808 	msr	MSP, r0
  4001fe:	f04f 0000 	mov.w	r0, #0
  400202:	f380 8814 	msr	CONTROL, r0
  400206:	b662      	cpsie	i
  400208:	b661      	cpsie	f
  40020a:	f3bf 8f4f 	dsb	sy
  40020e:	f3bf 8f6f 	isb	sy
  400212:	df00      	svc	0
  400214:	bf00      	nop
  400216:	0000      	.short	0x0000
  400218:	e000ed08 	.word	0xe000ed08

0040021c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40021c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40022c <vPortEnableVFP+0x10>
  400220:	6801      	ldr	r1, [r0, #0]
  400222:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400226:	6001      	str	r1, [r0, #0]
  400228:	4770      	bx	lr
  40022a:	0000      	.short	0x0000
  40022c:	e000ed88 	.word	0xe000ed88

00400230 <prvTaskExitError>:
{
  400230:	b500      	push	{lr}
  400232:	b083      	sub	sp, #12
volatile uint32_t ulDummy = 0;
  400234:	2300      	movs	r3, #0
  400236:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
  400238:	4b0b      	ldr	r3, [pc, #44]	; (400268 <prvTaskExitError+0x38>)
  40023a:	681b      	ldr	r3, [r3, #0]
  40023c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400240:	d003      	beq.n	40024a <prvTaskExitError+0x1a>
  400242:	21e3      	movs	r1, #227	; 0xe3
  400244:	4809      	ldr	r0, [pc, #36]	; (40026c <prvTaskExitError+0x3c>)
  400246:	4b0a      	ldr	r3, [pc, #40]	; (400270 <prvTaskExitError+0x40>)
  400248:	4798      	blx	r3

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40024a:	f04f 0350 	mov.w	r3, #80	; 0x50
  40024e:	f383 8811 	msr	BASEPRI, r3
  400252:	f3bf 8f6f 	isb	sy
  400256:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
  40025a:	9b01      	ldr	r3, [sp, #4]
  40025c:	2b00      	cmp	r3, #0
  40025e:	d0fc      	beq.n	40025a <prvTaskExitError+0x2a>
}
  400260:	b003      	add	sp, #12
  400262:	f85d fb04 	ldr.w	pc, [sp], #4
  400266:	bf00      	nop
  400268:	20000000 	.word	0x20000000
  40026c:	00403074 	.word	0x00403074
  400270:	00402ce1 	.word	0x00402ce1

00400274 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400278:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  40027c:	f021 0101 	bic.w	r1, r1, #1
  400280:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400284:	4b05      	ldr	r3, [pc, #20]	; (40029c <pxPortInitialiseStack+0x28>)
  400286:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40028a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  40028e:	f06f 0302 	mvn.w	r3, #2
  400292:	f840 3c24 	str.w	r3, [r0, #-36]
}
  400296:	3844      	subs	r0, #68	; 0x44
  400298:	4770      	bx	lr
  40029a:	bf00      	nop
  40029c:	00400231 	.word	0x00400231

004002a0 <SVC_Handler>:
	__asm volatile (
  4002a0:	4b07      	ldr	r3, [pc, #28]	; (4002c0 <pxCurrentTCBConst2>)
  4002a2:	6819      	ldr	r1, [r3, #0]
  4002a4:	6808      	ldr	r0, [r1, #0]
  4002a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4002aa:	f380 8809 	msr	PSP, r0
  4002ae:	f3bf 8f6f 	isb	sy
  4002b2:	f04f 0000 	mov.w	r0, #0
  4002b6:	f380 8811 	msr	BASEPRI, r0
  4002ba:	4770      	bx	lr
  4002bc:	f3af 8000 	nop.w

004002c0 <pxCurrentTCBConst2>:
  4002c0:	20000498 	.word	0x20000498

004002c4 <vPortEnterCritical>:
{
  4002c4:	b508      	push	{r3, lr}
  4002c6:	f04f 0350 	mov.w	r3, #80	; 0x50
  4002ca:	f383 8811 	msr	BASEPRI, r3
  4002ce:	f3bf 8f6f 	isb	sy
  4002d2:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
  4002d6:	4a09      	ldr	r2, [pc, #36]	; (4002fc <vPortEnterCritical+0x38>)
  4002d8:	6813      	ldr	r3, [r2, #0]
  4002da:	3301      	adds	r3, #1
  4002dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4002de:	2b01      	cmp	r3, #1
  4002e0:	d000      	beq.n	4002e4 <vPortEnterCritical+0x20>
  4002e2:	bd08      	pop	{r3, pc}
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4002e4:	4b06      	ldr	r3, [pc, #24]	; (400300 <vPortEnterCritical+0x3c>)
  4002e6:	681b      	ldr	r3, [r3, #0]
  4002e8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4002ec:	d0f9      	beq.n	4002e2 <vPortEnterCritical+0x1e>
  4002ee:	f240 119f 	movw	r1, #415	; 0x19f
  4002f2:	4804      	ldr	r0, [pc, #16]	; (400304 <vPortEnterCritical+0x40>)
  4002f4:	4b04      	ldr	r3, [pc, #16]	; (400308 <vPortEnterCritical+0x44>)
  4002f6:	4798      	blx	r3
}
  4002f8:	e7f3      	b.n	4002e2 <vPortEnterCritical+0x1e>
  4002fa:	bf00      	nop
  4002fc:	20000000 	.word	0x20000000
  400300:	e000ed04 	.word	0xe000ed04
  400304:	00403074 	.word	0x00403074
  400308:	00402ce1 	.word	0x00402ce1

0040030c <vPortExitCritical>:
{
  40030c:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
  40030e:	4b08      	ldr	r3, [pc, #32]	; (400330 <vPortExitCritical+0x24>)
  400310:	681b      	ldr	r3, [r3, #0]
  400312:	b13b      	cbz	r3, 400324 <vPortExitCritical+0x18>
	uxCriticalNesting--;
  400314:	4a06      	ldr	r2, [pc, #24]	; (400330 <vPortExitCritical+0x24>)
  400316:	6813      	ldr	r3, [r2, #0]
  400318:	3b01      	subs	r3, #1
  40031a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40031c:	b90b      	cbnz	r3, 400322 <vPortExitCritical+0x16>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  40031e:	f383 8811 	msr	BASEPRI, r3
  400322:	bd08      	pop	{r3, pc}
	configASSERT( uxCriticalNesting );
  400324:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
  400328:	4802      	ldr	r0, [pc, #8]	; (400334 <vPortExitCritical+0x28>)
  40032a:	4b03      	ldr	r3, [pc, #12]	; (400338 <vPortExitCritical+0x2c>)
  40032c:	4798      	blx	r3
  40032e:	e7f1      	b.n	400314 <vPortExitCritical+0x8>
  400330:	20000000 	.word	0x20000000
  400334:	00403074 	.word	0x00403074
  400338:	00402ce1 	.word	0x00402ce1
  40033c:	00000000 	.word	0x00000000

00400340 <PendSV_Handler>:
	__asm volatile
  400340:	f3ef 8009 	mrs	r0, PSP
  400344:	f3bf 8f6f 	isb	sy
  400348:	4b15      	ldr	r3, [pc, #84]	; (4003a0 <pxCurrentTCBConst>)
  40034a:	681a      	ldr	r2, [r3, #0]
  40034c:	f01e 0f10 	tst.w	lr, #16
  400350:	bf08      	it	eq
  400352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40035a:	6010      	str	r0, [r2, #0]
  40035c:	e92d 0009 	stmdb	sp!, {r0, r3}
  400360:	f04f 0050 	mov.w	r0, #80	; 0x50
  400364:	f380 8811 	msr	BASEPRI, r0
  400368:	f3bf 8f4f 	dsb	sy
  40036c:	f3bf 8f6f 	isb	sy
  400370:	f001 fa76 	bl	401860 <vTaskSwitchContext>
  400374:	f04f 0000 	mov.w	r0, #0
  400378:	f380 8811 	msr	BASEPRI, r0
  40037c:	bc09      	pop	{r0, r3}
  40037e:	6819      	ldr	r1, [r3, #0]
  400380:	6808      	ldr	r0, [r1, #0]
  400382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400386:	f01e 0f10 	tst.w	lr, #16
  40038a:	bf08      	it	eq
  40038c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400390:	f380 8809 	msr	PSP, r0
  400394:	f3bf 8f6f 	isb	sy
  400398:	4770      	bx	lr
  40039a:	bf00      	nop
  40039c:	f3af 8000 	nop.w

004003a0 <pxCurrentTCBConst>:
  4003a0:	20000498 	.word	0x20000498

004003a4 <SysTick_Handler>:
{
  4003a4:	b508      	push	{r3, lr}
	__asm volatile
  4003a6:	f04f 0350 	mov.w	r3, #80	; 0x50
  4003aa:	f383 8811 	msr	BASEPRI, r3
  4003ae:	f3bf 8f6f 	isb	sy
  4003b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
  4003b6:	4b05      	ldr	r3, [pc, #20]	; (4003cc <SysTick_Handler+0x28>)
  4003b8:	4798      	blx	r3
  4003ba:	b118      	cbz	r0, 4003c4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4003bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4003c0:	4b03      	ldr	r3, [pc, #12]	; (4003d0 <SysTick_Handler+0x2c>)
  4003c2:	601a      	str	r2, [r3, #0]
	__asm volatile
  4003c4:	2300      	movs	r3, #0
  4003c6:	f383 8811 	msr	BASEPRI, r3
  4003ca:	bd08      	pop	{r3, pc}
  4003cc:	004015c9 	.word	0x004015c9
  4003d0:	e000ed04 	.word	0xe000ed04

004003d4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  4003d4:	4a08      	ldr	r2, [pc, #32]	; (4003f8 <vPortSetupTimerInterrupt+0x24>)
  4003d6:	2300      	movs	r3, #0
  4003d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  4003da:	4908      	ldr	r1, [pc, #32]	; (4003fc <vPortSetupTimerInterrupt+0x28>)
  4003dc:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4003de:	4b08      	ldr	r3, [pc, #32]	; (400400 <vPortSetupTimerInterrupt+0x2c>)
  4003e0:	681b      	ldr	r3, [r3, #0]
  4003e2:	4908      	ldr	r1, [pc, #32]	; (400404 <vPortSetupTimerInterrupt+0x30>)
  4003e4:	fba1 1303 	umull	r1, r3, r1, r3
  4003e8:	099b      	lsrs	r3, r3, #6
  4003ea:	3b01      	subs	r3, #1
  4003ec:	4906      	ldr	r1, [pc, #24]	; (400408 <vPortSetupTimerInterrupt+0x34>)
  4003ee:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4003f0:	2307      	movs	r3, #7
  4003f2:	6013      	str	r3, [r2, #0]
  4003f4:	4770      	bx	lr
  4003f6:	bf00      	nop
  4003f8:	e000e010 	.word	0xe000e010
  4003fc:	e000e018 	.word	0xe000e018
  400400:	20000008 	.word	0x20000008
  400404:	10624dd3 	.word	0x10624dd3
  400408:	e000e014 	.word	0xe000e014

0040040c <xPortStartScheduler>:
{
  40040c:	b510      	push	{r4, lr}
  40040e:	b082      	sub	sp, #8
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  400410:	4b34      	ldr	r3, [pc, #208]	; (4004e4 <xPortStartScheduler+0xd8>)
  400412:	681a      	ldr	r2, [r3, #0]
  400414:	4b34      	ldr	r3, [pc, #208]	; (4004e8 <xPortStartScheduler+0xdc>)
  400416:	429a      	cmp	r2, r3
  400418:	d018      	beq.n	40044c <xPortStartScheduler+0x40>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  40041a:	4b32      	ldr	r3, [pc, #200]	; (4004e4 <xPortStartScheduler+0xd8>)
  40041c:	681a      	ldr	r2, [r3, #0]
  40041e:	4b33      	ldr	r3, [pc, #204]	; (4004ec <xPortStartScheduler+0xe0>)
  400420:	429a      	cmp	r2, r3
  400422:	d019      	beq.n	400458 <xPortStartScheduler+0x4c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400424:	4b32      	ldr	r3, [pc, #200]	; (4004f0 <xPortStartScheduler+0xe4>)
  400426:	781a      	ldrb	r2, [r3, #0]
  400428:	b2d2      	uxtb	r2, r2
  40042a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40042c:	22ff      	movs	r2, #255	; 0xff
  40042e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400430:	781b      	ldrb	r3, [r3, #0]
  400432:	b2db      	uxtb	r3, r3
  400434:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400438:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40043c:	f003 0350 	and.w	r3, r3, #80	; 0x50
  400440:	4a2c      	ldr	r2, [pc, #176]	; (4004f4 <xPortStartScheduler+0xe8>)
  400442:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400444:	2207      	movs	r2, #7
  400446:	4b2c      	ldr	r3, [pc, #176]	; (4004f8 <xPortStartScheduler+0xec>)
  400448:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40044a:	e015      	b.n	400478 <xPortStartScheduler+0x6c>
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  40044c:	f44f 7194 	mov.w	r1, #296	; 0x128
  400450:	482a      	ldr	r0, [pc, #168]	; (4004fc <xPortStartScheduler+0xf0>)
  400452:	4b2b      	ldr	r3, [pc, #172]	; (400500 <xPortStartScheduler+0xf4>)
  400454:	4798      	blx	r3
  400456:	e7e0      	b.n	40041a <xPortStartScheduler+0xe>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  400458:	f240 1129 	movw	r1, #297	; 0x129
  40045c:	4827      	ldr	r0, [pc, #156]	; (4004fc <xPortStartScheduler+0xf0>)
  40045e:	4b28      	ldr	r3, [pc, #160]	; (400500 <xPortStartScheduler+0xf4>)
  400460:	4798      	blx	r3
  400462:	e7df      	b.n	400424 <xPortStartScheduler+0x18>
			ulMaxPRIGROUPValue--;
  400464:	4a24      	ldr	r2, [pc, #144]	; (4004f8 <xPortStartScheduler+0xec>)
  400466:	6813      	ldr	r3, [r2, #0]
  400468:	3b01      	subs	r3, #1
  40046a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40046c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400470:	005b      	lsls	r3, r3, #1
  400472:	b2db      	uxtb	r3, r3
  400474:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400478:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40047c:	f013 0f80 	tst.w	r3, #128	; 0x80
  400480:	d1f0      	bne.n	400464 <xPortStartScheduler+0x58>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
  400482:	4b1d      	ldr	r3, [pc, #116]	; (4004f8 <xPortStartScheduler+0xec>)
  400484:	681b      	ldr	r3, [r3, #0]
  400486:	2b03      	cmp	r3, #3
  400488:	d004      	beq.n	400494 <xPortStartScheduler+0x88>
  40048a:	f44f 71ad 	mov.w	r1, #346	; 0x15a
  40048e:	481b      	ldr	r0, [pc, #108]	; (4004fc <xPortStartScheduler+0xf0>)
  400490:	4b1b      	ldr	r3, [pc, #108]	; (400500 <xPortStartScheduler+0xf4>)
  400492:	4798      	blx	r3
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400494:	4a18      	ldr	r2, [pc, #96]	; (4004f8 <xPortStartScheduler+0xec>)
  400496:	6813      	ldr	r3, [r2, #0]
  400498:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40049a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40049e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4004a0:	9b01      	ldr	r3, [sp, #4]
  4004a2:	b2db      	uxtb	r3, r3
  4004a4:	4a12      	ldr	r2, [pc, #72]	; (4004f0 <xPortStartScheduler+0xe4>)
  4004a6:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4004a8:	4b16      	ldr	r3, [pc, #88]	; (400504 <xPortStartScheduler+0xf8>)
  4004aa:	681a      	ldr	r2, [r3, #0]
  4004ac:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  4004b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4004b2:	681a      	ldr	r2, [r3, #0]
  4004b4:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  4004b8:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4004ba:	4b13      	ldr	r3, [pc, #76]	; (400508 <xPortStartScheduler+0xfc>)
  4004bc:	4798      	blx	r3
	uxCriticalNesting = 0;
  4004be:	2400      	movs	r4, #0
  4004c0:	4b12      	ldr	r3, [pc, #72]	; (40050c <xPortStartScheduler+0x100>)
  4004c2:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  4004c4:	4b12      	ldr	r3, [pc, #72]	; (400510 <xPortStartScheduler+0x104>)
  4004c6:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4004c8:	4a12      	ldr	r2, [pc, #72]	; (400514 <xPortStartScheduler+0x108>)
  4004ca:	6813      	ldr	r3, [r2, #0]
  4004cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4004d0:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4004d2:	4b11      	ldr	r3, [pc, #68]	; (400518 <xPortStartScheduler+0x10c>)
  4004d4:	4798      	blx	r3
	vTaskSwitchContext();
  4004d6:	4b11      	ldr	r3, [pc, #68]	; (40051c <xPortStartScheduler+0x110>)
  4004d8:	4798      	blx	r3
	prvTaskExitError();
  4004da:	4b11      	ldr	r3, [pc, #68]	; (400520 <xPortStartScheduler+0x114>)
  4004dc:	4798      	blx	r3
}
  4004de:	4620      	mov	r0, r4
  4004e0:	b002      	add	sp, #8
  4004e2:	bd10      	pop	{r4, pc}
  4004e4:	e000ed00 	.word	0xe000ed00
  4004e8:	410fc271 	.word	0x410fc271
  4004ec:	410fc270 	.word	0x410fc270
  4004f0:	e000e400 	.word	0xe000e400
  4004f4:	20000478 	.word	0x20000478
  4004f8:	2000047c 	.word	0x2000047c
  4004fc:	00403074 	.word	0x00403074
  400500:	00402ce1 	.word	0x00402ce1
  400504:	e000ed20 	.word	0xe000ed20
  400508:	004003d5 	.word	0x004003d5
  40050c:	20000000 	.word	0x20000000
  400510:	0040021d 	.word	0x0040021d
  400514:	e000ef34 	.word	0xe000ef34
  400518:	004001f5 	.word	0x004001f5
  40051c:	00401861 	.word	0x00401861
  400520:	00400231 	.word	0x00400231

00400524 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
  400524:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
  400526:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  40052a:	2b0f      	cmp	r3, #15
  40052c:	d906      	bls.n	40053c <vPortValidateInterruptPriority+0x18>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  40052e:	4a0e      	ldr	r2, [pc, #56]	; (400568 <vPortValidateInterruptPriority+0x44>)
  400530:	5c9b      	ldrb	r3, [r3, r2]
  400532:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400534:	4a0d      	ldr	r2, [pc, #52]	; (40056c <vPortValidateInterruptPriority+0x48>)
  400536:	7812      	ldrb	r2, [r2, #0]
  400538:	4293      	cmp	r3, r2
  40053a:	d308      	bcc.n	40054e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40053c:	4b0c      	ldr	r3, [pc, #48]	; (400570 <vPortValidateInterruptPriority+0x4c>)
  40053e:	681b      	ldr	r3, [r3, #0]
  400540:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400544:	4a0b      	ldr	r2, [pc, #44]	; (400574 <vPortValidateInterruptPriority+0x50>)
  400546:	6812      	ldr	r2, [r2, #0]
  400548:	4293      	cmp	r3, r2
  40054a:	d806      	bhi.n	40055a <vPortValidateInterruptPriority+0x36>
  40054c:	bd08      	pop	{r3, pc}
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40054e:	f240 21f2 	movw	r1, #754	; 0x2f2
  400552:	4809      	ldr	r0, [pc, #36]	; (400578 <vPortValidateInterruptPriority+0x54>)
  400554:	4b09      	ldr	r3, [pc, #36]	; (40057c <vPortValidateInterruptPriority+0x58>)
  400556:	4798      	blx	r3
  400558:	e7f0      	b.n	40053c <vPortValidateInterruptPriority+0x18>
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40055a:	f240 3102 	movw	r1, #770	; 0x302
  40055e:	4806      	ldr	r0, [pc, #24]	; (400578 <vPortValidateInterruptPriority+0x54>)
  400560:	4b06      	ldr	r3, [pc, #24]	; (40057c <vPortValidateInterruptPriority+0x58>)
  400562:	4798      	blx	r3
	}
  400564:	e7f2      	b.n	40054c <vPortValidateInterruptPriority+0x28>
  400566:	bf00      	nop
  400568:	e000e3f0 	.word	0xe000e3f0
  40056c:	20000478 	.word	0x20000478
  400570:	e000ed0c 	.word	0xe000ed0c
  400574:	2000047c 	.word	0x2000047c
  400578:	00403074 	.word	0x00403074
  40057c:	00402ce1 	.word	0x00402ce1

00400580 <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
  400580:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  400582:	4a13      	ldr	r2, [pc, #76]	; (4005d0 <prvInsertBlockIntoFreeList+0x50>)
  400584:	e000      	b.n	400588 <prvInsertBlockIntoFreeList+0x8>
  400586:	461a      	mov	r2, r3
  400588:	6813      	ldr	r3, [r2, #0]
  40058a:	4283      	cmp	r3, r0
  40058c:	d3fb      	bcc.n	400586 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
  40058e:	6851      	ldr	r1, [r2, #4]
  400590:	1854      	adds	r4, r2, r1
  400592:	42a0      	cmp	r0, r4
  400594:	d00a      	beq.n	4005ac <prvInsertBlockIntoFreeList+0x2c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  400596:	6841      	ldr	r1, [r0, #4]
  400598:	1844      	adds	r4, r0, r1
  40059a:	42a3      	cmp	r3, r4
  40059c:	d00b      	beq.n	4005b6 <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
  40059e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  4005a0:	4290      	cmp	r0, r2
  4005a2:	d000      	beq.n	4005a6 <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  4005a4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
  4005a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4005aa:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  4005ac:	6840      	ldr	r0, [r0, #4]
  4005ae:	4401      	add	r1, r0
  4005b0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
  4005b2:	4610      	mov	r0, r2
  4005b4:	e7ef      	b.n	400596 <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
  4005b6:	4c07      	ldr	r4, [pc, #28]	; (4005d4 <prvInsertBlockIntoFreeList+0x54>)
  4005b8:	6824      	ldr	r4, [r4, #0]
  4005ba:	42a3      	cmp	r3, r4
  4005bc:	d006      	beq.n	4005cc <prvInsertBlockIntoFreeList+0x4c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4005be:	685b      	ldr	r3, [r3, #4]
  4005c0:	4419      	add	r1, r3
  4005c2:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4005c4:	6813      	ldr	r3, [r2, #0]
  4005c6:	681b      	ldr	r3, [r3, #0]
  4005c8:	6003      	str	r3, [r0, #0]
  4005ca:	e7e9      	b.n	4005a0 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  4005cc:	6004      	str	r4, [r0, #0]
  4005ce:	e7e7      	b.n	4005a0 <prvInsertBlockIntoFreeList+0x20>
  4005d0:	20000490 	.word	0x20000490
  4005d4:	20000480 	.word	0x20000480

004005d8 <pvPortMalloc>:
{
  4005d8:	b570      	push	{r4, r5, r6, lr}
  4005da:	4605      	mov	r5, r0
	configASSERT( pxEnd );
  4005dc:	4b2c      	ldr	r3, [pc, #176]	; (400690 <pvPortMalloc+0xb8>)
  4005de:	681b      	ldr	r3, [r3, #0]
  4005e0:	b1b3      	cbz	r3, 400610 <pvPortMalloc+0x38>
	vTaskSuspendAll();
  4005e2:	4b2c      	ldr	r3, [pc, #176]	; (400694 <pvPortMalloc+0xbc>)
  4005e4:	4798      	blx	r3
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
  4005e6:	4b2c      	ldr	r3, [pc, #176]	; (400698 <pvPortMalloc+0xc0>)
  4005e8:	681b      	ldr	r3, [r3, #0]
  4005ea:	421d      	tst	r5, r3
  4005ec:	d145      	bne.n	40067a <pvPortMalloc+0xa2>
			if( xWantedSize > 0 )
  4005ee:	b135      	cbz	r5, 4005fe <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
  4005f0:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
  4005f2:	f015 0f07 	tst.w	r5, #7
  4005f6:	d002      	beq.n	4005fe <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4005f8:	f025 0507 	bic.w	r5, r5, #7
  4005fc:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
  4005fe:	2d00      	cmp	r5, #0
  400600:	d03d      	beq.n	40067e <pvPortMalloc+0xa6>
  400602:	4b26      	ldr	r3, [pc, #152]	; (40069c <pvPortMalloc+0xc4>)
  400604:	681b      	ldr	r3, [r3, #0]
  400606:	429d      	cmp	r5, r3
  400608:	d83b      	bhi.n	400682 <pvPortMalloc+0xaa>
				pxBlock = xStart.pxNextFreeBlock;
  40060a:	4a25      	ldr	r2, [pc, #148]	; (4006a0 <pvPortMalloc+0xc8>)
  40060c:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40060e:	e006      	b.n	40061e <pvPortMalloc+0x46>
	configASSERT( pxEnd );
  400610:	218b      	movs	r1, #139	; 0x8b
  400612:	4824      	ldr	r0, [pc, #144]	; (4006a4 <pvPortMalloc+0xcc>)
  400614:	4b24      	ldr	r3, [pc, #144]	; (4006a8 <pvPortMalloc+0xd0>)
  400616:	4798      	blx	r3
  400618:	e7e3      	b.n	4005e2 <pvPortMalloc+0xa>
					pxPreviousBlock = pxBlock;
  40061a:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
  40061c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40061e:	6863      	ldr	r3, [r4, #4]
  400620:	429d      	cmp	r5, r3
  400622:	d902      	bls.n	40062a <pvPortMalloc+0x52>
  400624:	6823      	ldr	r3, [r4, #0]
  400626:	2b00      	cmp	r3, #0
  400628:	d1f7      	bne.n	40061a <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
  40062a:	4b19      	ldr	r3, [pc, #100]	; (400690 <pvPortMalloc+0xb8>)
  40062c:	681b      	ldr	r3, [r3, #0]
  40062e:	429c      	cmp	r4, r3
  400630:	d029      	beq.n	400686 <pvPortMalloc+0xae>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
  400632:	6816      	ldr	r6, [r2, #0]
  400634:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  400636:	6823      	ldr	r3, [r4, #0]
  400638:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  40063a:	6863      	ldr	r3, [r4, #4]
  40063c:	1b5b      	subs	r3, r3, r5
  40063e:	2b10      	cmp	r3, #16
  400640:	d815      	bhi.n	40066e <pvPortMalloc+0x96>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
  400642:	6862      	ldr	r2, [r4, #4]
  400644:	4915      	ldr	r1, [pc, #84]	; (40069c <pvPortMalloc+0xc4>)
  400646:	680b      	ldr	r3, [r1, #0]
  400648:	1a9b      	subs	r3, r3, r2
  40064a:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
  40064c:	4917      	ldr	r1, [pc, #92]	; (4006ac <pvPortMalloc+0xd4>)
  40064e:	6809      	ldr	r1, [r1, #0]
  400650:	428b      	cmp	r3, r1
  400652:	d201      	bcs.n	400658 <pvPortMalloc+0x80>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
  400654:	4915      	ldr	r1, [pc, #84]	; (4006ac <pvPortMalloc+0xd4>)
  400656:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
  400658:	4b0f      	ldr	r3, [pc, #60]	; (400698 <pvPortMalloc+0xc0>)
  40065a:	681b      	ldr	r3, [r3, #0]
  40065c:	4313      	orrs	r3, r2
  40065e:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
  400660:	2300      	movs	r3, #0
  400662:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
  400664:	4b12      	ldr	r3, [pc, #72]	; (4006b0 <pvPortMalloc+0xd8>)
  400666:	4798      	blx	r3
		if( pvReturn == NULL )
  400668:	b17e      	cbz	r6, 40068a <pvPortMalloc+0xb2>
}
  40066a:	4630      	mov	r0, r6
  40066c:	bd70      	pop	{r4, r5, r6, pc}
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
  40066e:	1960      	adds	r0, r4, r5
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  400670:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
  400672:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  400674:	4b0f      	ldr	r3, [pc, #60]	; (4006b4 <pvPortMalloc+0xdc>)
  400676:	4798      	blx	r3
  400678:	e7e3      	b.n	400642 <pvPortMalloc+0x6a>
void *pvReturn = NULL;
  40067a:	2600      	movs	r6, #0
  40067c:	e7f2      	b.n	400664 <pvPortMalloc+0x8c>
  40067e:	2600      	movs	r6, #0
  400680:	e7f0      	b.n	400664 <pvPortMalloc+0x8c>
  400682:	2600      	movs	r6, #0
  400684:	e7ee      	b.n	400664 <pvPortMalloc+0x8c>
  400686:	2600      	movs	r6, #0
  400688:	e7ec      	b.n	400664 <pvPortMalloc+0x8c>
			vApplicationMallocFailedHook();
  40068a:	4b0b      	ldr	r3, [pc, #44]	; (4006b8 <pvPortMalloc+0xe0>)
  40068c:	4798      	blx	r3
	return pvReturn;
  40068e:	e7ec      	b.n	40066a <pvPortMalloc+0x92>
  400690:	20000480 	.word	0x20000480
  400694:	004015ad 	.word	0x004015ad
  400698:	20000484 	.word	0x20000484
  40069c:	20000488 	.word	0x20000488
  4006a0:	20000490 	.word	0x20000490
  4006a4:	004030a4 	.word	0x004030a4
  4006a8:	00402ce1 	.word	0x00402ce1
  4006ac:	2000048c 	.word	0x2000048c
  4006b0:	004016ed 	.word	0x004016ed
  4006b4:	00400581 	.word	0x00400581
  4006b8:	00402d0d 	.word	0x00402d0d

004006bc <vPortFree>:
	if( pv != NULL )
  4006bc:	2800      	cmp	r0, #0
  4006be:	d033      	beq.n	400728 <vPortFree+0x6c>
{
  4006c0:	b538      	push	{r3, r4, r5, lr}
  4006c2:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
  4006c4:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  4006c8:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4006cc:	4b17      	ldr	r3, [pc, #92]	; (40072c <vPortFree+0x70>)
  4006ce:	681b      	ldr	r3, [r3, #0]
  4006d0:	421a      	tst	r2, r3
  4006d2:	d011      	beq.n	4006f8 <vPortFree+0x3c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
  4006d4:	f854 3c08 	ldr.w	r3, [r4, #-8]
  4006d8:	b123      	cbz	r3, 4006e4 <vPortFree+0x28>
  4006da:	f44f 7190 	mov.w	r1, #288	; 0x120
  4006de:	4814      	ldr	r0, [pc, #80]	; (400730 <vPortFree+0x74>)
  4006e0:	4b14      	ldr	r3, [pc, #80]	; (400734 <vPortFree+0x78>)
  4006e2:	4798      	blx	r3
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
  4006e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4006e8:	4a10      	ldr	r2, [pc, #64]	; (40072c <vPortFree+0x70>)
  4006ea:	6812      	ldr	r2, [r2, #0]
  4006ec:	4213      	tst	r3, r2
  4006ee:	d002      	beq.n	4006f6 <vPortFree+0x3a>
			if( pxLink->pxNextFreeBlock == NULL )
  4006f0:	f854 1c08 	ldr.w	r1, [r4, #-8]
  4006f4:	b131      	cbz	r1, 400704 <vPortFree+0x48>
  4006f6:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  4006f8:	f240 111f 	movw	r1, #287	; 0x11f
  4006fc:	480c      	ldr	r0, [pc, #48]	; (400730 <vPortFree+0x74>)
  4006fe:	4b0d      	ldr	r3, [pc, #52]	; (400734 <vPortFree+0x78>)
  400700:	4798      	blx	r3
  400702:	e7e7      	b.n	4006d4 <vPortFree+0x18>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
  400704:	ea23 0302 	bic.w	r3, r3, r2
  400708:	f844 3c04 	str.w	r3, [r4, #-4]
				vTaskSuspendAll();
  40070c:	4b0a      	ldr	r3, [pc, #40]	; (400738 <vPortFree+0x7c>)
  40070e:	4798      	blx	r3
					xFreeBytesRemaining += pxLink->xBlockSize;
  400710:	f854 1c04 	ldr.w	r1, [r4, #-4]
  400714:	4a09      	ldr	r2, [pc, #36]	; (40073c <vPortFree+0x80>)
  400716:	6813      	ldr	r3, [r2, #0]
  400718:	440b      	add	r3, r1
  40071a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
  40071c:	4628      	mov	r0, r5
  40071e:	4b08      	ldr	r3, [pc, #32]	; (400740 <vPortFree+0x84>)
  400720:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400722:	4b08      	ldr	r3, [pc, #32]	; (400744 <vPortFree+0x88>)
  400724:	4798      	blx	r3
}
  400726:	e7e6      	b.n	4006f6 <vPortFree+0x3a>
  400728:	4770      	bx	lr
  40072a:	bf00      	nop
  40072c:	20000484 	.word	0x20000484
  400730:	004030a4 	.word	0x004030a4
  400734:	00402ce1 	.word	0x00402ce1
  400738:	004015ad 	.word	0x004015ad
  40073c:	20000488 	.word	0x20000488
  400740:	00400581 	.word	0x00400581
  400744:	004016ed 	.word	0x004016ed

00400748 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
  400748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40074c:	4680      	mov	r8, r0
BaseType_t xDefinedRegions = 0;
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
  40074e:	4b2c      	ldr	r3, [pc, #176]	; (400800 <vPortDefineHeapRegions+0xb8>)
  400750:	681b      	ldr	r3, [r3, #0]
  400752:	b123      	cbz	r3, 40075e <vPortDefineHeapRegions+0x16>
  400754:	f240 1193 	movw	r1, #403	; 0x193
  400758:	482a      	ldr	r0, [pc, #168]	; (400804 <vPortDefineHeapRegions+0xbc>)
  40075a:	4b2b      	ldr	r3, [pc, #172]	; (400808 <vPortDefineHeapRegions+0xc0>)
  40075c:	4798      	blx	r3
		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
  40075e:	4643      	mov	r3, r8
  400760:	2600      	movs	r6, #0
  400762:	4637      	mov	r7, r6
  400764:	e01b      	b.n	40079e <vPortDefineHeapRegions+0x56>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
  400766:	4b26      	ldr	r3, [pc, #152]	; (400800 <vPortDefineHeapRegions+0xb8>)
  400768:	681b      	ldr	r3, [r3, #0]
  40076a:	b35b      	cbz	r3, 4007c4 <vPortDefineHeapRegions+0x7c>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
  40076c:	4b24      	ldr	r3, [pc, #144]	; (400800 <vPortDefineHeapRegions+0xb8>)
  40076e:	681b      	ldr	r3, [r3, #0]
  400770:	429d      	cmp	r5, r3
  400772:	d92d      	bls.n	4007d0 <vPortDefineHeapRegions+0x88>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
  400774:	4a22      	ldr	r2, [pc, #136]	; (400800 <vPortDefineHeapRegions+0xb8>)
  400776:	6811      	ldr	r1, [r2, #0]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
  400778:	1963      	adds	r3, r4, r5
		xAddress -= xHeapStructSize;
  40077a:	3b08      	subs	r3, #8
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
  40077c:	f023 0307 	bic.w	r3, r3, #7
		pxEnd = ( BlockLink_t * ) xAddress;
  400780:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
  400782:	2200      	movs	r2, #0
  400784:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
  400786:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
  400788:	462a      	mov	r2, r5
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
  40078a:	1b58      	subs	r0, r3, r5
  40078c:	6068      	str	r0, [r5, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
  40078e:	602b      	str	r3, [r5, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
  400790:	b101      	cbz	r1, 400794 <vPortDefineHeapRegions+0x4c>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
  400792:	600d      	str	r5, [r1, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
  400794:	6853      	ldr	r3, [r2, #4]
  400796:	441f      	add	r7, r3

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
  400798:	3601      	adds	r6, #1
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
  40079a:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
	while( pxHeapRegion->xSizeInBytes > 0 )
  40079e:	685c      	ldr	r4, [r3, #4]
  4007a0:	b1e4      	cbz	r4, 4007dc <vPortDefineHeapRegions+0x94>
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
  4007a2:	681d      	ldr	r5, [r3, #0]
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  4007a4:	f015 0f07 	tst.w	r5, #7
  4007a8:	d005      	beq.n	4007b6 <vPortDefineHeapRegions+0x6e>
			xAddress += ( portBYTE_ALIGNMENT - 1 );
  4007aa:	1deb      	adds	r3, r5, #7
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
  4007ac:	f023 0307 	bic.w	r3, r3, #7
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
  4007b0:	1aed      	subs	r5, r5, r3
  4007b2:	442c      	add	r4, r5
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
  4007b4:	461d      	mov	r5, r3
		if( xDefinedRegions == 0 )
  4007b6:	2e00      	cmp	r6, #0
  4007b8:	d1d5      	bne.n	400766 <vPortDefineHeapRegions+0x1e>
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
  4007ba:	4b14      	ldr	r3, [pc, #80]	; (40080c <vPortDefineHeapRegions+0xc4>)
  4007bc:	601d      	str	r5, [r3, #0]
			xStart.xBlockSize = ( size_t ) 0;
  4007be:	2200      	movs	r2, #0
  4007c0:	605a      	str	r2, [r3, #4]
  4007c2:	e7d7      	b.n	400774 <vPortDefineHeapRegions+0x2c>
			configASSERT( pxEnd != NULL );
  4007c4:	f44f 71da 	mov.w	r1, #436	; 0x1b4
  4007c8:	480e      	ldr	r0, [pc, #56]	; (400804 <vPortDefineHeapRegions+0xbc>)
  4007ca:	4b0f      	ldr	r3, [pc, #60]	; (400808 <vPortDefineHeapRegions+0xc0>)
  4007cc:	4798      	blx	r3
  4007ce:	e7cd      	b.n	40076c <vPortDefineHeapRegions+0x24>
			configASSERT( xAddress > ( size_t ) pxEnd );
  4007d0:	f240 11b7 	movw	r1, #439	; 0x1b7
  4007d4:	480b      	ldr	r0, [pc, #44]	; (400804 <vPortDefineHeapRegions+0xbc>)
  4007d6:	4b0c      	ldr	r3, [pc, #48]	; (400808 <vPortDefineHeapRegions+0xc0>)
  4007d8:	4798      	blx	r3
  4007da:	e7cb      	b.n	400774 <vPortDefineHeapRegions+0x2c>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
  4007dc:	4b0c      	ldr	r3, [pc, #48]	; (400810 <vPortDefineHeapRegions+0xc8>)
  4007de:	601f      	str	r7, [r3, #0]
	xFreeBytesRemaining = xTotalHeapSize;
  4007e0:	4b0c      	ldr	r3, [pc, #48]	; (400814 <vPortDefineHeapRegions+0xcc>)
  4007e2:	601f      	str	r7, [r3, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
  4007e4:	b12f      	cbz	r7, 4007f2 <vPortDefineHeapRegions+0xaa>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
  4007e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4007ea:	4b0b      	ldr	r3, [pc, #44]	; (400818 <vPortDefineHeapRegions+0xd0>)
  4007ec:	601a      	str	r2, [r3, #0]
  4007ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( xTotalHeapSize );
  4007f2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  4007f6:	4803      	ldr	r0, [pc, #12]	; (400804 <vPortDefineHeapRegions+0xbc>)
  4007f8:	4b03      	ldr	r3, [pc, #12]	; (400808 <vPortDefineHeapRegions+0xc0>)
  4007fa:	4798      	blx	r3
  4007fc:	e7f3      	b.n	4007e6 <vPortDefineHeapRegions+0x9e>
  4007fe:	bf00      	nop
  400800:	20000480 	.word	0x20000480
  400804:	004030a4 	.word	0x004030a4
  400808:	00402ce1 	.word	0x00402ce1
  40080c:	20000490 	.word	0x20000490
  400810:	2000048c 	.word	0x2000048c
  400814:	20000488 	.word	0x20000488
  400818:	20000484 	.word	0x20000484

0040081c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
  40081c:	b510      	push	{r4, lr}
  40081e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  400820:	4b06      	ldr	r3, [pc, #24]	; (40083c <prvIsQueueFull+0x20>)
  400822:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400824:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400826:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400828:	429a      	cmp	r2, r3
  40082a:	d004      	beq.n	400836 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
  40082c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
  40082e:	4b04      	ldr	r3, [pc, #16]	; (400840 <prvIsQueueFull+0x24>)
  400830:	4798      	blx	r3

	return xReturn;
}
  400832:	4620      	mov	r0, r4
  400834:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
  400836:	2401      	movs	r4, #1
  400838:	e7f9      	b.n	40082e <prvIsQueueFull+0x12>
  40083a:	bf00      	nop
  40083c:	004002c5 	.word	0x004002c5
  400840:	0040030d 	.word	0x0040030d

00400844 <prvIsQueueEmpty>:
{
  400844:	b510      	push	{r4, lr}
  400846:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  400848:	4b05      	ldr	r3, [pc, #20]	; (400860 <prvIsQueueEmpty+0x1c>)
  40084a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40084c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40084e:	b123      	cbz	r3, 40085a <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
  400850:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  400852:	4b04      	ldr	r3, [pc, #16]	; (400864 <prvIsQueueEmpty+0x20>)
  400854:	4798      	blx	r3
}
  400856:	4620      	mov	r0, r4
  400858:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
  40085a:	2401      	movs	r4, #1
  40085c:	e7f9      	b.n	400852 <prvIsQueueEmpty+0xe>
  40085e:	bf00      	nop
  400860:	004002c5 	.word	0x004002c5
  400864:	0040030d 	.word	0x0040030d

00400868 <prvCopyDataToQueue>:
{
  400868:	b570      	push	{r4, r5, r6, lr}
  40086a:	4604      	mov	r4, r0
  40086c:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  40086e:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400870:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400872:	b95a      	cbnz	r2, 40088c <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400874:	6803      	ldr	r3, [r0, #0]
  400876:	b11b      	cbz	r3, 400880 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
  400878:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  40087a:	3501      	adds	r5, #1
  40087c:	63a5      	str	r5, [r4, #56]	; 0x38
}
  40087e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
  400880:	6880      	ldr	r0, [r0, #8]
  400882:	4b17      	ldr	r3, [pc, #92]	; (4008e0 <prvCopyDataToQueue+0x78>)
  400884:	4798      	blx	r3
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
  400886:	2300      	movs	r3, #0
  400888:	60a3      	str	r3, [r4, #8]
  40088a:	e7f6      	b.n	40087a <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
  40088c:	b96e      	cbnz	r6, 4008aa <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  40088e:	6840      	ldr	r0, [r0, #4]
  400890:	4b14      	ldr	r3, [pc, #80]	; (4008e4 <prvCopyDataToQueue+0x7c>)
  400892:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  400894:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400896:	6863      	ldr	r3, [r4, #4]
  400898:	4413      	add	r3, r2
  40089a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40089c:	68a2      	ldr	r2, [r4, #8]
  40089e:	4293      	cmp	r3, r2
  4008a0:	d319      	bcc.n	4008d6 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4008a2:	6823      	ldr	r3, [r4, #0]
  4008a4:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
  4008a6:	2000      	movs	r0, #0
  4008a8:	e7e7      	b.n	40087a <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
  4008aa:	68c0      	ldr	r0, [r0, #12]
  4008ac:	4b0d      	ldr	r3, [pc, #52]	; (4008e4 <prvCopyDataToQueue+0x7c>)
  4008ae:	4798      	blx	r3
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
  4008b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4008b2:	4252      	negs	r2, r2
  4008b4:	68e3      	ldr	r3, [r4, #12]
  4008b6:	4413      	add	r3, r2
  4008b8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4008ba:	6821      	ldr	r1, [r4, #0]
  4008bc:	428b      	cmp	r3, r1
  4008be:	d202      	bcs.n	4008c6 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
  4008c0:	68a3      	ldr	r3, [r4, #8]
  4008c2:	441a      	add	r2, r3
  4008c4:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4008c6:	2e02      	cmp	r6, #2
  4008c8:	d001      	beq.n	4008ce <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
  4008ca:	2000      	movs	r0, #0
  4008cc:	e7d5      	b.n	40087a <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  4008ce:	b125      	cbz	r5, 4008da <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
  4008d0:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  4008d2:	2000      	movs	r0, #0
  4008d4:	e7d1      	b.n	40087a <prvCopyDataToQueue+0x12>
  4008d6:	2000      	movs	r0, #0
  4008d8:	e7cf      	b.n	40087a <prvCopyDataToQueue+0x12>
  4008da:	2000      	movs	r0, #0
  4008dc:	e7cd      	b.n	40087a <prvCopyDataToQueue+0x12>
  4008de:	bf00      	nop
  4008e0:	00401c21 	.word	0x00401c21
  4008e4:	00402d85 	.word	0x00402d85

004008e8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4008e8:	b570      	push	{r4, r5, r6, lr}
  4008ea:	b082      	sub	sp, #8
  4008ec:	9001      	str	r0, [sp, #4]
  4008ee:	460e      	mov	r6, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4008f0:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4008f2:	b15c      	cbz	r4, 40090c <prvNotifyQueueSetContainer+0x24>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4008f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4008f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4008f8:	429a      	cmp	r2, r3
  4008fa:	d20d      	bcs.n	400918 <prvNotifyQueueSetContainer+0x30>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4008fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4008fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400900:	429a      	cmp	r2, r3
  400902:	d30f      	bcc.n	400924 <prvNotifyQueueSetContainer+0x3c>
	BaseType_t xReturn = pdFALSE;
  400904:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400906:	4630      	mov	r0, r6
  400908:	b002      	add	sp, #8
  40090a:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxQueueSetContainer );
  40090c:	f640 3145 	movw	r1, #2885	; 0xb45
  400910:	4812      	ldr	r0, [pc, #72]	; (40095c <prvNotifyQueueSetContainer+0x74>)
  400912:	4b13      	ldr	r3, [pc, #76]	; (400960 <prvNotifyQueueSetContainer+0x78>)
  400914:	4798      	blx	r3
  400916:	e7ed      	b.n	4008f4 <prvNotifyQueueSetContainer+0xc>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400918:	f640 3146 	movw	r1, #2886	; 0xb46
  40091c:	480f      	ldr	r0, [pc, #60]	; (40095c <prvNotifyQueueSetContainer+0x74>)
  40091e:	4b10      	ldr	r3, [pc, #64]	; (400960 <prvNotifyQueueSetContainer+0x78>)
  400920:	4798      	blx	r3
  400922:	e7eb      	b.n	4008fc <prvNotifyQueueSetContainer+0x14>
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  400924:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  400928:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40092a:	4632      	mov	r2, r6
  40092c:	a901      	add	r1, sp, #4
  40092e:	4620      	mov	r0, r4
  400930:	4b0c      	ldr	r3, [pc, #48]	; (400964 <prvNotifyQueueSetContainer+0x7c>)
  400932:	4798      	blx	r3
  400934:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
  400936:	f1b5 3fff 	cmp.w	r5, #4294967295
  40093a:	d004      	beq.n	400946 <prvNotifyQueueSetContainer+0x5e>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  40093c:	3501      	adds	r5, #1
  40093e:	b26d      	sxtb	r5, r5
  400940:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  400944:	e7df      	b.n	400906 <prvNotifyQueueSetContainer+0x1e>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400946:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400948:	2b00      	cmp	r3, #0
  40094a:	d0dc      	beq.n	400906 <prvNotifyQueueSetContainer+0x1e>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40094c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400950:	4b05      	ldr	r3, [pc, #20]	; (400968 <prvNotifyQueueSetContainer+0x80>)
  400952:	4798      	blx	r3
  400954:	2800      	cmp	r0, #0
  400956:	d0d6      	beq.n	400906 <prvNotifyQueueSetContainer+0x1e>
						xReturn = pdTRUE;
  400958:	2601      	movs	r6, #1
		return xReturn;
  40095a:	e7d4      	b.n	400906 <prvNotifyQueueSetContainer+0x1e>
  40095c:	004030d0 	.word	0x004030d0
  400960:	00402ce1 	.word	0x00402ce1
  400964:	00400869 	.word	0x00400869
  400968:	00401ac1 	.word	0x00401ac1

0040096c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40096c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40096e:	b172      	cbz	r2, 40098e <prvCopyDataFromQueue+0x22>
{
  400970:	b510      	push	{r4, lr}
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  400972:	68c3      	ldr	r3, [r0, #12]
  400974:	4413      	add	r3, r2
  400976:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400978:	6884      	ldr	r4, [r0, #8]
  40097a:	42a3      	cmp	r3, r4
  40097c:	d301      	bcc.n	400982 <prvCopyDataFromQueue+0x16>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
  40097e:	6803      	ldr	r3, [r0, #0]
  400980:	60c3      	str	r3, [r0, #12]
  400982:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  400984:	68c1      	ldr	r1, [r0, #12]
  400986:	4620      	mov	r0, r4
  400988:	4b01      	ldr	r3, [pc, #4]	; (400990 <prvCopyDataFromQueue+0x24>)
  40098a:	4798      	blx	r3
  40098c:	bd10      	pop	{r4, pc}
  40098e:	4770      	bx	lr
  400990:	00402d85 	.word	0x00402d85

00400994 <prvUnlockQueue>:
{
  400994:	b538      	push	{r3, r4, r5, lr}
  400996:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  400998:	4b1f      	ldr	r3, [pc, #124]	; (400a18 <prvUnlockQueue+0x84>)
  40099a:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
  40099c:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  4009a0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  4009a2:	e008      	b.n	4009b6 <prvUnlockQueue+0x22>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4009a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  4009a6:	b1bb      	cbz	r3, 4009d8 <prvUnlockQueue+0x44>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009a8:	f105 0024 	add.w	r0, r5, #36	; 0x24
  4009ac:	4b1b      	ldr	r3, [pc, #108]	; (400a1c <prvUnlockQueue+0x88>)
  4009ae:	4798      	blx	r3
  4009b0:	b978      	cbnz	r0, 4009d2 <prvUnlockQueue+0x3e>
			--cTxLock;
  4009b2:	3c01      	subs	r4, #1
  4009b4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  4009b6:	2c00      	cmp	r4, #0
  4009b8:	dd0e      	ble.n	4009d8 <prvUnlockQueue+0x44>
				if( pxQueue->pxQueueSetContainer != NULL )
  4009ba:	6cab      	ldr	r3, [r5, #72]	; 0x48
  4009bc:	2b00      	cmp	r3, #0
  4009be:	d0f1      	beq.n	4009a4 <prvUnlockQueue+0x10>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  4009c0:	2100      	movs	r1, #0
  4009c2:	4628      	mov	r0, r5
  4009c4:	4b16      	ldr	r3, [pc, #88]	; (400a20 <prvUnlockQueue+0x8c>)
  4009c6:	4798      	blx	r3
  4009c8:	2800      	cmp	r0, #0
  4009ca:	d0f2      	beq.n	4009b2 <prvUnlockQueue+0x1e>
						vTaskMissedYield();
  4009cc:	4b15      	ldr	r3, [pc, #84]	; (400a24 <prvUnlockQueue+0x90>)
  4009ce:	4798      	blx	r3
  4009d0:	e7ef      	b.n	4009b2 <prvUnlockQueue+0x1e>
							vTaskMissedYield();
  4009d2:	4b14      	ldr	r3, [pc, #80]	; (400a24 <prvUnlockQueue+0x90>)
  4009d4:	4798      	blx	r3
  4009d6:	e7ec      	b.n	4009b2 <prvUnlockQueue+0x1e>
		pxQueue->cTxLock = queueUNLOCKED;
  4009d8:	23ff      	movs	r3, #255	; 0xff
  4009da:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
  4009de:	4b12      	ldr	r3, [pc, #72]	; (400a28 <prvUnlockQueue+0x94>)
  4009e0:	4798      	blx	r3
	taskENTER_CRITICAL();
  4009e2:	4b0d      	ldr	r3, [pc, #52]	; (400a18 <prvUnlockQueue+0x84>)
  4009e4:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
  4009e6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  4009ea:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  4009ec:	e001      	b.n	4009f2 <prvUnlockQueue+0x5e>
				--cRxLock;
  4009ee:	3c01      	subs	r4, #1
  4009f0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  4009f2:	2c00      	cmp	r4, #0
  4009f4:	dd0a      	ble.n	400a0c <prvUnlockQueue+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4009f6:	692b      	ldr	r3, [r5, #16]
  4009f8:	b143      	cbz	r3, 400a0c <prvUnlockQueue+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4009fa:	f105 0010 	add.w	r0, r5, #16
  4009fe:	4b07      	ldr	r3, [pc, #28]	; (400a1c <prvUnlockQueue+0x88>)
  400a00:	4798      	blx	r3
  400a02:	2800      	cmp	r0, #0
  400a04:	d0f3      	beq.n	4009ee <prvUnlockQueue+0x5a>
					vTaskMissedYield();
  400a06:	4b07      	ldr	r3, [pc, #28]	; (400a24 <prvUnlockQueue+0x90>)
  400a08:	4798      	blx	r3
  400a0a:	e7f0      	b.n	4009ee <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
  400a0c:	23ff      	movs	r3, #255	; 0xff
  400a0e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
  400a12:	4b05      	ldr	r3, [pc, #20]	; (400a28 <prvUnlockQueue+0x94>)
  400a14:	4798      	blx	r3
  400a16:	bd38      	pop	{r3, r4, r5, pc}
  400a18:	004002c5 	.word	0x004002c5
  400a1c:	00401ac1 	.word	0x00401ac1
  400a20:	004008e9 	.word	0x004008e9
  400a24:	00401bf5 	.word	0x00401bf5
  400a28:	0040030d 	.word	0x0040030d

00400a2c <xQueueGenericReset>:
{
  400a2c:	b538      	push	{r3, r4, r5, lr}
  400a2e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
  400a30:	4604      	mov	r4, r0
  400a32:	b1d0      	cbz	r0, 400a6a <xQueueGenericReset+0x3e>
	taskENTER_CRITICAL();
  400a34:	4b1b      	ldr	r3, [pc, #108]	; (400aa4 <xQueueGenericReset+0x78>)
  400a36:	4798      	blx	r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400a38:	6821      	ldr	r1, [r4, #0]
  400a3a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  400a3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400a3e:	fb03 1002 	mla	r0, r3, r2, r1
  400a42:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400a44:	2000      	movs	r0, #0
  400a46:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400a48:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400a4a:	3a01      	subs	r2, #1
  400a4c:	fb02 1303 	mla	r3, r2, r3, r1
  400a50:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  400a52:	23ff      	movs	r3, #255	; 0xff
  400a54:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  400a58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  400a5c:	b9d5      	cbnz	r5, 400a94 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a5e:	6923      	ldr	r3, [r4, #16]
  400a60:	b94b      	cbnz	r3, 400a76 <xQueueGenericReset+0x4a>
	taskEXIT_CRITICAL();
  400a62:	4b11      	ldr	r3, [pc, #68]	; (400aa8 <xQueueGenericReset+0x7c>)
  400a64:	4798      	blx	r3
}
  400a66:	2001      	movs	r0, #1
  400a68:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
  400a6a:	f240 1103 	movw	r1, #259	; 0x103
  400a6e:	480f      	ldr	r0, [pc, #60]	; (400aac <xQueueGenericReset+0x80>)
  400a70:	4b0f      	ldr	r3, [pc, #60]	; (400ab0 <xQueueGenericReset+0x84>)
  400a72:	4798      	blx	r3
  400a74:	e7de      	b.n	400a34 <xQueueGenericReset+0x8>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a76:	f104 0010 	add.w	r0, r4, #16
  400a7a:	4b0e      	ldr	r3, [pc, #56]	; (400ab4 <xQueueGenericReset+0x88>)
  400a7c:	4798      	blx	r3
  400a7e:	2800      	cmp	r0, #0
  400a80:	d0ef      	beq.n	400a62 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
  400a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400a86:	4b0c      	ldr	r3, [pc, #48]	; (400ab8 <xQueueGenericReset+0x8c>)
  400a88:	601a      	str	r2, [r3, #0]
  400a8a:	f3bf 8f4f 	dsb	sy
  400a8e:	f3bf 8f6f 	isb	sy
  400a92:	e7e6      	b.n	400a62 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400a94:	f104 0010 	add.w	r0, r4, #16
  400a98:	4d08      	ldr	r5, [pc, #32]	; (400abc <xQueueGenericReset+0x90>)
  400a9a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400a9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400aa0:	47a8      	blx	r5
  400aa2:	e7de      	b.n	400a62 <xQueueGenericReset+0x36>
  400aa4:	004002c5 	.word	0x004002c5
  400aa8:	0040030d 	.word	0x0040030d
  400aac:	004030d0 	.word	0x004030d0
  400ab0:	00402ce1 	.word	0x00402ce1
  400ab4:	00401ac1 	.word	0x00401ac1
  400ab8:	e000ed04 	.word	0xe000ed04
  400abc:	00400165 	.word	0x00400165

00400ac0 <prvInitialiseNewQueue>:
{
  400ac0:	b510      	push	{r4, lr}
  400ac2:	9c02      	ldr	r4, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
  400ac4:	460b      	mov	r3, r1
  400ac6:	b149      	cbz	r1, 400adc <prvInitialiseNewQueue+0x1c>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  400ac8:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
  400aca:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  400acc:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400ace:	2101      	movs	r1, #1
  400ad0:	4620      	mov	r0, r4
  400ad2:	4b03      	ldr	r3, [pc, #12]	; (400ae0 <prvInitialiseNewQueue+0x20>)
  400ad4:	4798      	blx	r3
		pxNewQueue->pxQueueSetContainer = NULL;
  400ad6:	2300      	movs	r3, #0
  400ad8:	64a3      	str	r3, [r4, #72]	; 0x48
  400ada:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400adc:	6024      	str	r4, [r4, #0]
  400ade:	e7f4      	b.n	400aca <prvInitialiseNewQueue+0xa>
  400ae0:	00400a2d 	.word	0x00400a2d

00400ae4 <xQueueGenericCreate>:
	{
  400ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
  400ae6:	b083      	sub	sp, #12
  400ae8:	460d      	mov	r5, r1
  400aea:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400aec:	4606      	mov	r6, r0
  400aee:	b190      	cbz	r0, 400b16 <xQueueGenericCreate+0x32>
		if( uxItemSize == ( UBaseType_t ) 0 )
  400af0:	b1bd      	cbz	r5, 400b22 <xQueueGenericCreate+0x3e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400af2:	fb05 f006 	mul.w	r0, r5, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
  400af6:	304c      	adds	r0, #76	; 0x4c
  400af8:	4b0b      	ldr	r3, [pc, #44]	; (400b28 <xQueueGenericCreate+0x44>)
  400afa:	4798      	blx	r3
		if( pxNewQueue != NULL )
  400afc:	4604      	mov	r4, r0
  400afe:	b138      	cbz	r0, 400b10 <xQueueGenericCreate+0x2c>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
  400b00:	9000      	str	r0, [sp, #0]
  400b02:	463b      	mov	r3, r7
  400b04:	f100 024c 	add.w	r2, r0, #76	; 0x4c
  400b08:	4629      	mov	r1, r5
  400b0a:	4630      	mov	r0, r6
  400b0c:	4d07      	ldr	r5, [pc, #28]	; (400b2c <xQueueGenericCreate+0x48>)
  400b0e:	47a8      	blx	r5
	}
  400b10:	4620      	mov	r0, r4
  400b12:	b003      	add	sp, #12
  400b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400b16:	f44f 71bb 	mov.w	r1, #374	; 0x176
  400b1a:	4805      	ldr	r0, [pc, #20]	; (400b30 <xQueueGenericCreate+0x4c>)
  400b1c:	4b05      	ldr	r3, [pc, #20]	; (400b34 <xQueueGenericCreate+0x50>)
  400b1e:	4798      	blx	r3
  400b20:	e7e6      	b.n	400af0 <xQueueGenericCreate+0xc>
			xQueueSizeInBytes = ( size_t ) 0;
  400b22:	2000      	movs	r0, #0
  400b24:	e7e7      	b.n	400af6 <xQueueGenericCreate+0x12>
  400b26:	bf00      	nop
  400b28:	004005d9 	.word	0x004005d9
  400b2c:	00400ac1 	.word	0x00400ac1
  400b30:	004030d0 	.word	0x004030d0
  400b34:	00402ce1 	.word	0x00402ce1

00400b38 <xQueueGenericSend>:
{
  400b38:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b3a:	b085      	sub	sp, #20
  400b3c:	460f      	mov	r7, r1
  400b3e:	9201      	str	r2, [sp, #4]
  400b40:	461e      	mov	r6, r3
	configASSERT( pxQueue );
  400b42:	4604      	mov	r4, r0
  400b44:	b168      	cbz	r0, 400b62 <xQueueGenericSend+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400b46:	b197      	cbz	r7, 400b6e <xQueueGenericSend+0x36>
  400b48:	2301      	movs	r3, #1
  400b4a:	b1b3      	cbz	r3, 400b7a <xQueueGenericSend+0x42>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400b4c:	2e02      	cmp	r6, #2
  400b4e:	d01a      	beq.n	400b86 <xQueueGenericSend+0x4e>
  400b50:	2301      	movs	r3, #1
  400b52:	b1eb      	cbz	r3, 400b90 <xQueueGenericSend+0x58>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400b54:	4b63      	ldr	r3, [pc, #396]	; (400ce4 <xQueueGenericSend+0x1ac>)
  400b56:	4798      	blx	r3
  400b58:	bb00      	cbnz	r0, 400b9c <xQueueGenericSend+0x64>
  400b5a:	9b01      	ldr	r3, [sp, #4]
  400b5c:	bb13      	cbnz	r3, 400ba4 <xQueueGenericSend+0x6c>
  400b5e:	2301      	movs	r3, #1
  400b60:	e01d      	b.n	400b9e <xQueueGenericSend+0x66>
	configASSERT( pxQueue );
  400b62:	f240 21f1 	movw	r1, #753	; 0x2f1
  400b66:	4860      	ldr	r0, [pc, #384]	; (400ce8 <xQueueGenericSend+0x1b0>)
  400b68:	4b60      	ldr	r3, [pc, #384]	; (400cec <xQueueGenericSend+0x1b4>)
  400b6a:	4798      	blx	r3
  400b6c:	e7eb      	b.n	400b46 <xQueueGenericSend+0xe>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400b6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400b70:	b90b      	cbnz	r3, 400b76 <xQueueGenericSend+0x3e>
  400b72:	2301      	movs	r3, #1
  400b74:	e7e9      	b.n	400b4a <xQueueGenericSend+0x12>
  400b76:	2300      	movs	r3, #0
  400b78:	e7e7      	b.n	400b4a <xQueueGenericSend+0x12>
  400b7a:	f240 21f2 	movw	r1, #754	; 0x2f2
  400b7e:	485a      	ldr	r0, [pc, #360]	; (400ce8 <xQueueGenericSend+0x1b0>)
  400b80:	4b5a      	ldr	r3, [pc, #360]	; (400cec <xQueueGenericSend+0x1b4>)
  400b82:	4798      	blx	r3
  400b84:	e7e2      	b.n	400b4c <xQueueGenericSend+0x14>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400b86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400b88:	2b01      	cmp	r3, #1
  400b8a:	d0e2      	beq.n	400b52 <xQueueGenericSend+0x1a>
  400b8c:	2300      	movs	r3, #0
  400b8e:	e7e0      	b.n	400b52 <xQueueGenericSend+0x1a>
  400b90:	f240 21f3 	movw	r1, #755	; 0x2f3
  400b94:	4854      	ldr	r0, [pc, #336]	; (400ce8 <xQueueGenericSend+0x1b0>)
  400b96:	4b55      	ldr	r3, [pc, #340]	; (400cec <xQueueGenericSend+0x1b4>)
  400b98:	4798      	blx	r3
  400b9a:	e7db      	b.n	400b54 <xQueueGenericSend+0x1c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400b9c:	2301      	movs	r3, #1
  400b9e:	b11b      	cbz	r3, 400ba8 <xQueueGenericSend+0x70>
  400ba0:	2500      	movs	r5, #0
  400ba2:	e058      	b.n	400c56 <xQueueGenericSend+0x11e>
  400ba4:	2300      	movs	r3, #0
  400ba6:	e7fa      	b.n	400b9e <xQueueGenericSend+0x66>
  400ba8:	f240 21f6 	movw	r1, #758	; 0x2f6
  400bac:	484e      	ldr	r0, [pc, #312]	; (400ce8 <xQueueGenericSend+0x1b0>)
  400bae:	4b4f      	ldr	r3, [pc, #316]	; (400cec <xQueueGenericSend+0x1b4>)
  400bb0:	4798      	blx	r3
  400bb2:	e7f5      	b.n	400ba0 <xQueueGenericSend+0x68>
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  400bb4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400bb6:	4632      	mov	r2, r6
  400bb8:	4639      	mov	r1, r7
  400bba:	4620      	mov	r0, r4
  400bbc:	4b4c      	ldr	r3, [pc, #304]	; (400cf0 <xQueueGenericSend+0x1b8>)
  400bbe:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  400bc0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400bc2:	b1b3      	cbz	r3, 400bf2 <xQueueGenericSend+0xba>
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400bc4:	2e02      	cmp	r6, #2
  400bc6:	d011      	beq.n	400bec <xQueueGenericSend+0xb4>
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  400bc8:	4631      	mov	r1, r6
  400bca:	4620      	mov	r0, r4
  400bcc:	4b49      	ldr	r3, [pc, #292]	; (400cf4 <xQueueGenericSend+0x1bc>)
  400bce:	4798      	blx	r3
  400bd0:	b138      	cbz	r0, 400be2 <xQueueGenericSend+0xaa>
							queueYIELD_IF_USING_PREEMPTION();
  400bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400bd6:	4b48      	ldr	r3, [pc, #288]	; (400cf8 <xQueueGenericSend+0x1c0>)
  400bd8:	601a      	str	r2, [r3, #0]
  400bda:	f3bf 8f4f 	dsb	sy
  400bde:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  400be2:	4b46      	ldr	r3, [pc, #280]	; (400cfc <xQueueGenericSend+0x1c4>)
  400be4:	4798      	blx	r3
				return pdPASS;
  400be6:	2001      	movs	r0, #1
}
  400be8:	b005      	add	sp, #20
  400bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400bec:	2d00      	cmp	r5, #0
  400bee:	d0eb      	beq.n	400bc8 <xQueueGenericSend+0x90>
  400bf0:	e7f7      	b.n	400be2 <xQueueGenericSend+0xaa>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400bf4:	b953      	cbnz	r3, 400c0c <xQueueGenericSend+0xd4>
						else if( xYieldRequired != pdFALSE )
  400bf6:	2800      	cmp	r0, #0
  400bf8:	d0f3      	beq.n	400be2 <xQueueGenericSend+0xaa>
							queueYIELD_IF_USING_PREEMPTION();
  400bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400bfe:	4b3e      	ldr	r3, [pc, #248]	; (400cf8 <xQueueGenericSend+0x1c0>)
  400c00:	601a      	str	r2, [r3, #0]
  400c02:	f3bf 8f4f 	dsb	sy
  400c06:	f3bf 8f6f 	isb	sy
  400c0a:	e7ea      	b.n	400be2 <xQueueGenericSend+0xaa>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400c0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400c10:	4b3b      	ldr	r3, [pc, #236]	; (400d00 <xQueueGenericSend+0x1c8>)
  400c12:	4798      	blx	r3
  400c14:	2800      	cmp	r0, #0
  400c16:	d0e4      	beq.n	400be2 <xQueueGenericSend+0xaa>
								queueYIELD_IF_USING_PREEMPTION();
  400c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c1c:	4b36      	ldr	r3, [pc, #216]	; (400cf8 <xQueueGenericSend+0x1c0>)
  400c1e:	601a      	str	r2, [r3, #0]
  400c20:	f3bf 8f4f 	dsb	sy
  400c24:	f3bf 8f6f 	isb	sy
  400c28:	e7db      	b.n	400be2 <xQueueGenericSend+0xaa>
					taskEXIT_CRITICAL();
  400c2a:	4b34      	ldr	r3, [pc, #208]	; (400cfc <xQueueGenericSend+0x1c4>)
  400c2c:	4798      	blx	r3
					return errQUEUE_FULL;
  400c2e:	2000      	movs	r0, #0
  400c30:	e7da      	b.n	400be8 <xQueueGenericSend+0xb0>
					vTaskInternalSetTimeOutState( &xTimeOut );
  400c32:	a802      	add	r0, sp, #8
  400c34:	4b33      	ldr	r3, [pc, #204]	; (400d04 <xQueueGenericSend+0x1cc>)
  400c36:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400c38:	2501      	movs	r5, #1
  400c3a:	e019      	b.n	400c70 <xQueueGenericSend+0x138>
		prvLockQueue( pxQueue );
  400c3c:	2300      	movs	r3, #0
  400c3e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  400c42:	e021      	b.n	400c88 <xQueueGenericSend+0x150>
  400c44:	2300      	movs	r3, #0
  400c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  400c4a:	e023      	b.n	400c94 <xQueueGenericSend+0x15c>
				prvUnlockQueue( pxQueue );
  400c4c:	4620      	mov	r0, r4
  400c4e:	4b2e      	ldr	r3, [pc, #184]	; (400d08 <xQueueGenericSend+0x1d0>)
  400c50:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400c52:	4b2e      	ldr	r3, [pc, #184]	; (400d0c <xQueueGenericSend+0x1d4>)
  400c54:	4798      	blx	r3
		taskENTER_CRITICAL();
  400c56:	4b2e      	ldr	r3, [pc, #184]	; (400d10 <xQueueGenericSend+0x1d8>)
  400c58:	4798      	blx	r3
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400c5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400c5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400c5e:	429a      	cmp	r2, r3
  400c60:	d3a8      	bcc.n	400bb4 <xQueueGenericSend+0x7c>
  400c62:	2e02      	cmp	r6, #2
  400c64:	d0a6      	beq.n	400bb4 <xQueueGenericSend+0x7c>
				if( xTicksToWait == ( TickType_t ) 0 )
  400c66:	9b01      	ldr	r3, [sp, #4]
  400c68:	2b00      	cmp	r3, #0
  400c6a:	d0de      	beq.n	400c2a <xQueueGenericSend+0xf2>
				else if( xEntryTimeSet == pdFALSE )
  400c6c:	2d00      	cmp	r5, #0
  400c6e:	d0e0      	beq.n	400c32 <xQueueGenericSend+0xfa>
		taskEXIT_CRITICAL();
  400c70:	4b22      	ldr	r3, [pc, #136]	; (400cfc <xQueueGenericSend+0x1c4>)
  400c72:	4798      	blx	r3
		vTaskSuspendAll();
  400c74:	4b27      	ldr	r3, [pc, #156]	; (400d14 <xQueueGenericSend+0x1dc>)
  400c76:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400c78:	4b25      	ldr	r3, [pc, #148]	; (400d10 <xQueueGenericSend+0x1d8>)
  400c7a:	4798      	blx	r3
  400c7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400c80:	b25b      	sxtb	r3, r3
  400c82:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c86:	d0d9      	beq.n	400c3c <xQueueGenericSend+0x104>
  400c88:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400c8c:	b25b      	sxtb	r3, r3
  400c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c92:	d0d7      	beq.n	400c44 <xQueueGenericSend+0x10c>
  400c94:	4b19      	ldr	r3, [pc, #100]	; (400cfc <xQueueGenericSend+0x1c4>)
  400c96:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400c98:	a901      	add	r1, sp, #4
  400c9a:	a802      	add	r0, sp, #8
  400c9c:	4b1e      	ldr	r3, [pc, #120]	; (400d18 <xQueueGenericSend+0x1e0>)
  400c9e:	4798      	blx	r3
  400ca0:	b9c8      	cbnz	r0, 400cd6 <xQueueGenericSend+0x19e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400ca2:	4620      	mov	r0, r4
  400ca4:	4b1d      	ldr	r3, [pc, #116]	; (400d1c <xQueueGenericSend+0x1e4>)
  400ca6:	4798      	blx	r3
  400ca8:	2800      	cmp	r0, #0
  400caa:	d0cf      	beq.n	400c4c <xQueueGenericSend+0x114>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400cac:	9901      	ldr	r1, [sp, #4]
  400cae:	f104 0010 	add.w	r0, r4, #16
  400cb2:	4b1b      	ldr	r3, [pc, #108]	; (400d20 <xQueueGenericSend+0x1e8>)
  400cb4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400cb6:	4620      	mov	r0, r4
  400cb8:	4b13      	ldr	r3, [pc, #76]	; (400d08 <xQueueGenericSend+0x1d0>)
  400cba:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400cbc:	4b13      	ldr	r3, [pc, #76]	; (400d0c <xQueueGenericSend+0x1d4>)
  400cbe:	4798      	blx	r3
  400cc0:	2800      	cmp	r0, #0
  400cc2:	d1c8      	bne.n	400c56 <xQueueGenericSend+0x11e>
					portYIELD_WITHIN_API();
  400cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400cc8:	4b0b      	ldr	r3, [pc, #44]	; (400cf8 <xQueueGenericSend+0x1c0>)
  400cca:	601a      	str	r2, [r3, #0]
  400ccc:	f3bf 8f4f 	dsb	sy
  400cd0:	f3bf 8f6f 	isb	sy
  400cd4:	e7bf      	b.n	400c56 <xQueueGenericSend+0x11e>
			prvUnlockQueue( pxQueue );
  400cd6:	4620      	mov	r0, r4
  400cd8:	4b0b      	ldr	r3, [pc, #44]	; (400d08 <xQueueGenericSend+0x1d0>)
  400cda:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400cdc:	4b0b      	ldr	r3, [pc, #44]	; (400d0c <xQueueGenericSend+0x1d4>)
  400cde:	4798      	blx	r3
			return errQUEUE_FULL;
  400ce0:	2000      	movs	r0, #0
  400ce2:	e781      	b.n	400be8 <xQueueGenericSend+0xb0>
  400ce4:	00401c01 	.word	0x00401c01
  400ce8:	004030d0 	.word	0x004030d0
  400cec:	00402ce1 	.word	0x00402ce1
  400cf0:	00400869 	.word	0x00400869
  400cf4:	004008e9 	.word	0x004008e9
  400cf8:	e000ed04 	.word	0xe000ed04
  400cfc:	0040030d 	.word	0x0040030d
  400d00:	00401ac1 	.word	0x00401ac1
  400d04:	00401b55 	.word	0x00401b55
  400d08:	00400995 	.word	0x00400995
  400d0c:	004016ed 	.word	0x004016ed
  400d10:	004002c5 	.word	0x004002c5
  400d14:	004015ad 	.word	0x004015ad
  400d18:	00401b6d 	.word	0x00401b6d
  400d1c:	0040081d 	.word	0x0040081d
  400d20:	00401a39 	.word	0x00401a39

00400d24 <xQueueGenericSendFromISR>:
{
  400d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400d28:	460f      	mov	r7, r1
  400d2a:	4691      	mov	r9, r2
  400d2c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
  400d2e:	4604      	mov	r4, r0
  400d30:	b1e8      	cbz	r0, 400d6e <xQueueGenericSendFromISR+0x4a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400d32:	b317      	cbz	r7, 400d7a <xQueueGenericSendFromISR+0x56>
  400d34:	2301      	movs	r3, #1
  400d36:	b333      	cbz	r3, 400d86 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400d38:	2e02      	cmp	r6, #2
  400d3a:	d02a      	beq.n	400d92 <xQueueGenericSendFromISR+0x6e>
  400d3c:	2301      	movs	r3, #1
  400d3e:	b36b      	cbz	r3, 400d9c <xQueueGenericSendFromISR+0x78>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400d40:	4b35      	ldr	r3, [pc, #212]	; (400e18 <xQueueGenericSendFromISR+0xf4>)
  400d42:	4798      	blx	r3
	__asm volatile
  400d44:	f3ef 8811 	mrs	r8, BASEPRI
  400d48:	f04f 0350 	mov.w	r3, #80	; 0x50
  400d4c:	f383 8811 	msr	BASEPRI, r3
  400d50:	f3bf 8f6f 	isb	sy
  400d54:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400d58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400d5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d5c:	429a      	cmp	r2, r3
  400d5e:	d323      	bcc.n	400da8 <xQueueGenericSendFromISR+0x84>
  400d60:	2e02      	cmp	r6, #2
  400d62:	d021      	beq.n	400da8 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
  400d64:	2000      	movs	r0, #0
	__asm volatile
  400d66:	f388 8811 	msr	BASEPRI, r8
}
  400d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( pxQueue );
  400d6e:	f240 31c3 	movw	r1, #963	; 0x3c3
  400d72:	482a      	ldr	r0, [pc, #168]	; (400e1c <xQueueGenericSendFromISR+0xf8>)
  400d74:	4b2a      	ldr	r3, [pc, #168]	; (400e20 <xQueueGenericSendFromISR+0xfc>)
  400d76:	4798      	blx	r3
  400d78:	e7db      	b.n	400d32 <xQueueGenericSendFromISR+0xe>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400d7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400d7c:	b90b      	cbnz	r3, 400d82 <xQueueGenericSendFromISR+0x5e>
  400d7e:	2301      	movs	r3, #1
  400d80:	e7d9      	b.n	400d36 <xQueueGenericSendFromISR+0x12>
  400d82:	2300      	movs	r3, #0
  400d84:	e7d7      	b.n	400d36 <xQueueGenericSendFromISR+0x12>
  400d86:	f44f 7171 	mov.w	r1, #964	; 0x3c4
  400d8a:	4824      	ldr	r0, [pc, #144]	; (400e1c <xQueueGenericSendFromISR+0xf8>)
  400d8c:	4b24      	ldr	r3, [pc, #144]	; (400e20 <xQueueGenericSendFromISR+0xfc>)
  400d8e:	4798      	blx	r3
  400d90:	e7d2      	b.n	400d38 <xQueueGenericSendFromISR+0x14>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400d92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d94:	2b01      	cmp	r3, #1
  400d96:	d0d2      	beq.n	400d3e <xQueueGenericSendFromISR+0x1a>
  400d98:	2300      	movs	r3, #0
  400d9a:	e7d0      	b.n	400d3e <xQueueGenericSendFromISR+0x1a>
  400d9c:	f240 31c5 	movw	r1, #965	; 0x3c5
  400da0:	481e      	ldr	r0, [pc, #120]	; (400e1c <xQueueGenericSendFromISR+0xf8>)
  400da2:	4b1f      	ldr	r3, [pc, #124]	; (400e20 <xQueueGenericSendFromISR+0xfc>)
  400da4:	4798      	blx	r3
  400da6:	e7cb      	b.n	400d40 <xQueueGenericSendFromISR+0x1c>
			const int8_t cTxLock = pxQueue->cTxLock;
  400da8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  400dac:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400dae:	4632      	mov	r2, r6
  400db0:	4639      	mov	r1, r7
  400db2:	4620      	mov	r0, r4
  400db4:	4b1b      	ldr	r3, [pc, #108]	; (400e24 <xQueueGenericSendFromISR+0x100>)
  400db6:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
  400db8:	f1b5 3fff 	cmp.w	r5, #4294967295
  400dbc:	d005      	beq.n	400dca <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  400dbe:	3501      	adds	r5, #1
  400dc0:	b26d      	sxtb	r5, r5
  400dc2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			xReturn = pdPASS;
  400dc6:	2001      	movs	r0, #1
  400dc8:	e7cd      	b.n	400d66 <xQueueGenericSendFromISR+0x42>
					if( pxQueue->pxQueueSetContainer != NULL )
  400dca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400dcc:	b15b      	cbz	r3, 400de6 <xQueueGenericSendFromISR+0xc2>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  400dce:	4631      	mov	r1, r6
  400dd0:	4620      	mov	r0, r4
  400dd2:	4b15      	ldr	r3, [pc, #84]	; (400e28 <xQueueGenericSendFromISR+0x104>)
  400dd4:	4798      	blx	r3
  400dd6:	b1b0      	cbz	r0, 400e06 <xQueueGenericSendFromISR+0xe2>
							if( pxHigherPriorityTaskWoken != NULL )
  400dd8:	f1b9 0f00 	cmp.w	r9, #0
  400ddc:	d015      	beq.n	400e0a <xQueueGenericSendFromISR+0xe6>
								*pxHigherPriorityTaskWoken = pdTRUE;
  400dde:	2001      	movs	r0, #1
  400de0:	f8c9 0000 	str.w	r0, [r9]
  400de4:	e7bf      	b.n	400d66 <xQueueGenericSendFromISR+0x42>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400de6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400de8:	b90b      	cbnz	r3, 400dee <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
  400dea:	2001      	movs	r0, #1
  400dec:	e7bb      	b.n	400d66 <xQueueGenericSendFromISR+0x42>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400dee:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400df2:	4b0e      	ldr	r3, [pc, #56]	; (400e2c <xQueueGenericSendFromISR+0x108>)
  400df4:	4798      	blx	r3
  400df6:	b150      	cbz	r0, 400e0e <xQueueGenericSendFromISR+0xea>
								if( pxHigherPriorityTaskWoken != NULL )
  400df8:	f1b9 0f00 	cmp.w	r9, #0
  400dfc:	d009      	beq.n	400e12 <xQueueGenericSendFromISR+0xee>
									*pxHigherPriorityTaskWoken = pdTRUE;
  400dfe:	2001      	movs	r0, #1
  400e00:	f8c9 0000 	str.w	r0, [r9]
  400e04:	e7af      	b.n	400d66 <xQueueGenericSendFromISR+0x42>
			xReturn = pdPASS;
  400e06:	2001      	movs	r0, #1
  400e08:	e7ad      	b.n	400d66 <xQueueGenericSendFromISR+0x42>
  400e0a:	2001      	movs	r0, #1
  400e0c:	e7ab      	b.n	400d66 <xQueueGenericSendFromISR+0x42>
  400e0e:	2001      	movs	r0, #1
  400e10:	e7a9      	b.n	400d66 <xQueueGenericSendFromISR+0x42>
  400e12:	2001      	movs	r0, #1
  400e14:	e7a7      	b.n	400d66 <xQueueGenericSendFromISR+0x42>
  400e16:	bf00      	nop
  400e18:	00400525 	.word	0x00400525
  400e1c:	004030d0 	.word	0x004030d0
  400e20:	00402ce1 	.word	0x00402ce1
  400e24:	00400869 	.word	0x00400869
  400e28:	004008e9 	.word	0x004008e9
  400e2c:	00401ac1 	.word	0x00401ac1

00400e30 <xQueueReceive>:
{
  400e30:	b5f0      	push	{r4, r5, r6, r7, lr}
  400e32:	b085      	sub	sp, #20
  400e34:	460f      	mov	r7, r1
  400e36:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
  400e38:	4604      	mov	r4, r0
  400e3a:	b148      	cbz	r0, 400e50 <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e3c:	b177      	cbz	r7, 400e5c <xQueueReceive+0x2c>
  400e3e:	2301      	movs	r3, #1
  400e40:	b193      	cbz	r3, 400e68 <xQueueReceive+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400e42:	4b51      	ldr	r3, [pc, #324]	; (400f88 <xQueueReceive+0x158>)
  400e44:	4798      	blx	r3
  400e46:	b9a8      	cbnz	r0, 400e74 <xQueueReceive+0x44>
  400e48:	9b01      	ldr	r3, [sp, #4]
  400e4a:	b9bb      	cbnz	r3, 400e7c <xQueueReceive+0x4c>
  400e4c:	2301      	movs	r3, #1
  400e4e:	e012      	b.n	400e76 <xQueueReceive+0x46>
	configASSERT( ( pxQueue ) );
  400e50:	f44f 61a0 	mov.w	r1, #1280	; 0x500
  400e54:	484d      	ldr	r0, [pc, #308]	; (400f8c <xQueueReceive+0x15c>)
  400e56:	4b4e      	ldr	r3, [pc, #312]	; (400f90 <xQueueReceive+0x160>)
  400e58:	4798      	blx	r3
  400e5a:	e7ef      	b.n	400e3c <xQueueReceive+0xc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400e5e:	b90b      	cbnz	r3, 400e64 <xQueueReceive+0x34>
  400e60:	2301      	movs	r3, #1
  400e62:	e7ed      	b.n	400e40 <xQueueReceive+0x10>
  400e64:	2300      	movs	r3, #0
  400e66:	e7eb      	b.n	400e40 <xQueueReceive+0x10>
  400e68:	f240 5104 	movw	r1, #1284	; 0x504
  400e6c:	4847      	ldr	r0, [pc, #284]	; (400f8c <xQueueReceive+0x15c>)
  400e6e:	4b48      	ldr	r3, [pc, #288]	; (400f90 <xQueueReceive+0x160>)
  400e70:	4798      	blx	r3
  400e72:	e7e6      	b.n	400e42 <xQueueReceive+0x12>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400e74:	2301      	movs	r3, #1
  400e76:	b11b      	cbz	r3, 400e80 <xQueueReceive+0x50>
  400e78:	2600      	movs	r6, #0
  400e7a:	e044      	b.n	400f06 <xQueueReceive+0xd6>
  400e7c:	2300      	movs	r3, #0
  400e7e:	e7fa      	b.n	400e76 <xQueueReceive+0x46>
  400e80:	f240 5109 	movw	r1, #1289	; 0x509
  400e84:	4841      	ldr	r0, [pc, #260]	; (400f8c <xQueueReceive+0x15c>)
  400e86:	4b42      	ldr	r3, [pc, #264]	; (400f90 <xQueueReceive+0x160>)
  400e88:	4798      	blx	r3
  400e8a:	e7f5      	b.n	400e78 <xQueueReceive+0x48>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400e8c:	4639      	mov	r1, r7
  400e8e:	4620      	mov	r0, r4
  400e90:	4b40      	ldr	r3, [pc, #256]	; (400f94 <xQueueReceive+0x164>)
  400e92:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  400e94:	3d01      	subs	r5, #1
  400e96:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400e98:	6923      	ldr	r3, [r4, #16]
  400e9a:	b923      	cbnz	r3, 400ea6 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
  400e9c:	4b3e      	ldr	r3, [pc, #248]	; (400f98 <xQueueReceive+0x168>)
  400e9e:	4798      	blx	r3
				return pdPASS;
  400ea0:	2001      	movs	r0, #1
}
  400ea2:	b005      	add	sp, #20
  400ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400ea6:	f104 0010 	add.w	r0, r4, #16
  400eaa:	4b3c      	ldr	r3, [pc, #240]	; (400f9c <xQueueReceive+0x16c>)
  400eac:	4798      	blx	r3
  400eae:	2800      	cmp	r0, #0
  400eb0:	d0f4      	beq.n	400e9c <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
  400eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400eb6:	4b3a      	ldr	r3, [pc, #232]	; (400fa0 <xQueueReceive+0x170>)
  400eb8:	601a      	str	r2, [r3, #0]
  400eba:	f3bf 8f4f 	dsb	sy
  400ebe:	f3bf 8f6f 	isb	sy
  400ec2:	e7eb      	b.n	400e9c <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
  400ec4:	4b34      	ldr	r3, [pc, #208]	; (400f98 <xQueueReceive+0x168>)
  400ec6:	4798      	blx	r3
					return errQUEUE_EMPTY;
  400ec8:	2000      	movs	r0, #0
  400eca:	e7ea      	b.n	400ea2 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
  400ecc:	a802      	add	r0, sp, #8
  400ece:	4b35      	ldr	r3, [pc, #212]	; (400fa4 <xQueueReceive+0x174>)
  400ed0:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400ed2:	2601      	movs	r6, #1
  400ed4:	e021      	b.n	400f1a <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
  400ed6:	2300      	movs	r3, #0
  400ed8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  400edc:	e029      	b.n	400f32 <xQueueReceive+0x102>
  400ede:	2300      	movs	r3, #0
  400ee0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  400ee4:	e02b      	b.n	400f3e <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
  400ee6:	4620      	mov	r0, r4
  400ee8:	4b2f      	ldr	r3, [pc, #188]	; (400fa8 <xQueueReceive+0x178>)
  400eea:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400eec:	4b2f      	ldr	r3, [pc, #188]	; (400fac <xQueueReceive+0x17c>)
  400eee:	4798      	blx	r3
  400ef0:	e009      	b.n	400f06 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
  400ef2:	4620      	mov	r0, r4
  400ef4:	4b2c      	ldr	r3, [pc, #176]	; (400fa8 <xQueueReceive+0x178>)
  400ef6:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400ef8:	4b2c      	ldr	r3, [pc, #176]	; (400fac <xQueueReceive+0x17c>)
  400efa:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400efc:	4620      	mov	r0, r4
  400efe:	4b2c      	ldr	r3, [pc, #176]	; (400fb0 <xQueueReceive+0x180>)
  400f00:	4798      	blx	r3
  400f02:	2800      	cmp	r0, #0
  400f04:	d13d      	bne.n	400f82 <xQueueReceive+0x152>
		taskENTER_CRITICAL();
  400f06:	4b2b      	ldr	r3, [pc, #172]	; (400fb4 <xQueueReceive+0x184>)
  400f08:	4798      	blx	r3
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400f0a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  400f0c:	2d00      	cmp	r5, #0
  400f0e:	d1bd      	bne.n	400e8c <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
  400f10:	9b01      	ldr	r3, [sp, #4]
  400f12:	2b00      	cmp	r3, #0
  400f14:	d0d6      	beq.n	400ec4 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
  400f16:	2e00      	cmp	r6, #0
  400f18:	d0d8      	beq.n	400ecc <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
  400f1a:	4b1f      	ldr	r3, [pc, #124]	; (400f98 <xQueueReceive+0x168>)
  400f1c:	4798      	blx	r3
		vTaskSuspendAll();
  400f1e:	4b26      	ldr	r3, [pc, #152]	; (400fb8 <xQueueReceive+0x188>)
  400f20:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400f22:	4b24      	ldr	r3, [pc, #144]	; (400fb4 <xQueueReceive+0x184>)
  400f24:	4798      	blx	r3
  400f26:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400f2a:	b25b      	sxtb	r3, r3
  400f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f30:	d0d1      	beq.n	400ed6 <xQueueReceive+0xa6>
  400f32:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400f36:	b25b      	sxtb	r3, r3
  400f38:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f3c:	d0cf      	beq.n	400ede <xQueueReceive+0xae>
  400f3e:	4b16      	ldr	r3, [pc, #88]	; (400f98 <xQueueReceive+0x168>)
  400f40:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400f42:	a901      	add	r1, sp, #4
  400f44:	a802      	add	r0, sp, #8
  400f46:	4b1d      	ldr	r3, [pc, #116]	; (400fbc <xQueueReceive+0x18c>)
  400f48:	4798      	blx	r3
  400f4a:	2800      	cmp	r0, #0
  400f4c:	d1d1      	bne.n	400ef2 <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400f4e:	4620      	mov	r0, r4
  400f50:	4b17      	ldr	r3, [pc, #92]	; (400fb0 <xQueueReceive+0x180>)
  400f52:	4798      	blx	r3
  400f54:	2800      	cmp	r0, #0
  400f56:	d0c6      	beq.n	400ee6 <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400f58:	9901      	ldr	r1, [sp, #4]
  400f5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400f5e:	4b18      	ldr	r3, [pc, #96]	; (400fc0 <xQueueReceive+0x190>)
  400f60:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400f62:	4620      	mov	r0, r4
  400f64:	4b10      	ldr	r3, [pc, #64]	; (400fa8 <xQueueReceive+0x178>)
  400f66:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400f68:	4b10      	ldr	r3, [pc, #64]	; (400fac <xQueueReceive+0x17c>)
  400f6a:	4798      	blx	r3
  400f6c:	2800      	cmp	r0, #0
  400f6e:	d1ca      	bne.n	400f06 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
  400f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f74:	4b0a      	ldr	r3, [pc, #40]	; (400fa0 <xQueueReceive+0x170>)
  400f76:	601a      	str	r2, [r3, #0]
  400f78:	f3bf 8f4f 	dsb	sy
  400f7c:	f3bf 8f6f 	isb	sy
  400f80:	e7c1      	b.n	400f06 <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
  400f82:	2000      	movs	r0, #0
  400f84:	e78d      	b.n	400ea2 <xQueueReceive+0x72>
  400f86:	bf00      	nop
  400f88:	00401c01 	.word	0x00401c01
  400f8c:	004030d0 	.word	0x004030d0
  400f90:	00402ce1 	.word	0x00402ce1
  400f94:	0040096d 	.word	0x0040096d
  400f98:	0040030d 	.word	0x0040030d
  400f9c:	00401ac1 	.word	0x00401ac1
  400fa0:	e000ed04 	.word	0xe000ed04
  400fa4:	00401b55 	.word	0x00401b55
  400fa8:	00400995 	.word	0x00400995
  400fac:	004016ed 	.word	0x004016ed
  400fb0:	00400845 	.word	0x00400845
  400fb4:	004002c5 	.word	0x004002c5
  400fb8:	004015ad 	.word	0x004015ad
  400fbc:	00401b6d 	.word	0x00401b6d
  400fc0:	00401a39 	.word	0x00401a39

00400fc4 <uxQueueMessagesWaiting>:
{
  400fc4:	b510      	push	{r4, lr}
	configASSERT( xQueue );
  400fc6:	4604      	mov	r4, r0
  400fc8:	b130      	cbz	r0, 400fd8 <uxQueueMessagesWaiting+0x14>
	taskENTER_CRITICAL();
  400fca:	4b06      	ldr	r3, [pc, #24]	; (400fe4 <uxQueueMessagesWaiting+0x20>)
  400fcc:	4798      	blx	r3
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
  400fce:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  400fd0:	4b05      	ldr	r3, [pc, #20]	; (400fe8 <uxQueueMessagesWaiting+0x24>)
  400fd2:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
  400fd4:	4620      	mov	r0, r4
  400fd6:	bd10      	pop	{r4, pc}
	configASSERT( xQueue );
  400fd8:	f240 718a 	movw	r1, #1930	; 0x78a
  400fdc:	4803      	ldr	r0, [pc, #12]	; (400fec <uxQueueMessagesWaiting+0x28>)
  400fde:	4b04      	ldr	r3, [pc, #16]	; (400ff0 <uxQueueMessagesWaiting+0x2c>)
  400fe0:	4798      	blx	r3
  400fe2:	e7f2      	b.n	400fca <uxQueueMessagesWaiting+0x6>
  400fe4:	004002c5 	.word	0x004002c5
  400fe8:	0040030d 	.word	0x0040030d
  400fec:	004030d0 	.word	0x004030d0
  400ff0:	00402ce1 	.word	0x00402ce1

00400ff4 <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  400ff4:	2300      	movs	r3, #0
  400ff6:	2b07      	cmp	r3, #7
  400ff8:	d80c      	bhi.n	401014 <vQueueAddToRegistry+0x20>
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  400ffa:	4a07      	ldr	r2, [pc, #28]	; (401018 <vQueueAddToRegistry+0x24>)
  400ffc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  401000:	b10a      	cbz	r2, 401006 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401002:	3301      	adds	r3, #1
  401004:	e7f7      	b.n	400ff6 <vQueueAddToRegistry+0x2>
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401006:	4a04      	ldr	r2, [pc, #16]	; (401018 <vQueueAddToRegistry+0x24>)
  401008:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  40100c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401010:	6058      	str	r0, [r3, #4]
				break;
  401012:	4770      	bx	lr
  401014:	4770      	bx	lr
  401016:	bf00      	nop
  401018:	20000640 	.word	0x20000640

0040101c <vQueueWaitForMessageRestricted>:
	{
  40101c:	b570      	push	{r4, r5, r6, lr}
  40101e:	4604      	mov	r4, r0
  401020:	460d      	mov	r5, r1
  401022:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401024:	4b12      	ldr	r3, [pc, #72]	; (401070 <vQueueWaitForMessageRestricted+0x54>)
  401026:	4798      	blx	r3
  401028:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  40102c:	b25b      	sxtb	r3, r3
  40102e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401032:	d00d      	beq.n	401050 <vQueueWaitForMessageRestricted+0x34>
  401034:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401038:	b25b      	sxtb	r3, r3
  40103a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40103e:	d00b      	beq.n	401058 <vQueueWaitForMessageRestricted+0x3c>
  401040:	4b0c      	ldr	r3, [pc, #48]	; (401074 <vQueueWaitForMessageRestricted+0x58>)
  401042:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401044:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401046:	b15b      	cbz	r3, 401060 <vQueueWaitForMessageRestricted+0x44>
		prvUnlockQueue( pxQueue );
  401048:	4620      	mov	r0, r4
  40104a:	4b0b      	ldr	r3, [pc, #44]	; (401078 <vQueueWaitForMessageRestricted+0x5c>)
  40104c:	4798      	blx	r3
  40104e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401050:	2300      	movs	r3, #0
  401052:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401056:	e7ed      	b.n	401034 <vQueueWaitForMessageRestricted+0x18>
  401058:	2300      	movs	r3, #0
  40105a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  40105e:	e7ef      	b.n	401040 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401060:	4632      	mov	r2, r6
  401062:	4629      	mov	r1, r5
  401064:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401068:	4b04      	ldr	r3, [pc, #16]	; (40107c <vQueueWaitForMessageRestricted+0x60>)
  40106a:	4798      	blx	r3
  40106c:	e7ec      	b.n	401048 <vQueueWaitForMessageRestricted+0x2c>
  40106e:	bf00      	nop
  401070:	004002c5 	.word	0x004002c5
  401074:	0040030d 	.word	0x0040030d
  401078:	00400995 	.word	0x00400995
  40107c:	00401a79 	.word	0x00401a79

00401080 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401080:	4b08      	ldr	r3, [pc, #32]	; (4010a4 <prvResetNextTaskUnblockTime+0x24>)
  401082:	681b      	ldr	r3, [r3, #0]
  401084:	681b      	ldr	r3, [r3, #0]
  401086:	b13b      	cbz	r3, 401098 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401088:	4b06      	ldr	r3, [pc, #24]	; (4010a4 <prvResetNextTaskUnblockTime+0x24>)
  40108a:	681b      	ldr	r3, [r3, #0]
  40108c:	68db      	ldr	r3, [r3, #12]
  40108e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  401090:	685a      	ldr	r2, [r3, #4]
  401092:	4b05      	ldr	r3, [pc, #20]	; (4010a8 <prvResetNextTaskUnblockTime+0x28>)
  401094:	601a      	str	r2, [r3, #0]
  401096:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401098:	f04f 32ff 	mov.w	r2, #4294967295
  40109c:	4b02      	ldr	r3, [pc, #8]	; (4010a8 <prvResetNextTaskUnblockTime+0x28>)
  40109e:	601a      	str	r2, [r3, #0]
  4010a0:	4770      	bx	lr
  4010a2:	bf00      	nop
  4010a4:	2000049c 	.word	0x2000049c
  4010a8:	20000588 	.word	0x20000588

004010ac <prvDeleteTCB>:
	{
  4010ac:	b538      	push	{r3, r4, r5, lr}
  4010ae:	4605      	mov	r5, r0
			vPortFree( pxTCB->pxStack );
  4010b0:	6b00      	ldr	r0, [r0, #48]	; 0x30
  4010b2:	4c02      	ldr	r4, [pc, #8]	; (4010bc <prvDeleteTCB+0x10>)
  4010b4:	47a0      	blx	r4
			vPortFree( pxTCB );
  4010b6:	4628      	mov	r0, r5
  4010b8:	47a0      	blx	r4
  4010ba:	bd38      	pop	{r3, r4, r5, pc}
  4010bc:	004006bd 	.word	0x004006bd

004010c0 <prvTaskIsTaskSuspended>:
	{
  4010c0:	b510      	push	{r4, lr}
		configASSERT( xTask );
  4010c2:	4604      	mov	r4, r0
  4010c4:	b128      	cbz	r0, 4010d2 <prvTaskIsTaskSuspended+0x12>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  4010c6:	6962      	ldr	r2, [r4, #20]
  4010c8:	4b0a      	ldr	r3, [pc, #40]	; (4010f4 <prvTaskIsTaskSuspended+0x34>)
  4010ca:	429a      	cmp	r2, r3
  4010cc:	d007      	beq.n	4010de <prvTaskIsTaskSuspended+0x1e>
	BaseType_t xReturn = pdFALSE;
  4010ce:	2000      	movs	r0, #0
  4010d0:	bd10      	pop	{r4, pc}
		configASSERT( xTask );
  4010d2:	f240 710e 	movw	r1, #1806	; 0x70e
  4010d6:	4808      	ldr	r0, [pc, #32]	; (4010f8 <prvTaskIsTaskSuspended+0x38>)
  4010d8:	4b08      	ldr	r3, [pc, #32]	; (4010fc <prvTaskIsTaskSuspended+0x3c>)
  4010da:	4798      	blx	r3
  4010dc:	e7f3      	b.n	4010c6 <prvTaskIsTaskSuspended+0x6>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  4010de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4010e0:	4a07      	ldr	r2, [pc, #28]	; (401100 <prvTaskIsTaskSuspended+0x40>)
  4010e2:	4293      	cmp	r3, r2
  4010e4:	d002      	beq.n	4010ec <prvTaskIsTaskSuspended+0x2c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
  4010e6:	b11b      	cbz	r3, 4010f0 <prvTaskIsTaskSuspended+0x30>
	BaseType_t xReturn = pdFALSE;
  4010e8:	2000      	movs	r0, #0
  4010ea:	bd10      	pop	{r4, pc}
  4010ec:	2000      	movs	r0, #0
  4010ee:	bd10      	pop	{r4, pc}
					xReturn = pdTRUE;
  4010f0:	2001      	movs	r0, #1
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  4010f2:	bd10      	pop	{r4, pc}
  4010f4:	200005a8 	.word	0x200005a8
  4010f8:	004030e8 	.word	0x004030e8
  4010fc:	00402ce1 	.word	0x00402ce1
  401100:	20000590 	.word	0x20000590

00401104 <prvInitialiseNewTask>:
{
  401104:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401108:	4681      	mov	r9, r0
  40110a:	460d      	mov	r5, r1
  40110c:	4617      	mov	r7, r2
  40110e:	469a      	mov	sl, r3
  401110:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  401112:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  401116:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  401118:	0092      	lsls	r2, r2, #2
  40111a:	21a5      	movs	r1, #165	; 0xa5
  40111c:	6b20      	ldr	r0, [r4, #48]	; 0x30
  40111e:	4b25      	ldr	r3, [pc, #148]	; (4011b4 <prvInitialiseNewTask+0xb0>)
  401120:	4798      	blx	r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
  401122:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401124:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
  401128:	3a01      	subs	r2, #1
  40112a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
  40112e:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
  401132:	b315      	cbz	r5, 40117a <prvInitialiseNewTask+0x76>
  401134:	2300      	movs	r3, #0
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401136:	2b13      	cmp	r3, #19
  401138:	d807      	bhi.n	40114a <prvInitialiseNewTask+0x46>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  40113a:	5ce9      	ldrb	r1, [r5, r3]
  40113c:	18e2      	adds	r2, r4, r3
  40113e:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
  401142:	5cea      	ldrb	r2, [r5, r3]
  401144:	b10a      	cbz	r2, 40114a <prvInitialiseNewTask+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401146:	3301      	adds	r3, #1
  401148:	e7f5      	b.n	401136 <prvInitialiseNewTask+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  40114a:	2300      	movs	r3, #0
  40114c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
  401150:	2e07      	cmp	r6, #7
  401152:	d900      	bls.n	401156 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
  401154:	2607      	movs	r6, #7
	pxNewTCB->uxPriority = uxPriority;
  401156:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
  401158:	64a6      	str	r6, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
  40115a:	2500      	movs	r5, #0
  40115c:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  40115e:	1d20      	adds	r0, r4, #4
  401160:	f8df b058 	ldr.w	fp, [pc, #88]	; 4011bc <prvInitialiseNewTask+0xb8>
  401164:	47d8      	blx	fp
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  401166:	f104 0018 	add.w	r0, r4, #24
  40116a:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  40116c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40116e:	f1c6 0608 	rsb	r6, r6, #8
  401172:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  401174:	6264      	str	r4, [r4, #36]	; 0x24
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
  401176:	462b      	mov	r3, r5
  401178:	e009      	b.n	40118e <prvInitialiseNewTask+0x8a>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
  40117a:	2300      	movs	r3, #0
  40117c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  401180:	e7e6      	b.n	401150 <prvInitialiseNewTask+0x4c>
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
  401182:	f103 0214 	add.w	r2, r3, #20
  401186:	2100      	movs	r1, #0
  401188:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
  40118c:	3301      	adds	r3, #1
  40118e:	2b02      	cmp	r3, #2
  401190:	d9f7      	bls.n	401182 <prvInitialiseNewTask+0x7e>
		pxNewTCB->ulNotifiedValue = 0;
  401192:	2300      	movs	r3, #0
  401194:	65e3      	str	r3, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  401196:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40119a:	4652      	mov	r2, sl
  40119c:	4649      	mov	r1, r9
  40119e:	4638      	mov	r0, r7
  4011a0:	4b05      	ldr	r3, [pc, #20]	; (4011b8 <prvInitialiseNewTask+0xb4>)
  4011a2:	4798      	blx	r3
  4011a4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
  4011a6:	f1b8 0f00 	cmp.w	r8, #0
  4011aa:	d001      	beq.n	4011b0 <prvInitialiseNewTask+0xac>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4011ac:	f8c8 4000 	str.w	r4, [r8]
  4011b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4011b4:	00402eb9 	.word	0x00402eb9
  4011b8:	00400275 	.word	0x00400275
  4011bc:	0040017b 	.word	0x0040017b

004011c0 <prvInitialiseTaskLists>:
{
  4011c0:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  4011c2:	2400      	movs	r4, #0
  4011c4:	e007      	b.n	4011d6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4011c6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  4011ca:	0093      	lsls	r3, r2, #2
  4011cc:	480c      	ldr	r0, [pc, #48]	; (401200 <prvInitialiseTaskLists+0x40>)
  4011ce:	4418      	add	r0, r3
  4011d0:	4b0c      	ldr	r3, [pc, #48]	; (401204 <prvInitialiseTaskLists+0x44>)
  4011d2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  4011d4:	3401      	adds	r4, #1
  4011d6:	2c07      	cmp	r4, #7
  4011d8:	d9f5      	bls.n	4011c6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
  4011da:	4e0b      	ldr	r6, [pc, #44]	; (401208 <prvInitialiseTaskLists+0x48>)
  4011dc:	4630      	mov	r0, r6
  4011de:	4c09      	ldr	r4, [pc, #36]	; (401204 <prvInitialiseTaskLists+0x44>)
  4011e0:	47a0      	blx	r4
	vListInitialise( &xDelayedTaskList2 );
  4011e2:	4d0a      	ldr	r5, [pc, #40]	; (40120c <prvInitialiseTaskLists+0x4c>)
  4011e4:	4628      	mov	r0, r5
  4011e6:	47a0      	blx	r4
	vListInitialise( &xPendingReadyList );
  4011e8:	4809      	ldr	r0, [pc, #36]	; (401210 <prvInitialiseTaskLists+0x50>)
  4011ea:	47a0      	blx	r4
		vListInitialise( &xTasksWaitingTermination );
  4011ec:	4809      	ldr	r0, [pc, #36]	; (401214 <prvInitialiseTaskLists+0x54>)
  4011ee:	47a0      	blx	r4
		vListInitialise( &xSuspendedTaskList );
  4011f0:	4809      	ldr	r0, [pc, #36]	; (401218 <prvInitialiseTaskLists+0x58>)
  4011f2:	47a0      	blx	r4
	pxDelayedTaskList = &xDelayedTaskList1;
  4011f4:	4b09      	ldr	r3, [pc, #36]	; (40121c <prvInitialiseTaskLists+0x5c>)
  4011f6:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4011f8:	4b09      	ldr	r3, [pc, #36]	; (401220 <prvInitialiseTaskLists+0x60>)
  4011fa:	601d      	str	r5, [r3, #0]
  4011fc:	bd70      	pop	{r4, r5, r6, pc}
  4011fe:	bf00      	nop
  401200:	200004a4 	.word	0x200004a4
  401204:	00400165 	.word	0x00400165
  401208:	2000055c 	.word	0x2000055c
  40120c:	20000570 	.word	0x20000570
  401210:	20000590 	.word	0x20000590
  401214:	200005bc 	.word	0x200005bc
  401218:	200005a8 	.word	0x200005a8
  40121c:	2000049c 	.word	0x2000049c
  401220:	200004a0 	.word	0x200004a0

00401224 <prvAddNewTaskToReadyList>:
{
  401224:	b510      	push	{r4, lr}
  401226:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401228:	4b21      	ldr	r3, [pc, #132]	; (4012b0 <prvAddNewTaskToReadyList+0x8c>)
  40122a:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
  40122c:	4a21      	ldr	r2, [pc, #132]	; (4012b4 <prvAddNewTaskToReadyList+0x90>)
  40122e:	6813      	ldr	r3, [r2, #0]
  401230:	3301      	adds	r3, #1
  401232:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  401234:	4b20      	ldr	r3, [pc, #128]	; (4012b8 <prvAddNewTaskToReadyList+0x94>)
  401236:	681b      	ldr	r3, [r3, #0]
  401238:	2b00      	cmp	r3, #0
  40123a:	d031      	beq.n	4012a0 <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
  40123c:	4b1f      	ldr	r3, [pc, #124]	; (4012bc <prvAddNewTaskToReadyList+0x98>)
  40123e:	681b      	ldr	r3, [r3, #0]
  401240:	b93b      	cbnz	r3, 401252 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  401242:	4b1d      	ldr	r3, [pc, #116]	; (4012b8 <prvAddNewTaskToReadyList+0x94>)
  401244:	681b      	ldr	r3, [r3, #0]
  401246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401248:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40124a:	429a      	cmp	r2, r3
  40124c:	d801      	bhi.n	401252 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
  40124e:	4b1a      	ldr	r3, [pc, #104]	; (4012b8 <prvAddNewTaskToReadyList+0x94>)
  401250:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
  401252:	4a1b      	ldr	r2, [pc, #108]	; (4012c0 <prvAddNewTaskToReadyList+0x9c>)
  401254:	6813      	ldr	r3, [r2, #0]
  401256:	3301      	adds	r3, #1
  401258:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
  40125a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40125c:	2201      	movs	r2, #1
  40125e:	409a      	lsls	r2, r3
  401260:	4918      	ldr	r1, [pc, #96]	; (4012c4 <prvAddNewTaskToReadyList+0xa0>)
  401262:	6808      	ldr	r0, [r1, #0]
  401264:	4302      	orrs	r2, r0
  401266:	600a      	str	r2, [r1, #0]
  401268:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40126c:	009a      	lsls	r2, r3, #2
  40126e:	1d21      	adds	r1, r4, #4
  401270:	4815      	ldr	r0, [pc, #84]	; (4012c8 <prvAddNewTaskToReadyList+0xa4>)
  401272:	4410      	add	r0, r2
  401274:	4b15      	ldr	r3, [pc, #84]	; (4012cc <prvAddNewTaskToReadyList+0xa8>)
  401276:	4798      	blx	r3
	taskEXIT_CRITICAL();
  401278:	4b15      	ldr	r3, [pc, #84]	; (4012d0 <prvAddNewTaskToReadyList+0xac>)
  40127a:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
  40127c:	4b0f      	ldr	r3, [pc, #60]	; (4012bc <prvAddNewTaskToReadyList+0x98>)
  40127e:	681b      	ldr	r3, [r3, #0]
  401280:	b16b      	cbz	r3, 40129e <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  401282:	4b0d      	ldr	r3, [pc, #52]	; (4012b8 <prvAddNewTaskToReadyList+0x94>)
  401284:	681b      	ldr	r3, [r3, #0]
  401286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401288:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40128a:	429a      	cmp	r2, r3
  40128c:	d207      	bcs.n	40129e <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
  40128e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401292:	4b10      	ldr	r3, [pc, #64]	; (4012d4 <prvAddNewTaskToReadyList+0xb0>)
  401294:	601a      	str	r2, [r3, #0]
  401296:	f3bf 8f4f 	dsb	sy
  40129a:	f3bf 8f6f 	isb	sy
  40129e:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
  4012a0:	4b05      	ldr	r3, [pc, #20]	; (4012b8 <prvAddNewTaskToReadyList+0x94>)
  4012a2:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4012a4:	6813      	ldr	r3, [r2, #0]
  4012a6:	2b01      	cmp	r3, #1
  4012a8:	d1d3      	bne.n	401252 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
  4012aa:	4b0b      	ldr	r3, [pc, #44]	; (4012d8 <prvAddNewTaskToReadyList+0xb4>)
  4012ac:	4798      	blx	r3
  4012ae:	e7d0      	b.n	401252 <prvAddNewTaskToReadyList+0x2e>
  4012b0:	004002c5 	.word	0x004002c5
  4012b4:	20000544 	.word	0x20000544
  4012b8:	20000498 	.word	0x20000498
  4012bc:	200005a4 	.word	0x200005a4
  4012c0:	20000554 	.word	0x20000554
  4012c4:	20000558 	.word	0x20000558
  4012c8:	200004a4 	.word	0x200004a4
  4012cc:	00400181 	.word	0x00400181
  4012d0:	0040030d 	.word	0x0040030d
  4012d4:	e000ed04 	.word	0xe000ed04
  4012d8:	004011c1 	.word	0x004011c1

004012dc <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  4012dc:	4b0f      	ldr	r3, [pc, #60]	; (40131c <prvCheckTasksWaitingTermination+0x40>)
  4012de:	681b      	ldr	r3, [r3, #0]
  4012e0:	b1d3      	cbz	r3, 401318 <prvCheckTasksWaitingTermination+0x3c>
{
  4012e2:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
  4012e4:	4b0e      	ldr	r3, [pc, #56]	; (401320 <prvCheckTasksWaitingTermination+0x44>)
  4012e6:	4798      	blx	r3
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4012e8:	4b0e      	ldr	r3, [pc, #56]	; (401324 <prvCheckTasksWaitingTermination+0x48>)
  4012ea:	68db      	ldr	r3, [r3, #12]
  4012ec:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4012ee:	1d20      	adds	r0, r4, #4
  4012f0:	4b0d      	ldr	r3, [pc, #52]	; (401328 <prvCheckTasksWaitingTermination+0x4c>)
  4012f2:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
  4012f4:	4a0d      	ldr	r2, [pc, #52]	; (40132c <prvCheckTasksWaitingTermination+0x50>)
  4012f6:	6813      	ldr	r3, [r2, #0]
  4012f8:	3b01      	subs	r3, #1
  4012fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
  4012fc:	4a07      	ldr	r2, [pc, #28]	; (40131c <prvCheckTasksWaitingTermination+0x40>)
  4012fe:	6813      	ldr	r3, [r2, #0]
  401300:	3b01      	subs	r3, #1
  401302:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
  401304:	4b0a      	ldr	r3, [pc, #40]	; (401330 <prvCheckTasksWaitingTermination+0x54>)
  401306:	4798      	blx	r3
			prvDeleteTCB( pxTCB );
  401308:	4620      	mov	r0, r4
  40130a:	4b0a      	ldr	r3, [pc, #40]	; (401334 <prvCheckTasksWaitingTermination+0x58>)
  40130c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  40130e:	4b03      	ldr	r3, [pc, #12]	; (40131c <prvCheckTasksWaitingTermination+0x40>)
  401310:	681b      	ldr	r3, [r3, #0]
  401312:	2b00      	cmp	r3, #0
  401314:	d1e6      	bne.n	4012e4 <prvCheckTasksWaitingTermination+0x8>
}
  401316:	bd10      	pop	{r4, pc}
  401318:	4770      	bx	lr
  40131a:	bf00      	nop
  40131c:	20000548 	.word	0x20000548
  401320:	004002c5 	.word	0x004002c5
  401324:	200005bc 	.word	0x200005bc
  401328:	004001cd 	.word	0x004001cd
  40132c:	20000544 	.word	0x20000544
  401330:	0040030d 	.word	0x0040030d
  401334:	004010ad 	.word	0x004010ad

00401338 <prvIdleTask>:
{
  401338:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
  40133a:	4b07      	ldr	r3, [pc, #28]	; (401358 <prvIdleTask+0x20>)
  40133c:	4798      	blx	r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40133e:	4b07      	ldr	r3, [pc, #28]	; (40135c <prvIdleTask+0x24>)
  401340:	681b      	ldr	r3, [r3, #0]
  401342:	2b01      	cmp	r3, #1
  401344:	d9f9      	bls.n	40133a <prvIdleTask+0x2>
				taskYIELD();
  401346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40134a:	4b05      	ldr	r3, [pc, #20]	; (401360 <prvIdleTask+0x28>)
  40134c:	601a      	str	r2, [r3, #0]
  40134e:	f3bf 8f4f 	dsb	sy
  401352:	f3bf 8f6f 	isb	sy
  401356:	e7f0      	b.n	40133a <prvIdleTask+0x2>
  401358:	004012dd 	.word	0x004012dd
  40135c:	200004a4 	.word	0x200004a4
  401360:	e000ed04 	.word	0xe000ed04

00401364 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  401364:	b570      	push	{r4, r5, r6, lr}
  401366:	4604      	mov	r4, r0
  401368:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  40136a:	4b1d      	ldr	r3, [pc, #116]	; (4013e0 <prvAddCurrentTaskToDelayedList+0x7c>)
  40136c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  40136e:	4b1d      	ldr	r3, [pc, #116]	; (4013e4 <prvAddCurrentTaskToDelayedList+0x80>)
  401370:	6818      	ldr	r0, [r3, #0]
  401372:	3004      	adds	r0, #4
  401374:	4b1c      	ldr	r3, [pc, #112]	; (4013e8 <prvAddCurrentTaskToDelayedList+0x84>)
  401376:	4798      	blx	r3
  401378:	b950      	cbnz	r0, 401390 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
  40137a:	4b1a      	ldr	r3, [pc, #104]	; (4013e4 <prvAddCurrentTaskToDelayedList+0x80>)
  40137c:	681b      	ldr	r3, [r3, #0]
  40137e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401380:	2301      	movs	r3, #1
  401382:	fa03 f202 	lsl.w	r2, r3, r2
  401386:	4919      	ldr	r1, [pc, #100]	; (4013ec <prvAddCurrentTaskToDelayedList+0x88>)
  401388:	680b      	ldr	r3, [r1, #0]
  40138a:	ea23 0302 	bic.w	r3, r3, r2
  40138e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  401390:	f1b4 3fff 	cmp.w	r4, #4294967295
  401394:	d013      	beq.n	4013be <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  401396:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  401398:	4b12      	ldr	r3, [pc, #72]	; (4013e4 <prvAddCurrentTaskToDelayedList+0x80>)
  40139a:	681b      	ldr	r3, [r3, #0]
  40139c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
  40139e:	42a5      	cmp	r5, r4
  4013a0:	d816      	bhi.n	4013d0 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  4013a2:	4b13      	ldr	r3, [pc, #76]	; (4013f0 <prvAddCurrentTaskToDelayedList+0x8c>)
  4013a4:	6818      	ldr	r0, [r3, #0]
  4013a6:	4b0f      	ldr	r3, [pc, #60]	; (4013e4 <prvAddCurrentTaskToDelayedList+0x80>)
  4013a8:	6819      	ldr	r1, [r3, #0]
  4013aa:	3104      	adds	r1, #4
  4013ac:	4b11      	ldr	r3, [pc, #68]	; (4013f4 <prvAddCurrentTaskToDelayedList+0x90>)
  4013ae:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  4013b0:	4b11      	ldr	r3, [pc, #68]	; (4013f8 <prvAddCurrentTaskToDelayedList+0x94>)
  4013b2:	681b      	ldr	r3, [r3, #0]
  4013b4:	429c      	cmp	r4, r3
  4013b6:	d201      	bcs.n	4013bc <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
  4013b8:	4b0f      	ldr	r3, [pc, #60]	; (4013f8 <prvAddCurrentTaskToDelayedList+0x94>)
  4013ba:	601c      	str	r4, [r3, #0]
  4013bc:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  4013be:	2e00      	cmp	r6, #0
  4013c0:	d0e9      	beq.n	401396 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  4013c2:	4b08      	ldr	r3, [pc, #32]	; (4013e4 <prvAddCurrentTaskToDelayedList+0x80>)
  4013c4:	6819      	ldr	r1, [r3, #0]
  4013c6:	3104      	adds	r1, #4
  4013c8:	480c      	ldr	r0, [pc, #48]	; (4013fc <prvAddCurrentTaskToDelayedList+0x98>)
  4013ca:	4b0d      	ldr	r3, [pc, #52]	; (401400 <prvAddCurrentTaskToDelayedList+0x9c>)
  4013cc:	4798      	blx	r3
  4013ce:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  4013d0:	4b0c      	ldr	r3, [pc, #48]	; (401404 <prvAddCurrentTaskToDelayedList+0xa0>)
  4013d2:	6818      	ldr	r0, [r3, #0]
  4013d4:	4b03      	ldr	r3, [pc, #12]	; (4013e4 <prvAddCurrentTaskToDelayedList+0x80>)
  4013d6:	6819      	ldr	r1, [r3, #0]
  4013d8:	3104      	adds	r1, #4
  4013da:	4b06      	ldr	r3, [pc, #24]	; (4013f4 <prvAddCurrentTaskToDelayedList+0x90>)
  4013dc:	4798      	blx	r3
  4013de:	bd70      	pop	{r4, r5, r6, pc}
  4013e0:	200005d0 	.word	0x200005d0
  4013e4:	20000498 	.word	0x20000498
  4013e8:	004001cd 	.word	0x004001cd
  4013ec:	20000558 	.word	0x20000558
  4013f0:	2000049c 	.word	0x2000049c
  4013f4:	00400199 	.word	0x00400199
  4013f8:	20000588 	.word	0x20000588
  4013fc:	200005a8 	.word	0x200005a8
  401400:	00400181 	.word	0x00400181
  401404:	200004a0 	.word	0x200004a0

00401408 <xTaskCreate>:
	{
  401408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40140c:	b085      	sub	sp, #20
  40140e:	4606      	mov	r6, r0
  401410:	460f      	mov	r7, r1
  401412:	4615      	mov	r5, r2
  401414:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
  401416:	0090      	lsls	r0, r2, #2
  401418:	4b14      	ldr	r3, [pc, #80]	; (40146c <xTaskCreate+0x64>)
  40141a:	4798      	blx	r3
			if( pxStack != NULL )
  40141c:	b300      	cbz	r0, 401460 <xTaskCreate+0x58>
  40141e:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
  401420:	2064      	movs	r0, #100	; 0x64
  401422:	4b12      	ldr	r3, [pc, #72]	; (40146c <xTaskCreate+0x64>)
  401424:	4798      	blx	r3
				if( pxNewTCB != NULL )
  401426:	4604      	mov	r4, r0
  401428:	b1b0      	cbz	r0, 401458 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
  40142a:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
  40142e:	b1cc      	cbz	r4, 401464 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
  401430:	2300      	movs	r3, #0
  401432:	9303      	str	r3, [sp, #12]
  401434:	9402      	str	r4, [sp, #8]
  401436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401438:	9301      	str	r3, [sp, #4]
  40143a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40143c:	9300      	str	r3, [sp, #0]
  40143e:	4643      	mov	r3, r8
  401440:	462a      	mov	r2, r5
  401442:	4639      	mov	r1, r7
  401444:	4630      	mov	r0, r6
  401446:	4d0a      	ldr	r5, [pc, #40]	; (401470 <xTaskCreate+0x68>)
  401448:	47a8      	blx	r5
			prvAddNewTaskToReadyList( pxNewTCB );
  40144a:	4620      	mov	r0, r4
  40144c:	4b09      	ldr	r3, [pc, #36]	; (401474 <xTaskCreate+0x6c>)
  40144e:	4798      	blx	r3
			xReturn = pdPASS;
  401450:	2001      	movs	r0, #1
	}
  401452:	b005      	add	sp, #20
  401454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
  401458:	4648      	mov	r0, r9
  40145a:	4b07      	ldr	r3, [pc, #28]	; (401478 <xTaskCreate+0x70>)
  40145c:	4798      	blx	r3
  40145e:	e7e6      	b.n	40142e <xTaskCreate+0x26>
				pxNewTCB = NULL;
  401460:	2400      	movs	r4, #0
  401462:	e7e4      	b.n	40142e <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401464:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
  401468:	e7f3      	b.n	401452 <xTaskCreate+0x4a>
  40146a:	bf00      	nop
  40146c:	004005d9 	.word	0x004005d9
  401470:	00401105 	.word	0x00401105
  401474:	00401225 	.word	0x00401225
  401478:	004006bd 	.word	0x004006bd

0040147c <vTaskResume>:
	{
  40147c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( xTaskToResume );
  40147e:	4604      	mov	r4, r0
  401480:	b168      	cbz	r0, 40149e <vTaskResume+0x22>
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
  401482:	4b1b      	ldr	r3, [pc, #108]	; (4014f0 <vTaskResume+0x74>)
  401484:	681b      	ldr	r3, [r3, #0]
  401486:	429c      	cmp	r4, r3
  401488:	d008      	beq.n	40149c <vTaskResume+0x20>
  40148a:	b13c      	cbz	r4, 40149c <vTaskResume+0x20>
			taskENTER_CRITICAL();
  40148c:	4b19      	ldr	r3, [pc, #100]	; (4014f4 <vTaskResume+0x78>)
  40148e:	4798      	blx	r3
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
  401490:	4620      	mov	r0, r4
  401492:	4b19      	ldr	r3, [pc, #100]	; (4014f8 <vTaskResume+0x7c>)
  401494:	4798      	blx	r3
  401496:	b940      	cbnz	r0, 4014aa <vTaskResume+0x2e>
			taskEXIT_CRITICAL();
  401498:	4b18      	ldr	r3, [pc, #96]	; (4014fc <vTaskResume+0x80>)
  40149a:	4798      	blx	r3
  40149c:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( xTaskToResume );
  40149e:	f44f 61e7 	mov.w	r1, #1848	; 0x738
  4014a2:	4817      	ldr	r0, [pc, #92]	; (401500 <vTaskResume+0x84>)
  4014a4:	4b17      	ldr	r3, [pc, #92]	; (401504 <vTaskResume+0x88>)
  4014a6:	4798      	blx	r3
  4014a8:	e7eb      	b.n	401482 <vTaskResume+0x6>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
  4014aa:	1d25      	adds	r5, r4, #4
  4014ac:	4628      	mov	r0, r5
  4014ae:	4b16      	ldr	r3, [pc, #88]	; (401508 <vTaskResume+0x8c>)
  4014b0:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
  4014b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4014b4:	2201      	movs	r2, #1
  4014b6:	409a      	lsls	r2, r3
  4014b8:	4914      	ldr	r1, [pc, #80]	; (40150c <vTaskResume+0x90>)
  4014ba:	6808      	ldr	r0, [r1, #0]
  4014bc:	4302      	orrs	r2, r0
  4014be:	600a      	str	r2, [r1, #0]
  4014c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4014c4:	009a      	lsls	r2, r3, #2
  4014c6:	4629      	mov	r1, r5
  4014c8:	4811      	ldr	r0, [pc, #68]	; (401510 <vTaskResume+0x94>)
  4014ca:	4410      	add	r0, r2
  4014cc:	4b11      	ldr	r3, [pc, #68]	; (401514 <vTaskResume+0x98>)
  4014ce:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4014d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4014d2:	4b07      	ldr	r3, [pc, #28]	; (4014f0 <vTaskResume+0x74>)
  4014d4:	681b      	ldr	r3, [r3, #0]
  4014d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4014d8:	429a      	cmp	r2, r3
  4014da:	d3dd      	bcc.n	401498 <vTaskResume+0x1c>
						taskYIELD_IF_USING_PREEMPTION();
  4014dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4014e0:	4b0d      	ldr	r3, [pc, #52]	; (401518 <vTaskResume+0x9c>)
  4014e2:	601a      	str	r2, [r3, #0]
  4014e4:	f3bf 8f4f 	dsb	sy
  4014e8:	f3bf 8f6f 	isb	sy
  4014ec:	e7d4      	b.n	401498 <vTaskResume+0x1c>
  4014ee:	bf00      	nop
  4014f0:	20000498 	.word	0x20000498
  4014f4:	004002c5 	.word	0x004002c5
  4014f8:	004010c1 	.word	0x004010c1
  4014fc:	0040030d 	.word	0x0040030d
  401500:	004030e8 	.word	0x004030e8
  401504:	00402ce1 	.word	0x00402ce1
  401508:	004001cd 	.word	0x004001cd
  40150c:	20000558 	.word	0x20000558
  401510:	200004a4 	.word	0x200004a4
  401514:	00400181 	.word	0x00400181
  401518:	e000ed04 	.word	0xe000ed04

0040151c <vTaskStartScheduler>:
{
  40151c:	b510      	push	{r4, lr}
  40151e:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
  401520:	4b17      	ldr	r3, [pc, #92]	; (401580 <vTaskStartScheduler+0x64>)
  401522:	9301      	str	r3, [sp, #4]
  401524:	2300      	movs	r3, #0
  401526:	9300      	str	r3, [sp, #0]
  401528:	2282      	movs	r2, #130	; 0x82
  40152a:	4916      	ldr	r1, [pc, #88]	; (401584 <vTaskStartScheduler+0x68>)
  40152c:	4816      	ldr	r0, [pc, #88]	; (401588 <vTaskStartScheduler+0x6c>)
  40152e:	4c17      	ldr	r4, [pc, #92]	; (40158c <vTaskStartScheduler+0x70>)
  401530:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401532:	2801      	cmp	r0, #1
  401534:	d006      	beq.n	401544 <vTaskStartScheduler+0x28>
	if( xReturn == pdPASS )
  401536:	2801      	cmp	r0, #1
  401538:	d007      	beq.n	40154a <vTaskStartScheduler+0x2e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  40153a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40153e:	d019      	beq.n	401574 <vTaskStartScheduler+0x58>
}
  401540:	b002      	add	sp, #8
  401542:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  401544:	4b12      	ldr	r3, [pc, #72]	; (401590 <vTaskStartScheduler+0x74>)
  401546:	4798      	blx	r3
  401548:	e7f5      	b.n	401536 <vTaskStartScheduler+0x1a>
	__asm volatile
  40154a:	f04f 0350 	mov.w	r3, #80	; 0x50
  40154e:	f383 8811 	msr	BASEPRI, r3
  401552:	f3bf 8f6f 	isb	sy
  401556:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
  40155a:	f04f 32ff 	mov.w	r2, #4294967295
  40155e:	4b0d      	ldr	r3, [pc, #52]	; (401594 <vTaskStartScheduler+0x78>)
  401560:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401562:	2201      	movs	r2, #1
  401564:	4b0c      	ldr	r3, [pc, #48]	; (401598 <vTaskStartScheduler+0x7c>)
  401566:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
  401568:	2200      	movs	r2, #0
  40156a:	4b0c      	ldr	r3, [pc, #48]	; (40159c <vTaskStartScheduler+0x80>)
  40156c:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40156e:	4b0c      	ldr	r3, [pc, #48]	; (4015a0 <vTaskStartScheduler+0x84>)
  401570:	4798      	blx	r3
  401572:	e7e5      	b.n	401540 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  401574:	f44f 6102 	mov.w	r1, #2080	; 0x820
  401578:	480a      	ldr	r0, [pc, #40]	; (4015a4 <vTaskStartScheduler+0x88>)
  40157a:	4b0b      	ldr	r3, [pc, #44]	; (4015a8 <vTaskStartScheduler+0x8c>)
  40157c:	4798      	blx	r3
}
  40157e:	e7df      	b.n	401540 <vTaskStartScheduler+0x24>
  401580:	20000584 	.word	0x20000584
  401584:	00403100 	.word	0x00403100
  401588:	00401339 	.word	0x00401339
  40158c:	00401409 	.word	0x00401409
  401590:	00401db1 	.word	0x00401db1
  401594:	20000588 	.word	0x20000588
  401598:	200005a4 	.word	0x200005a4
  40159c:	200005d0 	.word	0x200005d0
  4015a0:	0040040d 	.word	0x0040040d
  4015a4:	004030e8 	.word	0x004030e8
  4015a8:	00402ce1 	.word	0x00402ce1

004015ac <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4015ac:	4a02      	ldr	r2, [pc, #8]	; (4015b8 <vTaskSuspendAll+0xc>)
  4015ae:	6813      	ldr	r3, [r2, #0]
  4015b0:	3301      	adds	r3, #1
  4015b2:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
  4015b4:	4770      	bx	lr
  4015b6:	bf00      	nop
  4015b8:	20000550 	.word	0x20000550

004015bc <xTaskGetTickCount>:
		xTicks = xTickCount;
  4015bc:	4b01      	ldr	r3, [pc, #4]	; (4015c4 <xTaskGetTickCount+0x8>)
  4015be:	6818      	ldr	r0, [r3, #0]
}
  4015c0:	4770      	bx	lr
  4015c2:	bf00      	nop
  4015c4:	200005d0 	.word	0x200005d0

004015c8 <xTaskIncrementTick>:
{
  4015c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4015ca:	4b38      	ldr	r3, [pc, #224]	; (4016ac <xTaskIncrementTick+0xe4>)
  4015cc:	681b      	ldr	r3, [r3, #0]
  4015ce:	2b00      	cmp	r3, #0
  4015d0:	d161      	bne.n	401696 <xTaskIncrementTick+0xce>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  4015d2:	4b37      	ldr	r3, [pc, #220]	; (4016b0 <xTaskIncrementTick+0xe8>)
  4015d4:	681e      	ldr	r6, [r3, #0]
  4015d6:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
  4015d8:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  4015da:	b97e      	cbnz	r6, 4015fc <xTaskIncrementTick+0x34>
			taskSWITCH_DELAYED_LISTS();
  4015dc:	4b35      	ldr	r3, [pc, #212]	; (4016b4 <xTaskIncrementTick+0xec>)
  4015de:	681b      	ldr	r3, [r3, #0]
  4015e0:	681b      	ldr	r3, [r3, #0]
  4015e2:	b9e3      	cbnz	r3, 40161e <xTaskIncrementTick+0x56>
  4015e4:	4a33      	ldr	r2, [pc, #204]	; (4016b4 <xTaskIncrementTick+0xec>)
  4015e6:	6811      	ldr	r1, [r2, #0]
  4015e8:	4b33      	ldr	r3, [pc, #204]	; (4016b8 <xTaskIncrementTick+0xf0>)
  4015ea:	6818      	ldr	r0, [r3, #0]
  4015ec:	6010      	str	r0, [r2, #0]
  4015ee:	6019      	str	r1, [r3, #0]
  4015f0:	4a32      	ldr	r2, [pc, #200]	; (4016bc <xTaskIncrementTick+0xf4>)
  4015f2:	6813      	ldr	r3, [r2, #0]
  4015f4:	3301      	adds	r3, #1
  4015f6:	6013      	str	r3, [r2, #0]
  4015f8:	4b31      	ldr	r3, [pc, #196]	; (4016c0 <xTaskIncrementTick+0xf8>)
  4015fa:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
  4015fc:	4b31      	ldr	r3, [pc, #196]	; (4016c4 <xTaskIncrementTick+0xfc>)
  4015fe:	681b      	ldr	r3, [r3, #0]
  401600:	429e      	cmp	r6, r3
  401602:	d23e      	bcs.n	401682 <xTaskIncrementTick+0xba>
BaseType_t xSwitchRequired = pdFALSE;
  401604:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401606:	4b30      	ldr	r3, [pc, #192]	; (4016c8 <xTaskIncrementTick+0x100>)
  401608:	681b      	ldr	r3, [r3, #0]
  40160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40160c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401610:	009a      	lsls	r2, r3, #2
  401612:	4b2e      	ldr	r3, [pc, #184]	; (4016cc <xTaskIncrementTick+0x104>)
  401614:	589b      	ldr	r3, [r3, r2]
  401616:	2b01      	cmp	r3, #1
  401618:	d942      	bls.n	4016a0 <xTaskIncrementTick+0xd8>
				xSwitchRequired = pdTRUE;
  40161a:	2701      	movs	r7, #1
  40161c:	e040      	b.n	4016a0 <xTaskIncrementTick+0xd8>
			taskSWITCH_DELAYED_LISTS();
  40161e:	f640 217f 	movw	r1, #2687	; 0xa7f
  401622:	482b      	ldr	r0, [pc, #172]	; (4016d0 <xTaskIncrementTick+0x108>)
  401624:	4b2b      	ldr	r3, [pc, #172]	; (4016d4 <xTaskIncrementTick+0x10c>)
  401626:	4798      	blx	r3
  401628:	e7dc      	b.n	4015e4 <xTaskIncrementTick+0x1c>
							xSwitchRequired = pdTRUE;
  40162a:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40162c:	4b21      	ldr	r3, [pc, #132]	; (4016b4 <xTaskIncrementTick+0xec>)
  40162e:	681b      	ldr	r3, [r3, #0]
  401630:	681b      	ldr	r3, [r3, #0]
  401632:	b343      	cbz	r3, 401686 <xTaskIncrementTick+0xbe>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401634:	4b1f      	ldr	r3, [pc, #124]	; (4016b4 <xTaskIncrementTick+0xec>)
  401636:	681b      	ldr	r3, [r3, #0]
  401638:	68db      	ldr	r3, [r3, #12]
  40163a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  40163c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
  40163e:	429e      	cmp	r6, r3
  401640:	d326      	bcc.n	401690 <xTaskIncrementTick+0xc8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401642:	1d25      	adds	r5, r4, #4
  401644:	4628      	mov	r0, r5
  401646:	4b24      	ldr	r3, [pc, #144]	; (4016d8 <xTaskIncrementTick+0x110>)
  401648:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40164a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  40164c:	b11b      	cbz	r3, 401656 <xTaskIncrementTick+0x8e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40164e:	f104 0018 	add.w	r0, r4, #24
  401652:	4b21      	ldr	r3, [pc, #132]	; (4016d8 <xTaskIncrementTick+0x110>)
  401654:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
  401656:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401658:	2201      	movs	r2, #1
  40165a:	409a      	lsls	r2, r3
  40165c:	491f      	ldr	r1, [pc, #124]	; (4016dc <xTaskIncrementTick+0x114>)
  40165e:	6808      	ldr	r0, [r1, #0]
  401660:	4302      	orrs	r2, r0
  401662:	600a      	str	r2, [r1, #0]
  401664:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401668:	009a      	lsls	r2, r3, #2
  40166a:	4629      	mov	r1, r5
  40166c:	4817      	ldr	r0, [pc, #92]	; (4016cc <xTaskIncrementTick+0x104>)
  40166e:	4410      	add	r0, r2
  401670:	4b1b      	ldr	r3, [pc, #108]	; (4016e0 <xTaskIncrementTick+0x118>)
  401672:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401674:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401676:	4b14      	ldr	r3, [pc, #80]	; (4016c8 <xTaskIncrementTick+0x100>)
  401678:	681b      	ldr	r3, [r3, #0]
  40167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40167c:	429a      	cmp	r2, r3
  40167e:	d2d4      	bcs.n	40162a <xTaskIncrementTick+0x62>
  401680:	e7d4      	b.n	40162c <xTaskIncrementTick+0x64>
  401682:	2700      	movs	r7, #0
  401684:	e7d2      	b.n	40162c <xTaskIncrementTick+0x64>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401686:	f04f 32ff 	mov.w	r2, #4294967295
  40168a:	4b0e      	ldr	r3, [pc, #56]	; (4016c4 <xTaskIncrementTick+0xfc>)
  40168c:	601a      	str	r2, [r3, #0]
					break;
  40168e:	e7ba      	b.n	401606 <xTaskIncrementTick+0x3e>
						xNextTaskUnblockTime = xItemValue;
  401690:	4a0c      	ldr	r2, [pc, #48]	; (4016c4 <xTaskIncrementTick+0xfc>)
  401692:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
  401694:	e7b7      	b.n	401606 <xTaskIncrementTick+0x3e>
		++uxPendedTicks;
  401696:	4a13      	ldr	r2, [pc, #76]	; (4016e4 <xTaskIncrementTick+0x11c>)
  401698:	6813      	ldr	r3, [r2, #0]
  40169a:	3301      	adds	r3, #1
  40169c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
  40169e:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
  4016a0:	4b11      	ldr	r3, [pc, #68]	; (4016e8 <xTaskIncrementTick+0x120>)
  4016a2:	681b      	ldr	r3, [r3, #0]
  4016a4:	b103      	cbz	r3, 4016a8 <xTaskIncrementTick+0xe0>
			xSwitchRequired = pdTRUE;
  4016a6:	2701      	movs	r7, #1
}
  4016a8:	4638      	mov	r0, r7
  4016aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4016ac:	20000550 	.word	0x20000550
  4016b0:	200005d0 	.word	0x200005d0
  4016b4:	2000049c 	.word	0x2000049c
  4016b8:	200004a0 	.word	0x200004a0
  4016bc:	2000058c 	.word	0x2000058c
  4016c0:	00401081 	.word	0x00401081
  4016c4:	20000588 	.word	0x20000588
  4016c8:	20000498 	.word	0x20000498
  4016cc:	200004a4 	.word	0x200004a4
  4016d0:	004030e8 	.word	0x004030e8
  4016d4:	00402ce1 	.word	0x00402ce1
  4016d8:	004001cd 	.word	0x004001cd
  4016dc:	20000558 	.word	0x20000558
  4016e0:	00400181 	.word	0x00400181
  4016e4:	2000054c 	.word	0x2000054c
  4016e8:	200005d4 	.word	0x200005d4

004016ec <xTaskResumeAll>:
{
  4016ec:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended );
  4016ee:	4b34      	ldr	r3, [pc, #208]	; (4017c0 <xTaskResumeAll+0xd4>)
  4016f0:	681b      	ldr	r3, [r3, #0]
  4016f2:	2b00      	cmp	r3, #0
  4016f4:	d034      	beq.n	401760 <xTaskResumeAll+0x74>
	taskENTER_CRITICAL();
  4016f6:	4b33      	ldr	r3, [pc, #204]	; (4017c4 <xTaskResumeAll+0xd8>)
  4016f8:	4798      	blx	r3
		--uxSchedulerSuspended;
  4016fa:	4b31      	ldr	r3, [pc, #196]	; (4017c0 <xTaskResumeAll+0xd4>)
  4016fc:	681a      	ldr	r2, [r3, #0]
  4016fe:	3a01      	subs	r2, #1
  401700:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401702:	681b      	ldr	r3, [r3, #0]
  401704:	2b00      	cmp	r3, #0
  401706:	d154      	bne.n	4017b2 <xTaskResumeAll+0xc6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401708:	4b2f      	ldr	r3, [pc, #188]	; (4017c8 <xTaskResumeAll+0xdc>)
  40170a:	681b      	ldr	r3, [r3, #0]
  40170c:	2b00      	cmp	r3, #0
  40170e:	d02d      	beq.n	40176c <xTaskResumeAll+0x80>
  401710:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401712:	4b2e      	ldr	r3, [pc, #184]	; (4017cc <xTaskResumeAll+0xe0>)
  401714:	681b      	ldr	r3, [r3, #0]
  401716:	2b00      	cmp	r3, #0
  401718:	d02a      	beq.n	401770 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  40171a:	4b2c      	ldr	r3, [pc, #176]	; (4017cc <xTaskResumeAll+0xe0>)
  40171c:	68db      	ldr	r3, [r3, #12]
  40171e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401720:	f104 0018 	add.w	r0, r4, #24
  401724:	4e2a      	ldr	r6, [pc, #168]	; (4017d0 <xTaskResumeAll+0xe4>)
  401726:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401728:	1d25      	adds	r5, r4, #4
  40172a:	4628      	mov	r0, r5
  40172c:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  40172e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401730:	2201      	movs	r2, #1
  401732:	409a      	lsls	r2, r3
  401734:	4927      	ldr	r1, [pc, #156]	; (4017d4 <xTaskResumeAll+0xe8>)
  401736:	6808      	ldr	r0, [r1, #0]
  401738:	4302      	orrs	r2, r0
  40173a:	600a      	str	r2, [r1, #0]
  40173c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401740:	009a      	lsls	r2, r3, #2
  401742:	4629      	mov	r1, r5
  401744:	4824      	ldr	r0, [pc, #144]	; (4017d8 <xTaskResumeAll+0xec>)
  401746:	4410      	add	r0, r2
  401748:	4b24      	ldr	r3, [pc, #144]	; (4017dc <xTaskResumeAll+0xf0>)
  40174a:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40174c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40174e:	4b24      	ldr	r3, [pc, #144]	; (4017e0 <xTaskResumeAll+0xf4>)
  401750:	681b      	ldr	r3, [r3, #0]
  401752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401754:	429a      	cmp	r2, r3
  401756:	d3dc      	bcc.n	401712 <xTaskResumeAll+0x26>
						xYieldPending = pdTRUE;
  401758:	2201      	movs	r2, #1
  40175a:	4b22      	ldr	r3, [pc, #136]	; (4017e4 <xTaskResumeAll+0xf8>)
  40175c:	601a      	str	r2, [r3, #0]
  40175e:	e7d8      	b.n	401712 <xTaskResumeAll+0x26>
	configASSERT( uxSchedulerSuspended );
  401760:	f640 0185 	movw	r1, #2181	; 0x885
  401764:	4820      	ldr	r0, [pc, #128]	; (4017e8 <xTaskResumeAll+0xfc>)
  401766:	4b21      	ldr	r3, [pc, #132]	; (4017ec <xTaskResumeAll+0x100>)
  401768:	4798      	blx	r3
  40176a:	e7c4      	b.n	4016f6 <xTaskResumeAll+0xa>
BaseType_t xAlreadyYielded = pdFALSE;
  40176c:	2400      	movs	r4, #0
  40176e:	e021      	b.n	4017b4 <xTaskResumeAll+0xc8>
				if( pxTCB != NULL )
  401770:	b10c      	cbz	r4, 401776 <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
  401772:	4b1f      	ldr	r3, [pc, #124]	; (4017f0 <xTaskResumeAll+0x104>)
  401774:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  401776:	4b1f      	ldr	r3, [pc, #124]	; (4017f4 <xTaskResumeAll+0x108>)
  401778:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  40177a:	b974      	cbnz	r4, 40179a <xTaskResumeAll+0xae>
				if( xYieldPending != pdFALSE )
  40177c:	4b19      	ldr	r3, [pc, #100]	; (4017e4 <xTaskResumeAll+0xf8>)
  40177e:	681b      	ldr	r3, [r3, #0]
  401780:	b1e3      	cbz	r3, 4017bc <xTaskResumeAll+0xd0>
					taskYIELD_IF_USING_PREEMPTION();
  401782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401786:	4b1c      	ldr	r3, [pc, #112]	; (4017f8 <xTaskResumeAll+0x10c>)
  401788:	601a      	str	r2, [r3, #0]
  40178a:	f3bf 8f4f 	dsb	sy
  40178e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  401792:	2401      	movs	r4, #1
  401794:	e00e      	b.n	4017b4 <xTaskResumeAll+0xc8>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  401796:	3c01      	subs	r4, #1
  401798:	d007      	beq.n	4017aa <xTaskResumeAll+0xbe>
							if( xTaskIncrementTick() != pdFALSE )
  40179a:	4b18      	ldr	r3, [pc, #96]	; (4017fc <xTaskResumeAll+0x110>)
  40179c:	4798      	blx	r3
  40179e:	2800      	cmp	r0, #0
  4017a0:	d0f9      	beq.n	401796 <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
  4017a2:	2201      	movs	r2, #1
  4017a4:	4b0f      	ldr	r3, [pc, #60]	; (4017e4 <xTaskResumeAll+0xf8>)
  4017a6:	601a      	str	r2, [r3, #0]
  4017a8:	e7f5      	b.n	401796 <xTaskResumeAll+0xaa>
						uxPendedTicks = 0;
  4017aa:	2200      	movs	r2, #0
  4017ac:	4b11      	ldr	r3, [pc, #68]	; (4017f4 <xTaskResumeAll+0x108>)
  4017ae:	601a      	str	r2, [r3, #0]
  4017b0:	e7e4      	b.n	40177c <xTaskResumeAll+0x90>
BaseType_t xAlreadyYielded = pdFALSE;
  4017b2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4017b4:	4b12      	ldr	r3, [pc, #72]	; (401800 <xTaskResumeAll+0x114>)
  4017b6:	4798      	blx	r3
}
  4017b8:	4620      	mov	r0, r4
  4017ba:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xAlreadyYielded = pdFALSE;
  4017bc:	2400      	movs	r4, #0
  4017be:	e7f9      	b.n	4017b4 <xTaskResumeAll+0xc8>
  4017c0:	20000550 	.word	0x20000550
  4017c4:	004002c5 	.word	0x004002c5
  4017c8:	20000544 	.word	0x20000544
  4017cc:	20000590 	.word	0x20000590
  4017d0:	004001cd 	.word	0x004001cd
  4017d4:	20000558 	.word	0x20000558
  4017d8:	200004a4 	.word	0x200004a4
  4017dc:	00400181 	.word	0x00400181
  4017e0:	20000498 	.word	0x20000498
  4017e4:	200005d4 	.word	0x200005d4
  4017e8:	004030e8 	.word	0x004030e8
  4017ec:	00402ce1 	.word	0x00402ce1
  4017f0:	00401081 	.word	0x00401081
  4017f4:	2000054c 	.word	0x2000054c
  4017f8:	e000ed04 	.word	0xe000ed04
  4017fc:	004015c9 	.word	0x004015c9
  401800:	0040030d 	.word	0x0040030d

00401804 <vTaskDelay>:
	{
  401804:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  401806:	b1d8      	cbz	r0, 401840 <vTaskDelay+0x3c>
  401808:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  40180a:	4b0e      	ldr	r3, [pc, #56]	; (401844 <vTaskDelay+0x40>)
  40180c:	681b      	ldr	r3, [r3, #0]
  40180e:	b98b      	cbnz	r3, 401834 <vTaskDelay+0x30>
			vTaskSuspendAll();
  401810:	4b0d      	ldr	r3, [pc, #52]	; (401848 <vTaskDelay+0x44>)
  401812:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  401814:	2100      	movs	r1, #0
  401816:	4620      	mov	r0, r4
  401818:	4b0c      	ldr	r3, [pc, #48]	; (40184c <vTaskDelay+0x48>)
  40181a:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  40181c:	4b0c      	ldr	r3, [pc, #48]	; (401850 <vTaskDelay+0x4c>)
  40181e:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  401820:	b938      	cbnz	r0, 401832 <vTaskDelay+0x2e>
			portYIELD_WITHIN_API();
  401822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401826:	4b0b      	ldr	r3, [pc, #44]	; (401854 <vTaskDelay+0x50>)
  401828:	601a      	str	r2, [r3, #0]
  40182a:	f3bf 8f4f 	dsb	sy
  40182e:	f3bf 8f6f 	isb	sy
  401832:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
  401834:	f240 513c 	movw	r1, #1340	; 0x53c
  401838:	4807      	ldr	r0, [pc, #28]	; (401858 <vTaskDelay+0x54>)
  40183a:	4b08      	ldr	r3, [pc, #32]	; (40185c <vTaskDelay+0x58>)
  40183c:	4798      	blx	r3
  40183e:	e7e7      	b.n	401810 <vTaskDelay+0xc>
	BaseType_t xAlreadyYielded = pdFALSE;
  401840:	2000      	movs	r0, #0
  401842:	e7ed      	b.n	401820 <vTaskDelay+0x1c>
  401844:	20000550 	.word	0x20000550
  401848:	004015ad 	.word	0x004015ad
  40184c:	00401365 	.word	0x00401365
  401850:	004016ed 	.word	0x004016ed
  401854:	e000ed04 	.word	0xe000ed04
  401858:	004030e8 	.word	0x004030e8
  40185c:	00402ce1 	.word	0x00402ce1

00401860 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401860:	4b2c      	ldr	r3, [pc, #176]	; (401914 <vTaskSwitchContext+0xb4>)
  401862:	681b      	ldr	r3, [r3, #0]
  401864:	2b00      	cmp	r3, #0
  401866:	d135      	bne.n	4018d4 <vTaskSwitchContext+0x74>
{
  401868:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40186a:	2200      	movs	r2, #0
  40186c:	4b2a      	ldr	r3, [pc, #168]	; (401918 <vTaskSwitchContext+0xb8>)
  40186e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  401870:	4b2a      	ldr	r3, [pc, #168]	; (40191c <vTaskSwitchContext+0xbc>)
  401872:	681b      	ldr	r3, [r3, #0]
  401874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401876:	681a      	ldr	r2, [r3, #0]
  401878:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40187c:	d02e      	beq.n	4018dc <vTaskSwitchContext+0x7c>
  40187e:	4b27      	ldr	r3, [pc, #156]	; (40191c <vTaskSwitchContext+0xbc>)
  401880:	6818      	ldr	r0, [r3, #0]
  401882:	6819      	ldr	r1, [r3, #0]
  401884:	3134      	adds	r1, #52	; 0x34
  401886:	4b26      	ldr	r3, [pc, #152]	; (401920 <vTaskSwitchContext+0xc0>)
  401888:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  40188a:	4b26      	ldr	r3, [pc, #152]	; (401924 <vTaskSwitchContext+0xc4>)
  40188c:	681c      	ldr	r4, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  40188e:	fab4 f484 	clz	r4, r4
  401892:	b2e4      	uxtb	r4, r4
  401894:	f1c4 041f 	rsb	r4, r4, #31
  401898:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  40189c:	0093      	lsls	r3, r2, #2
  40189e:	4a22      	ldr	r2, [pc, #136]	; (401928 <vTaskSwitchContext+0xc8>)
  4018a0:	58d3      	ldr	r3, [r2, r3]
  4018a2:	b343      	cbz	r3, 4018f6 <vTaskSwitchContext+0x96>
  4018a4:	4920      	ldr	r1, [pc, #128]	; (401928 <vTaskSwitchContext+0xc8>)
  4018a6:	00a3      	lsls	r3, r4, #2
  4018a8:	1918      	adds	r0, r3, r4
  4018aa:	0082      	lsls	r2, r0, #2
  4018ac:	440a      	add	r2, r1
  4018ae:	6850      	ldr	r0, [r2, #4]
  4018b0:	6840      	ldr	r0, [r0, #4]
  4018b2:	6050      	str	r0, [r2, #4]
  4018b4:	4423      	add	r3, r4
  4018b6:	009a      	lsls	r2, r3, #2
  4018b8:	3208      	adds	r2, #8
  4018ba:	4411      	add	r1, r2
  4018bc:	4288      	cmp	r0, r1
  4018be:	d020      	beq.n	401902 <vTaskSwitchContext+0xa2>
  4018c0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4018c4:	00a2      	lsls	r2, r4, #2
  4018c6:	4b18      	ldr	r3, [pc, #96]	; (401928 <vTaskSwitchContext+0xc8>)
  4018c8:	4413      	add	r3, r2
  4018ca:	685b      	ldr	r3, [r3, #4]
  4018cc:	68da      	ldr	r2, [r3, #12]
  4018ce:	4b13      	ldr	r3, [pc, #76]	; (40191c <vTaskSwitchContext+0xbc>)
  4018d0:	601a      	str	r2, [r3, #0]
  4018d2:	bd10      	pop	{r4, pc}
		xYieldPending = pdTRUE;
  4018d4:	2201      	movs	r2, #1
  4018d6:	4b10      	ldr	r3, [pc, #64]	; (401918 <vTaskSwitchContext+0xb8>)
  4018d8:	601a      	str	r2, [r3, #0]
  4018da:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4018dc:	685a      	ldr	r2, [r3, #4]
  4018de:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4018e2:	d1cc      	bne.n	40187e <vTaskSwitchContext+0x1e>
  4018e4:	689a      	ldr	r2, [r3, #8]
  4018e6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4018ea:	d1c8      	bne.n	40187e <vTaskSwitchContext+0x1e>
  4018ec:	68db      	ldr	r3, [r3, #12]
  4018ee:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4018f2:	d1c4      	bne.n	40187e <vTaskSwitchContext+0x1e>
  4018f4:	e7c9      	b.n	40188a <vTaskSwitchContext+0x2a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4018f6:	f640 31b7 	movw	r1, #2999	; 0xbb7
  4018fa:	480c      	ldr	r0, [pc, #48]	; (40192c <vTaskSwitchContext+0xcc>)
  4018fc:	4b0c      	ldr	r3, [pc, #48]	; (401930 <vTaskSwitchContext+0xd0>)
  4018fe:	4798      	blx	r3
  401900:	e7d0      	b.n	4018a4 <vTaskSwitchContext+0x44>
  401902:	6841      	ldr	r1, [r0, #4]
  401904:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  401908:	009a      	lsls	r2, r3, #2
  40190a:	4b07      	ldr	r3, [pc, #28]	; (401928 <vTaskSwitchContext+0xc8>)
  40190c:	4413      	add	r3, r2
  40190e:	6059      	str	r1, [r3, #4]
  401910:	e7d6      	b.n	4018c0 <vTaskSwitchContext+0x60>
  401912:	bf00      	nop
  401914:	20000550 	.word	0x20000550
  401918:	200005d4 	.word	0x200005d4
  40191c:	20000498 	.word	0x20000498
  401920:	00402d21 	.word	0x00402d21
  401924:	20000558 	.word	0x20000558
  401928:	200004a4 	.word	0x200004a4
  40192c:	004030e8 	.word	0x004030e8
  401930:	00402ce1 	.word	0x00402ce1

00401934 <vTaskSuspend>:
	{
  401934:	b538      	push	{r3, r4, r5, lr}
  401936:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
  401938:	4b2f      	ldr	r3, [pc, #188]	; (4019f8 <vTaskSuspend+0xc4>)
  40193a:	4798      	blx	r3
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
  40193c:	2c00      	cmp	r4, #0
  40193e:	d02b      	beq.n	401998 <vTaskSuspend+0x64>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401940:	1d25      	adds	r5, r4, #4
  401942:	4628      	mov	r0, r5
  401944:	4b2d      	ldr	r3, [pc, #180]	; (4019fc <vTaskSuspend+0xc8>)
  401946:	4798      	blx	r3
  401948:	b968      	cbnz	r0, 401966 <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40194a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40194c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401950:	008a      	lsls	r2, r1, #2
  401952:	492b      	ldr	r1, [pc, #172]	; (401a00 <vTaskSuspend+0xcc>)
  401954:	588a      	ldr	r2, [r1, r2]
  401956:	b932      	cbnz	r2, 401966 <vTaskSuspend+0x32>
  401958:	2201      	movs	r2, #1
  40195a:	409a      	lsls	r2, r3
  40195c:	4929      	ldr	r1, [pc, #164]	; (401a04 <vTaskSuspend+0xd0>)
  40195e:	680b      	ldr	r3, [r1, #0]
  401960:	ea23 0302 	bic.w	r3, r3, r2
  401964:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401966:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  401968:	b11b      	cbz	r3, 401972 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40196a:	f104 0018 	add.w	r0, r4, #24
  40196e:	4b23      	ldr	r3, [pc, #140]	; (4019fc <vTaskSuspend+0xc8>)
  401970:	4798      	blx	r3
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
  401972:	4629      	mov	r1, r5
  401974:	4824      	ldr	r0, [pc, #144]	; (401a08 <vTaskSuspend+0xd4>)
  401976:	4b25      	ldr	r3, [pc, #148]	; (401a0c <vTaskSuspend+0xd8>)
  401978:	4798      	blx	r3
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
  40197a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
  40197e:	b2db      	uxtb	r3, r3
  401980:	2b01      	cmp	r3, #1
  401982:	d00c      	beq.n	40199e <vTaskSuspend+0x6a>
		taskEXIT_CRITICAL();
  401984:	4b22      	ldr	r3, [pc, #136]	; (401a10 <vTaskSuspend+0xdc>)
  401986:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401988:	4b22      	ldr	r3, [pc, #136]	; (401a14 <vTaskSuspend+0xe0>)
  40198a:	681b      	ldr	r3, [r3, #0]
  40198c:	b95b      	cbnz	r3, 4019a6 <vTaskSuspend+0x72>
		if( pxTCB == pxCurrentTCB )
  40198e:	4b22      	ldr	r3, [pc, #136]	; (401a18 <vTaskSuspend+0xe4>)
  401990:	681b      	ldr	r3, [r3, #0]
  401992:	429c      	cmp	r4, r3
  401994:	d00e      	beq.n	4019b4 <vTaskSuspend+0x80>
  401996:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
  401998:	4b1f      	ldr	r3, [pc, #124]	; (401a18 <vTaskSuspend+0xe4>)
  40199a:	681c      	ldr	r4, [r3, #0]
  40199c:	e7d0      	b.n	401940 <vTaskSuspend+0xc>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  40199e:	2300      	movs	r3, #0
  4019a0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  4019a4:	e7ee      	b.n	401984 <vTaskSuspend+0x50>
			taskENTER_CRITICAL();
  4019a6:	4b14      	ldr	r3, [pc, #80]	; (4019f8 <vTaskSuspend+0xc4>)
  4019a8:	4798      	blx	r3
				prvResetNextTaskUnblockTime();
  4019aa:	4b1c      	ldr	r3, [pc, #112]	; (401a1c <vTaskSuspend+0xe8>)
  4019ac:	4798      	blx	r3
			taskEXIT_CRITICAL();
  4019ae:	4b18      	ldr	r3, [pc, #96]	; (401a10 <vTaskSuspend+0xdc>)
  4019b0:	4798      	blx	r3
  4019b2:	e7ec      	b.n	40198e <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
  4019b4:	4b17      	ldr	r3, [pc, #92]	; (401a14 <vTaskSuspend+0xe0>)
  4019b6:	681b      	ldr	r3, [r3, #0]
  4019b8:	b18b      	cbz	r3, 4019de <vTaskSuspend+0xaa>
				configASSERT( uxSchedulerSuspended == 0 );
  4019ba:	4b19      	ldr	r3, [pc, #100]	; (401a20 <vTaskSuspend+0xec>)
  4019bc:	681b      	ldr	r3, [r3, #0]
  4019be:	b943      	cbnz	r3, 4019d2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
  4019c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019c4:	4b17      	ldr	r3, [pc, #92]	; (401a24 <vTaskSuspend+0xf0>)
  4019c6:	601a      	str	r2, [r3, #0]
  4019c8:	f3bf 8f4f 	dsb	sy
  4019cc:	f3bf 8f6f 	isb	sy
  4019d0:	bd38      	pop	{r3, r4, r5, pc}
				configASSERT( uxSchedulerSuspended == 0 );
  4019d2:	f240 61e4 	movw	r1, #1764	; 0x6e4
  4019d6:	4814      	ldr	r0, [pc, #80]	; (401a28 <vTaskSuspend+0xf4>)
  4019d8:	4b14      	ldr	r3, [pc, #80]	; (401a2c <vTaskSuspend+0xf8>)
  4019da:	4798      	blx	r3
  4019dc:	e7f0      	b.n	4019c0 <vTaskSuspend+0x8c>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
  4019de:	4b0a      	ldr	r3, [pc, #40]	; (401a08 <vTaskSuspend+0xd4>)
  4019e0:	681a      	ldr	r2, [r3, #0]
  4019e2:	4b13      	ldr	r3, [pc, #76]	; (401a30 <vTaskSuspend+0xfc>)
  4019e4:	681b      	ldr	r3, [r3, #0]
  4019e6:	429a      	cmp	r2, r3
  4019e8:	d002      	beq.n	4019f0 <vTaskSuspend+0xbc>
					vTaskSwitchContext();
  4019ea:	4b12      	ldr	r3, [pc, #72]	; (401a34 <vTaskSuspend+0x100>)
  4019ec:	4798      	blx	r3
	}
  4019ee:	e7d2      	b.n	401996 <vTaskSuspend+0x62>
					pxCurrentTCB = NULL;
  4019f0:	2200      	movs	r2, #0
  4019f2:	4b09      	ldr	r3, [pc, #36]	; (401a18 <vTaskSuspend+0xe4>)
  4019f4:	601a      	str	r2, [r3, #0]
  4019f6:	bd38      	pop	{r3, r4, r5, pc}
  4019f8:	004002c5 	.word	0x004002c5
  4019fc:	004001cd 	.word	0x004001cd
  401a00:	200004a4 	.word	0x200004a4
  401a04:	20000558 	.word	0x20000558
  401a08:	200005a8 	.word	0x200005a8
  401a0c:	00400181 	.word	0x00400181
  401a10:	0040030d 	.word	0x0040030d
  401a14:	200005a4 	.word	0x200005a4
  401a18:	20000498 	.word	0x20000498
  401a1c:	00401081 	.word	0x00401081
  401a20:	20000550 	.word	0x20000550
  401a24:	e000ed04 	.word	0xe000ed04
  401a28:	004030e8 	.word	0x004030e8
  401a2c:	00402ce1 	.word	0x00402ce1
  401a30:	20000544 	.word	0x20000544
  401a34:	00401861 	.word	0x00401861

00401a38 <vTaskPlaceOnEventList>:
{
  401a38:	b538      	push	{r3, r4, r5, lr}
  401a3a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
  401a3c:	4605      	mov	r5, r0
  401a3e:	b150      	cbz	r0, 401a56 <vTaskPlaceOnEventList+0x1e>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401a40:	4b08      	ldr	r3, [pc, #32]	; (401a64 <vTaskPlaceOnEventList+0x2c>)
  401a42:	6819      	ldr	r1, [r3, #0]
  401a44:	3118      	adds	r1, #24
  401a46:	4628      	mov	r0, r5
  401a48:	4b07      	ldr	r3, [pc, #28]	; (401a68 <vTaskPlaceOnEventList+0x30>)
  401a4a:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  401a4c:	2101      	movs	r1, #1
  401a4e:	4620      	mov	r0, r4
  401a50:	4b06      	ldr	r3, [pc, #24]	; (401a6c <vTaskPlaceOnEventList+0x34>)
  401a52:	4798      	blx	r3
  401a54:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxEventList );
  401a56:	f640 31ce 	movw	r1, #3022	; 0xbce
  401a5a:	4805      	ldr	r0, [pc, #20]	; (401a70 <vTaskPlaceOnEventList+0x38>)
  401a5c:	4b05      	ldr	r3, [pc, #20]	; (401a74 <vTaskPlaceOnEventList+0x3c>)
  401a5e:	4798      	blx	r3
  401a60:	e7ee      	b.n	401a40 <vTaskPlaceOnEventList+0x8>
  401a62:	bf00      	nop
  401a64:	20000498 	.word	0x20000498
  401a68:	00400199 	.word	0x00400199
  401a6c:	00401365 	.word	0x00401365
  401a70:	004030e8 	.word	0x004030e8
  401a74:	00402ce1 	.word	0x00402ce1

00401a78 <vTaskPlaceOnEventListRestricted>:
	{
  401a78:	b570      	push	{r4, r5, r6, lr}
  401a7a:	460d      	mov	r5, r1
  401a7c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
  401a7e:	4606      	mov	r6, r0
  401a80:	b168      	cbz	r0, 401a9e <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401a82:	4b0a      	ldr	r3, [pc, #40]	; (401aac <vTaskPlaceOnEventListRestricted+0x34>)
  401a84:	6819      	ldr	r1, [r3, #0]
  401a86:	3118      	adds	r1, #24
  401a88:	4630      	mov	r0, r6
  401a8a:	4b09      	ldr	r3, [pc, #36]	; (401ab0 <vTaskPlaceOnEventListRestricted+0x38>)
  401a8c:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
  401a8e:	b10c      	cbz	r4, 401a94 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
  401a90:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  401a94:	4621      	mov	r1, r4
  401a96:	4628      	mov	r0, r5
  401a98:	4b06      	ldr	r3, [pc, #24]	; (401ab4 <vTaskPlaceOnEventListRestricted+0x3c>)
  401a9a:	4798      	blx	r3
  401a9c:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
  401a9e:	f640 31f9 	movw	r1, #3065	; 0xbf9
  401aa2:	4805      	ldr	r0, [pc, #20]	; (401ab8 <vTaskPlaceOnEventListRestricted+0x40>)
  401aa4:	4b05      	ldr	r3, [pc, #20]	; (401abc <vTaskPlaceOnEventListRestricted+0x44>)
  401aa6:	4798      	blx	r3
  401aa8:	e7eb      	b.n	401a82 <vTaskPlaceOnEventListRestricted+0xa>
  401aaa:	bf00      	nop
  401aac:	20000498 	.word	0x20000498
  401ab0:	00400181 	.word	0x00400181
  401ab4:	00401365 	.word	0x00401365
  401ab8:	004030e8 	.word	0x004030e8
  401abc:	00402ce1 	.word	0x00402ce1

00401ac0 <xTaskRemoveFromEventList>:
{
  401ac0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401ac2:	68c3      	ldr	r3, [r0, #12]
  401ac4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401ac6:	b324      	cbz	r4, 401b12 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401ac8:	f104 0518 	add.w	r5, r4, #24
  401acc:	4628      	mov	r0, r5
  401ace:	4b17      	ldr	r3, [pc, #92]	; (401b2c <xTaskRemoveFromEventList+0x6c>)
  401ad0:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401ad2:	4b17      	ldr	r3, [pc, #92]	; (401b30 <xTaskRemoveFromEventList+0x70>)
  401ad4:	681b      	ldr	r3, [r3, #0]
  401ad6:	bb13      	cbnz	r3, 401b1e <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  401ad8:	1d25      	adds	r5, r4, #4
  401ada:	4628      	mov	r0, r5
  401adc:	4b13      	ldr	r3, [pc, #76]	; (401b2c <xTaskRemoveFromEventList+0x6c>)
  401ade:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401ae0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401ae2:	2201      	movs	r2, #1
  401ae4:	409a      	lsls	r2, r3
  401ae6:	4913      	ldr	r1, [pc, #76]	; (401b34 <xTaskRemoveFromEventList+0x74>)
  401ae8:	6808      	ldr	r0, [r1, #0]
  401aea:	4302      	orrs	r2, r0
  401aec:	600a      	str	r2, [r1, #0]
  401aee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401af2:	009a      	lsls	r2, r3, #2
  401af4:	4629      	mov	r1, r5
  401af6:	4810      	ldr	r0, [pc, #64]	; (401b38 <xTaskRemoveFromEventList+0x78>)
  401af8:	4410      	add	r0, r2
  401afa:	4b10      	ldr	r3, [pc, #64]	; (401b3c <xTaskRemoveFromEventList+0x7c>)
  401afc:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401afe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401b00:	4b0f      	ldr	r3, [pc, #60]	; (401b40 <xTaskRemoveFromEventList+0x80>)
  401b02:	681b      	ldr	r3, [r3, #0]
  401b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401b06:	429a      	cmp	r2, r3
  401b08:	d90e      	bls.n	401b28 <xTaskRemoveFromEventList+0x68>
		xYieldPending = pdTRUE;
  401b0a:	2001      	movs	r0, #1
  401b0c:	4b0d      	ldr	r3, [pc, #52]	; (401b44 <xTaskRemoveFromEventList+0x84>)
  401b0e:	6018      	str	r0, [r3, #0]
  401b10:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxUnblockedTCB );
  401b12:	f640 4129 	movw	r1, #3113	; 0xc29
  401b16:	480c      	ldr	r0, [pc, #48]	; (401b48 <xTaskRemoveFromEventList+0x88>)
  401b18:	4b0c      	ldr	r3, [pc, #48]	; (401b4c <xTaskRemoveFromEventList+0x8c>)
  401b1a:	4798      	blx	r3
  401b1c:	e7d4      	b.n	401ac8 <xTaskRemoveFromEventList+0x8>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401b1e:	4629      	mov	r1, r5
  401b20:	480b      	ldr	r0, [pc, #44]	; (401b50 <xTaskRemoveFromEventList+0x90>)
  401b22:	4b06      	ldr	r3, [pc, #24]	; (401b3c <xTaskRemoveFromEventList+0x7c>)
  401b24:	4798      	blx	r3
  401b26:	e7ea      	b.n	401afe <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  401b28:	2000      	movs	r0, #0
}
  401b2a:	bd38      	pop	{r3, r4, r5, pc}
  401b2c:	004001cd 	.word	0x004001cd
  401b30:	20000550 	.word	0x20000550
  401b34:	20000558 	.word	0x20000558
  401b38:	200004a4 	.word	0x200004a4
  401b3c:	00400181 	.word	0x00400181
  401b40:	20000498 	.word	0x20000498
  401b44:	200005d4 	.word	0x200005d4
  401b48:	004030e8 	.word	0x004030e8
  401b4c:	00402ce1 	.word	0x00402ce1
  401b50:	20000590 	.word	0x20000590

00401b54 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401b54:	4b03      	ldr	r3, [pc, #12]	; (401b64 <vTaskInternalSetTimeOutState+0x10>)
  401b56:	681b      	ldr	r3, [r3, #0]
  401b58:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401b5a:	4b03      	ldr	r3, [pc, #12]	; (401b68 <vTaskInternalSetTimeOutState+0x14>)
  401b5c:	681b      	ldr	r3, [r3, #0]
  401b5e:	6043      	str	r3, [r0, #4]
  401b60:	4770      	bx	lr
  401b62:	bf00      	nop
  401b64:	2000058c 	.word	0x2000058c
  401b68:	200005d0 	.word	0x200005d0

00401b6c <xTaskCheckForTimeOut>:
{
  401b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401b6e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
  401b70:	4605      	mov	r5, r0
  401b72:	b1d0      	cbz	r0, 401baa <xTaskCheckForTimeOut+0x3e>
	configASSERT( pxTicksToWait );
  401b74:	b1fc      	cbz	r4, 401bb6 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
  401b76:	4b18      	ldr	r3, [pc, #96]	; (401bd8 <xTaskCheckForTimeOut+0x6c>)
  401b78:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  401b7a:	4b18      	ldr	r3, [pc, #96]	; (401bdc <xTaskCheckForTimeOut+0x70>)
  401b7c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  401b7e:	686a      	ldr	r2, [r5, #4]
  401b80:	1a88      	subs	r0, r1, r2
			if( *pxTicksToWait == portMAX_DELAY )
  401b82:	6823      	ldr	r3, [r4, #0]
  401b84:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b88:	d022      	beq.n	401bd0 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401b8a:	682f      	ldr	r7, [r5, #0]
  401b8c:	4e14      	ldr	r6, [pc, #80]	; (401be0 <xTaskCheckForTimeOut+0x74>)
  401b8e:	6836      	ldr	r6, [r6, #0]
  401b90:	42b7      	cmp	r7, r6
  401b92:	d001      	beq.n	401b98 <xTaskCheckForTimeOut+0x2c>
  401b94:	4291      	cmp	r1, r2
  401b96:	d21d      	bcs.n	401bd4 <xTaskCheckForTimeOut+0x68>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  401b98:	4298      	cmp	r0, r3
  401b9a:	d312      	bcc.n	401bc2 <xTaskCheckForTimeOut+0x56>
			*pxTicksToWait = 0;
  401b9c:	2300      	movs	r3, #0
  401b9e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
  401ba0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  401ba2:	4b10      	ldr	r3, [pc, #64]	; (401be4 <xTaskCheckForTimeOut+0x78>)
  401ba4:	4798      	blx	r3
}
  401ba6:	4620      	mov	r0, r4
  401ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxTimeOut );
  401baa:	f640 4194 	movw	r1, #3220	; 0xc94
  401bae:	480e      	ldr	r0, [pc, #56]	; (401be8 <xTaskCheckForTimeOut+0x7c>)
  401bb0:	4b0e      	ldr	r3, [pc, #56]	; (401bec <xTaskCheckForTimeOut+0x80>)
  401bb2:	4798      	blx	r3
  401bb4:	e7de      	b.n	401b74 <xTaskCheckForTimeOut+0x8>
	configASSERT( pxTicksToWait );
  401bb6:	f640 4195 	movw	r1, #3221	; 0xc95
  401bba:	480b      	ldr	r0, [pc, #44]	; (401be8 <xTaskCheckForTimeOut+0x7c>)
  401bbc:	4b0b      	ldr	r3, [pc, #44]	; (401bec <xTaskCheckForTimeOut+0x80>)
  401bbe:	4798      	blx	r3
  401bc0:	e7d9      	b.n	401b76 <xTaskCheckForTimeOut+0xa>
			*pxTicksToWait -= xElapsedTime;
  401bc2:	1a1b      	subs	r3, r3, r0
  401bc4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  401bc6:	4628      	mov	r0, r5
  401bc8:	4b09      	ldr	r3, [pc, #36]	; (401bf0 <xTaskCheckForTimeOut+0x84>)
  401bca:	4798      	blx	r3
			xReturn = pdFALSE;
  401bcc:	2400      	movs	r4, #0
  401bce:	e7e8      	b.n	401ba2 <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
  401bd0:	2400      	movs	r4, #0
  401bd2:	e7e6      	b.n	401ba2 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
  401bd4:	2401      	movs	r4, #1
  401bd6:	e7e4      	b.n	401ba2 <xTaskCheckForTimeOut+0x36>
  401bd8:	004002c5 	.word	0x004002c5
  401bdc:	200005d0 	.word	0x200005d0
  401be0:	2000058c 	.word	0x2000058c
  401be4:	0040030d 	.word	0x0040030d
  401be8:	004030e8 	.word	0x004030e8
  401bec:	00402ce1 	.word	0x00402ce1
  401bf0:	00401b55 	.word	0x00401b55

00401bf4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  401bf4:	2201      	movs	r2, #1
  401bf6:	4b01      	ldr	r3, [pc, #4]	; (401bfc <vTaskMissedYield+0x8>)
  401bf8:	601a      	str	r2, [r3, #0]
  401bfa:	4770      	bx	lr
  401bfc:	200005d4 	.word	0x200005d4

00401c00 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
  401c00:	4b05      	ldr	r3, [pc, #20]	; (401c18 <xTaskGetSchedulerState+0x18>)
  401c02:	681b      	ldr	r3, [r3, #0]
  401c04:	b123      	cbz	r3, 401c10 <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c06:	4b05      	ldr	r3, [pc, #20]	; (401c1c <xTaskGetSchedulerState+0x1c>)
  401c08:	681b      	ldr	r3, [r3, #0]
  401c0a:	b91b      	cbnz	r3, 401c14 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
  401c0c:	2002      	movs	r0, #2
  401c0e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  401c10:	2001      	movs	r0, #1
  401c12:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
  401c14:	2000      	movs	r0, #0
	}
  401c16:	4770      	bx	lr
  401c18:	200005a4 	.word	0x200005a4
  401c1c:	20000550 	.word	0x20000550

00401c20 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  401c20:	2800      	cmp	r0, #0
  401c22:	d045      	beq.n	401cb0 <xTaskPriorityDisinherit+0x90>
	{
  401c24:	b538      	push	{r3, r4, r5, lr}
  401c26:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
  401c28:	4b23      	ldr	r3, [pc, #140]	; (401cb8 <xTaskPriorityDisinherit+0x98>)
  401c2a:	681b      	ldr	r3, [r3, #0]
  401c2c:	4298      	cmp	r0, r3
  401c2e:	d004      	beq.n	401c3a <xTaskPriorityDisinherit+0x1a>
  401c30:	f640 71d1 	movw	r1, #4049	; 0xfd1
  401c34:	4821      	ldr	r0, [pc, #132]	; (401cbc <xTaskPriorityDisinherit+0x9c>)
  401c36:	4b22      	ldr	r3, [pc, #136]	; (401cc0 <xTaskPriorityDisinherit+0xa0>)
  401c38:	4798      	blx	r3
			configASSERT( pxTCB->uxMutexesHeld );
  401c3a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401c3c:	b14b      	cbz	r3, 401c52 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
  401c3e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401c40:	3b01      	subs	r3, #1
  401c42:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401c44:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401c46:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  401c48:	4291      	cmp	r1, r2
  401c4a:	d033      	beq.n	401cb4 <xTaskPriorityDisinherit+0x94>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401c4c:	b13b      	cbz	r3, 401c5e <xTaskPriorityDisinherit+0x3e>
	BaseType_t xReturn = pdFALSE;
  401c4e:	2000      	movs	r0, #0
	}
  401c50:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB->uxMutexesHeld );
  401c52:	f640 71d2 	movw	r1, #4050	; 0xfd2
  401c56:	4819      	ldr	r0, [pc, #100]	; (401cbc <xTaskPriorityDisinherit+0x9c>)
  401c58:	4b19      	ldr	r3, [pc, #100]	; (401cc0 <xTaskPriorityDisinherit+0xa0>)
  401c5a:	4798      	blx	r3
  401c5c:	e7ef      	b.n	401c3e <xTaskPriorityDisinherit+0x1e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401c5e:	1d25      	adds	r5, r4, #4
  401c60:	4628      	mov	r0, r5
  401c62:	4b18      	ldr	r3, [pc, #96]	; (401cc4 <xTaskPriorityDisinherit+0xa4>)
  401c64:	4798      	blx	r3
  401c66:	b968      	cbnz	r0, 401c84 <xTaskPriorityDisinherit+0x64>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401c68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401c6a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401c6e:	008a      	lsls	r2, r1, #2
  401c70:	4915      	ldr	r1, [pc, #84]	; (401cc8 <xTaskPriorityDisinherit+0xa8>)
  401c72:	588a      	ldr	r2, [r1, r2]
  401c74:	b932      	cbnz	r2, 401c84 <xTaskPriorityDisinherit+0x64>
  401c76:	2201      	movs	r2, #1
  401c78:	409a      	lsls	r2, r3
  401c7a:	4914      	ldr	r1, [pc, #80]	; (401ccc <xTaskPriorityDisinherit+0xac>)
  401c7c:	680b      	ldr	r3, [r1, #0]
  401c7e:	ea23 0302 	bic.w	r3, r3, r2
  401c82:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401c84:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c86:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401c88:	f1c3 0208 	rsb	r2, r3, #8
  401c8c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  401c8e:	2401      	movs	r4, #1
  401c90:	fa04 f203 	lsl.w	r2, r4, r3
  401c94:	490d      	ldr	r1, [pc, #52]	; (401ccc <xTaskPriorityDisinherit+0xac>)
  401c96:	6808      	ldr	r0, [r1, #0]
  401c98:	4302      	orrs	r2, r0
  401c9a:	600a      	str	r2, [r1, #0]
  401c9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401ca0:	009a      	lsls	r2, r3, #2
  401ca2:	4629      	mov	r1, r5
  401ca4:	4808      	ldr	r0, [pc, #32]	; (401cc8 <xTaskPriorityDisinherit+0xa8>)
  401ca6:	4410      	add	r0, r2
  401ca8:	4b09      	ldr	r3, [pc, #36]	; (401cd0 <xTaskPriorityDisinherit+0xb0>)
  401caa:	4798      	blx	r3
					xReturn = pdTRUE;
  401cac:	4620      	mov	r0, r4
  401cae:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  401cb0:	2000      	movs	r0, #0
  401cb2:	4770      	bx	lr
  401cb4:	2000      	movs	r0, #0
  401cb6:	bd38      	pop	{r3, r4, r5, pc}
  401cb8:	20000498 	.word	0x20000498
  401cbc:	004030e8 	.word	0x004030e8
  401cc0:	00402ce1 	.word	0x00402ce1
  401cc4:	004001cd 	.word	0x004001cd
  401cc8:	200004a4 	.word	0x200004a4
  401ccc:	20000558 	.word	0x20000558
  401cd0:	00400181 	.word	0x00400181

00401cd4 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401cd4:	4b06      	ldr	r3, [pc, #24]	; (401cf0 <prvGetNextExpireTime+0x1c>)
  401cd6:	681a      	ldr	r2, [r3, #0]
  401cd8:	6813      	ldr	r3, [r2, #0]
  401cda:	b92b      	cbnz	r3, 401ce8 <prvGetNextExpireTime+0x14>
  401cdc:	2301      	movs	r3, #1
  401cde:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
  401ce0:	b923      	cbnz	r3, 401cec <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401ce2:	68d3      	ldr	r3, [r2, #12]
  401ce4:	6818      	ldr	r0, [r3, #0]
  401ce6:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401ce8:	2300      	movs	r3, #0
  401cea:	e7f8      	b.n	401cde <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
  401cec:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
  401cee:	4770      	bx	lr
  401cf0:	200005d8 	.word	0x200005d8

00401cf4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  401cf4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401cf6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401cf8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  401cfa:	4291      	cmp	r1, r2
  401cfc:	d80c      	bhi.n	401d18 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401cfe:	1ad2      	subs	r2, r2, r3
  401d00:	6983      	ldr	r3, [r0, #24]
  401d02:	429a      	cmp	r2, r3
  401d04:	d301      	bcc.n	401d0a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401d06:	2001      	movs	r0, #1
  401d08:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401d0a:	1d01      	adds	r1, r0, #4
  401d0c:	4b09      	ldr	r3, [pc, #36]	; (401d34 <prvInsertTimerInActiveList+0x40>)
  401d0e:	6818      	ldr	r0, [r3, #0]
  401d10:	4b09      	ldr	r3, [pc, #36]	; (401d38 <prvInsertTimerInActiveList+0x44>)
  401d12:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401d14:	2000      	movs	r0, #0
  401d16:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401d18:	429a      	cmp	r2, r3
  401d1a:	d201      	bcs.n	401d20 <prvInsertTimerInActiveList+0x2c>
  401d1c:	4299      	cmp	r1, r3
  401d1e:	d206      	bcs.n	401d2e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401d20:	1d01      	adds	r1, r0, #4
  401d22:	4b06      	ldr	r3, [pc, #24]	; (401d3c <prvInsertTimerInActiveList+0x48>)
  401d24:	6818      	ldr	r0, [r3, #0]
  401d26:	4b04      	ldr	r3, [pc, #16]	; (401d38 <prvInsertTimerInActiveList+0x44>)
  401d28:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401d2a:	2000      	movs	r0, #0
  401d2c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
  401d2e:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
  401d30:	bd08      	pop	{r3, pc}
  401d32:	bf00      	nop
  401d34:	200005dc 	.word	0x200005dc
  401d38:	00400199 	.word	0x00400199
  401d3c:	200005d8 	.word	0x200005d8

00401d40 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401d40:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401d42:	4b10      	ldr	r3, [pc, #64]	; (401d84 <prvCheckForValidListAndQueue+0x44>)
  401d44:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401d46:	4b10      	ldr	r3, [pc, #64]	; (401d88 <prvCheckForValidListAndQueue+0x48>)
  401d48:	681b      	ldr	r3, [r3, #0]
  401d4a:	b113      	cbz	r3, 401d52 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401d4c:	4b0f      	ldr	r3, [pc, #60]	; (401d8c <prvCheckForValidListAndQueue+0x4c>)
  401d4e:	4798      	blx	r3
  401d50:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  401d52:	4d0f      	ldr	r5, [pc, #60]	; (401d90 <prvCheckForValidListAndQueue+0x50>)
  401d54:	4628      	mov	r0, r5
  401d56:	4e0f      	ldr	r6, [pc, #60]	; (401d94 <prvCheckForValidListAndQueue+0x54>)
  401d58:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401d5a:	4c0f      	ldr	r4, [pc, #60]	; (401d98 <prvCheckForValidListAndQueue+0x58>)
  401d5c:	4620      	mov	r0, r4
  401d5e:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401d60:	4b0e      	ldr	r3, [pc, #56]	; (401d9c <prvCheckForValidListAndQueue+0x5c>)
  401d62:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401d64:	4b0e      	ldr	r3, [pc, #56]	; (401da0 <prvCheckForValidListAndQueue+0x60>)
  401d66:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401d68:	2200      	movs	r2, #0
  401d6a:	2110      	movs	r1, #16
  401d6c:	2005      	movs	r0, #5
  401d6e:	4b0d      	ldr	r3, [pc, #52]	; (401da4 <prvCheckForValidListAndQueue+0x64>)
  401d70:	4798      	blx	r3
  401d72:	4b05      	ldr	r3, [pc, #20]	; (401d88 <prvCheckForValidListAndQueue+0x48>)
  401d74:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  401d76:	2800      	cmp	r0, #0
  401d78:	d0e8      	beq.n	401d4c <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401d7a:	490b      	ldr	r1, [pc, #44]	; (401da8 <prvCheckForValidListAndQueue+0x68>)
  401d7c:	4b0b      	ldr	r3, [pc, #44]	; (401dac <prvCheckForValidListAndQueue+0x6c>)
  401d7e:	4798      	blx	r3
  401d80:	e7e4      	b.n	401d4c <prvCheckForValidListAndQueue+0xc>
  401d82:	bf00      	nop
  401d84:	004002c5 	.word	0x004002c5
  401d88:	2000060c 	.word	0x2000060c
  401d8c:	0040030d 	.word	0x0040030d
  401d90:	200005e0 	.word	0x200005e0
  401d94:	00400165 	.word	0x00400165
  401d98:	200005f4 	.word	0x200005f4
  401d9c:	200005d8 	.word	0x200005d8
  401da0:	200005dc 	.word	0x200005dc
  401da4:	00400ae5 	.word	0x00400ae5
  401da8:	00403108 	.word	0x00403108
  401dac:	00400ff5 	.word	0x00400ff5

00401db0 <xTimerCreateTimerTask>:
{
  401db0:	b510      	push	{r4, lr}
  401db2:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
  401db4:	4b0e      	ldr	r3, [pc, #56]	; (401df0 <xTimerCreateTimerTask+0x40>)
  401db6:	4798      	blx	r3
	if( xTimerQueue != NULL )
  401db8:	4b0e      	ldr	r3, [pc, #56]	; (401df4 <xTimerCreateTimerTask+0x44>)
  401dba:	681b      	ldr	r3, [r3, #0]
  401dbc:	b17b      	cbz	r3, 401dde <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
  401dbe:	4b0e      	ldr	r3, [pc, #56]	; (401df8 <xTimerCreateTimerTask+0x48>)
  401dc0:	9301      	str	r3, [sp, #4]
  401dc2:	2307      	movs	r3, #7
  401dc4:	9300      	str	r3, [sp, #0]
  401dc6:	2300      	movs	r3, #0
  401dc8:	f44f 7282 	mov.w	r2, #260	; 0x104
  401dcc:	490b      	ldr	r1, [pc, #44]	; (401dfc <xTimerCreateTimerTask+0x4c>)
  401dce:	480c      	ldr	r0, [pc, #48]	; (401e00 <xTimerCreateTimerTask+0x50>)
  401dd0:	4c0c      	ldr	r4, [pc, #48]	; (401e04 <xTimerCreateTimerTask+0x54>)
  401dd2:	47a0      	blx	r4
  401dd4:	4604      	mov	r4, r0
	configASSERT( xReturn );
  401dd6:	b124      	cbz	r4, 401de2 <xTimerCreateTimerTask+0x32>
}
  401dd8:	4620      	mov	r0, r4
  401dda:	b002      	add	sp, #8
  401ddc:	bd10      	pop	{r4, pc}
BaseType_t xReturn = pdFAIL;
  401dde:	2400      	movs	r4, #0
  401de0:	e7f9      	b.n	401dd6 <xTimerCreateTimerTask+0x26>
	configASSERT( xReturn );
  401de2:	f240 1113 	movw	r1, #275	; 0x113
  401de6:	4808      	ldr	r0, [pc, #32]	; (401e08 <xTimerCreateTimerTask+0x58>)
  401de8:	4b08      	ldr	r3, [pc, #32]	; (401e0c <xTimerCreateTimerTask+0x5c>)
  401dea:	4798      	blx	r3
	return xReturn;
  401dec:	e7f4      	b.n	401dd8 <xTimerCreateTimerTask+0x28>
  401dee:	bf00      	nop
  401df0:	00401d41 	.word	0x00401d41
  401df4:	2000060c 	.word	0x2000060c
  401df8:	20000610 	.word	0x20000610
  401dfc:	0040312c 	.word	0x0040312c
  401e00:	00402179 	.word	0x00402179
  401e04:	00401409 	.word	0x00401409
  401e08:	00403110 	.word	0x00403110
  401e0c:	00402ce1 	.word	0x00402ce1

00401e10 <xTimerGenericCommand>:
{
  401e10:	b5f0      	push	{r4, r5, r6, r7, lr}
  401e12:	b085      	sub	sp, #20
  401e14:	460c      	mov	r4, r1
  401e16:	4616      	mov	r6, r2
  401e18:	461f      	mov	r7, r3
	configASSERT( xTimer );
  401e1a:	4605      	mov	r5, r0
  401e1c:	b198      	cbz	r0, 401e46 <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
  401e1e:	4b15      	ldr	r3, [pc, #84]	; (401e74 <xTimerGenericCommand+0x64>)
  401e20:	6818      	ldr	r0, [r3, #0]
  401e22:	b328      	cbz	r0, 401e70 <xTimerGenericCommand+0x60>
		xMessage.xMessageID = xCommandID;
  401e24:	9400      	str	r4, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  401e26:	9601      	str	r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
  401e28:	9502      	str	r5, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  401e2a:	2c05      	cmp	r4, #5
  401e2c:	dc19      	bgt.n	401e62 <xTimerGenericCommand+0x52>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401e2e:	4b12      	ldr	r3, [pc, #72]	; (401e78 <xTimerGenericCommand+0x68>)
  401e30:	4798      	blx	r3
  401e32:	2802      	cmp	r0, #2
  401e34:	d00d      	beq.n	401e52 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401e36:	2300      	movs	r3, #0
  401e38:	461a      	mov	r2, r3
  401e3a:	4669      	mov	r1, sp
  401e3c:	480d      	ldr	r0, [pc, #52]	; (401e74 <xTimerGenericCommand+0x64>)
  401e3e:	6800      	ldr	r0, [r0, #0]
  401e40:	4c0e      	ldr	r4, [pc, #56]	; (401e7c <xTimerGenericCommand+0x6c>)
  401e42:	47a0      	blx	r4
  401e44:	e012      	b.n	401e6c <xTimerGenericCommand+0x5c>
	configASSERT( xTimer );
  401e46:	f44f 71c1 	mov.w	r1, #386	; 0x182
  401e4a:	480d      	ldr	r0, [pc, #52]	; (401e80 <xTimerGenericCommand+0x70>)
  401e4c:	4b0d      	ldr	r3, [pc, #52]	; (401e84 <xTimerGenericCommand+0x74>)
  401e4e:	4798      	blx	r3
  401e50:	e7e5      	b.n	401e1e <xTimerGenericCommand+0xe>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  401e52:	2300      	movs	r3, #0
  401e54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401e56:	4669      	mov	r1, sp
  401e58:	4806      	ldr	r0, [pc, #24]	; (401e74 <xTimerGenericCommand+0x64>)
  401e5a:	6800      	ldr	r0, [r0, #0]
  401e5c:	4c07      	ldr	r4, [pc, #28]	; (401e7c <xTimerGenericCommand+0x6c>)
  401e5e:	47a0      	blx	r4
  401e60:	e004      	b.n	401e6c <xTimerGenericCommand+0x5c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401e62:	2300      	movs	r3, #0
  401e64:	463a      	mov	r2, r7
  401e66:	4669      	mov	r1, sp
  401e68:	4c07      	ldr	r4, [pc, #28]	; (401e88 <xTimerGenericCommand+0x78>)
  401e6a:	47a0      	blx	r4
}
  401e6c:	b005      	add	sp, #20
  401e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
BaseType_t xReturn = pdFAIL;
  401e70:	2000      	movs	r0, #0
	return xReturn;
  401e72:	e7fb      	b.n	401e6c <xTimerGenericCommand+0x5c>
  401e74:	2000060c 	.word	0x2000060c
  401e78:	00401c01 	.word	0x00401c01
  401e7c:	00400b39 	.word	0x00400b39
  401e80:	00403110 	.word	0x00403110
  401e84:	00402ce1 	.word	0x00402ce1
  401e88:	00400d25 	.word	0x00400d25

00401e8c <prvSwitchTimerLists>:
{
  401e8c:	b570      	push	{r4, r5, r6, lr}
  401e8e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401e90:	4b1a      	ldr	r3, [pc, #104]	; (401efc <prvSwitchTimerLists+0x70>)
  401e92:	681b      	ldr	r3, [r3, #0]
  401e94:	681a      	ldr	r2, [r3, #0]
  401e96:	b34a      	cbz	r2, 401eec <prvSwitchTimerLists+0x60>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401e98:	68db      	ldr	r3, [r3, #12]
  401e9a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401e9c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401e9e:	1d25      	adds	r5, r4, #4
  401ea0:	4628      	mov	r0, r5
  401ea2:	4b17      	ldr	r3, [pc, #92]	; (401f00 <prvSwitchTimerLists+0x74>)
  401ea4:	4798      	blx	r3
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401ea6:	6a23      	ldr	r3, [r4, #32]
  401ea8:	4620      	mov	r0, r4
  401eaa:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401eac:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  401eb0:	f013 0f04 	tst.w	r3, #4
  401eb4:	d0ec      	beq.n	401e90 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  401eb6:	69a3      	ldr	r3, [r4, #24]
  401eb8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
  401eba:	429e      	cmp	r6, r3
  401ebc:	d207      	bcs.n	401ece <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  401ebe:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401ec0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401ec2:	4629      	mov	r1, r5
  401ec4:	4b0d      	ldr	r3, [pc, #52]	; (401efc <prvSwitchTimerLists+0x70>)
  401ec6:	6818      	ldr	r0, [r3, #0]
  401ec8:	4b0e      	ldr	r3, [pc, #56]	; (401f04 <prvSwitchTimerLists+0x78>)
  401eca:	4798      	blx	r3
  401ecc:	e7e0      	b.n	401e90 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401ece:	2100      	movs	r1, #0
  401ed0:	9100      	str	r1, [sp, #0]
  401ed2:	460b      	mov	r3, r1
  401ed4:	4632      	mov	r2, r6
  401ed6:	4620      	mov	r0, r4
  401ed8:	4c0b      	ldr	r4, [pc, #44]	; (401f08 <prvSwitchTimerLists+0x7c>)
  401eda:	47a0      	blx	r4
				configASSERT( xResult );
  401edc:	2800      	cmp	r0, #0
  401ede:	d1d7      	bne.n	401e90 <prvSwitchTimerLists+0x4>
  401ee0:	f44f 7161 	mov.w	r1, #900	; 0x384
  401ee4:	4809      	ldr	r0, [pc, #36]	; (401f0c <prvSwitchTimerLists+0x80>)
  401ee6:	4b0a      	ldr	r3, [pc, #40]	; (401f10 <prvSwitchTimerLists+0x84>)
  401ee8:	4798      	blx	r3
  401eea:	e7d1      	b.n	401e90 <prvSwitchTimerLists+0x4>
	pxCurrentTimerList = pxOverflowTimerList;
  401eec:	4a09      	ldr	r2, [pc, #36]	; (401f14 <prvSwitchTimerLists+0x88>)
  401eee:	6810      	ldr	r0, [r2, #0]
  401ef0:	4902      	ldr	r1, [pc, #8]	; (401efc <prvSwitchTimerLists+0x70>)
  401ef2:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  401ef4:	6013      	str	r3, [r2, #0]
}
  401ef6:	b002      	add	sp, #8
  401ef8:	bd70      	pop	{r4, r5, r6, pc}
  401efa:	bf00      	nop
  401efc:	200005d8 	.word	0x200005d8
  401f00:	004001cd 	.word	0x004001cd
  401f04:	00400199 	.word	0x00400199
  401f08:	00401e11 	.word	0x00401e11
  401f0c:	00403110 	.word	0x00403110
  401f10:	00402ce1 	.word	0x00402ce1
  401f14:	200005dc 	.word	0x200005dc

00401f18 <prvSampleTimeNow>:
{
  401f18:	b538      	push	{r3, r4, r5, lr}
  401f1a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
  401f1c:	4b08      	ldr	r3, [pc, #32]	; (401f40 <prvSampleTimeNow+0x28>)
  401f1e:	4798      	blx	r3
  401f20:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
  401f22:	4b08      	ldr	r3, [pc, #32]	; (401f44 <prvSampleTimeNow+0x2c>)
  401f24:	681b      	ldr	r3, [r3, #0]
  401f26:	4298      	cmp	r0, r3
  401f28:	d305      	bcc.n	401f36 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
  401f2a:	2300      	movs	r3, #0
  401f2c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
  401f2e:	4b05      	ldr	r3, [pc, #20]	; (401f44 <prvSampleTimeNow+0x2c>)
  401f30:	601c      	str	r4, [r3, #0]
}
  401f32:	4620      	mov	r0, r4
  401f34:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
  401f36:	4b04      	ldr	r3, [pc, #16]	; (401f48 <prvSampleTimeNow+0x30>)
  401f38:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  401f3a:	2301      	movs	r3, #1
  401f3c:	602b      	str	r3, [r5, #0]
  401f3e:	e7f6      	b.n	401f2e <prvSampleTimeNow+0x16>
  401f40:	004015bd 	.word	0x004015bd
  401f44:	20000608 	.word	0x20000608
  401f48:	00401e8d 	.word	0x00401e8d

00401f4c <prvProcessExpiredTimer>:
{
  401f4c:	b570      	push	{r4, r5, r6, lr}
  401f4e:	b082      	sub	sp, #8
  401f50:	4605      	mov	r5, r0
  401f52:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401f54:	4b16      	ldr	r3, [pc, #88]	; (401fb0 <prvProcessExpiredTimer+0x64>)
  401f56:	681b      	ldr	r3, [r3, #0]
  401f58:	68db      	ldr	r3, [r3, #12]
  401f5a:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401f5c:	1d20      	adds	r0, r4, #4
  401f5e:	4b15      	ldr	r3, [pc, #84]	; (401fb4 <prvProcessExpiredTimer+0x68>)
  401f60:	4798      	blx	r3
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401f62:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  401f66:	f013 0f04 	tst.w	r3, #4
  401f6a:	d108      	bne.n	401f7e <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
  401f6c:	f023 0301 	bic.w	r3, r3, #1
  401f70:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401f74:	6a23      	ldr	r3, [r4, #32]
  401f76:	4620      	mov	r0, r4
  401f78:	4798      	blx	r3
}
  401f7a:	b002      	add	sp, #8
  401f7c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
  401f7e:	69a1      	ldr	r1, [r4, #24]
  401f80:	462b      	mov	r3, r5
  401f82:	4632      	mov	r2, r6
  401f84:	4429      	add	r1, r5
  401f86:	4620      	mov	r0, r4
  401f88:	4e0b      	ldr	r6, [pc, #44]	; (401fb8 <prvProcessExpiredTimer+0x6c>)
  401f8a:	47b0      	blx	r6
  401f8c:	2800      	cmp	r0, #0
  401f8e:	d0f1      	beq.n	401f74 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401f90:	2100      	movs	r1, #0
  401f92:	9100      	str	r1, [sp, #0]
  401f94:	460b      	mov	r3, r1
  401f96:	462a      	mov	r2, r5
  401f98:	4620      	mov	r0, r4
  401f9a:	4d08      	ldr	r5, [pc, #32]	; (401fbc <prvProcessExpiredTimer+0x70>)
  401f9c:	47a8      	blx	r5
			configASSERT( xResult );
  401f9e:	2800      	cmp	r0, #0
  401fa0:	d1e8      	bne.n	401f74 <prvProcessExpiredTimer+0x28>
  401fa2:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
  401fa6:	4806      	ldr	r0, [pc, #24]	; (401fc0 <prvProcessExpiredTimer+0x74>)
  401fa8:	4b06      	ldr	r3, [pc, #24]	; (401fc4 <prvProcessExpiredTimer+0x78>)
  401faa:	4798      	blx	r3
  401fac:	e7e2      	b.n	401f74 <prvProcessExpiredTimer+0x28>
  401fae:	bf00      	nop
  401fb0:	200005d8 	.word	0x200005d8
  401fb4:	004001cd 	.word	0x004001cd
  401fb8:	00401cf5 	.word	0x00401cf5
  401fbc:	00401e11 	.word	0x00401e11
  401fc0:	00403110 	.word	0x00403110
  401fc4:	00402ce1 	.word	0x00402ce1

00401fc8 <prvProcessTimerOrBlockTask>:
{
  401fc8:	b570      	push	{r4, r5, r6, lr}
  401fca:	b082      	sub	sp, #8
  401fcc:	4606      	mov	r6, r0
  401fce:	460c      	mov	r4, r1
	vTaskSuspendAll();
  401fd0:	4b17      	ldr	r3, [pc, #92]	; (402030 <prvProcessTimerOrBlockTask+0x68>)
  401fd2:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401fd4:	a801      	add	r0, sp, #4
  401fd6:	4b17      	ldr	r3, [pc, #92]	; (402034 <prvProcessTimerOrBlockTask+0x6c>)
  401fd8:	4798      	blx	r3
		if( xTimerListsWereSwitched == pdFALSE )
  401fda:	9b01      	ldr	r3, [sp, #4]
  401fdc:	bb2b      	cbnz	r3, 40202a <prvProcessTimerOrBlockTask+0x62>
  401fde:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401fe0:	b90c      	cbnz	r4, 401fe6 <prvProcessTimerOrBlockTask+0x1e>
  401fe2:	42b0      	cmp	r0, r6
  401fe4:	d218      	bcs.n	402018 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
  401fe6:	b124      	cbz	r4, 401ff2 <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  401fe8:	4b13      	ldr	r3, [pc, #76]	; (402038 <prvProcessTimerOrBlockTask+0x70>)
  401fea:	681b      	ldr	r3, [r3, #0]
  401fec:	681b      	ldr	r3, [r3, #0]
  401fee:	b9d3      	cbnz	r3, 402026 <prvProcessTimerOrBlockTask+0x5e>
  401ff0:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401ff2:	4622      	mov	r2, r4
  401ff4:	1b71      	subs	r1, r6, r5
  401ff6:	4b11      	ldr	r3, [pc, #68]	; (40203c <prvProcessTimerOrBlockTask+0x74>)
  401ff8:	6818      	ldr	r0, [r3, #0]
  401ffa:	4b11      	ldr	r3, [pc, #68]	; (402040 <prvProcessTimerOrBlockTask+0x78>)
  401ffc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401ffe:	4b11      	ldr	r3, [pc, #68]	; (402044 <prvProcessTimerOrBlockTask+0x7c>)
  402000:	4798      	blx	r3
  402002:	b938      	cbnz	r0, 402014 <prvProcessTimerOrBlockTask+0x4c>
					portYIELD_WITHIN_API();
  402004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402008:	4b0f      	ldr	r3, [pc, #60]	; (402048 <prvProcessTimerOrBlockTask+0x80>)
  40200a:	601a      	str	r2, [r3, #0]
  40200c:	f3bf 8f4f 	dsb	sy
  402010:	f3bf 8f6f 	isb	sy
}
  402014:	b002      	add	sp, #8
  402016:	bd70      	pop	{r4, r5, r6, pc}
				( void ) xTaskResumeAll();
  402018:	4b0a      	ldr	r3, [pc, #40]	; (402044 <prvProcessTimerOrBlockTask+0x7c>)
  40201a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  40201c:	4629      	mov	r1, r5
  40201e:	4630      	mov	r0, r6
  402020:	4b0a      	ldr	r3, [pc, #40]	; (40204c <prvProcessTimerOrBlockTask+0x84>)
  402022:	4798      	blx	r3
  402024:	e7f6      	b.n	402014 <prvProcessTimerOrBlockTask+0x4c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402026:	2400      	movs	r4, #0
  402028:	e7e3      	b.n	401ff2 <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
  40202a:	4b06      	ldr	r3, [pc, #24]	; (402044 <prvProcessTimerOrBlockTask+0x7c>)
  40202c:	4798      	blx	r3
}
  40202e:	e7f1      	b.n	402014 <prvProcessTimerOrBlockTask+0x4c>
  402030:	004015ad 	.word	0x004015ad
  402034:	00401f19 	.word	0x00401f19
  402038:	200005dc 	.word	0x200005dc
  40203c:	2000060c 	.word	0x2000060c
  402040:	0040101d 	.word	0x0040101d
  402044:	004016ed 	.word	0x004016ed
  402048:	e000ed04 	.word	0xe000ed04
  40204c:	00401f4d 	.word	0x00401f4d

00402050 <prvProcessReceivedCommands>:
{
  402050:	b530      	push	{r4, r5, lr}
  402052:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402054:	e002      	b.n	40205c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402056:	9b04      	ldr	r3, [sp, #16]
  402058:	2b00      	cmp	r3, #0
  40205a:	da0f      	bge.n	40207c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40205c:	2200      	movs	r2, #0
  40205e:	a904      	add	r1, sp, #16
  402060:	4b3c      	ldr	r3, [pc, #240]	; (402154 <prvProcessReceivedCommands+0x104>)
  402062:	6818      	ldr	r0, [r3, #0]
  402064:	4b3c      	ldr	r3, [pc, #240]	; (402158 <prvProcessReceivedCommands+0x108>)
  402066:	4798      	blx	r3
  402068:	2800      	cmp	r0, #0
  40206a:	d070      	beq.n	40214e <prvProcessReceivedCommands+0xfe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  40206c:	9b04      	ldr	r3, [sp, #16]
  40206e:	2b00      	cmp	r3, #0
  402070:	daf1      	bge.n	402056 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402072:	9907      	ldr	r1, [sp, #28]
  402074:	9806      	ldr	r0, [sp, #24]
  402076:	9b05      	ldr	r3, [sp, #20]
  402078:	4798      	blx	r3
  40207a:	e7ec      	b.n	402056 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40207c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  40207e:	6963      	ldr	r3, [r4, #20]
  402080:	b113      	cbz	r3, 402088 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402082:	1d20      	adds	r0, r4, #4
  402084:	4b35      	ldr	r3, [pc, #212]	; (40215c <prvProcessReceivedCommands+0x10c>)
  402086:	4798      	blx	r3
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402088:	a803      	add	r0, sp, #12
  40208a:	4b35      	ldr	r3, [pc, #212]	; (402160 <prvProcessReceivedCommands+0x110>)
  40208c:	4798      	blx	r3
  40208e:	4605      	mov	r5, r0
			switch( xMessage.xMessageID )
  402090:	9b04      	ldr	r3, [sp, #16]
  402092:	2b09      	cmp	r3, #9
  402094:	d8e2      	bhi.n	40205c <prvProcessReceivedCommands+0xc>
  402096:	e8df f003 	tbb	[pc, r3]
  40209a:	0505      	.short	0x0505
  40209c:	4c352e05 	.word	0x4c352e05
  4020a0:	352e0505 	.word	0x352e0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  4020a4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  4020a8:	f043 0301 	orr.w	r3, r3, #1
  4020ac:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  4020b0:	9905      	ldr	r1, [sp, #20]
  4020b2:	69a0      	ldr	r0, [r4, #24]
  4020b4:	460b      	mov	r3, r1
  4020b6:	462a      	mov	r2, r5
  4020b8:	4401      	add	r1, r0
  4020ba:	4620      	mov	r0, r4
  4020bc:	4d29      	ldr	r5, [pc, #164]	; (402164 <prvProcessReceivedCommands+0x114>)
  4020be:	47a8      	blx	r5
  4020c0:	2800      	cmp	r0, #0
  4020c2:	d0cb      	beq.n	40205c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4020c4:	6a23      	ldr	r3, [r4, #32]
  4020c6:	4620      	mov	r0, r4
  4020c8:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  4020ca:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  4020ce:	f013 0f04 	tst.w	r3, #4
  4020d2:	d0c3      	beq.n	40205c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4020d4:	69a2      	ldr	r2, [r4, #24]
  4020d6:	2100      	movs	r1, #0
  4020d8:	9100      	str	r1, [sp, #0]
  4020da:	460b      	mov	r3, r1
  4020dc:	9805      	ldr	r0, [sp, #20]
  4020de:	4402      	add	r2, r0
  4020e0:	4620      	mov	r0, r4
  4020e2:	4c21      	ldr	r4, [pc, #132]	; (402168 <prvProcessReceivedCommands+0x118>)
  4020e4:	47a0      	blx	r4
							configASSERT( xResult );
  4020e6:	2800      	cmp	r0, #0
  4020e8:	d1b8      	bne.n	40205c <prvProcessReceivedCommands+0xc>
  4020ea:	f240 3113 	movw	r1, #787	; 0x313
  4020ee:	481f      	ldr	r0, [pc, #124]	; (40216c <prvProcessReceivedCommands+0x11c>)
  4020f0:	4b1f      	ldr	r3, [pc, #124]	; (402170 <prvProcessReceivedCommands+0x120>)
  4020f2:	4798      	blx	r3
  4020f4:	e7b2      	b.n	40205c <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
  4020f6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  4020fa:	f023 0301 	bic.w	r3, r3, #1
  4020fe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
					break;
  402102:	e7ab      	b.n	40205c <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  402104:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  402108:	f043 0301 	orr.w	r3, r3, #1
  40210c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402110:	9b05      	ldr	r3, [sp, #20]
  402112:	61a3      	str	r3, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402114:	b13b      	cbz	r3, 402126 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402116:	69a1      	ldr	r1, [r4, #24]
  402118:	462b      	mov	r3, r5
  40211a:	462a      	mov	r2, r5
  40211c:	4429      	add	r1, r5
  40211e:	4620      	mov	r0, r4
  402120:	4c10      	ldr	r4, [pc, #64]	; (402164 <prvProcessReceivedCommands+0x114>)
  402122:	47a0      	blx	r4
					break;
  402124:	e79a      	b.n	40205c <prvProcessReceivedCommands+0xc>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402126:	f240 312b 	movw	r1, #811	; 0x32b
  40212a:	4810      	ldr	r0, [pc, #64]	; (40216c <prvProcessReceivedCommands+0x11c>)
  40212c:	4b10      	ldr	r3, [pc, #64]	; (402170 <prvProcessReceivedCommands+0x120>)
  40212e:	4798      	blx	r3
  402130:	e7f1      	b.n	402116 <prvProcessReceivedCommands+0xc6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
  402132:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  402136:	f013 0f02 	tst.w	r3, #2
  40213a:	d004      	beq.n	402146 <prvProcessReceivedCommands+0xf6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
  40213c:	f023 0301 	bic.w	r3, r3, #1
  402140:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  402144:	e78a      	b.n	40205c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
  402146:	4620      	mov	r0, r4
  402148:	4b0a      	ldr	r3, [pc, #40]	; (402174 <prvProcessReceivedCommands+0x124>)
  40214a:	4798      	blx	r3
  40214c:	e786      	b.n	40205c <prvProcessReceivedCommands+0xc>
}
  40214e:	b009      	add	sp, #36	; 0x24
  402150:	bd30      	pop	{r4, r5, pc}
  402152:	bf00      	nop
  402154:	2000060c 	.word	0x2000060c
  402158:	00400e31 	.word	0x00400e31
  40215c:	004001cd 	.word	0x004001cd
  402160:	00401f19 	.word	0x00401f19
  402164:	00401cf5 	.word	0x00401cf5
  402168:	00401e11 	.word	0x00401e11
  40216c:	00403110 	.word	0x00403110
  402170:	00402ce1 	.word	0x00402ce1
  402174:	004006bd 	.word	0x004006bd

00402178 <prvTimerTask>:
{
  402178:	b500      	push	{lr}
  40217a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  40217c:	a801      	add	r0, sp, #4
  40217e:	4b04      	ldr	r3, [pc, #16]	; (402190 <prvTimerTask+0x18>)
  402180:	4798      	blx	r3
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  402182:	9901      	ldr	r1, [sp, #4]
  402184:	4b03      	ldr	r3, [pc, #12]	; (402194 <prvTimerTask+0x1c>)
  402186:	4798      	blx	r3
		prvProcessReceivedCommands();
  402188:	4b03      	ldr	r3, [pc, #12]	; (402198 <prvTimerTask+0x20>)
  40218a:	4798      	blx	r3
  40218c:	e7f6      	b.n	40217c <prvTimerTask+0x4>
  40218e:	bf00      	nop
  402190:	00401cd5 	.word	0x00401cd5
  402194:	00401fc9 	.word	0x00401fc9
  402198:	00402051 	.word	0x00402051

0040219c <intitializeLEDDriver>:
#include "ledDriver.h"
#include "myDefines.h"


void intitializeLEDDriver(void)
{
  40219c:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40219e:	2009      	movs	r0, #9
  4021a0:	4c0e      	ldr	r4, [pc, #56]	; (4021dc <intitializeLEDDriver+0x40>)
  4021a2:	47a0      	blx	r4
  4021a4:	200a      	movs	r0, #10
  4021a6:	47a0      	blx	r4
  4021a8:	200b      	movs	r0, #11
  4021aa:	47a0      	blx	r4
  4021ac:	200c      	movs	r0, #12
  4021ae:	47a0      	blx	r4
  4021b0:	200d      	movs	r0, #13
  4021b2:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4021b4:	4b0a      	ldr	r3, [pc, #40]	; (4021e0 <intitializeLEDDriver+0x44>)
  4021b6:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
  4021ba:	611c      	str	r4, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4021bc:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4021c0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  4021c4:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4021c6:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4021ca:	4a06      	ldr	r2, [pc, #24]	; (4021e4 <intitializeLEDDriver+0x48>)
  4021cc:	2102      	movs	r1, #2
  4021ce:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4021d0:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4021d4:	631c      	str	r4, [r3, #48]	; 0x30
  4021d6:	6318      	str	r0, [r3, #48]	; 0x30
  4021d8:	6311      	str	r1, [r2, #48]	; 0x30
  4021da:	bd10      	pop	{r4, pc}
  4021dc:	004027dd 	.word	0x004027dd
  4021e0:	400e1400 	.word	0x400e1400
  4021e4:	400e1600 	.word	0x400e1600

004021e8 <readLED>:
	1 = EXT_LED1
	2 = EXT_LED2
	3 = EXT_LED3
	*/
	//if the led number is 1, then that will be for the external led #1
	if (uiLedNum == 1)
  4021e8:	2801      	cmp	r0, #1
  4021ea:	d008      	beq.n	4021fe <readLED+0x16>
	{
		return ioport_get_pin_level(EXT_LED1);
	}
	//else if the led number is 2, then that will be for the external led #2
	else if (uiLedNum == 2)
  4021ec:	2802      	cmp	r0, #2
  4021ee:	d00b      	beq.n	402208 <readLED+0x20>
	{
		return ioport_get_pin_level(EXT_LED2);
	}
	//else if the led number is 3, then that will be for the external led #3 
	else if (uiLedNum == 3)
  4021f0:	2803      	cmp	r0, #3
  4021f2:	d00e      	beq.n	402212 <readLED+0x2a>
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4021f4:	4b09      	ldr	r3, [pc, #36]	; (40221c <readLED+0x34>)
  4021f6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  4021f8:	f3c0 5080 	ubfx	r0, r0, #22, #1
	else
	{
		return ioport_get_pin_level(LED_0_PIN);
	}
	
}
  4021fc:	4770      	bx	lr
  4021fe:	4b07      	ldr	r3, [pc, #28]	; (40221c <readLED+0x34>)
  402200:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  402202:	f3c0 7000 	ubfx	r0, r0, #28, #1
		return ioport_get_pin_level(EXT_LED1);
  402206:	4770      	bx	lr
  402208:	4b04      	ldr	r3, [pc, #16]	; (40221c <readLED+0x34>)
  40220a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  40220c:	f3c0 4040 	ubfx	r0, r0, #17, #1
		return ioport_get_pin_level(EXT_LED2);
  402210:	4770      	bx	lr
  402212:	4b03      	ldr	r3, [pc, #12]	; (402220 <readLED+0x38>)
  402214:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  402216:	f3c0 0040 	ubfx	r0, r0, #1, #1
		return ioport_get_pin_level(EXT_LED3);
  40221a:	4770      	bx	lr
  40221c:	400e1400 	.word	0x400e1400
  402220:	400e1600 	.word	0x400e1600

00402224 <setLED>:

uint8_t setLED(uint8_t uiLedNum, uint8_t uiLedValue)
{
  402224:	b508      	push	{r3, lr}
/*
Sets the LED to a specified value (ON/OFF)
*/
		//if the led number is 1, then set the pin level
		//to on for for the external led #1, and then return the readLED
		if (uiLedNum == 1)
  402226:	2801      	cmp	r0, #1
  402228:	d00c      	beq.n	402244 <setLED+0x20>
			ioport_set_pin_level(EXT_LED1, uiLedValue);
			return readLED(uiLedNum);			
		}
		//else if the led number is 2, then set the pin level
		//to on for for the external led #2, and then return the readLED
		else if (uiLedNum == 2)
  40222a:	2802      	cmp	r0, #2
  40222c:	d017      	beq.n	40225e <setLED+0x3a>
			ioport_set_pin_level(EXT_LED2, uiLedValue);
			return readLED(uiLedNum);			
		}
		//else if the led number is 3, then set the pin level
		//to on for for the external led #3, and then return the readLED
		else if (uiLedNum == 3)
  40222e:	2803      	cmp	r0, #3
  402230:	d022      	beq.n	402278 <setLED+0x54>
	if (level) {
  402232:	2900      	cmp	r1, #0
  402234:	d02b      	beq.n	40228e <setLED+0x6a>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402236:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40223a:	4b17      	ldr	r3, [pc, #92]	; (402298 <setLED+0x74>)
  40223c:	631a      	str	r2, [r3, #48]	; 0x30
		}
		//else set the on board led to on, then return the readLED
		else
		{
			ioport_set_pin_level(LED_0_PIN, uiLedValue);
			return readLED(uiLedNum);
  40223e:	4b17      	ldr	r3, [pc, #92]	; (40229c <setLED+0x78>)
  402240:	4798      	blx	r3
		}
}
  402242:	bd08      	pop	{r3, pc}
	if (level) {
  402244:	b131      	cbz	r1, 402254 <setLED+0x30>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40224a:	4b13      	ldr	r3, [pc, #76]	; (402298 <setLED+0x74>)
  40224c:	631a      	str	r2, [r3, #48]	; 0x30
			return readLED(uiLedNum);			
  40224e:	4b13      	ldr	r3, [pc, #76]	; (40229c <setLED+0x78>)
  402250:	4798      	blx	r3
  402252:	bd08      	pop	{r3, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402258:	4b0f      	ldr	r3, [pc, #60]	; (402298 <setLED+0x74>)
  40225a:	635a      	str	r2, [r3, #52]	; 0x34
  40225c:	e7f7      	b.n	40224e <setLED+0x2a>
	if (level) {
  40225e:	b131      	cbz	r1, 40226e <setLED+0x4a>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402260:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  402264:	4b0c      	ldr	r3, [pc, #48]	; (402298 <setLED+0x74>)
  402266:	631a      	str	r2, [r3, #48]	; 0x30
			return readLED(uiLedNum);			
  402268:	4b0c      	ldr	r3, [pc, #48]	; (40229c <setLED+0x78>)
  40226a:	4798      	blx	r3
  40226c:	bd08      	pop	{r3, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40226e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  402272:	4b09      	ldr	r3, [pc, #36]	; (402298 <setLED+0x74>)
  402274:	635a      	str	r2, [r3, #52]	; 0x34
  402276:	e7f7      	b.n	402268 <setLED+0x44>
	if (level) {
  402278:	b129      	cbz	r1, 402286 <setLED+0x62>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40227a:	2202      	movs	r2, #2
  40227c:	4b08      	ldr	r3, [pc, #32]	; (4022a0 <setLED+0x7c>)
  40227e:	631a      	str	r2, [r3, #48]	; 0x30
			return readLED(uiLedNum);	
  402280:	4b06      	ldr	r3, [pc, #24]	; (40229c <setLED+0x78>)
  402282:	4798      	blx	r3
  402284:	bd08      	pop	{r3, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402286:	2202      	movs	r2, #2
  402288:	4b05      	ldr	r3, [pc, #20]	; (4022a0 <setLED+0x7c>)
  40228a:	635a      	str	r2, [r3, #52]	; 0x34
  40228c:	e7f8      	b.n	402280 <setLED+0x5c>
  40228e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402292:	4b01      	ldr	r3, [pc, #4]	; (402298 <setLED+0x74>)
  402294:	635a      	str	r2, [r3, #52]	; 0x34
  402296:	e7d2      	b.n	40223e <setLED+0x1a>
  402298:	400e1400 	.word	0x400e1400
  40229c:	004021e9 	.word	0x004021e9
  4022a0:	400e1600 	.word	0x400e1600

004022a4 <toggleLED>:

uint8_t toggleLED(uint8_t uiLedNum)
{
  4022a4:	b510      	push	{r4, lr}
  4022a6:	4604      	mov	r4, r0
/*
Toggles the LED
If the led is on, then turn it off
If the led is off, then turn it on
*/
	if (readLED(uiLedNum) == 1)
  4022a8:	4b06      	ldr	r3, [pc, #24]	; (4022c4 <toggleLED+0x20>)
  4022aa:	4798      	blx	r3
  4022ac:	2801      	cmp	r0, #1
  4022ae:	d004      	beq.n	4022ba <toggleLED+0x16>
	{
		return setLED(uiLedNum, 0);
		
	}
	else
		return setLED(uiLedNum, 1);
  4022b0:	2101      	movs	r1, #1
  4022b2:	4620      	mov	r0, r4
  4022b4:	4b04      	ldr	r3, [pc, #16]	; (4022c8 <toggleLED+0x24>)
  4022b6:	4798      	blx	r3
	
	
}
  4022b8:	bd10      	pop	{r4, pc}
		return setLED(uiLedNum, 0);
  4022ba:	2100      	movs	r1, #0
  4022bc:	4620      	mov	r0, r4
  4022be:	4b02      	ldr	r3, [pc, #8]	; (4022c8 <toggleLED+0x24>)
  4022c0:	4798      	blx	r3
  4022c2:	bd10      	pop	{r4, pc}
  4022c4:	004021e9 	.word	0x004021e9
  4022c8:	00402225 	.word	0x00402225

004022cc <initializeButtonDriver>:
#include <FreeRTOS.h>
#include "myButtons.h"
#include "myDefines.h"

void initializeButtonDriver(void)
{
  4022cc:	b410      	push	{r4}
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4022ce:	4b1e      	ldr	r3, [pc, #120]	; (402348 <initializeButtonDriver+0x7c>)
  4022d0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4022d4:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4022d6:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4022da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4022de:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4022e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4022e4:	4819      	ldr	r0, [pc, #100]	; (40234c <initializeButtonDriver+0x80>)
  4022e6:	2401      	movs	r4, #1
  4022e8:	6144      	str	r4, [r0, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4022ea:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
		base->PIO_PUER = mask;
  4022ee:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4022f0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4022f4:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4022f6:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  4022f8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4022fc:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4022fe:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  402302:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402304:	6f58      	ldr	r0, [r3, #116]	; 0x74
  402306:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  40230a:	6758      	str	r0, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  40230c:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40230e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402312:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  402314:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  402316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40231a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40231c:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  402320:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402322:	6f58      	ldr	r0, [r3, #116]	; 0x74
  402324:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  402328:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40232a:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40232e:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  402332:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ESR = mask;
  402336:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40233a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  40233e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	ioport_set_pin_mode(EXT_SW2, (IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE));
	
	//sets the sensing mode for the external switches 1 and 2 for when they are pushed
	ioport_set_pin_sense_mode(EXT_SW1, (IOPORT_SENSE_RISING));
	ioport_set_pin_sense_mode(EXT_SW2, (IOPORT_SENSE_RISING));
}
  402342:	f85d 4b04 	ldr.w	r4, [sp], #4
  402346:	4770      	bx	lr
  402348:	400e1400 	.word	0x400e1400
  40234c:	400e0e00 	.word	0x400e0e00

00402350 <readButton>:

uint8_t readButton(uint8_t uiButtonNum)
{
	//if the button number is 1, then it is for the external button #1
	if (uiButtonNum == 1)
  402350:	2801      	cmp	r0, #1
  402352:	d006      	beq.n	402362 <readButton+0x12>
	{
		return ioport_get_pin_level(EXT_SW1);
	}
	//else if it is 2, then it is for the external button #2
	else if (uiButtonNum == 2)
  402354:	2802      	cmp	r0, #2
  402356:	d009      	beq.n	40236c <readButton+0x1c>
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402358:	4b07      	ldr	r3, [pc, #28]	; (402378 <readButton+0x28>)
  40235a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  40235c:	f3c0 0080 	ubfx	r0, r0, #2, #1
	}
	//else it is the built in board button
	else
		return ioport_get_pin_level(BUTTON_0_PIN);

  402360:	4770      	bx	lr
  402362:	4b06      	ldr	r3, [pc, #24]	; (40237c <readButton+0x2c>)
  402364:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  402366:	f3c0 6080 	ubfx	r0, r0, #26, #1
		return ioport_get_pin_level(EXT_SW1);
  40236a:	4770      	bx	lr
  40236c:	4b03      	ldr	r3, [pc, #12]	; (40237c <readButton+0x2c>)
  40236e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  402370:	f3c0 7080 	ubfx	r0, r0, #30, #1
		return ioport_get_pin_level(EXT_SW2);
  402374:	4770      	bx	lr
  402376:	bf00      	nop
  402378:	400e0e00 	.word	0x400e0e00
  40237c:	400e1400 	.word	0x400e1400

00402380 <taskSystemControl>:
extern const char* uartBuffer1A;
extern const char* uartBuffer2A;
extern const char* uartBuffer3A;

void taskSystemControl(void * pvParamaters)
{
  402380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402384:	b083      	sub	sp, #12
	struct controlStruct * controlParams = (struct controlStruct *) pvParamaters;
	QueueHandle_t ledQueueParam = controlParams->ledQ;
  402386:	6804      	ldr	r4, [r0, #0]
	QueueHandle_t uartQueueParam = controlParams->uartQ;
  402388:	f8d0 9004 	ldr.w	r9, [r0, #4]
	TaskHandle_t nextTaskHandleParam = *controlParams->nextTask;
  40238c:	68c3      	ldr	r3, [r0, #12]
  40238e:	681e      	ldr	r6, [r3, #0]
	uint8_t ledParam = controlParams->ledNum;
  402390:	7c05      	ldrb	r5, [r0, #16]
  402392:	e00b      	b.n	4023ac <taskSystemControl+0x2c>
		*/
		if (readButton(SW1) == 1)
		{

				//send led1 back to the end of the queue
				incDec = DECREASE;
  402394:	a902      	add	r1, sp, #8
  402396:	2301      	movs	r3, #1
  402398:	f801 3d01 	strb.w	r3, [r1, #-1]!
				xQueueSendToBack(ledQueueParam, (void *) &incDec, (TickType_t) 10);
  40239c:	2300      	movs	r3, #0
  40239e:	220a      	movs	r2, #10
  4023a0:	4620      	mov	r0, r4
  4023a2:	4f21      	ldr	r7, [pc, #132]	; (402428 <taskSystemControl+0xa8>)
  4023a4:	47b8      	blx	r7
			}
			vTaskResume(nextTaskHandleParam);
			vTaskSuspend(NULL);
		}
		//delay for 100ms after all 3 switches
		vTaskDelay(xDelay3);
  4023a6:	2064      	movs	r0, #100	; 0x64
  4023a8:	4b20      	ldr	r3, [pc, #128]	; (40242c <taskSystemControl+0xac>)
  4023aa:	4798      	blx	r3
		if (readButton(SW1) == 1)
  4023ac:	2001      	movs	r0, #1
  4023ae:	4b20      	ldr	r3, [pc, #128]	; (402430 <taskSystemControl+0xb0>)
  4023b0:	4798      	blx	r3
  4023b2:	2801      	cmp	r0, #1
  4023b4:	d0ee      	beq.n	402394 <taskSystemControl+0x14>
		else if (readButton(SW2) == 1)
  4023b6:	2002      	movs	r0, #2
  4023b8:	4b1d      	ldr	r3, [pc, #116]	; (402430 <taskSystemControl+0xb0>)
  4023ba:	4798      	blx	r3
  4023bc:	2801      	cmp	r0, #1
  4023be:	d011      	beq.n	4023e4 <taskSystemControl+0x64>
		else if (readButton(SW0) == 1)
  4023c0:	2000      	movs	r0, #0
  4023c2:	4b1b      	ldr	r3, [pc, #108]	; (402430 <taskSystemControl+0xb0>)
  4023c4:	4798      	blx	r3
  4023c6:	2801      	cmp	r0, #1
  4023c8:	d1ed      	bne.n	4023a6 <taskSystemControl+0x26>
			if(ledParam == LED1)
  4023ca:	2d01      	cmp	r5, #1
  4023cc:	d013      	beq.n	4023f6 <taskSystemControl+0x76>
			else if(ledParam == LED2)
  4023ce:	2d02      	cmp	r5, #2
  4023d0:	d019      	beq.n	402406 <taskSystemControl+0x86>
			else if(ledParam == LED3)
  4023d2:	2d03      	cmp	r5, #3
  4023d4:	d01f      	beq.n	402416 <taskSystemControl+0x96>
			vTaskResume(nextTaskHandleParam);
  4023d6:	4630      	mov	r0, r6
  4023d8:	4b16      	ldr	r3, [pc, #88]	; (402434 <taskSystemControl+0xb4>)
  4023da:	4798      	blx	r3
			vTaskSuspend(NULL);
  4023dc:	2000      	movs	r0, #0
  4023de:	4b16      	ldr	r3, [pc, #88]	; (402438 <taskSystemControl+0xb8>)
  4023e0:	4798      	blx	r3
  4023e2:	e7e0      	b.n	4023a6 <taskSystemControl+0x26>
				incDec = INCREASE;
  4023e4:	2300      	movs	r3, #0
  4023e6:	a902      	add	r1, sp, #8
  4023e8:	f801 3d01 	strb.w	r3, [r1, #-1]!
				xQueueSendToBack(ledQueueParam, (void *) &incDec, (TickType_t) 10);
  4023ec:	220a      	movs	r2, #10
  4023ee:	4620      	mov	r0, r4
  4023f0:	4f0d      	ldr	r7, [pc, #52]	; (402428 <taskSystemControl+0xa8>)
  4023f2:	47b8      	blx	r7
  4023f4:	e7d7      	b.n	4023a6 <taskSystemControl+0x26>
				xQueueSendToBack(uartQueueParam, uartBuffer1A, (TickType_t) 0);				
  4023f6:	2300      	movs	r3, #0
  4023f8:	461a      	mov	r2, r3
  4023fa:	4910      	ldr	r1, [pc, #64]	; (40243c <taskSystemControl+0xbc>)
  4023fc:	6809      	ldr	r1, [r1, #0]
  4023fe:	4648      	mov	r0, r9
  402400:	4f09      	ldr	r7, [pc, #36]	; (402428 <taskSystemControl+0xa8>)
  402402:	47b8      	blx	r7
  402404:	e7e7      	b.n	4023d6 <taskSystemControl+0x56>
				xQueueSendToBack(uartQueueParam, uartBuffer2A, (TickType_t) 0);
  402406:	2300      	movs	r3, #0
  402408:	461a      	mov	r2, r3
  40240a:	490d      	ldr	r1, [pc, #52]	; (402440 <taskSystemControl+0xc0>)
  40240c:	6809      	ldr	r1, [r1, #0]
  40240e:	4648      	mov	r0, r9
  402410:	4f05      	ldr	r7, [pc, #20]	; (402428 <taskSystemControl+0xa8>)
  402412:	47b8      	blx	r7
  402414:	e7df      	b.n	4023d6 <taskSystemControl+0x56>
				xQueueSendToBack(uartQueueParam, uartBuffer3A, (TickType_t) 0);
  402416:	2300      	movs	r3, #0
  402418:	461a      	mov	r2, r3
  40241a:	490a      	ldr	r1, [pc, #40]	; (402444 <taskSystemControl+0xc4>)
  40241c:	6809      	ldr	r1, [r1, #0]
  40241e:	4648      	mov	r0, r9
  402420:	f8df 8004 	ldr.w	r8, [pc, #4]	; 402428 <taskSystemControl+0xa8>
  402424:	47c0      	blx	r8
  402426:	e7d6      	b.n	4023d6 <taskSystemControl+0x56>
  402428:	00400b39 	.word	0x00400b39
  40242c:	00401805 	.word	0x00401805
  402430:	00402351 	.word	0x00402351
  402434:	0040147d 	.word	0x0040147d
  402438:	00401935 	.word	0x00401935
  40243c:	2000000c 	.word	0x2000000c
  402440:	20000018 	.word	0x20000018
  402444:	20000024 	.word	0x20000024

00402448 <taskHeartBeat>:
	}

}
		
void taskHeartBeat (void * pvParamaters)		
{
  402448:	b508      	push	{r3, lr}
*/	

	//this is the heartbeat for LED 0 to happen once every second
	while (true)
	{
		toggleLED(LED0);
  40244a:	2000      	movs	r0, #0
  40244c:	4b03      	ldr	r3, [pc, #12]	; (40245c <taskHeartBeat+0x14>)
  40244e:	4798      	blx	r3
		vTaskDelay(xDelay2);
  402450:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  402454:	4b02      	ldr	r3, [pc, #8]	; (402460 <taskHeartBeat+0x18>)
  402456:	4798      	blx	r3
  402458:	e7f7      	b.n	40244a <taskHeartBeat+0x2>
  40245a:	bf00      	nop
  40245c:	004022a5 	.word	0x004022a5
  402460:	00401805 	.word	0x00401805

00402464 <taskLED>:
	}
		
}

void taskLED(void * pvParameters)
{
  402464:	b5f0      	push	{r4, r5, r6, r7, lr}
  402466:	b083      	sub	sp, #12
There will be three of these tasks as well. 
The task should use your LED Driver from Lab 2.
*/

	struct ledStruct * controlParams = (struct ledStruct *) pvParameters;
	QueueHandle_t ledQ = controlParams->ledQ;
  402468:	6804      	ldr	r4, [r0, #0]
	QueueHandle_t uartQ = controlParams->uartQ;
  40246a:	6847      	ldr	r7, [r0, #4]
	uint8_t ledNum = controlParams->ledNum;
  40246c:	7a05      	ldrb	r5, [r0, #8]
	int defaultMS = 500;
	TickType_t xDelay = defaultMS / portTICK_PERIOD_MS;
  40246e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
  402472:	e00a      	b.n	40248a <taskLED+0x26>
			if (xQueueReceive(ledQ, &getDelay, 0))
			{

				if(getDelay == DECREASE)
				{
					if (ledNum == LED1)
  402474:	2d01      	cmp	r5, #1
  402476:	d027      	beq.n	4024c8 <taskLED+0x64>
					{
						xQueueSendToBack(uartQ, uartBuffer1D, (TickType_t) 0);
					}
					else if (ledNum == LED2)
  402478:	2d02      	cmp	r5, #2
  40247a:	d02f      	beq.n	4024dc <taskLED+0x78>
					{
						xQueueSendToBack(uartQ, uartBuffer2D, (TickType_t) 0);
					}
					else if (ledNum == LED3)
  40247c:	2d03      	cmp	r5, #3
  40247e:	d037      	beq.n	4024f0 <taskLED+0x8c>
					{
						xQueueSendToBack(uartQ, uartBuffer3D, (TickType_t) 0);
					}
					xDelay = (defaultMS - 50) / portTICK_PERIOD_MS;
  402480:	f44f 76e1 	mov.w	r6, #450	; 0x1c2
						xDelay = 1000;
					}
				}
			}
		}
		vTaskDelay(xDelay);
  402484:	4630      	mov	r0, r6
  402486:	4b2e      	ldr	r3, [pc, #184]	; (402540 <taskLED+0xdc>)
  402488:	4798      	blx	r3
		toggleLED(ledNum);
  40248a:	4628      	mov	r0, r5
  40248c:	4b2d      	ldr	r3, [pc, #180]	; (402544 <taskLED+0xe0>)
  40248e:	4798      	blx	r3
		if(uxQueueMessagesWaiting(ledQ))
  402490:	4620      	mov	r0, r4
  402492:	4b2d      	ldr	r3, [pc, #180]	; (402548 <taskLED+0xe4>)
  402494:	4798      	blx	r3
  402496:	2800      	cmp	r0, #0
  402498:	d0f4      	beq.n	402484 <taskLED+0x20>
			if (xQueueReceive(ledQ, &getDelay, 0))
  40249a:	2200      	movs	r2, #0
  40249c:	f10d 0107 	add.w	r1, sp, #7
  4024a0:	4620      	mov	r0, r4
  4024a2:	4b2a      	ldr	r3, [pc, #168]	; (40254c <taskLED+0xe8>)
  4024a4:	4798      	blx	r3
  4024a6:	2800      	cmp	r0, #0
  4024a8:	d0ec      	beq.n	402484 <taskLED+0x20>
				if(getDelay == DECREASE)
  4024aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4024ae:	2b01      	cmp	r3, #1
  4024b0:	d0e0      	beq.n	402474 <taskLED+0x10>
				else if (getDelay == INCREASE)
  4024b2:	2b00      	cmp	r3, #0
  4024b4:	d1e6      	bne.n	402484 <taskLED+0x20>
					if (ledNum == LED1)
  4024b6:	2d01      	cmp	r5, #1
  4024b8:	d024      	beq.n	402504 <taskLED+0xa0>
					else if (ledNum == LED2)
  4024ba:	2d02      	cmp	r5, #2
  4024bc:	d02b      	beq.n	402516 <taskLED+0xb2>
					else if (ledNum == LED3)
  4024be:	2d03      	cmp	r5, #3
  4024c0:	d033      	beq.n	40252a <taskLED+0xc6>
					xDelay = (defaultMS + 50) / portTICK_PERIOD_MS;
  4024c2:	f240 2626 	movw	r6, #550	; 0x226
  4024c6:	e7dd      	b.n	402484 <taskLED+0x20>
						xQueueSendToBack(uartQ, uartBuffer1D, (TickType_t) 0);
  4024c8:	2300      	movs	r3, #0
  4024ca:	461a      	mov	r2, r3
  4024cc:	4920      	ldr	r1, [pc, #128]	; (402550 <taskLED+0xec>)
  4024ce:	6809      	ldr	r1, [r1, #0]
  4024d0:	4638      	mov	r0, r7
  4024d2:	4e20      	ldr	r6, [pc, #128]	; (402554 <taskLED+0xf0>)
  4024d4:	47b0      	blx	r6
					xDelay = (defaultMS - 50) / portTICK_PERIOD_MS;
  4024d6:	f44f 76e1 	mov.w	r6, #450	; 0x1c2
  4024da:	e7d3      	b.n	402484 <taskLED+0x20>
						xQueueSendToBack(uartQ, uartBuffer2D, (TickType_t) 0);
  4024dc:	2300      	movs	r3, #0
  4024de:	461a      	mov	r2, r3
  4024e0:	491d      	ldr	r1, [pc, #116]	; (402558 <taskLED+0xf4>)
  4024e2:	6809      	ldr	r1, [r1, #0]
  4024e4:	4638      	mov	r0, r7
  4024e6:	4e1b      	ldr	r6, [pc, #108]	; (402554 <taskLED+0xf0>)
  4024e8:	47b0      	blx	r6
					xDelay = (defaultMS - 50) / portTICK_PERIOD_MS;
  4024ea:	f44f 76e1 	mov.w	r6, #450	; 0x1c2
  4024ee:	e7c9      	b.n	402484 <taskLED+0x20>
						xQueueSendToBack(uartQ, uartBuffer3D, (TickType_t) 0);
  4024f0:	2300      	movs	r3, #0
  4024f2:	461a      	mov	r2, r3
  4024f4:	4919      	ldr	r1, [pc, #100]	; (40255c <taskLED+0xf8>)
  4024f6:	6809      	ldr	r1, [r1, #0]
  4024f8:	4638      	mov	r0, r7
  4024fa:	4e16      	ldr	r6, [pc, #88]	; (402554 <taskLED+0xf0>)
  4024fc:	47b0      	blx	r6
					xDelay = (defaultMS - 50) / portTICK_PERIOD_MS;
  4024fe:	f44f 76e1 	mov.w	r6, #450	; 0x1c2
  402502:	e7bf      	b.n	402484 <taskLED+0x20>
						xQueueSendToBack(uartQ, uartBuffer1I, (TickType_t) 0);
  402504:	461a      	mov	r2, r3
  402506:	4916      	ldr	r1, [pc, #88]	; (402560 <taskLED+0xfc>)
  402508:	6809      	ldr	r1, [r1, #0]
  40250a:	4638      	mov	r0, r7
  40250c:	4e11      	ldr	r6, [pc, #68]	; (402554 <taskLED+0xf0>)
  40250e:	47b0      	blx	r6
					xDelay = (defaultMS + 50) / portTICK_PERIOD_MS;
  402510:	f240 2626 	movw	r6, #550	; 0x226
  402514:	e7b6      	b.n	402484 <taskLED+0x20>
						xQueueSendToBack(uartQ, uartBuffer2I, (TickType_t) 0);
  402516:	2300      	movs	r3, #0
  402518:	461a      	mov	r2, r3
  40251a:	4912      	ldr	r1, [pc, #72]	; (402564 <taskLED+0x100>)
  40251c:	6809      	ldr	r1, [r1, #0]
  40251e:	4638      	mov	r0, r7
  402520:	4e0c      	ldr	r6, [pc, #48]	; (402554 <taskLED+0xf0>)
  402522:	47b0      	blx	r6
					xDelay = (defaultMS + 50) / portTICK_PERIOD_MS;
  402524:	f240 2626 	movw	r6, #550	; 0x226
  402528:	e7ac      	b.n	402484 <taskLED+0x20>
						xQueueSendToBack(uartQ, uartBuffer3I, (TickType_t) 0);
  40252a:	2300      	movs	r3, #0
  40252c:	461a      	mov	r2, r3
  40252e:	490e      	ldr	r1, [pc, #56]	; (402568 <taskLED+0x104>)
  402530:	6809      	ldr	r1, [r1, #0]
  402532:	4638      	mov	r0, r7
  402534:	4e07      	ldr	r6, [pc, #28]	; (402554 <taskLED+0xf0>)
  402536:	47b0      	blx	r6
					xDelay = (defaultMS + 50) / portTICK_PERIOD_MS;
  402538:	f240 2626 	movw	r6, #550	; 0x226
  40253c:	e7a2      	b.n	402484 <taskLED+0x20>
  40253e:	bf00      	nop
  402540:	00401805 	.word	0x00401805
  402544:	004022a5 	.word	0x004022a5
  402548:	00400fc5 	.word	0x00400fc5
  40254c:	00400e31 	.word	0x00400e31
  402550:	20000010 	.word	0x20000010
  402554:	00400b39 	.word	0x00400b39
  402558:	2000001c 	.word	0x2000001c
  40255c:	20000028 	.word	0x20000028
  402560:	20000014 	.word	0x20000014
  402564:	20000020 	.word	0x20000020
  402568:	2000002c 	.word	0x2000002c

0040256c <taskUART>:
	}
}

void taskUART(void *pvParameters)
{
  40256c:	b510      	push	{r4, lr}
  40256e:	b08e      	sub	sp, #56	; 0x38
  402570:	4604      	mov	r4, r0

char tempUART[50];

	while(true)
	{
		if(uxQueueMessagesWaiting(uartTempQueue))
  402572:	4620      	mov	r0, r4
  402574:	4b08      	ldr	r3, [pc, #32]	; (402598 <taskUART+0x2c>)
  402576:	4798      	blx	r3
  402578:	2800      	cmp	r0, #0
  40257a:	d0fa      	beq.n	402572 <taskUART+0x6>
		{
			if(xQueueReceive(uartTempQueue, &tempUART, portMAX_DELAY) == pdTRUE)
  40257c:	f04f 32ff 	mov.w	r2, #4294967295
  402580:	a901      	add	r1, sp, #4
  402582:	4620      	mov	r0, r4
  402584:	4b05      	ldr	r3, [pc, #20]	; (40259c <taskUART+0x30>)
  402586:	4798      	blx	r3
  402588:	2801      	cmp	r0, #1
  40258a:	d1f2      	bne.n	402572 <taskUART+0x6>
				UARTPutStr(EDBG_UART, tempUART, sizeof(tempUART));
  40258c:	2232      	movs	r2, #50	; 0x32
  40258e:	a901      	add	r1, sp, #4
  402590:	4803      	ldr	r0, [pc, #12]	; (4025a0 <taskUART+0x34>)
  402592:	4b04      	ldr	r3, [pc, #16]	; (4025a4 <taskUART+0x38>)
  402594:	4798      	blx	r3
  402596:	e7ec      	b.n	402572 <taskUART+0x6>
  402598:	00400fc5 	.word	0x00400fc5
  40259c:	00400e31 	.word	0x00400e31
  4025a0:	400e0600 	.word	0x400e0600
  4025a4:	0040260d 	.word	0x0040260d

004025a8 <initUART>:
The UARTPutC() will print a single byte (char) to the UART.
The UARTPutStr() function will use the UARTPutC() to write a complete string to the UART.
*/

uint8_t initUART(Uart * p_Uart)
{
  4025a8:	b510      	push	{r4, lr}
  4025aa:	4604      	mov	r4, r0
		base->PIO_PUDR = mask;
  4025ac:	4b12      	ldr	r3, [pc, #72]	; (4025f8 <initUART+0x50>)
  4025ae:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4025b2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4025b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4025b8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4025ba:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4025bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4025c0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4025c2:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  4025c6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4025c8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4025ca:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  4025ce:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4025d0:	605a      	str	r2, [r3, #4]
  4025d2:	2007      	movs	r0, #7
  4025d4:	4b09      	ldr	r3, [pc, #36]	; (4025fc <initUART+0x54>)
  4025d6:	4798      	blx	r3
	ioport_disable_port(IOPORT_PIOA, PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
	sysclk_enable_peripheral_clock(ID_UART0);

	// Configure UART Control Registers
	// Reset and Disable RX and TX
	p_Uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
  4025d8:	23ac      	movs	r3, #172	; 0xac
  4025da:	6023      	str	r3, [r4, #0]
	}
	
	if(retVal != 1)
	{
		// Set The Actual BAUD to Control Register
		p_Uart->UART_BRGR = cd;
  4025dc:	2334      	movs	r3, #52	; 0x34
  4025de:	6223      	str	r3, [r4, #32]

		// Configure Mode
		p_Uart->UART_MR = UART_SERIAL_PARITY;
  4025e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4025e4:	6063      	str	r3, [r4, #4]
		
		// Disable PDC Channel
		p_Uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4025e6:	f240 2302 	movw	r3, #514	; 0x202
  4025ea:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
		
		// Enable RX and TX
		p_Uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4025ee:	2350      	movs	r3, #80	; 0x50
  4025f0:	6023      	str	r3, [r4, #0]
	}
	
	return retVal;
}
  4025f2:	2000      	movs	r0, #0
  4025f4:	bd10      	pop	{r4, pc}
  4025f6:	bf00      	nop
  4025f8:	400e0e00 	.word	0x400e0e00
  4025fc:	004027dd 	.word	0x004027dd

00402600 <UARTPutC>:

void UARTPutC(Uart * p_Uart, char data)
{
	// Wait for Transmitter to be Ready
	while((p_Uart->UART_SR & UART_SR_TXRDY) == 0);
  402600:	6943      	ldr	r3, [r0, #20]
  402602:	f013 0f02 	tst.w	r3, #2
  402606:	d0fb      	beq.n	402600 <UARTPutC>
	p_Uart->UART_THR = data;
  402608:	61c1      	str	r1, [r0, #28]
  40260a:	4770      	bx	lr

0040260c <UARTPutStr>:

}

void UARTPutStr(Uart * p_Uart, const char * data, uint8_t len)
{
  40260c:	b538      	push	{r3, r4, r5, lr}
  40260e:	4605      	mov	r5, r0
  402610:	460c      	mov	r4, r1
	//call the vUARTPutC();
	//for (int i = 0; i < len; i++)
	//{
		//UARTPutC(p_Uart, data[i]);
	//}
	while (*data != '\0')
  402612:	e003      	b.n	40261c <UARTPutStr+0x10>
	{
		UARTPutC(p_Uart, *data);
  402614:	4628      	mov	r0, r5
  402616:	4b03      	ldr	r3, [pc, #12]	; (402624 <UARTPutStr+0x18>)
  402618:	4798      	blx	r3
		data++;
  40261a:	3401      	adds	r4, #1
	while (*data != '\0')
  40261c:	7821      	ldrb	r1, [r4, #0]
  40261e:	2900      	cmp	r1, #0
  402620:	d1f8      	bne.n	402614 <UARTPutStr+0x8>
	}
	
  402622:	bd38      	pop	{r3, r4, r5, pc}
  402624:	00402601 	.word	0x00402601

00402628 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402628:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40262a:	480e      	ldr	r0, [pc, #56]	; (402664 <sysclk_init+0x3c>)
  40262c:	4b0e      	ldr	r3, [pc, #56]	; (402668 <sysclk_init+0x40>)
  40262e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402630:	213e      	movs	r1, #62	; 0x3e
  402632:	2000      	movs	r0, #0
  402634:	4b0d      	ldr	r3, [pc, #52]	; (40266c <sysclk_init+0x44>)
  402636:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402638:	4b0d      	ldr	r3, [pc, #52]	; (402670 <sysclk_init+0x48>)
  40263a:	4798      	blx	r3
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40263c:	2800      	cmp	r0, #0
  40263e:	d0fb      	beq.n	402638 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402640:	4b0c      	ldr	r3, [pc, #48]	; (402674 <sysclk_init+0x4c>)
  402642:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402644:	4a0c      	ldr	r2, [pc, #48]	; (402678 <sysclk_init+0x50>)
  402646:	4b0d      	ldr	r3, [pc, #52]	; (40267c <sysclk_init+0x54>)
  402648:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  40264a:	4b0d      	ldr	r3, [pc, #52]	; (402680 <sysclk_init+0x58>)
  40264c:	4798      	blx	r3
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40264e:	2800      	cmp	r0, #0
  402650:	d0fb      	beq.n	40264a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402652:	2010      	movs	r0, #16
  402654:	4b0b      	ldr	r3, [pc, #44]	; (402684 <sysclk_init+0x5c>)
  402656:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402658:	4b0b      	ldr	r3, [pc, #44]	; (402688 <sysclk_init+0x60>)
  40265a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40265c:	480b      	ldr	r0, [pc, #44]	; (40268c <sysclk_init+0x64>)
  40265e:	4b02      	ldr	r3, [pc, #8]	; (402668 <sysclk_init+0x40>)
  402660:	4798      	blx	r3
  402662:	bd08      	pop	{r3, pc}
  402664:	07270e00 	.word	0x07270e00
  402668:	004029f1 	.word	0x004029f1
  40266c:	00402759 	.word	0x00402759
  402670:	004027ad 	.word	0x004027ad
  402674:	004027bd 	.word	0x004027bd
  402678:	200f3f01 	.word	0x200f3f01
  40267c:	400e0400 	.word	0x400e0400
  402680:	004027cd 	.word	0x004027cd
  402684:	00402705 	.word	0x00402705
  402688:	004028e1 	.word	0x004028e1
  40268c:	05b8d800 	.word	0x05b8d800

00402690 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  402690:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402692:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402696:	4b18      	ldr	r3, [pc, #96]	; (4026f8 <board_init+0x68>)
  402698:	605a      	str	r2, [r3, #4]
  40269a:	2009      	movs	r0, #9
  40269c:	4c17      	ldr	r4, [pc, #92]	; (4026fc <board_init+0x6c>)
  40269e:	47a0      	blx	r4
  4026a0:	200a      	movs	r0, #10
  4026a2:	47a0      	blx	r4
  4026a4:	200b      	movs	r0, #11
  4026a6:	47a0      	blx	r4
  4026a8:	200c      	movs	r0, #12
  4026aa:	47a0      	blx	r4
  4026ac:	200d      	movs	r0, #13
  4026ae:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4026b0:	4b13      	ldr	r3, [pc, #76]	; (402700 <board_init+0x70>)
  4026b2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4026b6:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4026b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4026bc:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4026be:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4026c2:	2204      	movs	r2, #4
  4026c4:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4026c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4026ca:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4026cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4026d0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4026d2:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4026d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4026d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4026da:	f021 0104 	bic.w	r1, r1, #4
  4026de:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4026e0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4026e2:	f021 0104 	bic.w	r1, r1, #4
  4026e6:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4026e8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4026ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4026f0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  4026f4:	bd10      	pop	{r4, pc}
  4026f6:	bf00      	nop
  4026f8:	400e1850 	.word	0x400e1850
  4026fc:	004027dd 	.word	0x004027dd
  402700:	400e1400 	.word	0x400e1400

00402704 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402704:	4a13      	ldr	r2, [pc, #76]	; (402754 <pmc_switch_mck_to_pllack+0x50>)
  402706:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40270c:	4318      	orrs	r0, r3
  40270e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402710:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402714:	4a0f      	ldr	r2, [pc, #60]	; (402754 <pmc_switch_mck_to_pllack+0x50>)
  402716:	6e92      	ldr	r2, [r2, #104]	; 0x68
  402718:	f012 0f08 	tst.w	r2, #8
  40271c:	d102      	bne.n	402724 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40271e:	b1a3      	cbz	r3, 40274a <pmc_switch_mck_to_pllack+0x46>
			--ul_timeout) {
  402720:	3b01      	subs	r3, #1
  402722:	e7f7      	b.n	402714 <pmc_switch_mck_to_pllack+0x10>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402724:	4a0b      	ldr	r2, [pc, #44]	; (402754 <pmc_switch_mck_to_pllack+0x50>)
  402726:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402728:	f023 0303 	bic.w	r3, r3, #3
  40272c:	f043 0302 	orr.w	r3, r3, #2
  402730:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402732:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402736:	4a07      	ldr	r2, [pc, #28]	; (402754 <pmc_switch_mck_to_pllack+0x50>)
  402738:	6e92      	ldr	r2, [r2, #104]	; 0x68
  40273a:	f012 0f08 	tst.w	r2, #8
  40273e:	d102      	bne.n	402746 <pmc_switch_mck_to_pllack+0x42>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402740:	b12b      	cbz	r3, 40274e <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
  402742:	3b01      	subs	r3, #1
  402744:	e7f7      	b.n	402736 <pmc_switch_mck_to_pllack+0x32>
			return 1;
		}
	}

	return 0;
  402746:	2000      	movs	r0, #0
  402748:	4770      	bx	lr
			return 1;
  40274a:	2001      	movs	r0, #1
  40274c:	4770      	bx	lr
			return 1;
  40274e:	2001      	movs	r0, #1
}
  402750:	4770      	bx	lr
  402752:	bf00      	nop
  402754:	400e0400 	.word	0x400e0400

00402758 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402758:	b9d0      	cbnz	r0, 402790 <pmc_switch_mainck_to_xtal+0x38>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40275a:	4a11      	ldr	r2, [pc, #68]	; (4027a0 <pmc_switch_mainck_to_xtal+0x48>)
  40275c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40275e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402762:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402766:	0209      	lsls	r1, r1, #8
  402768:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40276a:	430b      	orrs	r3, r1
  40276c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402770:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402774:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402776:	4b0a      	ldr	r3, [pc, #40]	; (4027a0 <pmc_switch_mainck_to_xtal+0x48>)
  402778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40277a:	f013 0f01 	tst.w	r3, #1
  40277e:	d0fa      	beq.n	402776 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402780:	4a07      	ldr	r2, [pc, #28]	; (4027a0 <pmc_switch_mainck_to_xtal+0x48>)
  402782:	6a13      	ldr	r3, [r2, #32]
  402784:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40278c:	6213      	str	r3, [r2, #32]
  40278e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402790:	4903      	ldr	r1, [pc, #12]	; (4027a0 <pmc_switch_mainck_to_xtal+0x48>)
  402792:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402794:	4a03      	ldr	r2, [pc, #12]	; (4027a4 <pmc_switch_mainck_to_xtal+0x4c>)
  402796:	401a      	ands	r2, r3
  402798:	4b03      	ldr	r3, [pc, #12]	; (4027a8 <pmc_switch_mainck_to_xtal+0x50>)
  40279a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40279c:	620b      	str	r3, [r1, #32]
  40279e:	4770      	bx	lr
  4027a0:	400e0400 	.word	0x400e0400
  4027a4:	fec8fffc 	.word	0xfec8fffc
  4027a8:	01370002 	.word	0x01370002

004027ac <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4027ac:	4b02      	ldr	r3, [pc, #8]	; (4027b8 <pmc_osc_is_ready_mainck+0xc>)
  4027ae:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4027b0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4027b4:	4770      	bx	lr
  4027b6:	bf00      	nop
  4027b8:	400e0400 	.word	0x400e0400

004027bc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4027bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4027c0:	4b01      	ldr	r3, [pc, #4]	; (4027c8 <pmc_disable_pllack+0xc>)
  4027c2:	629a      	str	r2, [r3, #40]	; 0x28
  4027c4:	4770      	bx	lr
  4027c6:	bf00      	nop
  4027c8:	400e0400 	.word	0x400e0400

004027cc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4027cc:	4b02      	ldr	r3, [pc, #8]	; (4027d8 <pmc_is_locked_pllack+0xc>)
  4027ce:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4027d0:	f000 0002 	and.w	r0, r0, #2
  4027d4:	4770      	bx	lr
  4027d6:	bf00      	nop
  4027d8:	400e0400 	.word	0x400e0400

004027dc <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4027dc:	282f      	cmp	r0, #47	; 0x2f
  4027de:	d81e      	bhi.n	40281e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4027e0:	281f      	cmp	r0, #31
  4027e2:	d80c      	bhi.n	4027fe <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4027e4:	4b11      	ldr	r3, [pc, #68]	; (40282c <pmc_enable_periph_clk+0x50>)
  4027e6:	699a      	ldr	r2, [r3, #24]
  4027e8:	2301      	movs	r3, #1
  4027ea:	4083      	lsls	r3, r0
  4027ec:	4393      	bics	r3, r2
  4027ee:	d018      	beq.n	402822 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4027f0:	2301      	movs	r3, #1
  4027f2:	fa03 f000 	lsl.w	r0, r3, r0
  4027f6:	4b0d      	ldr	r3, [pc, #52]	; (40282c <pmc_enable_periph_clk+0x50>)
  4027f8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4027fa:	2000      	movs	r0, #0
  4027fc:	4770      	bx	lr
		ul_id -= 32;
  4027fe:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402800:	4b0a      	ldr	r3, [pc, #40]	; (40282c <pmc_enable_periph_clk+0x50>)
  402802:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402806:	2301      	movs	r3, #1
  402808:	4083      	lsls	r3, r0
  40280a:	4393      	bics	r3, r2
  40280c:	d00b      	beq.n	402826 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40280e:	2301      	movs	r3, #1
  402810:	fa03 f000 	lsl.w	r0, r3, r0
  402814:	4b05      	ldr	r3, [pc, #20]	; (40282c <pmc_enable_periph_clk+0x50>)
  402816:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40281a:	2000      	movs	r0, #0
  40281c:	4770      	bx	lr
		return 1;
  40281e:	2001      	movs	r0, #1
  402820:	4770      	bx	lr
	return 0;
  402822:	2000      	movs	r0, #0
  402824:	4770      	bx	lr
  402826:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  402828:	4770      	bx	lr
  40282a:	bf00      	nop
  40282c:	400e0400 	.word	0x400e0400

00402830 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402830:	e7fe      	b.n	402830 <Dummy_Handler>
	...

00402834 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402834:	b500      	push	{lr}
  402836:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  402838:	4b1e      	ldr	r3, [pc, #120]	; (4028b4 <Reset_Handler+0x80>)
  40283a:	4a1f      	ldr	r2, [pc, #124]	; (4028b8 <Reset_Handler+0x84>)
  40283c:	429a      	cmp	r2, r3
  40283e:	d009      	beq.n	402854 <Reset_Handler+0x20>
  402840:	4b1c      	ldr	r3, [pc, #112]	; (4028b4 <Reset_Handler+0x80>)
  402842:	4a1d      	ldr	r2, [pc, #116]	; (4028b8 <Reset_Handler+0x84>)
  402844:	e003      	b.n	40284e <Reset_Handler+0x1a>
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  402846:	6811      	ldr	r1, [r2, #0]
  402848:	6019      	str	r1, [r3, #0]
  40284a:	3304      	adds	r3, #4
  40284c:	3204      	adds	r2, #4
		for (; pDest < &_erelocate;) {
  40284e:	491b      	ldr	r1, [pc, #108]	; (4028bc <Reset_Handler+0x88>)
  402850:	428b      	cmp	r3, r1
  402852:	d3f8      	bcc.n	402846 <Reset_Handler+0x12>
			*pDest++ = *pSrc++;
  402854:	4b1a      	ldr	r3, [pc, #104]	; (4028c0 <Reset_Handler+0x8c>)
  402856:	e002      	b.n	40285e <Reset_Handler+0x2a>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
  402858:	2200      	movs	r2, #0
  40285a:	601a      	str	r2, [r3, #0]
  40285c:	3304      	adds	r3, #4
	for (pDest = &_szero; pDest < &_ezero;) {
  40285e:	4a19      	ldr	r2, [pc, #100]	; (4028c4 <Reset_Handler+0x90>)
  402860:	4293      	cmp	r3, r2
  402862:	d3f9      	bcc.n	402858 <Reset_Handler+0x24>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402864:	4a18      	ldr	r2, [pc, #96]	; (4028c8 <Reset_Handler+0x94>)
  402866:	4b19      	ldr	r3, [pc, #100]	; (4028cc <Reset_Handler+0x98>)
  402868:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40286c:	6093      	str	r3, [r2, #8]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40286e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402872:	fab3 f383 	clz	r3, r3
  402876:	095b      	lsrs	r3, r3, #5
  402878:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40287a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40287c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402880:	2200      	movs	r2, #0
  402882:	4b13      	ldr	r3, [pc, #76]	; (4028d0 <Reset_Handler+0x9c>)
  402884:	701a      	strb	r2, [r3, #0]
	return flags;
  402886:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402888:	4a12      	ldr	r2, [pc, #72]	; (4028d4 <Reset_Handler+0xa0>)
  40288a:	6813      	ldr	r3, [r2, #0]
  40288c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402890:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  402892:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402896:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40289a:	b129      	cbz	r1, 4028a8 <Reset_Handler+0x74>
		cpu_irq_enable();
  40289c:	2201      	movs	r2, #1
  40289e:	4b0c      	ldr	r3, [pc, #48]	; (4028d0 <Reset_Handler+0x9c>)
  4028a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4028a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4028a6:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  4028a8:	4b0b      	ldr	r3, [pc, #44]	; (4028d8 <Reset_Handler+0xa4>)
  4028aa:	4798      	blx	r3

	/* Branch to main function */
	main();
  4028ac:	4b0b      	ldr	r3, [pc, #44]	; (4028dc <Reset_Handler+0xa8>)
  4028ae:	4798      	blx	r3
  4028b0:	e7fe      	b.n	4028b0 <Reset_Handler+0x7c>
  4028b2:	bf00      	nop
  4028b4:	20000000 	.word	0x20000000
  4028b8:	004032ec 	.word	0x004032ec
  4028bc:	2000045c 	.word	0x2000045c
  4028c0:	2000045c 	.word	0x2000045c
  4028c4:	20000704 	.word	0x20000704
  4028c8:	e000ed00 	.word	0xe000ed00
  4028cc:	00400000 	.word	0x00400000
  4028d0:	20000004 	.word	0x20000004
  4028d4:	e000ed88 	.word	0xe000ed88
  4028d8:	00402d35 	.word	0x00402d35
  4028dc:	00402ae9 	.word	0x00402ae9

004028e0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4028e0:	4b3c      	ldr	r3, [pc, #240]	; (4029d4 <SystemCoreClockUpdate+0xf4>)
  4028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4028e4:	f003 0303 	and.w	r3, r3, #3
  4028e8:	2b01      	cmp	r3, #1
  4028ea:	d020      	beq.n	40292e <SystemCoreClockUpdate+0x4e>
  4028ec:	b183      	cbz	r3, 402910 <SystemCoreClockUpdate+0x30>
  4028ee:	2b02      	cmp	r3, #2
  4028f0:	d039      	beq.n	402966 <SystemCoreClockUpdate+0x86>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4028f2:	4b38      	ldr	r3, [pc, #224]	; (4029d4 <SystemCoreClockUpdate+0xf4>)
  4028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4028f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4028fa:	2b70      	cmp	r3, #112	; 0x70
  4028fc:	d062      	beq.n	4029c4 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  4028fe:	4b35      	ldr	r3, [pc, #212]	; (4029d4 <SystemCoreClockUpdate+0xf4>)
  402900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402902:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402906:	4934      	ldr	r1, [pc, #208]	; (4029d8 <SystemCoreClockUpdate+0xf8>)
  402908:	680b      	ldr	r3, [r1, #0]
  40290a:	40d3      	lsrs	r3, r2
  40290c:	600b      	str	r3, [r1, #0]
  40290e:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402910:	4b32      	ldr	r3, [pc, #200]	; (4029dc <SystemCoreClockUpdate+0xfc>)
  402912:	695b      	ldr	r3, [r3, #20]
  402914:	f013 0f80 	tst.w	r3, #128	; 0x80
  402918:	d004      	beq.n	402924 <SystemCoreClockUpdate+0x44>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40291a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40291e:	4b2e      	ldr	r3, [pc, #184]	; (4029d8 <SystemCoreClockUpdate+0xf8>)
  402920:	601a      	str	r2, [r3, #0]
  402922:	e7e6      	b.n	4028f2 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402924:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402928:	4b2b      	ldr	r3, [pc, #172]	; (4029d8 <SystemCoreClockUpdate+0xf8>)
  40292a:	601a      	str	r2, [r3, #0]
  40292c:	e7e1      	b.n	4028f2 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40292e:	4b29      	ldr	r3, [pc, #164]	; (4029d4 <SystemCoreClockUpdate+0xf4>)
  402930:	6a1b      	ldr	r3, [r3, #32]
  402932:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402936:	d003      	beq.n	402940 <SystemCoreClockUpdate+0x60>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402938:	4a29      	ldr	r2, [pc, #164]	; (4029e0 <SystemCoreClockUpdate+0x100>)
  40293a:	4b27      	ldr	r3, [pc, #156]	; (4029d8 <SystemCoreClockUpdate+0xf8>)
  40293c:	601a      	str	r2, [r3, #0]
  40293e:	e7d8      	b.n	4028f2 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402940:	4a28      	ldr	r2, [pc, #160]	; (4029e4 <SystemCoreClockUpdate+0x104>)
  402942:	4b25      	ldr	r3, [pc, #148]	; (4029d8 <SystemCoreClockUpdate+0xf8>)
  402944:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402946:	4b23      	ldr	r3, [pc, #140]	; (4029d4 <SystemCoreClockUpdate+0xf4>)
  402948:	6a1b      	ldr	r3, [r3, #32]
  40294a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40294e:	2b10      	cmp	r3, #16
  402950:	d005      	beq.n	40295e <SystemCoreClockUpdate+0x7e>
  402952:	2b20      	cmp	r3, #32
  402954:	d1cd      	bne.n	4028f2 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  402956:	4a22      	ldr	r2, [pc, #136]	; (4029e0 <SystemCoreClockUpdate+0x100>)
  402958:	4b1f      	ldr	r3, [pc, #124]	; (4029d8 <SystemCoreClockUpdate+0xf8>)
  40295a:	601a      	str	r2, [r3, #0]
				break;
  40295c:	e7c9      	b.n	4028f2 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  40295e:	4a22      	ldr	r2, [pc, #136]	; (4029e8 <SystemCoreClockUpdate+0x108>)
  402960:	4b1d      	ldr	r3, [pc, #116]	; (4029d8 <SystemCoreClockUpdate+0xf8>)
  402962:	601a      	str	r2, [r3, #0]
				break;
  402964:	e7c5      	b.n	4028f2 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402966:	4b1b      	ldr	r3, [pc, #108]	; (4029d4 <SystemCoreClockUpdate+0xf4>)
  402968:	6a1b      	ldr	r3, [r3, #32]
  40296a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40296e:	d016      	beq.n	40299e <SystemCoreClockUpdate+0xbe>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402970:	4a1b      	ldr	r2, [pc, #108]	; (4029e0 <SystemCoreClockUpdate+0x100>)
  402972:	4b19      	ldr	r3, [pc, #100]	; (4029d8 <SystemCoreClockUpdate+0xf8>)
  402974:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  402976:	4b17      	ldr	r3, [pc, #92]	; (4029d4 <SystemCoreClockUpdate+0xf4>)
  402978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40297a:	f003 0303 	and.w	r3, r3, #3
  40297e:	2b02      	cmp	r3, #2
  402980:	d1b7      	bne.n	4028f2 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402982:	4814      	ldr	r0, [pc, #80]	; (4029d4 <SystemCoreClockUpdate+0xf4>)
  402984:	6a82      	ldr	r2, [r0, #40]	; 0x28
  402986:	f3c2 420a 	ubfx	r2, r2, #16, #11
  40298a:	4913      	ldr	r1, [pc, #76]	; (4029d8 <SystemCoreClockUpdate+0xf8>)
  40298c:	680b      	ldr	r3, [r1, #0]
  40298e:	fb02 3303 	mla	r3, r2, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402992:	6a82      	ldr	r2, [r0, #40]	; 0x28
  402994:	b2d2      	uxtb	r2, r2
  402996:	fbb3 f3f2 	udiv	r3, r3, r2
  40299a:	600b      	str	r3, [r1, #0]
  40299c:	e7a9      	b.n	4028f2 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40299e:	4a11      	ldr	r2, [pc, #68]	; (4029e4 <SystemCoreClockUpdate+0x104>)
  4029a0:	4b0d      	ldr	r3, [pc, #52]	; (4029d8 <SystemCoreClockUpdate+0xf8>)
  4029a2:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4029a4:	4b0b      	ldr	r3, [pc, #44]	; (4029d4 <SystemCoreClockUpdate+0xf4>)
  4029a6:	6a1b      	ldr	r3, [r3, #32]
  4029a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4029ac:	2b10      	cmp	r3, #16
  4029ae:	d005      	beq.n	4029bc <SystemCoreClockUpdate+0xdc>
  4029b0:	2b20      	cmp	r3, #32
  4029b2:	d1e0      	bne.n	402976 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
  4029b4:	4a0a      	ldr	r2, [pc, #40]	; (4029e0 <SystemCoreClockUpdate+0x100>)
  4029b6:	4b08      	ldr	r3, [pc, #32]	; (4029d8 <SystemCoreClockUpdate+0xf8>)
  4029b8:	601a      	str	r2, [r3, #0]
				break;
  4029ba:	e7dc      	b.n	402976 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
  4029bc:	4a0a      	ldr	r2, [pc, #40]	; (4029e8 <SystemCoreClockUpdate+0x108>)
  4029be:	4b06      	ldr	r3, [pc, #24]	; (4029d8 <SystemCoreClockUpdate+0xf8>)
  4029c0:	601a      	str	r2, [r3, #0]
				break;
  4029c2:	e7d8      	b.n	402976 <SystemCoreClockUpdate+0x96>
		SystemCoreClock /= 3U;
  4029c4:	4a04      	ldr	r2, [pc, #16]	; (4029d8 <SystemCoreClockUpdate+0xf8>)
  4029c6:	6813      	ldr	r3, [r2, #0]
  4029c8:	4908      	ldr	r1, [pc, #32]	; (4029ec <SystemCoreClockUpdate+0x10c>)
  4029ca:	fba1 1303 	umull	r1, r3, r1, r3
  4029ce:	085b      	lsrs	r3, r3, #1
  4029d0:	6013      	str	r3, [r2, #0]
  4029d2:	4770      	bx	lr
  4029d4:	400e0400 	.word	0x400e0400
  4029d8:	20000008 	.word	0x20000008
  4029dc:	400e1810 	.word	0x400e1810
  4029e0:	00b71b00 	.word	0x00b71b00
  4029e4:	003d0900 	.word	0x003d0900
  4029e8:	007a1200 	.word	0x007a1200
  4029ec:	aaaaaaab 	.word	0xaaaaaaab

004029f0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4029f0:	4b14      	ldr	r3, [pc, #80]	; (402a44 <system_init_flash+0x54>)
  4029f2:	4298      	cmp	r0, r3
  4029f4:	d90f      	bls.n	402a16 <system_init_flash+0x26>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4029f6:	4b14      	ldr	r3, [pc, #80]	; (402a48 <system_init_flash+0x58>)
  4029f8:	4298      	cmp	r0, r3
  4029fa:	d911      	bls.n	402a20 <system_init_flash+0x30>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4029fc:	4b13      	ldr	r3, [pc, #76]	; (402a4c <system_init_flash+0x5c>)
  4029fe:	4298      	cmp	r0, r3
  402a00:	d912      	bls.n	402a28 <system_init_flash+0x38>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402a02:	4b13      	ldr	r3, [pc, #76]	; (402a50 <system_init_flash+0x60>)
  402a04:	4298      	cmp	r0, r3
  402a06:	d913      	bls.n	402a30 <system_init_flash+0x40>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402a08:	4b12      	ldr	r3, [pc, #72]	; (402a54 <system_init_flash+0x64>)
  402a0a:	4298      	cmp	r0, r3
  402a0c:	d914      	bls.n	402a38 <system_init_flash+0x48>
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402a0e:	4a12      	ldr	r2, [pc, #72]	; (402a58 <system_init_flash+0x68>)
  402a10:	4b12      	ldr	r3, [pc, #72]	; (402a5c <system_init_flash+0x6c>)
  402a12:	601a      	str	r2, [r3, #0]
  402a14:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402a16:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402a1a:	4b10      	ldr	r3, [pc, #64]	; (402a5c <system_init_flash+0x6c>)
  402a1c:	601a      	str	r2, [r3, #0]
  402a1e:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402a20:	4a0f      	ldr	r2, [pc, #60]	; (402a60 <system_init_flash+0x70>)
  402a22:	4b0e      	ldr	r3, [pc, #56]	; (402a5c <system_init_flash+0x6c>)
  402a24:	601a      	str	r2, [r3, #0]
  402a26:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402a28:	4a0e      	ldr	r2, [pc, #56]	; (402a64 <system_init_flash+0x74>)
  402a2a:	4b0c      	ldr	r3, [pc, #48]	; (402a5c <system_init_flash+0x6c>)
  402a2c:	601a      	str	r2, [r3, #0]
  402a2e:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402a30:	4a0d      	ldr	r2, [pc, #52]	; (402a68 <system_init_flash+0x78>)
  402a32:	4b0a      	ldr	r3, [pc, #40]	; (402a5c <system_init_flash+0x6c>)
  402a34:	601a      	str	r2, [r3, #0]
  402a36:	4770      	bx	lr
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402a38:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402a3c:	4b07      	ldr	r3, [pc, #28]	; (402a5c <system_init_flash+0x6c>)
  402a3e:	601a      	str	r2, [r3, #0]
  402a40:	4770      	bx	lr
  402a42:	bf00      	nop
  402a44:	01312cff 	.word	0x01312cff
  402a48:	026259ff 	.word	0x026259ff
  402a4c:	039386ff 	.word	0x039386ff
  402a50:	04c4b3ff 	.word	0x04c4b3ff
  402a54:	05f5e0ff 	.word	0x05f5e0ff
  402a58:	04000500 	.word	0x04000500
  402a5c:	400e0a00 	.word	0x400e0a00
  402a60:	04000100 	.word	0x04000100
  402a64:	04000200 	.word	0x04000200
  402a68:	04000300 	.word	0x04000300

00402a6c <prvInitialiseHeap>:
	while(true) {}
}


static void prvInitialiseHeap( )
{
  402a6c:	b500      	push	{lr}
  402a6e:	b089      	sub	sp, #36	; 0x24
       uint32_t ulHeapSize;
       uint8_t *pucHeapStart, *pucHeapEnd;

       pucHeapStart = ( uint8_t * ) ( ( ( ( uint32_t ) &mainHEAP_START ) + 7 ) & ~0x07ul );
  402a70:	4b10      	ldr	r3, [pc, #64]	; (402ab4 <prvInitialiseHeap+0x48>)
  402a72:	1dda      	adds	r2, r3, #7
  402a74:	f022 0207 	bic.w	r2, r2, #7
       pucHeapEnd = ( uint8_t * ) ( mainRAM_START + mainRAM_LENGTH );
       ulHeapSize = ( uint32_t ) ( ( uint32_t ) pucHeapEnd - ( uint32_t ) &mainHEAP_START );
  402a78:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
  402a7c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
       ulHeapSize &= ~0x07ul;
  402a80:	f023 0307 	bic.w	r3, r3, #7
       ulHeapSize -= 1024;
  402a84:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
       HeapRegion_t xHeapRegions[] = {
  402a88:	9200      	str	r2, [sp, #0]
  402a8a:	9301      	str	r3, [sp, #4]
  402a8c:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  402a90:	9302      	str	r3, [sp, #8]
  402a92:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  402a96:	9303      	str	r3, [sp, #12]
  402a98:	f04f 42c6 	mov.w	r2, #1660944384	; 0x63000000
  402a9c:	9204      	str	r2, [sp, #16]
  402a9e:	9305      	str	r3, [sp, #20]
  402aa0:	2300      	movs	r3, #0
  402aa2:	9306      	str	r3, [sp, #24]
  402aa4:	9307      	str	r3, [sp, #28]
              { ( unsigned char *) SRAM_BASE_ADDRESS, mainEXTERNAL_SRAM_SIZE },
              { ( unsigned char *) SRAM_BASE_ADDRESS_2ND, mainEXTERNAL_SRAM_SIZE },
              { NULL, 0 }
       };

       vPortDefineHeapRegions( xHeapRegions );
  402aa6:	4668      	mov	r0, sp
  402aa8:	4b03      	ldr	r3, [pc, #12]	; (402ab8 <prvInitialiseHeap+0x4c>)
  402aaa:	4798      	blx	r3
}
  402aac:	b009      	add	sp, #36	; 0x24
  402aae:	f85d fb04 	ldr.w	pc, [sp], #4
  402ab2:	bf00      	nop
  402ab4:	20003708 	.word	0x20003708
  402ab8:	00400749 	.word	0x00400749

00402abc <prvMiscInitialisation>:
static void prvMiscInitialisation( void )
{
  402abc:	b510      	push	{r4, lr}
       /* Initialize the SAM system */
       sysclk_init();
  402abe:	4b06      	ldr	r3, [pc, #24]	; (402ad8 <prvMiscInitialisation+0x1c>)
  402ac0:	4798      	blx	r3
       board_init();
  402ac2:	4b06      	ldr	r3, [pc, #24]	; (402adc <prvMiscInitialisation+0x20>)
  402ac4:	4798      	blx	r3
       prvInitialiseHeap();
  402ac6:	4b06      	ldr	r3, [pc, #24]	; (402ae0 <prvMiscInitialisation+0x24>)
  402ac8:	4798      	blx	r3
       pmc_enable_periph_clk(ID_PIOA);
  402aca:	2009      	movs	r0, #9
  402acc:	4c05      	ldr	r4, [pc, #20]	; (402ae4 <prvMiscInitialisation+0x28>)
  402ace:	47a0      	blx	r4
       pmc_enable_periph_clk(ID_PIOB);
  402ad0:	200a      	movs	r0, #10
  402ad2:	47a0      	blx	r4
  402ad4:	bd10      	pop	{r4, pc}
  402ad6:	bf00      	nop
  402ad8:	00402629 	.word	0x00402629
  402adc:	00402691 	.word	0x00402691
  402ae0:	00402a6d 	.word	0x00402a6d
  402ae4:	004027dd 	.word	0x004027dd

00402ae8 <main>:
{
  402ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402aec:	b083      	sub	sp, #12
	prvMiscInitialisation();
  402aee:	4b5a      	ldr	r3, [pc, #360]	; (402c58 <main+0x170>)
  402af0:	4798      	blx	r3
	intitializeLEDDriver();
  402af2:	4b5a      	ldr	r3, [pc, #360]	; (402c5c <main+0x174>)
  402af4:	4798      	blx	r3
	initializeButtonDriver();
  402af6:	4b5a      	ldr	r3, [pc, #360]	; (402c60 <main+0x178>)
  402af8:	4798      	blx	r3
	initUART(EDBG_UART);
  402afa:	4c5a      	ldr	r4, [pc, #360]	; (402c64 <main+0x17c>)
  402afc:	4620      	mov	r0, r4
  402afe:	4b5a      	ldr	r3, [pc, #360]	; (402c68 <main+0x180>)
  402b00:	4798      	blx	r3
	UARTPutStr(EDBG_UART, startText, 0);
  402b02:	2200      	movs	r2, #0
  402b04:	4959      	ldr	r1, [pc, #356]	; (402c6c <main+0x184>)
  402b06:	4620      	mov	r0, r4
  402b08:	4b59      	ldr	r3, [pc, #356]	; (402c70 <main+0x188>)
  402b0a:	4798      	blx	r3
	ledQ[0] = xQueueCreate(5, sizeof(timeDelay));
  402b0c:	2200      	movs	r2, #0
  402b0e:	2101      	movs	r1, #1
  402b10:	2005      	movs	r0, #5
  402b12:	4c58      	ldr	r4, [pc, #352]	; (402c74 <main+0x18c>)
  402b14:	47a0      	blx	r4
  402b16:	4d58      	ldr	r5, [pc, #352]	; (402c78 <main+0x190>)
  402b18:	6028      	str	r0, [r5, #0]
	ledQ[1] = xQueueCreate(5, sizeof(timeDelay));
  402b1a:	2200      	movs	r2, #0
  402b1c:	2101      	movs	r1, #1
  402b1e:	2005      	movs	r0, #5
  402b20:	47a0      	blx	r4
  402b22:	6068      	str	r0, [r5, #4]
	ledQ[2] = xQueueCreate(5, sizeof(timeDelay));
  402b24:	2200      	movs	r2, #0
  402b26:	2101      	movs	r1, #1
  402b28:	2005      	movs	r0, #5
  402b2a:	47a0      	blx	r4
  402b2c:	60a8      	str	r0, [r5, #8]
	uartQ = xQueueCreate(5, sizeof(char[50]));
  402b2e:	2200      	movs	r2, #0
  402b30:	2132      	movs	r1, #50	; 0x32
  402b32:	2005      	movs	r0, #5
  402b34:	47a0      	blx	r4
  402b36:	4b51      	ldr	r3, [pc, #324]	; (402c7c <main+0x194>)
  402b38:	6018      	str	r0, [r3, #0]
	controlLED1.ledQ = ledQ[0];
  402b3a:	f8d5 c000 	ldr.w	ip, [r5]
  402b3e:	f8df a190 	ldr.w	sl, [pc, #400]	; 402cd0 <main+0x1e8>
  402b42:	f8ca c000 	str.w	ip, [sl]
	controlLED1.uartQ = uartQ;
  402b46:	f8ca 0004 	str.w	r0, [sl, #4]
	controlLED1.ledHandle = ledHandle[0];
  402b4a:	4e4d      	ldr	r6, [pc, #308]	; (402c80 <main+0x198>)
  402b4c:	6833      	ldr	r3, [r6, #0]
  402b4e:	f8ca 3008 	str.w	r3, [sl, #8]
	controlLED1.nextTask = &controlHandle[1];
  402b52:	4f4c      	ldr	r7, [pc, #304]	; (402c84 <main+0x19c>)
  402b54:	1d3b      	adds	r3, r7, #4
  402b56:	f8ca 300c 	str.w	r3, [sl, #12]
	controlLED1.ledNum = LED1;
  402b5a:	2401      	movs	r4, #1
  402b5c:	f88a 4010 	strb.w	r4, [sl, #16]
	controlLED2.ledQ = ledQ[1];
  402b60:	f8d5 e004 	ldr.w	lr, [r5, #4]
  402b64:	f8df 916c 	ldr.w	r9, [pc, #364]	; 402cd4 <main+0x1ec>
  402b68:	f8c9 e000 	str.w	lr, [r9]
	controlLED2.uartQ = uartQ;
  402b6c:	f8c9 0004 	str.w	r0, [r9, #4]
	controlLED2.ledHandle = ledHandle[1];
  402b70:	6873      	ldr	r3, [r6, #4]
  402b72:	f8c9 3008 	str.w	r3, [r9, #8]
	controlLED2.nextTask = &controlHandle[2];
  402b76:	f107 0308 	add.w	r3, r7, #8
  402b7a:	f8c9 300c 	str.w	r3, [r9, #12]
	controlLED2.ledNum = LED2;
  402b7e:	2202      	movs	r2, #2
  402b80:	f889 2010 	strb.w	r2, [r9, #16]
	controlLED3.ledQ = ledQ[2];
  402b84:	68ab      	ldr	r3, [r5, #8]
  402b86:	f8df 8150 	ldr.w	r8, [pc, #336]	; 402cd8 <main+0x1f0>
  402b8a:	f8c8 3000 	str.w	r3, [r8]
	controlLED3.uartQ = uartQ;
  402b8e:	f8c8 0004 	str.w	r0, [r8, #4]
	controlLED3.ledHandle = ledHandle[2];
  402b92:	68b1      	ldr	r1, [r6, #8]
  402b94:	f8c8 1008 	str.w	r1, [r8, #8]
	controlLED3.nextTask = &controlHandle[0];	
  402b98:	f8c8 700c 	str.w	r7, [r8, #12]
	controlLED3.ledNum = LED3;
  402b9c:	2103      	movs	r1, #3
  402b9e:	f888 1010 	strb.w	r1, [r8, #16]
	LED1Struct.ledQ = ledQ[0];
  402ba2:	4d39      	ldr	r5, [pc, #228]	; (402c88 <main+0x1a0>)
  402ba4:	f8c5 c000 	str.w	ip, [r5]
	LED1Struct.uartQ = uartQ;
  402ba8:	6068      	str	r0, [r5, #4]
	LED1Struct.ledNum = LED1;
  402baa:	722c      	strb	r4, [r5, #8]
	LED2Struct.ledQ = ledQ[1];
  402bac:	4d37      	ldr	r5, [pc, #220]	; (402c8c <main+0x1a4>)
  402bae:	f8c5 e000 	str.w	lr, [r5]
	LED2Struct.uartQ = uartQ;
  402bb2:	6068      	str	r0, [r5, #4]
	LED2Struct.ledNum = LED2;
  402bb4:	722a      	strb	r2, [r5, #8]
	LED3Struct.ledQ = ledQ[2];
  402bb6:	f8df b124 	ldr.w	fp, [pc, #292]	; 402cdc <main+0x1f4>
  402bba:	f8cb 3000 	str.w	r3, [fp]
	LED3Struct.uartQ = uartQ;
  402bbe:	f8cb 0004 	str.w	r0, [fp, #4]
	LED3Struct.ledNum = LED3;
  402bc2:	f88b 1008 	strb.w	r1, [fp, #8]
	xTaskCreate(taskHeartBeat, "LED0 Heart Beat", configMINIMAL_STACK_SIZE, (void *) 0, 1, NULL);
  402bc6:	2300      	movs	r3, #0
  402bc8:	9301      	str	r3, [sp, #4]
  402bca:	9400      	str	r4, [sp, #0]
  402bcc:	2282      	movs	r2, #130	; 0x82
  402bce:	4930      	ldr	r1, [pc, #192]	; (402c90 <main+0x1a8>)
  402bd0:	4830      	ldr	r0, [pc, #192]	; (402c94 <main+0x1ac>)
  402bd2:	4d31      	ldr	r5, [pc, #196]	; (402c98 <main+0x1b0>)
  402bd4:	47a8      	blx	r5
	xTaskCreate(taskUART, "Main UART Task", configMINIMAL_STACK_SIZE, &uartHandle, 1, NULL);
  402bd6:	2300      	movs	r3, #0
  402bd8:	9301      	str	r3, [sp, #4]
  402bda:	9400      	str	r4, [sp, #0]
  402bdc:	4b2f      	ldr	r3, [pc, #188]	; (402c9c <main+0x1b4>)
  402bde:	2282      	movs	r2, #130	; 0x82
  402be0:	492f      	ldr	r1, [pc, #188]	; (402ca0 <main+0x1b8>)
  402be2:	4830      	ldr	r0, [pc, #192]	; (402ca4 <main+0x1bc>)
  402be4:	47a8      	blx	r5
	xTaskCreate(taskLED, "LED 1 Task", configMINIMAL_STACK_SIZE, (void *) &LED1Struct, 1, &ledHandle[0]);
  402be6:	9601      	str	r6, [sp, #4]
  402be8:	9400      	str	r4, [sp, #0]
  402bea:	4b27      	ldr	r3, [pc, #156]	; (402c88 <main+0x1a0>)
  402bec:	2282      	movs	r2, #130	; 0x82
  402bee:	492e      	ldr	r1, [pc, #184]	; (402ca8 <main+0x1c0>)
  402bf0:	482e      	ldr	r0, [pc, #184]	; (402cac <main+0x1c4>)
  402bf2:	47a8      	blx	r5
	xTaskCreate(taskLED, "LED 2 Task", configMINIMAL_STACK_SIZE, (void *) &LED2Struct, 1, &ledHandle[1]);
  402bf4:	1d33      	adds	r3, r6, #4
  402bf6:	9301      	str	r3, [sp, #4]
  402bf8:	9400      	str	r4, [sp, #0]
  402bfa:	4b24      	ldr	r3, [pc, #144]	; (402c8c <main+0x1a4>)
  402bfc:	2282      	movs	r2, #130	; 0x82
  402bfe:	492c      	ldr	r1, [pc, #176]	; (402cb0 <main+0x1c8>)
  402c00:	482a      	ldr	r0, [pc, #168]	; (402cac <main+0x1c4>)
  402c02:	47a8      	blx	r5
	xTaskCreate(taskLED, "LED 3 Task", configMINIMAL_STACK_SIZE, (void *) &LED3Struct, 1, &ledHandle[2]);
  402c04:	3608      	adds	r6, #8
  402c06:	9601      	str	r6, [sp, #4]
  402c08:	9400      	str	r4, [sp, #0]
  402c0a:	465b      	mov	r3, fp
  402c0c:	2282      	movs	r2, #130	; 0x82
  402c0e:	4929      	ldr	r1, [pc, #164]	; (402cb4 <main+0x1cc>)
  402c10:	4826      	ldr	r0, [pc, #152]	; (402cac <main+0x1c4>)
  402c12:	47a8      	blx	r5
	xTaskCreate(taskSystemControl, "Main Control Task for LED1", configMINIMAL_STACK_SIZE, (void *) &controlLED1, 1, &controlHandle[0]);
  402c14:	4e28      	ldr	r6, [pc, #160]	; (402cb8 <main+0x1d0>)
  402c16:	9701      	str	r7, [sp, #4]
  402c18:	9400      	str	r4, [sp, #0]
  402c1a:	4653      	mov	r3, sl
  402c1c:	2282      	movs	r2, #130	; 0x82
  402c1e:	4927      	ldr	r1, [pc, #156]	; (402cbc <main+0x1d4>)
  402c20:	4630      	mov	r0, r6
  402c22:	47a8      	blx	r5
	xTaskCreate(taskSystemControl, "Main Control Task for LED2", configMINIMAL_STACK_SIZE, (void *) &controlLED2, 1, &controlHandle[1]);
  402c24:	1d3b      	adds	r3, r7, #4
  402c26:	9301      	str	r3, [sp, #4]
  402c28:	9400      	str	r4, [sp, #0]
  402c2a:	464b      	mov	r3, r9
  402c2c:	2282      	movs	r2, #130	; 0x82
  402c2e:	4924      	ldr	r1, [pc, #144]	; (402cc0 <main+0x1d8>)
  402c30:	4630      	mov	r0, r6
  402c32:	47a8      	blx	r5
	xTaskCreate(taskSystemControl, "Main Control Task for LED3", configMINIMAL_STACK_SIZE, (void *) &controlLED3, 1, &controlHandle[2]);
  402c34:	f107 0308 	add.w	r3, r7, #8
  402c38:	9301      	str	r3, [sp, #4]
  402c3a:	9400      	str	r4, [sp, #0]
  402c3c:	4643      	mov	r3, r8
  402c3e:	2282      	movs	r2, #130	; 0x82
  402c40:	4920      	ldr	r1, [pc, #128]	; (402cc4 <main+0x1dc>)
  402c42:	4630      	mov	r0, r6
  402c44:	47a8      	blx	r5
	vTaskSuspend(controlHandle[1]);
  402c46:	6878      	ldr	r0, [r7, #4]
  402c48:	4c1f      	ldr	r4, [pc, #124]	; (402cc8 <main+0x1e0>)
  402c4a:	47a0      	blx	r4
	vTaskSuspend(controlHandle[2]);
  402c4c:	68b8      	ldr	r0, [r7, #8]
  402c4e:	47a0      	blx	r4
	vTaskStartScheduler();
  402c50:	4b1e      	ldr	r3, [pc, #120]	; (402ccc <main+0x1e4>)
  402c52:	4798      	blx	r3
  402c54:	e7fe      	b.n	402c54 <main+0x16c>
  402c56:	bf00      	nop
  402c58:	00402abd 	.word	0x00402abd
  402c5c:	0040219d 	.word	0x0040219d
  402c60:	004022cd 	.word	0x004022cd
  402c64:	400e0600 	.word	0x400e0600
  402c68:	004025a9 	.word	0x004025a9
  402c6c:	00403134 	.word	0x00403134
  402c70:	0040260d 	.word	0x0040260d
  402c74:	00400ae5 	.word	0x00400ae5
  402c78:	2000062c 	.word	0x2000062c
  402c7c:	2000063c 	.word	0x2000063c
  402c80:	20000620 	.word	0x20000620
  402c84:	20000614 	.word	0x20000614
  402c88:	20000694 	.word	0x20000694
  402c8c:	200006b4 	.word	0x200006b4
  402c90:	00403144 	.word	0x00403144
  402c94:	00402449 	.word	0x00402449
  402c98:	00401409 	.word	0x00401409
  402c9c:	20000638 	.word	0x20000638
  402ca0:	00403154 	.word	0x00403154
  402ca4:	0040256d 	.word	0x0040256d
  402ca8:	00403164 	.word	0x00403164
  402cac:	00402465 	.word	0x00402465
  402cb0:	00403170 	.word	0x00403170
  402cb4:	0040317c 	.word	0x0040317c
  402cb8:	00402381 	.word	0x00402381
  402cbc:	00403188 	.word	0x00403188
  402cc0:	004031a4 	.word	0x004031a4
  402cc4:	004031c0 	.word	0x004031c0
  402cc8:	00401935 	.word	0x00401935
  402ccc:	0040151d 	.word	0x0040151d
  402cd0:	200006a0 	.word	0x200006a0
  402cd4:	20000680 	.word	0x20000680
  402cd8:	200006c0 	.word	0x200006c0
  402cdc:	200006d4 	.word	0x200006d4

00402ce0 <vAssertCalled>:
}

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
  402ce0:	b082      	sub	sp, #8
       volatile uint32_t ulBlockVariable = 0UL;
  402ce2:	2300      	movs	r3, #0
  402ce4:	9301      	str	r3, [sp, #4]
	__asm volatile
  402ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
  402cea:	f383 8811 	msr	BASEPRI, r3
  402cee:	f3bf 8f6f 	isb	sy
  402cf2:	f3bf 8f4f 	dsb	sy
  402cf6:	e000      	b.n	402cfa <vAssertCalled+0x1a>
       this function to be exited. */
       taskDISABLE_INTERRUPTS();
       {
              while( ulBlockVariable == 0UL )
              {
                     __asm volatile( "NOP" );
  402cf8:	bf00      	nop
              while( ulBlockVariable == 0UL )
  402cfa:	9b01      	ldr	r3, [sp, #4]
  402cfc:	2b00      	cmp	r3, #0
  402cfe:	d0fb      	beq.n	402cf8 <vAssertCalled+0x18>
	__asm volatile
  402d00:	2300      	movs	r3, #0
  402d02:	f383 8811 	msr	BASEPRI, r3
              }
       }
       taskENABLE_INTERRUPTS();
}
  402d06:	b002      	add	sp, #8
  402d08:	4770      	bx	lr
	...

00402d0c <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
  402d0c:	b508      	push	{r3, lr}
       /* Called if a call to pvPortMalloc() fails because there is insufficient
       free memory available in the FreeRTOS heap.  pvPortMalloc() is called
       internally by FreeRTOS API functions that create tasks, queues, software
       timers, and semaphores.  The size of the FreeRTOS heap is set by the
       configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
       vAssertCalled( __FILE__, __LINE__ );
  402d0e:	21db      	movs	r1, #219	; 0xdb
  402d10:	4801      	ldr	r0, [pc, #4]	; (402d18 <vApplicationMallocFailedHook+0xc>)
  402d12:	4b02      	ldr	r3, [pc, #8]	; (402d1c <vApplicationMallocFailedHook+0x10>)
  402d14:	4798      	blx	r3
  402d16:	bd08      	pop	{r3, pc}
  402d18:	004032b4 	.word	0x004032b4
  402d1c:	00402ce1 	.word	0x00402ce1

00402d20 <vApplicationStackOverflowHook>:
	__asm volatile
  402d20:	f04f 0350 	mov.w	r3, #80	; 0x50
  402d24:	f383 8811 	msr	BASEPRI, r3
  402d28:	f3bf 8f6f 	isb	sy
  402d2c:	f3bf 8f4f 	dsb	sy
  402d30:	e7fe      	b.n	402d30 <vApplicationStackOverflowHook+0x10>
	...

00402d34 <__libc_init_array>:
  402d34:	b570      	push	{r4, r5, r6, lr}
  402d36:	4e0f      	ldr	r6, [pc, #60]	; (402d74 <__libc_init_array+0x40>)
  402d38:	4d0f      	ldr	r5, [pc, #60]	; (402d78 <__libc_init_array+0x44>)
  402d3a:	1b76      	subs	r6, r6, r5
  402d3c:	10b6      	asrs	r6, r6, #2
  402d3e:	bf18      	it	ne
  402d40:	2400      	movne	r4, #0
  402d42:	d005      	beq.n	402d50 <__libc_init_array+0x1c>
  402d44:	3401      	adds	r4, #1
  402d46:	f855 3b04 	ldr.w	r3, [r5], #4
  402d4a:	4798      	blx	r3
  402d4c:	42a6      	cmp	r6, r4
  402d4e:	d1f9      	bne.n	402d44 <__libc_init_array+0x10>
  402d50:	4e0a      	ldr	r6, [pc, #40]	; (402d7c <__libc_init_array+0x48>)
  402d52:	4d0b      	ldr	r5, [pc, #44]	; (402d80 <__libc_init_array+0x4c>)
  402d54:	1b76      	subs	r6, r6, r5
  402d56:	f000 fab7 	bl	4032c8 <_init>
  402d5a:	10b6      	asrs	r6, r6, #2
  402d5c:	bf18      	it	ne
  402d5e:	2400      	movne	r4, #0
  402d60:	d006      	beq.n	402d70 <__libc_init_array+0x3c>
  402d62:	3401      	adds	r4, #1
  402d64:	f855 3b04 	ldr.w	r3, [r5], #4
  402d68:	4798      	blx	r3
  402d6a:	42a6      	cmp	r6, r4
  402d6c:	d1f9      	bne.n	402d62 <__libc_init_array+0x2e>
  402d6e:	bd70      	pop	{r4, r5, r6, pc}
  402d70:	bd70      	pop	{r4, r5, r6, pc}
  402d72:	bf00      	nop
  402d74:	004032d4 	.word	0x004032d4
  402d78:	004032d4 	.word	0x004032d4
  402d7c:	004032dc 	.word	0x004032dc
  402d80:	004032d4 	.word	0x004032d4

00402d84 <memcpy>:
  402d84:	4684      	mov	ip, r0
  402d86:	ea41 0300 	orr.w	r3, r1, r0
  402d8a:	f013 0303 	ands.w	r3, r3, #3
  402d8e:	d16d      	bne.n	402e6c <memcpy+0xe8>
  402d90:	3a40      	subs	r2, #64	; 0x40
  402d92:	d341      	bcc.n	402e18 <memcpy+0x94>
  402d94:	f851 3b04 	ldr.w	r3, [r1], #4
  402d98:	f840 3b04 	str.w	r3, [r0], #4
  402d9c:	f851 3b04 	ldr.w	r3, [r1], #4
  402da0:	f840 3b04 	str.w	r3, [r0], #4
  402da4:	f851 3b04 	ldr.w	r3, [r1], #4
  402da8:	f840 3b04 	str.w	r3, [r0], #4
  402dac:	f851 3b04 	ldr.w	r3, [r1], #4
  402db0:	f840 3b04 	str.w	r3, [r0], #4
  402db4:	f851 3b04 	ldr.w	r3, [r1], #4
  402db8:	f840 3b04 	str.w	r3, [r0], #4
  402dbc:	f851 3b04 	ldr.w	r3, [r1], #4
  402dc0:	f840 3b04 	str.w	r3, [r0], #4
  402dc4:	f851 3b04 	ldr.w	r3, [r1], #4
  402dc8:	f840 3b04 	str.w	r3, [r0], #4
  402dcc:	f851 3b04 	ldr.w	r3, [r1], #4
  402dd0:	f840 3b04 	str.w	r3, [r0], #4
  402dd4:	f851 3b04 	ldr.w	r3, [r1], #4
  402dd8:	f840 3b04 	str.w	r3, [r0], #4
  402ddc:	f851 3b04 	ldr.w	r3, [r1], #4
  402de0:	f840 3b04 	str.w	r3, [r0], #4
  402de4:	f851 3b04 	ldr.w	r3, [r1], #4
  402de8:	f840 3b04 	str.w	r3, [r0], #4
  402dec:	f851 3b04 	ldr.w	r3, [r1], #4
  402df0:	f840 3b04 	str.w	r3, [r0], #4
  402df4:	f851 3b04 	ldr.w	r3, [r1], #4
  402df8:	f840 3b04 	str.w	r3, [r0], #4
  402dfc:	f851 3b04 	ldr.w	r3, [r1], #4
  402e00:	f840 3b04 	str.w	r3, [r0], #4
  402e04:	f851 3b04 	ldr.w	r3, [r1], #4
  402e08:	f840 3b04 	str.w	r3, [r0], #4
  402e0c:	f851 3b04 	ldr.w	r3, [r1], #4
  402e10:	f840 3b04 	str.w	r3, [r0], #4
  402e14:	3a40      	subs	r2, #64	; 0x40
  402e16:	d2bd      	bcs.n	402d94 <memcpy+0x10>
  402e18:	3230      	adds	r2, #48	; 0x30
  402e1a:	d311      	bcc.n	402e40 <memcpy+0xbc>
  402e1c:	f851 3b04 	ldr.w	r3, [r1], #4
  402e20:	f840 3b04 	str.w	r3, [r0], #4
  402e24:	f851 3b04 	ldr.w	r3, [r1], #4
  402e28:	f840 3b04 	str.w	r3, [r0], #4
  402e2c:	f851 3b04 	ldr.w	r3, [r1], #4
  402e30:	f840 3b04 	str.w	r3, [r0], #4
  402e34:	f851 3b04 	ldr.w	r3, [r1], #4
  402e38:	f840 3b04 	str.w	r3, [r0], #4
  402e3c:	3a10      	subs	r2, #16
  402e3e:	d2ed      	bcs.n	402e1c <memcpy+0x98>
  402e40:	320c      	adds	r2, #12
  402e42:	d305      	bcc.n	402e50 <memcpy+0xcc>
  402e44:	f851 3b04 	ldr.w	r3, [r1], #4
  402e48:	f840 3b04 	str.w	r3, [r0], #4
  402e4c:	3a04      	subs	r2, #4
  402e4e:	d2f9      	bcs.n	402e44 <memcpy+0xc0>
  402e50:	3204      	adds	r2, #4
  402e52:	d008      	beq.n	402e66 <memcpy+0xe2>
  402e54:	07d2      	lsls	r2, r2, #31
  402e56:	bf1c      	itt	ne
  402e58:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402e5c:	f800 3b01 	strbne.w	r3, [r0], #1
  402e60:	d301      	bcc.n	402e66 <memcpy+0xe2>
  402e62:	880b      	ldrh	r3, [r1, #0]
  402e64:	8003      	strh	r3, [r0, #0]
  402e66:	4660      	mov	r0, ip
  402e68:	4770      	bx	lr
  402e6a:	bf00      	nop
  402e6c:	2a08      	cmp	r2, #8
  402e6e:	d313      	bcc.n	402e98 <memcpy+0x114>
  402e70:	078b      	lsls	r3, r1, #30
  402e72:	d08d      	beq.n	402d90 <memcpy+0xc>
  402e74:	f010 0303 	ands.w	r3, r0, #3
  402e78:	d08a      	beq.n	402d90 <memcpy+0xc>
  402e7a:	f1c3 0304 	rsb	r3, r3, #4
  402e7e:	1ad2      	subs	r2, r2, r3
  402e80:	07db      	lsls	r3, r3, #31
  402e82:	bf1c      	itt	ne
  402e84:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402e88:	f800 3b01 	strbne.w	r3, [r0], #1
  402e8c:	d380      	bcc.n	402d90 <memcpy+0xc>
  402e8e:	f831 3b02 	ldrh.w	r3, [r1], #2
  402e92:	f820 3b02 	strh.w	r3, [r0], #2
  402e96:	e77b      	b.n	402d90 <memcpy+0xc>
  402e98:	3a04      	subs	r2, #4
  402e9a:	d3d9      	bcc.n	402e50 <memcpy+0xcc>
  402e9c:	3a01      	subs	r2, #1
  402e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
  402ea2:	f800 3b01 	strb.w	r3, [r0], #1
  402ea6:	d2f9      	bcs.n	402e9c <memcpy+0x118>
  402ea8:	780b      	ldrb	r3, [r1, #0]
  402eaa:	7003      	strb	r3, [r0, #0]
  402eac:	784b      	ldrb	r3, [r1, #1]
  402eae:	7043      	strb	r3, [r0, #1]
  402eb0:	788b      	ldrb	r3, [r1, #2]
  402eb2:	7083      	strb	r3, [r0, #2]
  402eb4:	4660      	mov	r0, ip
  402eb6:	4770      	bx	lr

00402eb8 <memset>:
  402eb8:	b470      	push	{r4, r5, r6}
  402eba:	0786      	lsls	r6, r0, #30
  402ebc:	d046      	beq.n	402f4c <memset+0x94>
  402ebe:	1e54      	subs	r4, r2, #1
  402ec0:	2a00      	cmp	r2, #0
  402ec2:	d041      	beq.n	402f48 <memset+0x90>
  402ec4:	b2ca      	uxtb	r2, r1
  402ec6:	4603      	mov	r3, r0
  402ec8:	e002      	b.n	402ed0 <memset+0x18>
  402eca:	f114 34ff 	adds.w	r4, r4, #4294967295
  402ece:	d33b      	bcc.n	402f48 <memset+0x90>
  402ed0:	f803 2b01 	strb.w	r2, [r3], #1
  402ed4:	079d      	lsls	r5, r3, #30
  402ed6:	d1f8      	bne.n	402eca <memset+0x12>
  402ed8:	2c03      	cmp	r4, #3
  402eda:	d92e      	bls.n	402f3a <memset+0x82>
  402edc:	b2cd      	uxtb	r5, r1
  402ede:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402ee2:	2c0f      	cmp	r4, #15
  402ee4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402ee8:	d919      	bls.n	402f1e <memset+0x66>
  402eea:	f103 0210 	add.w	r2, r3, #16
  402eee:	4626      	mov	r6, r4
  402ef0:	3e10      	subs	r6, #16
  402ef2:	2e0f      	cmp	r6, #15
  402ef4:	f842 5c10 	str.w	r5, [r2, #-16]
  402ef8:	f842 5c0c 	str.w	r5, [r2, #-12]
  402efc:	f842 5c08 	str.w	r5, [r2, #-8]
  402f00:	f842 5c04 	str.w	r5, [r2, #-4]
  402f04:	f102 0210 	add.w	r2, r2, #16
  402f08:	d8f2      	bhi.n	402ef0 <memset+0x38>
  402f0a:	f1a4 0210 	sub.w	r2, r4, #16
  402f0e:	f022 020f 	bic.w	r2, r2, #15
  402f12:	f004 040f 	and.w	r4, r4, #15
  402f16:	3210      	adds	r2, #16
  402f18:	2c03      	cmp	r4, #3
  402f1a:	4413      	add	r3, r2
  402f1c:	d90d      	bls.n	402f3a <memset+0x82>
  402f1e:	461e      	mov	r6, r3
  402f20:	4622      	mov	r2, r4
  402f22:	3a04      	subs	r2, #4
  402f24:	2a03      	cmp	r2, #3
  402f26:	f846 5b04 	str.w	r5, [r6], #4
  402f2a:	d8fa      	bhi.n	402f22 <memset+0x6a>
  402f2c:	1f22      	subs	r2, r4, #4
  402f2e:	f022 0203 	bic.w	r2, r2, #3
  402f32:	3204      	adds	r2, #4
  402f34:	4413      	add	r3, r2
  402f36:	f004 0403 	and.w	r4, r4, #3
  402f3a:	b12c      	cbz	r4, 402f48 <memset+0x90>
  402f3c:	b2c9      	uxtb	r1, r1
  402f3e:	441c      	add	r4, r3
  402f40:	f803 1b01 	strb.w	r1, [r3], #1
  402f44:	429c      	cmp	r4, r3
  402f46:	d1fb      	bne.n	402f40 <memset+0x88>
  402f48:	bc70      	pop	{r4, r5, r6}
  402f4a:	4770      	bx	lr
  402f4c:	4614      	mov	r4, r2
  402f4e:	4603      	mov	r3, r0
  402f50:	e7c2      	b.n	402ed8 <memset+0x20>
  402f52:	bf00      	nop

00402f54 <register_fini>:
  402f54:	4b02      	ldr	r3, [pc, #8]	; (402f60 <register_fini+0xc>)
  402f56:	b113      	cbz	r3, 402f5e <register_fini+0xa>
  402f58:	4802      	ldr	r0, [pc, #8]	; (402f64 <register_fini+0x10>)
  402f5a:	f000 b805 	b.w	402f68 <atexit>
  402f5e:	4770      	bx	lr
  402f60:	00000000 	.word	0x00000000
  402f64:	00402f75 	.word	0x00402f75

00402f68 <atexit>:
  402f68:	2300      	movs	r3, #0
  402f6a:	4601      	mov	r1, r0
  402f6c:	461a      	mov	r2, r3
  402f6e:	4618      	mov	r0, r3
  402f70:	f000 b81e 	b.w	402fb0 <__register_exitproc>

00402f74 <__libc_fini_array>:
  402f74:	b538      	push	{r3, r4, r5, lr}
  402f76:	4c0a      	ldr	r4, [pc, #40]	; (402fa0 <__libc_fini_array+0x2c>)
  402f78:	4d0a      	ldr	r5, [pc, #40]	; (402fa4 <__libc_fini_array+0x30>)
  402f7a:	1b64      	subs	r4, r4, r5
  402f7c:	10a4      	asrs	r4, r4, #2
  402f7e:	d00a      	beq.n	402f96 <__libc_fini_array+0x22>
  402f80:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402f84:	3b01      	subs	r3, #1
  402f86:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402f8a:	3c01      	subs	r4, #1
  402f8c:	f855 3904 	ldr.w	r3, [r5], #-4
  402f90:	4798      	blx	r3
  402f92:	2c00      	cmp	r4, #0
  402f94:	d1f9      	bne.n	402f8a <__libc_fini_array+0x16>
  402f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402f9a:	f000 b99f 	b.w	4032dc <_fini>
  402f9e:	bf00      	nop
  402fa0:	004032ec 	.word	0x004032ec
  402fa4:	004032e8 	.word	0x004032e8

00402fa8 <__retarget_lock_acquire_recursive>:
  402fa8:	4770      	bx	lr
  402faa:	bf00      	nop

00402fac <__retarget_lock_release_recursive>:
  402fac:	4770      	bx	lr
  402fae:	bf00      	nop

00402fb0 <__register_exitproc>:
  402fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402fb4:	4d2c      	ldr	r5, [pc, #176]	; (403068 <__register_exitproc+0xb8>)
  402fb6:	4606      	mov	r6, r0
  402fb8:	6828      	ldr	r0, [r5, #0]
  402fba:	4698      	mov	r8, r3
  402fbc:	460f      	mov	r7, r1
  402fbe:	4691      	mov	r9, r2
  402fc0:	f7ff fff2 	bl	402fa8 <__retarget_lock_acquire_recursive>
  402fc4:	4b29      	ldr	r3, [pc, #164]	; (40306c <__register_exitproc+0xbc>)
  402fc6:	681c      	ldr	r4, [r3, #0]
  402fc8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402fcc:	2b00      	cmp	r3, #0
  402fce:	d03e      	beq.n	40304e <__register_exitproc+0x9e>
  402fd0:	685a      	ldr	r2, [r3, #4]
  402fd2:	2a1f      	cmp	r2, #31
  402fd4:	dc1c      	bgt.n	403010 <__register_exitproc+0x60>
  402fd6:	f102 0e01 	add.w	lr, r2, #1
  402fda:	b176      	cbz	r6, 402ffa <__register_exitproc+0x4a>
  402fdc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402fe0:	2401      	movs	r4, #1
  402fe2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402fe6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402fea:	4094      	lsls	r4, r2
  402fec:	4320      	orrs	r0, r4
  402fee:	2e02      	cmp	r6, #2
  402ff0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402ff4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402ff8:	d023      	beq.n	403042 <__register_exitproc+0x92>
  402ffa:	3202      	adds	r2, #2
  402ffc:	f8c3 e004 	str.w	lr, [r3, #4]
  403000:	6828      	ldr	r0, [r5, #0]
  403002:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  403006:	f7ff ffd1 	bl	402fac <__retarget_lock_release_recursive>
  40300a:	2000      	movs	r0, #0
  40300c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403010:	4b17      	ldr	r3, [pc, #92]	; (403070 <__register_exitproc+0xc0>)
  403012:	b30b      	cbz	r3, 403058 <__register_exitproc+0xa8>
  403014:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403018:	f3af 8000 	nop.w
  40301c:	4603      	mov	r3, r0
  40301e:	b1d8      	cbz	r0, 403058 <__register_exitproc+0xa8>
  403020:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403024:	6002      	str	r2, [r0, #0]
  403026:	2100      	movs	r1, #0
  403028:	6041      	str	r1, [r0, #4]
  40302a:	460a      	mov	r2, r1
  40302c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403030:	f04f 0e01 	mov.w	lr, #1
  403034:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403038:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40303c:	2e00      	cmp	r6, #0
  40303e:	d0dc      	beq.n	402ffa <__register_exitproc+0x4a>
  403040:	e7cc      	b.n	402fdc <__register_exitproc+0x2c>
  403042:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  403046:	430c      	orrs	r4, r1
  403048:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40304c:	e7d5      	b.n	402ffa <__register_exitproc+0x4a>
  40304e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  403052:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  403056:	e7bb      	b.n	402fd0 <__register_exitproc+0x20>
  403058:	6828      	ldr	r0, [r5, #0]
  40305a:	f7ff ffa7 	bl	402fac <__retarget_lock_release_recursive>
  40305e:	f04f 30ff 	mov.w	r0, #4294967295
  403062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403066:	bf00      	nop
  403068:	20000458 	.word	0x20000458
  40306c:	004032c4 	.word	0x004032c4
  403070:	00000000 	.word	0x00000000
  403074:	732f2e2e 	.word	0x732f2e2e
  403078:	462f6372 	.word	0x462f6372
  40307c:	52656572 	.word	0x52656572
  403080:	2f534f54 	.word	0x2f534f54
  403084:	74726f70 	.word	0x74726f70
  403088:	656c6261 	.word	0x656c6261
  40308c:	4343472f 	.word	0x4343472f
  403090:	4d52412f 	.word	0x4d52412f
  403094:	344d435f 	.word	0x344d435f
  403098:	6f702f46 	.word	0x6f702f46
  40309c:	632e7472 	.word	0x632e7472
  4030a0:	00000000 	.word	0x00000000
  4030a4:	732f2e2e 	.word	0x732f2e2e
  4030a8:	462f6372 	.word	0x462f6372
  4030ac:	52656572 	.word	0x52656572
  4030b0:	2f534f54 	.word	0x2f534f54
  4030b4:	74726f70 	.word	0x74726f70
  4030b8:	656c6261 	.word	0x656c6261
  4030bc:	6d654d2f 	.word	0x6d654d2f
  4030c0:	676e614d 	.word	0x676e614d
  4030c4:	6165682f 	.word	0x6165682f
  4030c8:	2e355f70 	.word	0x2e355f70
  4030cc:	00000063 	.word	0x00000063
  4030d0:	732f2e2e 	.word	0x732f2e2e
  4030d4:	462f6372 	.word	0x462f6372
  4030d8:	52656572 	.word	0x52656572
  4030dc:	2f534f54 	.word	0x2f534f54
  4030e0:	75657571 	.word	0x75657571
  4030e4:	00632e65 	.word	0x00632e65
  4030e8:	732f2e2e 	.word	0x732f2e2e
  4030ec:	462f6372 	.word	0x462f6372
  4030f0:	52656572 	.word	0x52656572
  4030f4:	2f534f54 	.word	0x2f534f54
  4030f8:	6b736174 	.word	0x6b736174
  4030fc:	00632e73 	.word	0x00632e73
  403100:	454c4449 	.word	0x454c4449
  403104:	00000000 	.word	0x00000000
  403108:	51726d54 	.word	0x51726d54
  40310c:	00000000 	.word	0x00000000
  403110:	732f2e2e 	.word	0x732f2e2e
  403114:	462f6372 	.word	0x462f6372
  403118:	52656572 	.word	0x52656572
  40311c:	2f534f54 	.word	0x2f534f54
  403120:	656d6974 	.word	0x656d6974
  403124:	632e7372 	.word	0x632e7372
  403128:	00000000 	.word	0x00000000
  40312c:	20726d54 	.word	0x20726d54
  403130:	00637653 	.word	0x00637653
  403134:	73696854 	.word	0x73696854
  403138:	20736920 	.word	0x20736920
  40313c:	3362614c 	.word	0x3362614c
  403140:	00000a0d 	.word	0x00000a0d
  403144:	3044454c 	.word	0x3044454c
  403148:	61654820 	.word	0x61654820
  40314c:	42207472 	.word	0x42207472
  403150:	00746165 	.word	0x00746165
  403154:	6e69614d 	.word	0x6e69614d
  403158:	52415520 	.word	0x52415520
  40315c:	61542054 	.word	0x61542054
  403160:	00006b73 	.word	0x00006b73
  403164:	2044454c 	.word	0x2044454c
  403168:	61542031 	.word	0x61542031
  40316c:	00006b73 	.word	0x00006b73
  403170:	2044454c 	.word	0x2044454c
  403174:	61542032 	.word	0x61542032
  403178:	00006b73 	.word	0x00006b73
  40317c:	2044454c 	.word	0x2044454c
  403180:	61542033 	.word	0x61542033
  403184:	00006b73 	.word	0x00006b73
  403188:	6e69614d 	.word	0x6e69614d
  40318c:	6e6f4320 	.word	0x6e6f4320
  403190:	6c6f7274 	.word	0x6c6f7274
  403194:	73615420 	.word	0x73615420
  403198:	6f66206b 	.word	0x6f66206b
  40319c:	454c2072 	.word	0x454c2072
  4031a0:	00003144 	.word	0x00003144
  4031a4:	6e69614d 	.word	0x6e69614d
  4031a8:	6e6f4320 	.word	0x6e6f4320
  4031ac:	6c6f7274 	.word	0x6c6f7274
  4031b0:	73615420 	.word	0x73615420
  4031b4:	6f66206b 	.word	0x6f66206b
  4031b8:	454c2072 	.word	0x454c2072
  4031bc:	00003244 	.word	0x00003244
  4031c0:	6e69614d 	.word	0x6e69614d
  4031c4:	6e6f4320 	.word	0x6e6f4320
  4031c8:	6c6f7274 	.word	0x6c6f7274
  4031cc:	73615420 	.word	0x73615420
  4031d0:	6f66206b 	.word	0x6f66206b
  4031d4:	454c2072 	.word	0x454c2072
  4031d8:	00003344 	.word	0x00003344
  4031dc:	2044454c 	.word	0x2044454c
  4031e0:	53492033 	.word	0x53492033
  4031e4:	574f4e20 	.word	0x574f4e20
  4031e8:	54434120 	.word	0x54434120
  4031ec:	0d455649 	.word	0x0d455649
  4031f0:	0000000a 	.word	0x0000000a
  4031f4:	2044454c 	.word	0x2044454c
  4031f8:	53492032 	.word	0x53492032
  4031fc:	574f4e20 	.word	0x574f4e20
  403200:	54434120 	.word	0x54434120
  403204:	0d455649 	.word	0x0d455649
  403208:	0000000a 	.word	0x0000000a
  40320c:	2044454c 	.word	0x2044454c
  403210:	53492031 	.word	0x53492031
  403214:	574f4e20 	.word	0x574f4e20
  403218:	54434120 	.word	0x54434120
  40321c:	0d455649 	.word	0x0d455649
  403220:	0000000a 	.word	0x0000000a
  403224:	75657571 	.word	0x75657571
  403228:	454c2065 	.word	0x454c2065
  40322c:	69203344 	.word	0x69203344
  403230:	6572636e 	.word	0x6572636e
  403234:	0d657361 	.word	0x0d657361
  403238:	0000000a 	.word	0x0000000a
  40323c:	75657571 	.word	0x75657571
  403240:	454c2065 	.word	0x454c2065
  403244:	69203244 	.word	0x69203244
  403248:	6572636e 	.word	0x6572636e
  40324c:	0d657361 	.word	0x0d657361
  403250:	0000000a 	.word	0x0000000a
  403254:	75657571 	.word	0x75657571
  403258:	454c2065 	.word	0x454c2065
  40325c:	69203144 	.word	0x69203144
  403260:	6572636e 	.word	0x6572636e
  403264:	0d657361 	.word	0x0d657361
  403268:	0000000a 	.word	0x0000000a
  40326c:	75657571 	.word	0x75657571
  403270:	454c2065 	.word	0x454c2065
  403274:	64203344 	.word	0x64203344
  403278:	65726365 	.word	0x65726365
  40327c:	0d657361 	.word	0x0d657361
  403280:	0000000a 	.word	0x0000000a
  403284:	75657571 	.word	0x75657571
  403288:	454c2065 	.word	0x454c2065
  40328c:	64203244 	.word	0x64203244
  403290:	65726365 	.word	0x65726365
  403294:	0d657361 	.word	0x0d657361
  403298:	0000000a 	.word	0x0000000a
  40329c:	75657571 	.word	0x75657571
  4032a0:	454c2065 	.word	0x454c2065
  4032a4:	64203144 	.word	0x64203144
  4032a8:	65726365 	.word	0x65726365
  4032ac:	0d657361 	.word	0x0d657361
  4032b0:	0000000a 	.word	0x0000000a
  4032b4:	732f2e2e 	.word	0x732f2e2e
  4032b8:	6d2f6372 	.word	0x6d2f6372
  4032bc:	2e6e6961 	.word	0x2e6e6961
  4032c0:	00000063 	.word	0x00000063

004032c4 <_global_impure_ptr>:
  4032c4:	20000030                                0.. 

004032c8 <_init>:
  4032c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4032ca:	bf00      	nop
  4032cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4032ce:	bc08      	pop	{r3}
  4032d0:	469e      	mov	lr, r3
  4032d2:	4770      	bx	lr

004032d4 <__init_array_start>:
  4032d4:	00402f55 	.word	0x00402f55

004032d8 <__frame_dummy_init_array_entry>:
  4032d8:	0040011d                                ..@.

004032dc <_fini>:
  4032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4032de:	bf00      	nop
  4032e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4032e2:	bc08      	pop	{r3}
  4032e4:	469e      	mov	lr, r3
  4032e6:	4770      	bx	lr

004032e8 <__fini_array_start>:
  4032e8:	004000f9 	.word	0x004000f9
