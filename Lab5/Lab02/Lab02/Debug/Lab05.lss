
Lab05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032a8  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000474  20000000  004032a8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000278  20000474  0040371c  00020474  2**2
                  ALLOC
  3 .stack        00003004  200006ec  00403994  00020474  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204a2  2**0
                  CONTENTS, READONLY
  6 .debug_info   00016598  00000000  00000000  000204fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000305d  00000000  00000000  00036a93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006c8a  00000000  00000000  00039af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008b8  00000000  00000000  0004077a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000009b0  00000000  00000000  00041032  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000186e1  00000000  00000000  000419e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b1f3  00000000  00000000  0005a0c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00069c37  00000000  00000000  000652b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000017b4  00000000  00000000  000ceef0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 36 00 20 a5 27 40 00 a1 27 40 00 a1 27 40 00     .6. .'@..'@..'@.
  400010:	a1 27 40 00 a1 27 40 00 a1 27 40 00 00 00 00 00     .'@..'@..'@.....
	...
  40002c:	a1 02 40 00 a1 27 40 00 00 00 00 00 41 03 40 00     ..@..'@.....A.@.
  40003c:	a5 03 40 00 a1 27 40 00 a1 27 40 00 a1 27 40 00     ..@..'@..'@..'@.
  40004c:	a1 27 40 00 a1 27 40 00 a1 27 40 00 a1 27 40 00     .'@..'@..'@..'@.
  40005c:	41 25 40 00 a1 27 40 00 a1 27 40 00 a1 27 40 00     A%@..'@..'@..'@.
  40006c:	a1 27 40 00 a1 27 40 00 a1 27 40 00 a1 27 40 00     .'@..'@..'@..'@.
  40007c:	a1 27 40 00 a1 27 40 00 a1 27 40 00 a1 27 40 00     .'@..'@..'@..'@.
  40008c:	a1 27 40 00 a1 27 40 00 a1 27 40 00 a1 27 40 00     .'@..'@..'@..'@.
  40009c:	a1 27 40 00 a1 27 40 00 a1 27 40 00 a1 27 40 00     .'@..'@..'@..'@.
  4000ac:	a1 27 40 00 a1 27 40 00 a1 27 40 00 a1 27 40 00     .'@..'@..'@..'@.
  4000bc:	a1 27 40 00 a1 27 40 00 a1 27 40 00 a1 27 40 00     .'@..'@..'@..'@.
  4000cc:	a1 27 40 00 a1 27 40 00 a1 27 40 00 a1 27 40 00     .'@..'@..'@..'@.
  4000dc:	a1 27 40 00 a1 27 40 00 a1 27 40 00 a1 27 40 00     .'@..'@..'@..'@.
  4000ec:	a1 27 40 00 a1 27 40 00 a1 27 40 00                 .'@..'@..'@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000474 	.word	0x20000474
  400114:	00000000 	.word	0x00000000
  400118:	004032a8 	.word	0x004032a8

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	004032a8 	.word	0x004032a8
  400158:	20000478 	.word	0x20000478
  40015c:	004032a8 	.word	0x004032a8
  400160:	00000000 	.word	0x00000000

00400164 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400164:	f100 0308 	add.w	r3, r0, #8
  400168:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40016a:	f04f 32ff 	mov.w	r2, #4294967295
  40016e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400170:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400172:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400174:	2300      	movs	r3, #0
  400176:	6003      	str	r3, [r0, #0]
  400178:	4770      	bx	lr

0040017a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
  40017a:	2300      	movs	r3, #0
  40017c:	6103      	str	r3, [r0, #16]
  40017e:	4770      	bx	lr

00400180 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400180:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400182:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400184:	689a      	ldr	r2, [r3, #8]
  400186:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400188:	689a      	ldr	r2, [r3, #8]
  40018a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  40018c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
  40018e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400190:	6803      	ldr	r3, [r0, #0]
  400192:	3301      	adds	r3, #1
  400194:	6003      	str	r3, [r0, #0]
  400196:	4770      	bx	lr

00400198 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400198:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40019a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40019c:	f1b5 3fff 	cmp.w	r5, #4294967295
  4001a0:	d002      	beq.n	4001a8 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  4001a2:	f100 0208 	add.w	r2, r0, #8
  4001a6:	e002      	b.n	4001ae <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4001a8:	6902      	ldr	r2, [r0, #16]
  4001aa:	e004      	b.n	4001b6 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  4001ac:	461a      	mov	r2, r3
  4001ae:	6853      	ldr	r3, [r2, #4]
  4001b0:	681c      	ldr	r4, [r3, #0]
  4001b2:	42a5      	cmp	r5, r4
  4001b4:	d2fa      	bcs.n	4001ac <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4001b6:	6853      	ldr	r3, [r2, #4]
  4001b8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4001ba:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4001bc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4001be:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
  4001c0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4001c2:	6803      	ldr	r3, [r0, #0]
  4001c4:	3301      	adds	r3, #1
  4001c6:	6003      	str	r3, [r0, #0]
}
  4001c8:	bc30      	pop	{r4, r5}
  4001ca:	4770      	bx	lr

004001cc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
  4001cc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4001ce:	6842      	ldr	r2, [r0, #4]
  4001d0:	6881      	ldr	r1, [r0, #8]
  4001d2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4001d4:	6882      	ldr	r2, [r0, #8]
  4001d6:	6841      	ldr	r1, [r0, #4]
  4001d8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4001da:	685a      	ldr	r2, [r3, #4]
  4001dc:	4290      	cmp	r0, r2
  4001de:	d006      	beq.n	4001ee <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
  4001e0:	2200      	movs	r2, #0
  4001e2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4001e4:	681a      	ldr	r2, [r3, #0]
  4001e6:	3a01      	subs	r2, #1
  4001e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  4001ea:	6818      	ldr	r0, [r3, #0]
}
  4001ec:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4001ee:	6882      	ldr	r2, [r0, #8]
  4001f0:	605a      	str	r2, [r3, #4]
  4001f2:	e7f5      	b.n	4001e0 <uxListRemove+0x14>

004001f4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
  4001f4:	4808      	ldr	r0, [pc, #32]	; (400218 <prvPortStartFirstTask+0x24>)
  4001f6:	6800      	ldr	r0, [r0, #0]
  4001f8:	6800      	ldr	r0, [r0, #0]
  4001fa:	f380 8808 	msr	MSP, r0
  4001fe:	f04f 0000 	mov.w	r0, #0
  400202:	f380 8814 	msr	CONTROL, r0
  400206:	b662      	cpsie	i
  400208:	b661      	cpsie	f
  40020a:	f3bf 8f4f 	dsb	sy
  40020e:	f3bf 8f6f 	isb	sy
  400212:	df00      	svc	0
  400214:	bf00      	nop
  400216:	0000      	.short	0x0000
  400218:	e000ed08 	.word	0xe000ed08

0040021c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40021c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40022c <vPortEnableVFP+0x10>
  400220:	6801      	ldr	r1, [r0, #0]
  400222:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400226:	6001      	str	r1, [r0, #0]
  400228:	4770      	bx	lr
  40022a:	0000      	.short	0x0000
  40022c:	e000ed88 	.word	0xe000ed88

00400230 <prvTaskExitError>:
{
  400230:	b500      	push	{lr}
  400232:	b083      	sub	sp, #12
volatile uint32_t ulDummy = 0;
  400234:	2300      	movs	r3, #0
  400236:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
  400238:	4b0b      	ldr	r3, [pc, #44]	; (400268 <prvTaskExitError+0x38>)
  40023a:	681b      	ldr	r3, [r3, #0]
  40023c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400240:	d003      	beq.n	40024a <prvTaskExitError+0x1a>
  400242:	21e3      	movs	r1, #227	; 0xe3
  400244:	4809      	ldr	r0, [pc, #36]	; (40026c <prvTaskExitError+0x3c>)
  400246:	4b0a      	ldr	r3, [pc, #40]	; (400270 <prvTaskExitError+0x40>)
  400248:	4798      	blx	r3

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40024a:	f04f 0350 	mov.w	r3, #80	; 0x50
  40024e:	f383 8811 	msr	BASEPRI, r3
  400252:	f3bf 8f6f 	isb	sy
  400256:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
  40025a:	9b01      	ldr	r3, [sp, #4]
  40025c:	2b00      	cmp	r3, #0
  40025e:	d0fc      	beq.n	40025a <prvTaskExitError+0x2a>
}
  400260:	b003      	add	sp, #12
  400262:	f85d fb04 	ldr.w	pc, [sp], #4
  400266:	bf00      	nop
  400268:	20000000 	.word	0x20000000
  40026c:	00402f98 	.word	0x00402f98
  400270:	00402c05 	.word	0x00402c05

00400274 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400278:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  40027c:	f021 0101 	bic.w	r1, r1, #1
  400280:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400284:	4b05      	ldr	r3, [pc, #20]	; (40029c <pxPortInitialiseStack+0x28>)
  400286:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40028a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  40028e:	f06f 0302 	mvn.w	r3, #2
  400292:	f840 3c24 	str.w	r3, [r0, #-36]
}
  400296:	3844      	subs	r0, #68	; 0x44
  400298:	4770      	bx	lr
  40029a:	bf00      	nop
  40029c:	00400231 	.word	0x00400231

004002a0 <SVC_Handler>:
	__asm volatile (
  4002a0:	4b07      	ldr	r3, [pc, #28]	; (4002c0 <pxCurrentTCBConst2>)
  4002a2:	6819      	ldr	r1, [r3, #0]
  4002a4:	6808      	ldr	r0, [r1, #0]
  4002a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4002aa:	f380 8809 	msr	PSP, r0
  4002ae:	f3bf 8f6f 	isb	sy
  4002b2:	f04f 0000 	mov.w	r0, #0
  4002b6:	f380 8811 	msr	BASEPRI, r0
  4002ba:	4770      	bx	lr
  4002bc:	f3af 8000 	nop.w

004002c0 <pxCurrentTCBConst2>:
  4002c0:	200004b0 	.word	0x200004b0

004002c4 <vPortEnterCritical>:
{
  4002c4:	b508      	push	{r3, lr}
  4002c6:	f04f 0350 	mov.w	r3, #80	; 0x50
  4002ca:	f383 8811 	msr	BASEPRI, r3
  4002ce:	f3bf 8f6f 	isb	sy
  4002d2:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
  4002d6:	4a09      	ldr	r2, [pc, #36]	; (4002fc <vPortEnterCritical+0x38>)
  4002d8:	6813      	ldr	r3, [r2, #0]
  4002da:	3301      	adds	r3, #1
  4002dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4002de:	2b01      	cmp	r3, #1
  4002e0:	d000      	beq.n	4002e4 <vPortEnterCritical+0x20>
  4002e2:	bd08      	pop	{r3, pc}
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4002e4:	4b06      	ldr	r3, [pc, #24]	; (400300 <vPortEnterCritical+0x3c>)
  4002e6:	681b      	ldr	r3, [r3, #0]
  4002e8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4002ec:	d0f9      	beq.n	4002e2 <vPortEnterCritical+0x1e>
  4002ee:	f240 119f 	movw	r1, #415	; 0x19f
  4002f2:	4804      	ldr	r0, [pc, #16]	; (400304 <vPortEnterCritical+0x40>)
  4002f4:	4b04      	ldr	r3, [pc, #16]	; (400308 <vPortEnterCritical+0x44>)
  4002f6:	4798      	blx	r3
}
  4002f8:	e7f3      	b.n	4002e2 <vPortEnterCritical+0x1e>
  4002fa:	bf00      	nop
  4002fc:	20000000 	.word	0x20000000
  400300:	e000ed04 	.word	0xe000ed04
  400304:	00402f98 	.word	0x00402f98
  400308:	00402c05 	.word	0x00402c05

0040030c <vPortExitCritical>:
{
  40030c:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
  40030e:	4b08      	ldr	r3, [pc, #32]	; (400330 <vPortExitCritical+0x24>)
  400310:	681b      	ldr	r3, [r3, #0]
  400312:	b13b      	cbz	r3, 400324 <vPortExitCritical+0x18>
	uxCriticalNesting--;
  400314:	4a06      	ldr	r2, [pc, #24]	; (400330 <vPortExitCritical+0x24>)
  400316:	6813      	ldr	r3, [r2, #0]
  400318:	3b01      	subs	r3, #1
  40031a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40031c:	b90b      	cbnz	r3, 400322 <vPortExitCritical+0x16>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  40031e:	f383 8811 	msr	BASEPRI, r3
  400322:	bd08      	pop	{r3, pc}
	configASSERT( uxCriticalNesting );
  400324:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
  400328:	4802      	ldr	r0, [pc, #8]	; (400334 <vPortExitCritical+0x28>)
  40032a:	4b03      	ldr	r3, [pc, #12]	; (400338 <vPortExitCritical+0x2c>)
  40032c:	4798      	blx	r3
  40032e:	e7f1      	b.n	400314 <vPortExitCritical+0x8>
  400330:	20000000 	.word	0x20000000
  400334:	00402f98 	.word	0x00402f98
  400338:	00402c05 	.word	0x00402c05
  40033c:	00000000 	.word	0x00000000

00400340 <PendSV_Handler>:
	__asm volatile
  400340:	f3ef 8009 	mrs	r0, PSP
  400344:	f3bf 8f6f 	isb	sy
  400348:	4b15      	ldr	r3, [pc, #84]	; (4003a0 <pxCurrentTCBConst>)
  40034a:	681a      	ldr	r2, [r3, #0]
  40034c:	f01e 0f10 	tst.w	lr, #16
  400350:	bf08      	it	eq
  400352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40035a:	6010      	str	r0, [r2, #0]
  40035c:	e92d 0009 	stmdb	sp!, {r0, r3}
  400360:	f04f 0050 	mov.w	r0, #80	; 0x50
  400364:	f380 8811 	msr	BASEPRI, r0
  400368:	f3bf 8f4f 	dsb	sy
  40036c:	f3bf 8f6f 	isb	sy
  400370:	f001 fa04 	bl	40177c <vTaskSwitchContext>
  400374:	f04f 0000 	mov.w	r0, #0
  400378:	f380 8811 	msr	BASEPRI, r0
  40037c:	bc09      	pop	{r0, r3}
  40037e:	6819      	ldr	r1, [r3, #0]
  400380:	6808      	ldr	r0, [r1, #0]
  400382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400386:	f01e 0f10 	tst.w	lr, #16
  40038a:	bf08      	it	eq
  40038c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400390:	f380 8809 	msr	PSP, r0
  400394:	f3bf 8f6f 	isb	sy
  400398:	4770      	bx	lr
  40039a:	bf00      	nop
  40039c:	f3af 8000 	nop.w

004003a0 <pxCurrentTCBConst>:
  4003a0:	200004b0 	.word	0x200004b0

004003a4 <SysTick_Handler>:
{
  4003a4:	b508      	push	{r3, lr}
	__asm volatile
  4003a6:	f04f 0350 	mov.w	r3, #80	; 0x50
  4003aa:	f383 8811 	msr	BASEPRI, r3
  4003ae:	f3bf 8f6f 	isb	sy
  4003b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
  4003b6:	4b05      	ldr	r3, [pc, #20]	; (4003cc <SysTick_Handler+0x28>)
  4003b8:	4798      	blx	r3
  4003ba:	b118      	cbz	r0, 4003c4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4003bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4003c0:	4b03      	ldr	r3, [pc, #12]	; (4003d0 <SysTick_Handler+0x2c>)
  4003c2:	601a      	str	r2, [r3, #0]
	__asm volatile
  4003c4:	2300      	movs	r3, #0
  4003c6:	f383 8811 	msr	BASEPRI, r3
  4003ca:	bd08      	pop	{r3, pc}
  4003cc:	004014e5 	.word	0x004014e5
  4003d0:	e000ed04 	.word	0xe000ed04

004003d4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  4003d4:	4a08      	ldr	r2, [pc, #32]	; (4003f8 <vPortSetupTimerInterrupt+0x24>)
  4003d6:	2300      	movs	r3, #0
  4003d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  4003da:	4908      	ldr	r1, [pc, #32]	; (4003fc <vPortSetupTimerInterrupt+0x28>)
  4003dc:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4003de:	4b08      	ldr	r3, [pc, #32]	; (400400 <vPortSetupTimerInterrupt+0x2c>)
  4003e0:	681b      	ldr	r3, [r3, #0]
  4003e2:	4908      	ldr	r1, [pc, #32]	; (400404 <vPortSetupTimerInterrupt+0x30>)
  4003e4:	fba1 1303 	umull	r1, r3, r1, r3
  4003e8:	099b      	lsrs	r3, r3, #6
  4003ea:	3b01      	subs	r3, #1
  4003ec:	4906      	ldr	r1, [pc, #24]	; (400408 <vPortSetupTimerInterrupt+0x34>)
  4003ee:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4003f0:	2307      	movs	r3, #7
  4003f2:	6013      	str	r3, [r2, #0]
  4003f4:	4770      	bx	lr
  4003f6:	bf00      	nop
  4003f8:	e000e010 	.word	0xe000e010
  4003fc:	e000e018 	.word	0xe000e018
  400400:	20000008 	.word	0x20000008
  400404:	10624dd3 	.word	0x10624dd3
  400408:	e000e014 	.word	0xe000e014

0040040c <xPortStartScheduler>:
{
  40040c:	b510      	push	{r4, lr}
  40040e:	b082      	sub	sp, #8
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  400410:	4b34      	ldr	r3, [pc, #208]	; (4004e4 <xPortStartScheduler+0xd8>)
  400412:	681a      	ldr	r2, [r3, #0]
  400414:	4b34      	ldr	r3, [pc, #208]	; (4004e8 <xPortStartScheduler+0xdc>)
  400416:	429a      	cmp	r2, r3
  400418:	d018      	beq.n	40044c <xPortStartScheduler+0x40>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  40041a:	4b32      	ldr	r3, [pc, #200]	; (4004e4 <xPortStartScheduler+0xd8>)
  40041c:	681a      	ldr	r2, [r3, #0]
  40041e:	4b33      	ldr	r3, [pc, #204]	; (4004ec <xPortStartScheduler+0xe0>)
  400420:	429a      	cmp	r2, r3
  400422:	d019      	beq.n	400458 <xPortStartScheduler+0x4c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400424:	4b32      	ldr	r3, [pc, #200]	; (4004f0 <xPortStartScheduler+0xe4>)
  400426:	781a      	ldrb	r2, [r3, #0]
  400428:	b2d2      	uxtb	r2, r2
  40042a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40042c:	22ff      	movs	r2, #255	; 0xff
  40042e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400430:	781b      	ldrb	r3, [r3, #0]
  400432:	b2db      	uxtb	r3, r3
  400434:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400438:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40043c:	f003 0350 	and.w	r3, r3, #80	; 0x50
  400440:	4a2c      	ldr	r2, [pc, #176]	; (4004f4 <xPortStartScheduler+0xe8>)
  400442:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400444:	2207      	movs	r2, #7
  400446:	4b2c      	ldr	r3, [pc, #176]	; (4004f8 <xPortStartScheduler+0xec>)
  400448:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40044a:	e015      	b.n	400478 <xPortStartScheduler+0x6c>
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  40044c:	f44f 7194 	mov.w	r1, #296	; 0x128
  400450:	482a      	ldr	r0, [pc, #168]	; (4004fc <xPortStartScheduler+0xf0>)
  400452:	4b2b      	ldr	r3, [pc, #172]	; (400500 <xPortStartScheduler+0xf4>)
  400454:	4798      	blx	r3
  400456:	e7e0      	b.n	40041a <xPortStartScheduler+0xe>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  400458:	f240 1129 	movw	r1, #297	; 0x129
  40045c:	4827      	ldr	r0, [pc, #156]	; (4004fc <xPortStartScheduler+0xf0>)
  40045e:	4b28      	ldr	r3, [pc, #160]	; (400500 <xPortStartScheduler+0xf4>)
  400460:	4798      	blx	r3
  400462:	e7df      	b.n	400424 <xPortStartScheduler+0x18>
			ulMaxPRIGROUPValue--;
  400464:	4a24      	ldr	r2, [pc, #144]	; (4004f8 <xPortStartScheduler+0xec>)
  400466:	6813      	ldr	r3, [r2, #0]
  400468:	3b01      	subs	r3, #1
  40046a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40046c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400470:	005b      	lsls	r3, r3, #1
  400472:	b2db      	uxtb	r3, r3
  400474:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400478:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40047c:	f013 0f80 	tst.w	r3, #128	; 0x80
  400480:	d1f0      	bne.n	400464 <xPortStartScheduler+0x58>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
  400482:	4b1d      	ldr	r3, [pc, #116]	; (4004f8 <xPortStartScheduler+0xec>)
  400484:	681b      	ldr	r3, [r3, #0]
  400486:	2b03      	cmp	r3, #3
  400488:	d004      	beq.n	400494 <xPortStartScheduler+0x88>
  40048a:	f44f 71ad 	mov.w	r1, #346	; 0x15a
  40048e:	481b      	ldr	r0, [pc, #108]	; (4004fc <xPortStartScheduler+0xf0>)
  400490:	4b1b      	ldr	r3, [pc, #108]	; (400500 <xPortStartScheduler+0xf4>)
  400492:	4798      	blx	r3
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400494:	4a18      	ldr	r2, [pc, #96]	; (4004f8 <xPortStartScheduler+0xec>)
  400496:	6813      	ldr	r3, [r2, #0]
  400498:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40049a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40049e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4004a0:	9b01      	ldr	r3, [sp, #4]
  4004a2:	b2db      	uxtb	r3, r3
  4004a4:	4a12      	ldr	r2, [pc, #72]	; (4004f0 <xPortStartScheduler+0xe4>)
  4004a6:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4004a8:	4b16      	ldr	r3, [pc, #88]	; (400504 <xPortStartScheduler+0xf8>)
  4004aa:	681a      	ldr	r2, [r3, #0]
  4004ac:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  4004b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4004b2:	681a      	ldr	r2, [r3, #0]
  4004b4:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  4004b8:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4004ba:	4b13      	ldr	r3, [pc, #76]	; (400508 <xPortStartScheduler+0xfc>)
  4004bc:	4798      	blx	r3
	uxCriticalNesting = 0;
  4004be:	2400      	movs	r4, #0
  4004c0:	4b12      	ldr	r3, [pc, #72]	; (40050c <xPortStartScheduler+0x100>)
  4004c2:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  4004c4:	4b12      	ldr	r3, [pc, #72]	; (400510 <xPortStartScheduler+0x104>)
  4004c6:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4004c8:	4a12      	ldr	r2, [pc, #72]	; (400514 <xPortStartScheduler+0x108>)
  4004ca:	6813      	ldr	r3, [r2, #0]
  4004cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4004d0:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4004d2:	4b11      	ldr	r3, [pc, #68]	; (400518 <xPortStartScheduler+0x10c>)
  4004d4:	4798      	blx	r3
	vTaskSwitchContext();
  4004d6:	4b11      	ldr	r3, [pc, #68]	; (40051c <xPortStartScheduler+0x110>)
  4004d8:	4798      	blx	r3
	prvTaskExitError();
  4004da:	4b11      	ldr	r3, [pc, #68]	; (400520 <xPortStartScheduler+0x114>)
  4004dc:	4798      	blx	r3
}
  4004de:	4620      	mov	r0, r4
  4004e0:	b002      	add	sp, #8
  4004e2:	bd10      	pop	{r4, pc}
  4004e4:	e000ed00 	.word	0xe000ed00
  4004e8:	410fc271 	.word	0x410fc271
  4004ec:	410fc270 	.word	0x410fc270
  4004f0:	e000e400 	.word	0xe000e400
  4004f4:	20000490 	.word	0x20000490
  4004f8:	20000494 	.word	0x20000494
  4004fc:	00402f98 	.word	0x00402f98
  400500:	00402c05 	.word	0x00402c05
  400504:	e000ed20 	.word	0xe000ed20
  400508:	004003d5 	.word	0x004003d5
  40050c:	20000000 	.word	0x20000000
  400510:	0040021d 	.word	0x0040021d
  400514:	e000ef34 	.word	0xe000ef34
  400518:	004001f5 	.word	0x004001f5
  40051c:	0040177d 	.word	0x0040177d
  400520:	00400231 	.word	0x00400231

00400524 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
  400524:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
  400526:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  40052a:	2b0f      	cmp	r3, #15
  40052c:	d906      	bls.n	40053c <vPortValidateInterruptPriority+0x18>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  40052e:	4a0e      	ldr	r2, [pc, #56]	; (400568 <vPortValidateInterruptPriority+0x44>)
  400530:	5c9b      	ldrb	r3, [r3, r2]
  400532:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400534:	4a0d      	ldr	r2, [pc, #52]	; (40056c <vPortValidateInterruptPriority+0x48>)
  400536:	7812      	ldrb	r2, [r2, #0]
  400538:	4293      	cmp	r3, r2
  40053a:	d308      	bcc.n	40054e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40053c:	4b0c      	ldr	r3, [pc, #48]	; (400570 <vPortValidateInterruptPriority+0x4c>)
  40053e:	681b      	ldr	r3, [r3, #0]
  400540:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400544:	4a0b      	ldr	r2, [pc, #44]	; (400574 <vPortValidateInterruptPriority+0x50>)
  400546:	6812      	ldr	r2, [r2, #0]
  400548:	4293      	cmp	r3, r2
  40054a:	d806      	bhi.n	40055a <vPortValidateInterruptPriority+0x36>
  40054c:	bd08      	pop	{r3, pc}
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40054e:	f240 21f2 	movw	r1, #754	; 0x2f2
  400552:	4809      	ldr	r0, [pc, #36]	; (400578 <vPortValidateInterruptPriority+0x54>)
  400554:	4b09      	ldr	r3, [pc, #36]	; (40057c <vPortValidateInterruptPriority+0x58>)
  400556:	4798      	blx	r3
  400558:	e7f0      	b.n	40053c <vPortValidateInterruptPriority+0x18>
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40055a:	f240 3102 	movw	r1, #770	; 0x302
  40055e:	4806      	ldr	r0, [pc, #24]	; (400578 <vPortValidateInterruptPriority+0x54>)
  400560:	4b06      	ldr	r3, [pc, #24]	; (40057c <vPortValidateInterruptPriority+0x58>)
  400562:	4798      	blx	r3
	}
  400564:	e7f2      	b.n	40054c <vPortValidateInterruptPriority+0x28>
  400566:	bf00      	nop
  400568:	e000e3f0 	.word	0xe000e3f0
  40056c:	20000490 	.word	0x20000490
  400570:	e000ed0c 	.word	0xe000ed0c
  400574:	20000494 	.word	0x20000494
  400578:	00402f98 	.word	0x00402f98
  40057c:	00402c05 	.word	0x00402c05

00400580 <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
  400580:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  400582:	4a13      	ldr	r2, [pc, #76]	; (4005d0 <prvInsertBlockIntoFreeList+0x50>)
  400584:	e000      	b.n	400588 <prvInsertBlockIntoFreeList+0x8>
  400586:	461a      	mov	r2, r3
  400588:	6813      	ldr	r3, [r2, #0]
  40058a:	4283      	cmp	r3, r0
  40058c:	d3fb      	bcc.n	400586 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
  40058e:	6851      	ldr	r1, [r2, #4]
  400590:	1854      	adds	r4, r2, r1
  400592:	42a0      	cmp	r0, r4
  400594:	d00a      	beq.n	4005ac <prvInsertBlockIntoFreeList+0x2c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  400596:	6841      	ldr	r1, [r0, #4]
  400598:	1844      	adds	r4, r0, r1
  40059a:	42a3      	cmp	r3, r4
  40059c:	d00b      	beq.n	4005b6 <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
  40059e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  4005a0:	4290      	cmp	r0, r2
  4005a2:	d000      	beq.n	4005a6 <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  4005a4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
  4005a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4005aa:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  4005ac:	6840      	ldr	r0, [r0, #4]
  4005ae:	4401      	add	r1, r0
  4005b0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
  4005b2:	4610      	mov	r0, r2
  4005b4:	e7ef      	b.n	400596 <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
  4005b6:	4c07      	ldr	r4, [pc, #28]	; (4005d4 <prvInsertBlockIntoFreeList+0x54>)
  4005b8:	6824      	ldr	r4, [r4, #0]
  4005ba:	42a3      	cmp	r3, r4
  4005bc:	d006      	beq.n	4005cc <prvInsertBlockIntoFreeList+0x4c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4005be:	685b      	ldr	r3, [r3, #4]
  4005c0:	4419      	add	r1, r3
  4005c2:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4005c4:	6813      	ldr	r3, [r2, #0]
  4005c6:	681b      	ldr	r3, [r3, #0]
  4005c8:	6003      	str	r3, [r0, #0]
  4005ca:	e7e9      	b.n	4005a0 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  4005cc:	6004      	str	r4, [r0, #0]
  4005ce:	e7e7      	b.n	4005a0 <prvInsertBlockIntoFreeList+0x20>
  4005d0:	200004a8 	.word	0x200004a8
  4005d4:	20000498 	.word	0x20000498

004005d8 <pvPortMalloc>:
{
  4005d8:	b570      	push	{r4, r5, r6, lr}
  4005da:	4605      	mov	r5, r0
	configASSERT( pxEnd );
  4005dc:	4b2c      	ldr	r3, [pc, #176]	; (400690 <pvPortMalloc+0xb8>)
  4005de:	681b      	ldr	r3, [r3, #0]
  4005e0:	b1b3      	cbz	r3, 400610 <pvPortMalloc+0x38>
	vTaskSuspendAll();
  4005e2:	4b2c      	ldr	r3, [pc, #176]	; (400694 <pvPortMalloc+0xbc>)
  4005e4:	4798      	blx	r3
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
  4005e6:	4b2c      	ldr	r3, [pc, #176]	; (400698 <pvPortMalloc+0xc0>)
  4005e8:	681b      	ldr	r3, [r3, #0]
  4005ea:	421d      	tst	r5, r3
  4005ec:	d145      	bne.n	40067a <pvPortMalloc+0xa2>
			if( xWantedSize > 0 )
  4005ee:	b135      	cbz	r5, 4005fe <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
  4005f0:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
  4005f2:	f015 0f07 	tst.w	r5, #7
  4005f6:	d002      	beq.n	4005fe <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4005f8:	f025 0507 	bic.w	r5, r5, #7
  4005fc:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
  4005fe:	2d00      	cmp	r5, #0
  400600:	d03d      	beq.n	40067e <pvPortMalloc+0xa6>
  400602:	4b26      	ldr	r3, [pc, #152]	; (40069c <pvPortMalloc+0xc4>)
  400604:	681b      	ldr	r3, [r3, #0]
  400606:	429d      	cmp	r5, r3
  400608:	d83b      	bhi.n	400682 <pvPortMalloc+0xaa>
				pxBlock = xStart.pxNextFreeBlock;
  40060a:	4a25      	ldr	r2, [pc, #148]	; (4006a0 <pvPortMalloc+0xc8>)
  40060c:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40060e:	e006      	b.n	40061e <pvPortMalloc+0x46>
	configASSERT( pxEnd );
  400610:	218b      	movs	r1, #139	; 0x8b
  400612:	4824      	ldr	r0, [pc, #144]	; (4006a4 <pvPortMalloc+0xcc>)
  400614:	4b24      	ldr	r3, [pc, #144]	; (4006a8 <pvPortMalloc+0xd0>)
  400616:	4798      	blx	r3
  400618:	e7e3      	b.n	4005e2 <pvPortMalloc+0xa>
					pxPreviousBlock = pxBlock;
  40061a:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
  40061c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40061e:	6863      	ldr	r3, [r4, #4]
  400620:	429d      	cmp	r5, r3
  400622:	d902      	bls.n	40062a <pvPortMalloc+0x52>
  400624:	6823      	ldr	r3, [r4, #0]
  400626:	2b00      	cmp	r3, #0
  400628:	d1f7      	bne.n	40061a <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
  40062a:	4b19      	ldr	r3, [pc, #100]	; (400690 <pvPortMalloc+0xb8>)
  40062c:	681b      	ldr	r3, [r3, #0]
  40062e:	429c      	cmp	r4, r3
  400630:	d029      	beq.n	400686 <pvPortMalloc+0xae>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
  400632:	6816      	ldr	r6, [r2, #0]
  400634:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  400636:	6823      	ldr	r3, [r4, #0]
  400638:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  40063a:	6863      	ldr	r3, [r4, #4]
  40063c:	1b5b      	subs	r3, r3, r5
  40063e:	2b10      	cmp	r3, #16
  400640:	d815      	bhi.n	40066e <pvPortMalloc+0x96>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
  400642:	6862      	ldr	r2, [r4, #4]
  400644:	4915      	ldr	r1, [pc, #84]	; (40069c <pvPortMalloc+0xc4>)
  400646:	680b      	ldr	r3, [r1, #0]
  400648:	1a9b      	subs	r3, r3, r2
  40064a:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
  40064c:	4917      	ldr	r1, [pc, #92]	; (4006ac <pvPortMalloc+0xd4>)
  40064e:	6809      	ldr	r1, [r1, #0]
  400650:	428b      	cmp	r3, r1
  400652:	d201      	bcs.n	400658 <pvPortMalloc+0x80>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
  400654:	4915      	ldr	r1, [pc, #84]	; (4006ac <pvPortMalloc+0xd4>)
  400656:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
  400658:	4b0f      	ldr	r3, [pc, #60]	; (400698 <pvPortMalloc+0xc0>)
  40065a:	681b      	ldr	r3, [r3, #0]
  40065c:	4313      	orrs	r3, r2
  40065e:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
  400660:	2300      	movs	r3, #0
  400662:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
  400664:	4b12      	ldr	r3, [pc, #72]	; (4006b0 <pvPortMalloc+0xd8>)
  400666:	4798      	blx	r3
		if( pvReturn == NULL )
  400668:	b17e      	cbz	r6, 40068a <pvPortMalloc+0xb2>
}
  40066a:	4630      	mov	r0, r6
  40066c:	bd70      	pop	{r4, r5, r6, pc}
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
  40066e:	1960      	adds	r0, r4, r5
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  400670:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
  400672:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  400674:	4b0f      	ldr	r3, [pc, #60]	; (4006b4 <pvPortMalloc+0xdc>)
  400676:	4798      	blx	r3
  400678:	e7e3      	b.n	400642 <pvPortMalloc+0x6a>
void *pvReturn = NULL;
  40067a:	2600      	movs	r6, #0
  40067c:	e7f2      	b.n	400664 <pvPortMalloc+0x8c>
  40067e:	2600      	movs	r6, #0
  400680:	e7f0      	b.n	400664 <pvPortMalloc+0x8c>
  400682:	2600      	movs	r6, #0
  400684:	e7ee      	b.n	400664 <pvPortMalloc+0x8c>
  400686:	2600      	movs	r6, #0
  400688:	e7ec      	b.n	400664 <pvPortMalloc+0x8c>
			vApplicationMallocFailedHook();
  40068a:	4b0b      	ldr	r3, [pc, #44]	; (4006b8 <pvPortMalloc+0xe0>)
  40068c:	4798      	blx	r3
	return pvReturn;
  40068e:	e7ec      	b.n	40066a <pvPortMalloc+0x92>
  400690:	20000498 	.word	0x20000498
  400694:	004014c9 	.word	0x004014c9
  400698:	2000049c 	.word	0x2000049c
  40069c:	200004a0 	.word	0x200004a0
  4006a0:	200004a8 	.word	0x200004a8
  4006a4:	00402fc8 	.word	0x00402fc8
  4006a8:	00402c05 	.word	0x00402c05
  4006ac:	200004a4 	.word	0x200004a4
  4006b0:	00401609 	.word	0x00401609
  4006b4:	00400581 	.word	0x00400581
  4006b8:	00402c31 	.word	0x00402c31

004006bc <vPortFree>:
	if( pv != NULL )
  4006bc:	2800      	cmp	r0, #0
  4006be:	d033      	beq.n	400728 <vPortFree+0x6c>
{
  4006c0:	b538      	push	{r3, r4, r5, lr}
  4006c2:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
  4006c4:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  4006c8:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4006cc:	4b17      	ldr	r3, [pc, #92]	; (40072c <vPortFree+0x70>)
  4006ce:	681b      	ldr	r3, [r3, #0]
  4006d0:	421a      	tst	r2, r3
  4006d2:	d011      	beq.n	4006f8 <vPortFree+0x3c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
  4006d4:	f854 3c08 	ldr.w	r3, [r4, #-8]
  4006d8:	b123      	cbz	r3, 4006e4 <vPortFree+0x28>
  4006da:	f44f 7190 	mov.w	r1, #288	; 0x120
  4006de:	4814      	ldr	r0, [pc, #80]	; (400730 <vPortFree+0x74>)
  4006e0:	4b14      	ldr	r3, [pc, #80]	; (400734 <vPortFree+0x78>)
  4006e2:	4798      	blx	r3
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
  4006e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4006e8:	4a10      	ldr	r2, [pc, #64]	; (40072c <vPortFree+0x70>)
  4006ea:	6812      	ldr	r2, [r2, #0]
  4006ec:	4213      	tst	r3, r2
  4006ee:	d002      	beq.n	4006f6 <vPortFree+0x3a>
			if( pxLink->pxNextFreeBlock == NULL )
  4006f0:	f854 1c08 	ldr.w	r1, [r4, #-8]
  4006f4:	b131      	cbz	r1, 400704 <vPortFree+0x48>
  4006f6:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  4006f8:	f240 111f 	movw	r1, #287	; 0x11f
  4006fc:	480c      	ldr	r0, [pc, #48]	; (400730 <vPortFree+0x74>)
  4006fe:	4b0d      	ldr	r3, [pc, #52]	; (400734 <vPortFree+0x78>)
  400700:	4798      	blx	r3
  400702:	e7e7      	b.n	4006d4 <vPortFree+0x18>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
  400704:	ea23 0302 	bic.w	r3, r3, r2
  400708:	f844 3c04 	str.w	r3, [r4, #-4]
				vTaskSuspendAll();
  40070c:	4b0a      	ldr	r3, [pc, #40]	; (400738 <vPortFree+0x7c>)
  40070e:	4798      	blx	r3
					xFreeBytesRemaining += pxLink->xBlockSize;
  400710:	f854 1c04 	ldr.w	r1, [r4, #-4]
  400714:	4a09      	ldr	r2, [pc, #36]	; (40073c <vPortFree+0x80>)
  400716:	6813      	ldr	r3, [r2, #0]
  400718:	440b      	add	r3, r1
  40071a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
  40071c:	4628      	mov	r0, r5
  40071e:	4b08      	ldr	r3, [pc, #32]	; (400740 <vPortFree+0x84>)
  400720:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400722:	4b08      	ldr	r3, [pc, #32]	; (400744 <vPortFree+0x88>)
  400724:	4798      	blx	r3
}
  400726:	e7e6      	b.n	4006f6 <vPortFree+0x3a>
  400728:	4770      	bx	lr
  40072a:	bf00      	nop
  40072c:	2000049c 	.word	0x2000049c
  400730:	00402fc8 	.word	0x00402fc8
  400734:	00402c05 	.word	0x00402c05
  400738:	004014c9 	.word	0x004014c9
  40073c:	200004a0 	.word	0x200004a0
  400740:	00400581 	.word	0x00400581
  400744:	00401609 	.word	0x00401609

00400748 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
  400748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40074c:	4680      	mov	r8, r0
BaseType_t xDefinedRegions = 0;
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
  40074e:	4b2c      	ldr	r3, [pc, #176]	; (400800 <vPortDefineHeapRegions+0xb8>)
  400750:	681b      	ldr	r3, [r3, #0]
  400752:	b123      	cbz	r3, 40075e <vPortDefineHeapRegions+0x16>
  400754:	f240 1193 	movw	r1, #403	; 0x193
  400758:	482a      	ldr	r0, [pc, #168]	; (400804 <vPortDefineHeapRegions+0xbc>)
  40075a:	4b2b      	ldr	r3, [pc, #172]	; (400808 <vPortDefineHeapRegions+0xc0>)
  40075c:	4798      	blx	r3
		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
  40075e:	4643      	mov	r3, r8
  400760:	2600      	movs	r6, #0
  400762:	4637      	mov	r7, r6
  400764:	e01b      	b.n	40079e <vPortDefineHeapRegions+0x56>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
  400766:	4b26      	ldr	r3, [pc, #152]	; (400800 <vPortDefineHeapRegions+0xb8>)
  400768:	681b      	ldr	r3, [r3, #0]
  40076a:	b35b      	cbz	r3, 4007c4 <vPortDefineHeapRegions+0x7c>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
  40076c:	4b24      	ldr	r3, [pc, #144]	; (400800 <vPortDefineHeapRegions+0xb8>)
  40076e:	681b      	ldr	r3, [r3, #0]
  400770:	429d      	cmp	r5, r3
  400772:	d92d      	bls.n	4007d0 <vPortDefineHeapRegions+0x88>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
  400774:	4a22      	ldr	r2, [pc, #136]	; (400800 <vPortDefineHeapRegions+0xb8>)
  400776:	6811      	ldr	r1, [r2, #0]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
  400778:	1963      	adds	r3, r4, r5
		xAddress -= xHeapStructSize;
  40077a:	3b08      	subs	r3, #8
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
  40077c:	f023 0307 	bic.w	r3, r3, #7
		pxEnd = ( BlockLink_t * ) xAddress;
  400780:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
  400782:	2200      	movs	r2, #0
  400784:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
  400786:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
  400788:	462a      	mov	r2, r5
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
  40078a:	1b58      	subs	r0, r3, r5
  40078c:	6068      	str	r0, [r5, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
  40078e:	602b      	str	r3, [r5, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
  400790:	b101      	cbz	r1, 400794 <vPortDefineHeapRegions+0x4c>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
  400792:	600d      	str	r5, [r1, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
  400794:	6853      	ldr	r3, [r2, #4]
  400796:	441f      	add	r7, r3

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
  400798:	3601      	adds	r6, #1
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
  40079a:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
	while( pxHeapRegion->xSizeInBytes > 0 )
  40079e:	685c      	ldr	r4, [r3, #4]
  4007a0:	b1e4      	cbz	r4, 4007dc <vPortDefineHeapRegions+0x94>
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
  4007a2:	681d      	ldr	r5, [r3, #0]
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  4007a4:	f015 0f07 	tst.w	r5, #7
  4007a8:	d005      	beq.n	4007b6 <vPortDefineHeapRegions+0x6e>
			xAddress += ( portBYTE_ALIGNMENT - 1 );
  4007aa:	1deb      	adds	r3, r5, #7
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
  4007ac:	f023 0307 	bic.w	r3, r3, #7
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
  4007b0:	1aed      	subs	r5, r5, r3
  4007b2:	442c      	add	r4, r5
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
  4007b4:	461d      	mov	r5, r3
		if( xDefinedRegions == 0 )
  4007b6:	2e00      	cmp	r6, #0
  4007b8:	d1d5      	bne.n	400766 <vPortDefineHeapRegions+0x1e>
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
  4007ba:	4b14      	ldr	r3, [pc, #80]	; (40080c <vPortDefineHeapRegions+0xc4>)
  4007bc:	601d      	str	r5, [r3, #0]
			xStart.xBlockSize = ( size_t ) 0;
  4007be:	2200      	movs	r2, #0
  4007c0:	605a      	str	r2, [r3, #4]
  4007c2:	e7d7      	b.n	400774 <vPortDefineHeapRegions+0x2c>
			configASSERT( pxEnd != NULL );
  4007c4:	f44f 71da 	mov.w	r1, #436	; 0x1b4
  4007c8:	480e      	ldr	r0, [pc, #56]	; (400804 <vPortDefineHeapRegions+0xbc>)
  4007ca:	4b0f      	ldr	r3, [pc, #60]	; (400808 <vPortDefineHeapRegions+0xc0>)
  4007cc:	4798      	blx	r3
  4007ce:	e7cd      	b.n	40076c <vPortDefineHeapRegions+0x24>
			configASSERT( xAddress > ( size_t ) pxEnd );
  4007d0:	f240 11b7 	movw	r1, #439	; 0x1b7
  4007d4:	480b      	ldr	r0, [pc, #44]	; (400804 <vPortDefineHeapRegions+0xbc>)
  4007d6:	4b0c      	ldr	r3, [pc, #48]	; (400808 <vPortDefineHeapRegions+0xc0>)
  4007d8:	4798      	blx	r3
  4007da:	e7cb      	b.n	400774 <vPortDefineHeapRegions+0x2c>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
  4007dc:	4b0c      	ldr	r3, [pc, #48]	; (400810 <vPortDefineHeapRegions+0xc8>)
  4007de:	601f      	str	r7, [r3, #0]
	xFreeBytesRemaining = xTotalHeapSize;
  4007e0:	4b0c      	ldr	r3, [pc, #48]	; (400814 <vPortDefineHeapRegions+0xcc>)
  4007e2:	601f      	str	r7, [r3, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
  4007e4:	b12f      	cbz	r7, 4007f2 <vPortDefineHeapRegions+0xaa>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
  4007e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4007ea:	4b0b      	ldr	r3, [pc, #44]	; (400818 <vPortDefineHeapRegions+0xd0>)
  4007ec:	601a      	str	r2, [r3, #0]
  4007ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( xTotalHeapSize );
  4007f2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  4007f6:	4803      	ldr	r0, [pc, #12]	; (400804 <vPortDefineHeapRegions+0xbc>)
  4007f8:	4b03      	ldr	r3, [pc, #12]	; (400808 <vPortDefineHeapRegions+0xc0>)
  4007fa:	4798      	blx	r3
  4007fc:	e7f3      	b.n	4007e6 <vPortDefineHeapRegions+0x9e>
  4007fe:	bf00      	nop
  400800:	20000498 	.word	0x20000498
  400804:	00402fc8 	.word	0x00402fc8
  400808:	00402c05 	.word	0x00402c05
  40080c:	200004a8 	.word	0x200004a8
  400810:	200004a4 	.word	0x200004a4
  400814:	200004a0 	.word	0x200004a0
  400818:	2000049c 	.word	0x2000049c

0040081c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
  40081c:	b510      	push	{r4, lr}
  40081e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  400820:	4b06      	ldr	r3, [pc, #24]	; (40083c <prvIsQueueFull+0x20>)
  400822:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400824:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400826:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400828:	429a      	cmp	r2, r3
  40082a:	d004      	beq.n	400836 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
  40082c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
  40082e:	4b04      	ldr	r3, [pc, #16]	; (400840 <prvIsQueueFull+0x24>)
  400830:	4798      	blx	r3

	return xReturn;
}
  400832:	4620      	mov	r0, r4
  400834:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
  400836:	2401      	movs	r4, #1
  400838:	e7f9      	b.n	40082e <prvIsQueueFull+0x12>
  40083a:	bf00      	nop
  40083c:	004002c5 	.word	0x004002c5
  400840:	0040030d 	.word	0x0040030d

00400844 <prvIsQueueEmpty>:
{
  400844:	b510      	push	{r4, lr}
  400846:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  400848:	4b05      	ldr	r3, [pc, #20]	; (400860 <prvIsQueueEmpty+0x1c>)
  40084a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40084c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40084e:	b123      	cbz	r3, 40085a <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
  400850:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  400852:	4b04      	ldr	r3, [pc, #16]	; (400864 <prvIsQueueEmpty+0x20>)
  400854:	4798      	blx	r3
}
  400856:	4620      	mov	r0, r4
  400858:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
  40085a:	2401      	movs	r4, #1
  40085c:	e7f9      	b.n	400852 <prvIsQueueEmpty+0xe>
  40085e:	bf00      	nop
  400860:	004002c5 	.word	0x004002c5
  400864:	0040030d 	.word	0x0040030d

00400868 <prvCopyDataToQueue>:
{
  400868:	b570      	push	{r4, r5, r6, lr}
  40086a:	4604      	mov	r4, r0
  40086c:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  40086e:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400870:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400872:	b95a      	cbnz	r2, 40088c <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400874:	6803      	ldr	r3, [r0, #0]
  400876:	b11b      	cbz	r3, 400880 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
  400878:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  40087a:	3501      	adds	r5, #1
  40087c:	63a5      	str	r5, [r4, #56]	; 0x38
}
  40087e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
  400880:	6880      	ldr	r0, [r0, #8]
  400882:	4b17      	ldr	r3, [pc, #92]	; (4008e0 <prvCopyDataToQueue+0x78>)
  400884:	4798      	blx	r3
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
  400886:	2300      	movs	r3, #0
  400888:	60a3      	str	r3, [r4, #8]
  40088a:	e7f6      	b.n	40087a <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
  40088c:	b96e      	cbnz	r6, 4008aa <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  40088e:	6840      	ldr	r0, [r0, #4]
  400890:	4b14      	ldr	r3, [pc, #80]	; (4008e4 <prvCopyDataToQueue+0x7c>)
  400892:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  400894:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400896:	6863      	ldr	r3, [r4, #4]
  400898:	4413      	add	r3, r2
  40089a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40089c:	68a2      	ldr	r2, [r4, #8]
  40089e:	4293      	cmp	r3, r2
  4008a0:	d319      	bcc.n	4008d6 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4008a2:	6823      	ldr	r3, [r4, #0]
  4008a4:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
  4008a6:	2000      	movs	r0, #0
  4008a8:	e7e7      	b.n	40087a <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
  4008aa:	68c0      	ldr	r0, [r0, #12]
  4008ac:	4b0d      	ldr	r3, [pc, #52]	; (4008e4 <prvCopyDataToQueue+0x7c>)
  4008ae:	4798      	blx	r3
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
  4008b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4008b2:	4252      	negs	r2, r2
  4008b4:	68e3      	ldr	r3, [r4, #12]
  4008b6:	4413      	add	r3, r2
  4008b8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4008ba:	6821      	ldr	r1, [r4, #0]
  4008bc:	428b      	cmp	r3, r1
  4008be:	d202      	bcs.n	4008c6 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
  4008c0:	68a3      	ldr	r3, [r4, #8]
  4008c2:	441a      	add	r2, r3
  4008c4:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4008c6:	2e02      	cmp	r6, #2
  4008c8:	d001      	beq.n	4008ce <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
  4008ca:	2000      	movs	r0, #0
  4008cc:	e7d5      	b.n	40087a <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  4008ce:	b125      	cbz	r5, 4008da <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
  4008d0:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  4008d2:	2000      	movs	r0, #0
  4008d4:	e7d1      	b.n	40087a <prvCopyDataToQueue+0x12>
  4008d6:	2000      	movs	r0, #0
  4008d8:	e7cf      	b.n	40087a <prvCopyDataToQueue+0x12>
  4008da:	2000      	movs	r0, #0
  4008dc:	e7cd      	b.n	40087a <prvCopyDataToQueue+0x12>
  4008de:	bf00      	nop
  4008e0:	00401a39 	.word	0x00401a39
  4008e4:	00402ca9 	.word	0x00402ca9

004008e8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4008e8:	b570      	push	{r4, r5, r6, lr}
  4008ea:	b082      	sub	sp, #8
  4008ec:	9001      	str	r0, [sp, #4]
  4008ee:	460e      	mov	r6, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4008f0:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4008f2:	b15c      	cbz	r4, 40090c <prvNotifyQueueSetContainer+0x24>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4008f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4008f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4008f8:	429a      	cmp	r2, r3
  4008fa:	d20d      	bcs.n	400918 <prvNotifyQueueSetContainer+0x30>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4008fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4008fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400900:	429a      	cmp	r2, r3
  400902:	d30f      	bcc.n	400924 <prvNotifyQueueSetContainer+0x3c>
	BaseType_t xReturn = pdFALSE;
  400904:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400906:	4630      	mov	r0, r6
  400908:	b002      	add	sp, #8
  40090a:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxQueueSetContainer );
  40090c:	f640 3145 	movw	r1, #2885	; 0xb45
  400910:	4812      	ldr	r0, [pc, #72]	; (40095c <prvNotifyQueueSetContainer+0x74>)
  400912:	4b13      	ldr	r3, [pc, #76]	; (400960 <prvNotifyQueueSetContainer+0x78>)
  400914:	4798      	blx	r3
  400916:	e7ed      	b.n	4008f4 <prvNotifyQueueSetContainer+0xc>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400918:	f640 3146 	movw	r1, #2886	; 0xb46
  40091c:	480f      	ldr	r0, [pc, #60]	; (40095c <prvNotifyQueueSetContainer+0x74>)
  40091e:	4b10      	ldr	r3, [pc, #64]	; (400960 <prvNotifyQueueSetContainer+0x78>)
  400920:	4798      	blx	r3
  400922:	e7eb      	b.n	4008fc <prvNotifyQueueSetContainer+0x14>
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  400924:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  400928:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40092a:	4632      	mov	r2, r6
  40092c:	a901      	add	r1, sp, #4
  40092e:	4620      	mov	r0, r4
  400930:	4b0c      	ldr	r3, [pc, #48]	; (400964 <prvNotifyQueueSetContainer+0x7c>)
  400932:	4798      	blx	r3
  400934:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
  400936:	f1b5 3fff 	cmp.w	r5, #4294967295
  40093a:	d004      	beq.n	400946 <prvNotifyQueueSetContainer+0x5e>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  40093c:	3501      	adds	r5, #1
  40093e:	b26d      	sxtb	r5, r5
  400940:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  400944:	e7df      	b.n	400906 <prvNotifyQueueSetContainer+0x1e>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400946:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400948:	2b00      	cmp	r3, #0
  40094a:	d0dc      	beq.n	400906 <prvNotifyQueueSetContainer+0x1e>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40094c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400950:	4b05      	ldr	r3, [pc, #20]	; (400968 <prvNotifyQueueSetContainer+0x80>)
  400952:	4798      	blx	r3
  400954:	2800      	cmp	r0, #0
  400956:	d0d6      	beq.n	400906 <prvNotifyQueueSetContainer+0x1e>
						xReturn = pdTRUE;
  400958:	2601      	movs	r6, #1
		return xReturn;
  40095a:	e7d4      	b.n	400906 <prvNotifyQueueSetContainer+0x1e>
  40095c:	00402ff4 	.word	0x00402ff4
  400960:	00402c05 	.word	0x00402c05
  400964:	00400869 	.word	0x00400869
  400968:	004018d9 	.word	0x004018d9

0040096c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40096c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40096e:	b172      	cbz	r2, 40098e <prvCopyDataFromQueue+0x22>
{
  400970:	b510      	push	{r4, lr}
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  400972:	68c3      	ldr	r3, [r0, #12]
  400974:	4413      	add	r3, r2
  400976:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400978:	6884      	ldr	r4, [r0, #8]
  40097a:	42a3      	cmp	r3, r4
  40097c:	d301      	bcc.n	400982 <prvCopyDataFromQueue+0x16>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
  40097e:	6803      	ldr	r3, [r0, #0]
  400980:	60c3      	str	r3, [r0, #12]
  400982:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  400984:	68c1      	ldr	r1, [r0, #12]
  400986:	4620      	mov	r0, r4
  400988:	4b01      	ldr	r3, [pc, #4]	; (400990 <prvCopyDataFromQueue+0x24>)
  40098a:	4798      	blx	r3
  40098c:	bd10      	pop	{r4, pc}
  40098e:	4770      	bx	lr
  400990:	00402ca9 	.word	0x00402ca9

00400994 <prvUnlockQueue>:
{
  400994:	b538      	push	{r3, r4, r5, lr}
  400996:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  400998:	4b1f      	ldr	r3, [pc, #124]	; (400a18 <prvUnlockQueue+0x84>)
  40099a:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
  40099c:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  4009a0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  4009a2:	e008      	b.n	4009b6 <prvUnlockQueue+0x22>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4009a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  4009a6:	b1bb      	cbz	r3, 4009d8 <prvUnlockQueue+0x44>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009a8:	f105 0024 	add.w	r0, r5, #36	; 0x24
  4009ac:	4b1b      	ldr	r3, [pc, #108]	; (400a1c <prvUnlockQueue+0x88>)
  4009ae:	4798      	blx	r3
  4009b0:	b978      	cbnz	r0, 4009d2 <prvUnlockQueue+0x3e>
			--cTxLock;
  4009b2:	3c01      	subs	r4, #1
  4009b4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  4009b6:	2c00      	cmp	r4, #0
  4009b8:	dd0e      	ble.n	4009d8 <prvUnlockQueue+0x44>
				if( pxQueue->pxQueueSetContainer != NULL )
  4009ba:	6cab      	ldr	r3, [r5, #72]	; 0x48
  4009bc:	2b00      	cmp	r3, #0
  4009be:	d0f1      	beq.n	4009a4 <prvUnlockQueue+0x10>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  4009c0:	2100      	movs	r1, #0
  4009c2:	4628      	mov	r0, r5
  4009c4:	4b16      	ldr	r3, [pc, #88]	; (400a20 <prvUnlockQueue+0x8c>)
  4009c6:	4798      	blx	r3
  4009c8:	2800      	cmp	r0, #0
  4009ca:	d0f2      	beq.n	4009b2 <prvUnlockQueue+0x1e>
						vTaskMissedYield();
  4009cc:	4b15      	ldr	r3, [pc, #84]	; (400a24 <prvUnlockQueue+0x90>)
  4009ce:	4798      	blx	r3
  4009d0:	e7ef      	b.n	4009b2 <prvUnlockQueue+0x1e>
							vTaskMissedYield();
  4009d2:	4b14      	ldr	r3, [pc, #80]	; (400a24 <prvUnlockQueue+0x90>)
  4009d4:	4798      	blx	r3
  4009d6:	e7ec      	b.n	4009b2 <prvUnlockQueue+0x1e>
		pxQueue->cTxLock = queueUNLOCKED;
  4009d8:	23ff      	movs	r3, #255	; 0xff
  4009da:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
  4009de:	4b12      	ldr	r3, [pc, #72]	; (400a28 <prvUnlockQueue+0x94>)
  4009e0:	4798      	blx	r3
	taskENTER_CRITICAL();
  4009e2:	4b0d      	ldr	r3, [pc, #52]	; (400a18 <prvUnlockQueue+0x84>)
  4009e4:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
  4009e6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  4009ea:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  4009ec:	e001      	b.n	4009f2 <prvUnlockQueue+0x5e>
				--cRxLock;
  4009ee:	3c01      	subs	r4, #1
  4009f0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  4009f2:	2c00      	cmp	r4, #0
  4009f4:	dd0a      	ble.n	400a0c <prvUnlockQueue+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4009f6:	692b      	ldr	r3, [r5, #16]
  4009f8:	b143      	cbz	r3, 400a0c <prvUnlockQueue+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4009fa:	f105 0010 	add.w	r0, r5, #16
  4009fe:	4b07      	ldr	r3, [pc, #28]	; (400a1c <prvUnlockQueue+0x88>)
  400a00:	4798      	blx	r3
  400a02:	2800      	cmp	r0, #0
  400a04:	d0f3      	beq.n	4009ee <prvUnlockQueue+0x5a>
					vTaskMissedYield();
  400a06:	4b07      	ldr	r3, [pc, #28]	; (400a24 <prvUnlockQueue+0x90>)
  400a08:	4798      	blx	r3
  400a0a:	e7f0      	b.n	4009ee <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
  400a0c:	23ff      	movs	r3, #255	; 0xff
  400a0e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
  400a12:	4b05      	ldr	r3, [pc, #20]	; (400a28 <prvUnlockQueue+0x94>)
  400a14:	4798      	blx	r3
  400a16:	bd38      	pop	{r3, r4, r5, pc}
  400a18:	004002c5 	.word	0x004002c5
  400a1c:	004018d9 	.word	0x004018d9
  400a20:	004008e9 	.word	0x004008e9
  400a24:	00401a0d 	.word	0x00401a0d
  400a28:	0040030d 	.word	0x0040030d

00400a2c <xQueueGenericReset>:
{
  400a2c:	b538      	push	{r3, r4, r5, lr}
  400a2e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
  400a30:	4604      	mov	r4, r0
  400a32:	b1d0      	cbz	r0, 400a6a <xQueueGenericReset+0x3e>
	taskENTER_CRITICAL();
  400a34:	4b1b      	ldr	r3, [pc, #108]	; (400aa4 <xQueueGenericReset+0x78>)
  400a36:	4798      	blx	r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400a38:	6821      	ldr	r1, [r4, #0]
  400a3a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  400a3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400a3e:	fb03 1002 	mla	r0, r3, r2, r1
  400a42:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400a44:	2000      	movs	r0, #0
  400a46:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400a48:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400a4a:	3a01      	subs	r2, #1
  400a4c:	fb02 1303 	mla	r3, r2, r3, r1
  400a50:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  400a52:	23ff      	movs	r3, #255	; 0xff
  400a54:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  400a58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  400a5c:	b9d5      	cbnz	r5, 400a94 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a5e:	6923      	ldr	r3, [r4, #16]
  400a60:	b94b      	cbnz	r3, 400a76 <xQueueGenericReset+0x4a>
	taskEXIT_CRITICAL();
  400a62:	4b11      	ldr	r3, [pc, #68]	; (400aa8 <xQueueGenericReset+0x7c>)
  400a64:	4798      	blx	r3
}
  400a66:	2001      	movs	r0, #1
  400a68:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
  400a6a:	f240 1103 	movw	r1, #259	; 0x103
  400a6e:	480f      	ldr	r0, [pc, #60]	; (400aac <xQueueGenericReset+0x80>)
  400a70:	4b0f      	ldr	r3, [pc, #60]	; (400ab0 <xQueueGenericReset+0x84>)
  400a72:	4798      	blx	r3
  400a74:	e7de      	b.n	400a34 <xQueueGenericReset+0x8>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a76:	f104 0010 	add.w	r0, r4, #16
  400a7a:	4b0e      	ldr	r3, [pc, #56]	; (400ab4 <xQueueGenericReset+0x88>)
  400a7c:	4798      	blx	r3
  400a7e:	2800      	cmp	r0, #0
  400a80:	d0ef      	beq.n	400a62 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
  400a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400a86:	4b0c      	ldr	r3, [pc, #48]	; (400ab8 <xQueueGenericReset+0x8c>)
  400a88:	601a      	str	r2, [r3, #0]
  400a8a:	f3bf 8f4f 	dsb	sy
  400a8e:	f3bf 8f6f 	isb	sy
  400a92:	e7e6      	b.n	400a62 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400a94:	f104 0010 	add.w	r0, r4, #16
  400a98:	4d08      	ldr	r5, [pc, #32]	; (400abc <xQueueGenericReset+0x90>)
  400a9a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400a9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400aa0:	47a8      	blx	r5
  400aa2:	e7de      	b.n	400a62 <xQueueGenericReset+0x36>
  400aa4:	004002c5 	.word	0x004002c5
  400aa8:	0040030d 	.word	0x0040030d
  400aac:	00402ff4 	.word	0x00402ff4
  400ab0:	00402c05 	.word	0x00402c05
  400ab4:	004018d9 	.word	0x004018d9
  400ab8:	e000ed04 	.word	0xe000ed04
  400abc:	00400165 	.word	0x00400165

00400ac0 <prvInitialiseNewQueue>:
{
  400ac0:	b510      	push	{r4, lr}
  400ac2:	9c02      	ldr	r4, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
  400ac4:	460b      	mov	r3, r1
  400ac6:	b149      	cbz	r1, 400adc <prvInitialiseNewQueue+0x1c>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  400ac8:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
  400aca:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  400acc:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400ace:	2101      	movs	r1, #1
  400ad0:	4620      	mov	r0, r4
  400ad2:	4b03      	ldr	r3, [pc, #12]	; (400ae0 <prvInitialiseNewQueue+0x20>)
  400ad4:	4798      	blx	r3
		pxNewQueue->pxQueueSetContainer = NULL;
  400ad6:	2300      	movs	r3, #0
  400ad8:	64a3      	str	r3, [r4, #72]	; 0x48
  400ada:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400adc:	6024      	str	r4, [r4, #0]
  400ade:	e7f4      	b.n	400aca <prvInitialiseNewQueue+0xa>
  400ae0:	00400a2d 	.word	0x00400a2d

00400ae4 <xQueueGenericCreate>:
	{
  400ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
  400ae6:	b083      	sub	sp, #12
  400ae8:	460d      	mov	r5, r1
  400aea:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400aec:	4606      	mov	r6, r0
  400aee:	b190      	cbz	r0, 400b16 <xQueueGenericCreate+0x32>
		if( uxItemSize == ( UBaseType_t ) 0 )
  400af0:	b1bd      	cbz	r5, 400b22 <xQueueGenericCreate+0x3e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400af2:	fb05 f006 	mul.w	r0, r5, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
  400af6:	304c      	adds	r0, #76	; 0x4c
  400af8:	4b0b      	ldr	r3, [pc, #44]	; (400b28 <xQueueGenericCreate+0x44>)
  400afa:	4798      	blx	r3
		if( pxNewQueue != NULL )
  400afc:	4604      	mov	r4, r0
  400afe:	b138      	cbz	r0, 400b10 <xQueueGenericCreate+0x2c>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
  400b00:	9000      	str	r0, [sp, #0]
  400b02:	463b      	mov	r3, r7
  400b04:	f100 024c 	add.w	r2, r0, #76	; 0x4c
  400b08:	4629      	mov	r1, r5
  400b0a:	4630      	mov	r0, r6
  400b0c:	4d07      	ldr	r5, [pc, #28]	; (400b2c <xQueueGenericCreate+0x48>)
  400b0e:	47a8      	blx	r5
	}
  400b10:	4620      	mov	r0, r4
  400b12:	b003      	add	sp, #12
  400b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400b16:	f44f 71bb 	mov.w	r1, #374	; 0x176
  400b1a:	4805      	ldr	r0, [pc, #20]	; (400b30 <xQueueGenericCreate+0x4c>)
  400b1c:	4b05      	ldr	r3, [pc, #20]	; (400b34 <xQueueGenericCreate+0x50>)
  400b1e:	4798      	blx	r3
  400b20:	e7e6      	b.n	400af0 <xQueueGenericCreate+0xc>
			xQueueSizeInBytes = ( size_t ) 0;
  400b22:	2000      	movs	r0, #0
  400b24:	e7e7      	b.n	400af6 <xQueueGenericCreate+0x12>
  400b26:	bf00      	nop
  400b28:	004005d9 	.word	0x004005d9
  400b2c:	00400ac1 	.word	0x00400ac1
  400b30:	00402ff4 	.word	0x00402ff4
  400b34:	00402c05 	.word	0x00402c05

00400b38 <xQueueGenericSend>:
{
  400b38:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b3a:	b085      	sub	sp, #20
  400b3c:	460f      	mov	r7, r1
  400b3e:	9201      	str	r2, [sp, #4]
  400b40:	461e      	mov	r6, r3
	configASSERT( pxQueue );
  400b42:	4604      	mov	r4, r0
  400b44:	b168      	cbz	r0, 400b62 <xQueueGenericSend+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400b46:	b197      	cbz	r7, 400b6e <xQueueGenericSend+0x36>
  400b48:	2301      	movs	r3, #1
  400b4a:	b1b3      	cbz	r3, 400b7a <xQueueGenericSend+0x42>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400b4c:	2e02      	cmp	r6, #2
  400b4e:	d01a      	beq.n	400b86 <xQueueGenericSend+0x4e>
  400b50:	2301      	movs	r3, #1
  400b52:	b1eb      	cbz	r3, 400b90 <xQueueGenericSend+0x58>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400b54:	4b63      	ldr	r3, [pc, #396]	; (400ce4 <xQueueGenericSend+0x1ac>)
  400b56:	4798      	blx	r3
  400b58:	bb00      	cbnz	r0, 400b9c <xQueueGenericSend+0x64>
  400b5a:	9b01      	ldr	r3, [sp, #4]
  400b5c:	bb13      	cbnz	r3, 400ba4 <xQueueGenericSend+0x6c>
  400b5e:	2301      	movs	r3, #1
  400b60:	e01d      	b.n	400b9e <xQueueGenericSend+0x66>
	configASSERT( pxQueue );
  400b62:	f240 21f1 	movw	r1, #753	; 0x2f1
  400b66:	4860      	ldr	r0, [pc, #384]	; (400ce8 <xQueueGenericSend+0x1b0>)
  400b68:	4b60      	ldr	r3, [pc, #384]	; (400cec <xQueueGenericSend+0x1b4>)
  400b6a:	4798      	blx	r3
  400b6c:	e7eb      	b.n	400b46 <xQueueGenericSend+0xe>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400b6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400b70:	b90b      	cbnz	r3, 400b76 <xQueueGenericSend+0x3e>
  400b72:	2301      	movs	r3, #1
  400b74:	e7e9      	b.n	400b4a <xQueueGenericSend+0x12>
  400b76:	2300      	movs	r3, #0
  400b78:	e7e7      	b.n	400b4a <xQueueGenericSend+0x12>
  400b7a:	f240 21f2 	movw	r1, #754	; 0x2f2
  400b7e:	485a      	ldr	r0, [pc, #360]	; (400ce8 <xQueueGenericSend+0x1b0>)
  400b80:	4b5a      	ldr	r3, [pc, #360]	; (400cec <xQueueGenericSend+0x1b4>)
  400b82:	4798      	blx	r3
  400b84:	e7e2      	b.n	400b4c <xQueueGenericSend+0x14>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400b86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400b88:	2b01      	cmp	r3, #1
  400b8a:	d0e2      	beq.n	400b52 <xQueueGenericSend+0x1a>
  400b8c:	2300      	movs	r3, #0
  400b8e:	e7e0      	b.n	400b52 <xQueueGenericSend+0x1a>
  400b90:	f240 21f3 	movw	r1, #755	; 0x2f3
  400b94:	4854      	ldr	r0, [pc, #336]	; (400ce8 <xQueueGenericSend+0x1b0>)
  400b96:	4b55      	ldr	r3, [pc, #340]	; (400cec <xQueueGenericSend+0x1b4>)
  400b98:	4798      	blx	r3
  400b9a:	e7db      	b.n	400b54 <xQueueGenericSend+0x1c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400b9c:	2301      	movs	r3, #1
  400b9e:	b11b      	cbz	r3, 400ba8 <xQueueGenericSend+0x70>
  400ba0:	2500      	movs	r5, #0
  400ba2:	e058      	b.n	400c56 <xQueueGenericSend+0x11e>
  400ba4:	2300      	movs	r3, #0
  400ba6:	e7fa      	b.n	400b9e <xQueueGenericSend+0x66>
  400ba8:	f240 21f6 	movw	r1, #758	; 0x2f6
  400bac:	484e      	ldr	r0, [pc, #312]	; (400ce8 <xQueueGenericSend+0x1b0>)
  400bae:	4b4f      	ldr	r3, [pc, #316]	; (400cec <xQueueGenericSend+0x1b4>)
  400bb0:	4798      	blx	r3
  400bb2:	e7f5      	b.n	400ba0 <xQueueGenericSend+0x68>
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  400bb4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400bb6:	4632      	mov	r2, r6
  400bb8:	4639      	mov	r1, r7
  400bba:	4620      	mov	r0, r4
  400bbc:	4b4c      	ldr	r3, [pc, #304]	; (400cf0 <xQueueGenericSend+0x1b8>)
  400bbe:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  400bc0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400bc2:	b1b3      	cbz	r3, 400bf2 <xQueueGenericSend+0xba>
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400bc4:	2e02      	cmp	r6, #2
  400bc6:	d011      	beq.n	400bec <xQueueGenericSend+0xb4>
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  400bc8:	4631      	mov	r1, r6
  400bca:	4620      	mov	r0, r4
  400bcc:	4b49      	ldr	r3, [pc, #292]	; (400cf4 <xQueueGenericSend+0x1bc>)
  400bce:	4798      	blx	r3
  400bd0:	b138      	cbz	r0, 400be2 <xQueueGenericSend+0xaa>
							queueYIELD_IF_USING_PREEMPTION();
  400bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400bd6:	4b48      	ldr	r3, [pc, #288]	; (400cf8 <xQueueGenericSend+0x1c0>)
  400bd8:	601a      	str	r2, [r3, #0]
  400bda:	f3bf 8f4f 	dsb	sy
  400bde:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  400be2:	4b46      	ldr	r3, [pc, #280]	; (400cfc <xQueueGenericSend+0x1c4>)
  400be4:	4798      	blx	r3
				return pdPASS;
  400be6:	2001      	movs	r0, #1
}
  400be8:	b005      	add	sp, #20
  400bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400bec:	2d00      	cmp	r5, #0
  400bee:	d0eb      	beq.n	400bc8 <xQueueGenericSend+0x90>
  400bf0:	e7f7      	b.n	400be2 <xQueueGenericSend+0xaa>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400bf4:	b953      	cbnz	r3, 400c0c <xQueueGenericSend+0xd4>
						else if( xYieldRequired != pdFALSE )
  400bf6:	2800      	cmp	r0, #0
  400bf8:	d0f3      	beq.n	400be2 <xQueueGenericSend+0xaa>
							queueYIELD_IF_USING_PREEMPTION();
  400bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400bfe:	4b3e      	ldr	r3, [pc, #248]	; (400cf8 <xQueueGenericSend+0x1c0>)
  400c00:	601a      	str	r2, [r3, #0]
  400c02:	f3bf 8f4f 	dsb	sy
  400c06:	f3bf 8f6f 	isb	sy
  400c0a:	e7ea      	b.n	400be2 <xQueueGenericSend+0xaa>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400c0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400c10:	4b3b      	ldr	r3, [pc, #236]	; (400d00 <xQueueGenericSend+0x1c8>)
  400c12:	4798      	blx	r3
  400c14:	2800      	cmp	r0, #0
  400c16:	d0e4      	beq.n	400be2 <xQueueGenericSend+0xaa>
								queueYIELD_IF_USING_PREEMPTION();
  400c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c1c:	4b36      	ldr	r3, [pc, #216]	; (400cf8 <xQueueGenericSend+0x1c0>)
  400c1e:	601a      	str	r2, [r3, #0]
  400c20:	f3bf 8f4f 	dsb	sy
  400c24:	f3bf 8f6f 	isb	sy
  400c28:	e7db      	b.n	400be2 <xQueueGenericSend+0xaa>
					taskEXIT_CRITICAL();
  400c2a:	4b34      	ldr	r3, [pc, #208]	; (400cfc <xQueueGenericSend+0x1c4>)
  400c2c:	4798      	blx	r3
					return errQUEUE_FULL;
  400c2e:	2000      	movs	r0, #0
  400c30:	e7da      	b.n	400be8 <xQueueGenericSend+0xb0>
					vTaskInternalSetTimeOutState( &xTimeOut );
  400c32:	a802      	add	r0, sp, #8
  400c34:	4b33      	ldr	r3, [pc, #204]	; (400d04 <xQueueGenericSend+0x1cc>)
  400c36:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400c38:	2501      	movs	r5, #1
  400c3a:	e019      	b.n	400c70 <xQueueGenericSend+0x138>
		prvLockQueue( pxQueue );
  400c3c:	2300      	movs	r3, #0
  400c3e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  400c42:	e021      	b.n	400c88 <xQueueGenericSend+0x150>
  400c44:	2300      	movs	r3, #0
  400c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  400c4a:	e023      	b.n	400c94 <xQueueGenericSend+0x15c>
				prvUnlockQueue( pxQueue );
  400c4c:	4620      	mov	r0, r4
  400c4e:	4b2e      	ldr	r3, [pc, #184]	; (400d08 <xQueueGenericSend+0x1d0>)
  400c50:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400c52:	4b2e      	ldr	r3, [pc, #184]	; (400d0c <xQueueGenericSend+0x1d4>)
  400c54:	4798      	blx	r3
		taskENTER_CRITICAL();
  400c56:	4b2e      	ldr	r3, [pc, #184]	; (400d10 <xQueueGenericSend+0x1d8>)
  400c58:	4798      	blx	r3
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400c5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400c5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400c5e:	429a      	cmp	r2, r3
  400c60:	d3a8      	bcc.n	400bb4 <xQueueGenericSend+0x7c>
  400c62:	2e02      	cmp	r6, #2
  400c64:	d0a6      	beq.n	400bb4 <xQueueGenericSend+0x7c>
				if( xTicksToWait == ( TickType_t ) 0 )
  400c66:	9b01      	ldr	r3, [sp, #4]
  400c68:	2b00      	cmp	r3, #0
  400c6a:	d0de      	beq.n	400c2a <xQueueGenericSend+0xf2>
				else if( xEntryTimeSet == pdFALSE )
  400c6c:	2d00      	cmp	r5, #0
  400c6e:	d0e0      	beq.n	400c32 <xQueueGenericSend+0xfa>
		taskEXIT_CRITICAL();
  400c70:	4b22      	ldr	r3, [pc, #136]	; (400cfc <xQueueGenericSend+0x1c4>)
  400c72:	4798      	blx	r3
		vTaskSuspendAll();
  400c74:	4b27      	ldr	r3, [pc, #156]	; (400d14 <xQueueGenericSend+0x1dc>)
  400c76:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400c78:	4b25      	ldr	r3, [pc, #148]	; (400d10 <xQueueGenericSend+0x1d8>)
  400c7a:	4798      	blx	r3
  400c7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400c80:	b25b      	sxtb	r3, r3
  400c82:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c86:	d0d9      	beq.n	400c3c <xQueueGenericSend+0x104>
  400c88:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400c8c:	b25b      	sxtb	r3, r3
  400c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c92:	d0d7      	beq.n	400c44 <xQueueGenericSend+0x10c>
  400c94:	4b19      	ldr	r3, [pc, #100]	; (400cfc <xQueueGenericSend+0x1c4>)
  400c96:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400c98:	a901      	add	r1, sp, #4
  400c9a:	a802      	add	r0, sp, #8
  400c9c:	4b1e      	ldr	r3, [pc, #120]	; (400d18 <xQueueGenericSend+0x1e0>)
  400c9e:	4798      	blx	r3
  400ca0:	b9c8      	cbnz	r0, 400cd6 <xQueueGenericSend+0x19e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400ca2:	4620      	mov	r0, r4
  400ca4:	4b1d      	ldr	r3, [pc, #116]	; (400d1c <xQueueGenericSend+0x1e4>)
  400ca6:	4798      	blx	r3
  400ca8:	2800      	cmp	r0, #0
  400caa:	d0cf      	beq.n	400c4c <xQueueGenericSend+0x114>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400cac:	9901      	ldr	r1, [sp, #4]
  400cae:	f104 0010 	add.w	r0, r4, #16
  400cb2:	4b1b      	ldr	r3, [pc, #108]	; (400d20 <xQueueGenericSend+0x1e8>)
  400cb4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400cb6:	4620      	mov	r0, r4
  400cb8:	4b13      	ldr	r3, [pc, #76]	; (400d08 <xQueueGenericSend+0x1d0>)
  400cba:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400cbc:	4b13      	ldr	r3, [pc, #76]	; (400d0c <xQueueGenericSend+0x1d4>)
  400cbe:	4798      	blx	r3
  400cc0:	2800      	cmp	r0, #0
  400cc2:	d1c8      	bne.n	400c56 <xQueueGenericSend+0x11e>
					portYIELD_WITHIN_API();
  400cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400cc8:	4b0b      	ldr	r3, [pc, #44]	; (400cf8 <xQueueGenericSend+0x1c0>)
  400cca:	601a      	str	r2, [r3, #0]
  400ccc:	f3bf 8f4f 	dsb	sy
  400cd0:	f3bf 8f6f 	isb	sy
  400cd4:	e7bf      	b.n	400c56 <xQueueGenericSend+0x11e>
			prvUnlockQueue( pxQueue );
  400cd6:	4620      	mov	r0, r4
  400cd8:	4b0b      	ldr	r3, [pc, #44]	; (400d08 <xQueueGenericSend+0x1d0>)
  400cda:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400cdc:	4b0b      	ldr	r3, [pc, #44]	; (400d0c <xQueueGenericSend+0x1d4>)
  400cde:	4798      	blx	r3
			return errQUEUE_FULL;
  400ce0:	2000      	movs	r0, #0
  400ce2:	e781      	b.n	400be8 <xQueueGenericSend+0xb0>
  400ce4:	00401a19 	.word	0x00401a19
  400ce8:	00402ff4 	.word	0x00402ff4
  400cec:	00402c05 	.word	0x00402c05
  400cf0:	00400869 	.word	0x00400869
  400cf4:	004008e9 	.word	0x004008e9
  400cf8:	e000ed04 	.word	0xe000ed04
  400cfc:	0040030d 	.word	0x0040030d
  400d00:	004018d9 	.word	0x004018d9
  400d04:	0040196d 	.word	0x0040196d
  400d08:	00400995 	.word	0x00400995
  400d0c:	00401609 	.word	0x00401609
  400d10:	004002c5 	.word	0x004002c5
  400d14:	004014c9 	.word	0x004014c9
  400d18:	00401985 	.word	0x00401985
  400d1c:	0040081d 	.word	0x0040081d
  400d20:	00401851 	.word	0x00401851

00400d24 <xQueueGenericSendFromISR>:
{
  400d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400d28:	460f      	mov	r7, r1
  400d2a:	4691      	mov	r9, r2
  400d2c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
  400d2e:	4604      	mov	r4, r0
  400d30:	b1e8      	cbz	r0, 400d6e <xQueueGenericSendFromISR+0x4a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400d32:	b317      	cbz	r7, 400d7a <xQueueGenericSendFromISR+0x56>
  400d34:	2301      	movs	r3, #1
  400d36:	b333      	cbz	r3, 400d86 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400d38:	2e02      	cmp	r6, #2
  400d3a:	d02a      	beq.n	400d92 <xQueueGenericSendFromISR+0x6e>
  400d3c:	2301      	movs	r3, #1
  400d3e:	b36b      	cbz	r3, 400d9c <xQueueGenericSendFromISR+0x78>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400d40:	4b35      	ldr	r3, [pc, #212]	; (400e18 <xQueueGenericSendFromISR+0xf4>)
  400d42:	4798      	blx	r3
	__asm volatile
  400d44:	f3ef 8811 	mrs	r8, BASEPRI
  400d48:	f04f 0350 	mov.w	r3, #80	; 0x50
  400d4c:	f383 8811 	msr	BASEPRI, r3
  400d50:	f3bf 8f6f 	isb	sy
  400d54:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400d58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400d5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d5c:	429a      	cmp	r2, r3
  400d5e:	d323      	bcc.n	400da8 <xQueueGenericSendFromISR+0x84>
  400d60:	2e02      	cmp	r6, #2
  400d62:	d021      	beq.n	400da8 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
  400d64:	2000      	movs	r0, #0
	__asm volatile
  400d66:	f388 8811 	msr	BASEPRI, r8
}
  400d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( pxQueue );
  400d6e:	f240 31c3 	movw	r1, #963	; 0x3c3
  400d72:	482a      	ldr	r0, [pc, #168]	; (400e1c <xQueueGenericSendFromISR+0xf8>)
  400d74:	4b2a      	ldr	r3, [pc, #168]	; (400e20 <xQueueGenericSendFromISR+0xfc>)
  400d76:	4798      	blx	r3
  400d78:	e7db      	b.n	400d32 <xQueueGenericSendFromISR+0xe>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400d7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400d7c:	b90b      	cbnz	r3, 400d82 <xQueueGenericSendFromISR+0x5e>
  400d7e:	2301      	movs	r3, #1
  400d80:	e7d9      	b.n	400d36 <xQueueGenericSendFromISR+0x12>
  400d82:	2300      	movs	r3, #0
  400d84:	e7d7      	b.n	400d36 <xQueueGenericSendFromISR+0x12>
  400d86:	f44f 7171 	mov.w	r1, #964	; 0x3c4
  400d8a:	4824      	ldr	r0, [pc, #144]	; (400e1c <xQueueGenericSendFromISR+0xf8>)
  400d8c:	4b24      	ldr	r3, [pc, #144]	; (400e20 <xQueueGenericSendFromISR+0xfc>)
  400d8e:	4798      	blx	r3
  400d90:	e7d2      	b.n	400d38 <xQueueGenericSendFromISR+0x14>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400d92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d94:	2b01      	cmp	r3, #1
  400d96:	d0d2      	beq.n	400d3e <xQueueGenericSendFromISR+0x1a>
  400d98:	2300      	movs	r3, #0
  400d9a:	e7d0      	b.n	400d3e <xQueueGenericSendFromISR+0x1a>
  400d9c:	f240 31c5 	movw	r1, #965	; 0x3c5
  400da0:	481e      	ldr	r0, [pc, #120]	; (400e1c <xQueueGenericSendFromISR+0xf8>)
  400da2:	4b1f      	ldr	r3, [pc, #124]	; (400e20 <xQueueGenericSendFromISR+0xfc>)
  400da4:	4798      	blx	r3
  400da6:	e7cb      	b.n	400d40 <xQueueGenericSendFromISR+0x1c>
			const int8_t cTxLock = pxQueue->cTxLock;
  400da8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  400dac:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400dae:	4632      	mov	r2, r6
  400db0:	4639      	mov	r1, r7
  400db2:	4620      	mov	r0, r4
  400db4:	4b1b      	ldr	r3, [pc, #108]	; (400e24 <xQueueGenericSendFromISR+0x100>)
  400db6:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
  400db8:	f1b5 3fff 	cmp.w	r5, #4294967295
  400dbc:	d005      	beq.n	400dca <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  400dbe:	3501      	adds	r5, #1
  400dc0:	b26d      	sxtb	r5, r5
  400dc2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			xReturn = pdPASS;
  400dc6:	2001      	movs	r0, #1
  400dc8:	e7cd      	b.n	400d66 <xQueueGenericSendFromISR+0x42>
					if( pxQueue->pxQueueSetContainer != NULL )
  400dca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400dcc:	b15b      	cbz	r3, 400de6 <xQueueGenericSendFromISR+0xc2>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  400dce:	4631      	mov	r1, r6
  400dd0:	4620      	mov	r0, r4
  400dd2:	4b15      	ldr	r3, [pc, #84]	; (400e28 <xQueueGenericSendFromISR+0x104>)
  400dd4:	4798      	blx	r3
  400dd6:	b1b0      	cbz	r0, 400e06 <xQueueGenericSendFromISR+0xe2>
							if( pxHigherPriorityTaskWoken != NULL )
  400dd8:	f1b9 0f00 	cmp.w	r9, #0
  400ddc:	d015      	beq.n	400e0a <xQueueGenericSendFromISR+0xe6>
								*pxHigherPriorityTaskWoken = pdTRUE;
  400dde:	2001      	movs	r0, #1
  400de0:	f8c9 0000 	str.w	r0, [r9]
  400de4:	e7bf      	b.n	400d66 <xQueueGenericSendFromISR+0x42>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400de6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400de8:	b90b      	cbnz	r3, 400dee <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
  400dea:	2001      	movs	r0, #1
  400dec:	e7bb      	b.n	400d66 <xQueueGenericSendFromISR+0x42>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400dee:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400df2:	4b0e      	ldr	r3, [pc, #56]	; (400e2c <xQueueGenericSendFromISR+0x108>)
  400df4:	4798      	blx	r3
  400df6:	b150      	cbz	r0, 400e0e <xQueueGenericSendFromISR+0xea>
								if( pxHigherPriorityTaskWoken != NULL )
  400df8:	f1b9 0f00 	cmp.w	r9, #0
  400dfc:	d009      	beq.n	400e12 <xQueueGenericSendFromISR+0xee>
									*pxHigherPriorityTaskWoken = pdTRUE;
  400dfe:	2001      	movs	r0, #1
  400e00:	f8c9 0000 	str.w	r0, [r9]
  400e04:	e7af      	b.n	400d66 <xQueueGenericSendFromISR+0x42>
			xReturn = pdPASS;
  400e06:	2001      	movs	r0, #1
  400e08:	e7ad      	b.n	400d66 <xQueueGenericSendFromISR+0x42>
  400e0a:	2001      	movs	r0, #1
  400e0c:	e7ab      	b.n	400d66 <xQueueGenericSendFromISR+0x42>
  400e0e:	2001      	movs	r0, #1
  400e10:	e7a9      	b.n	400d66 <xQueueGenericSendFromISR+0x42>
  400e12:	2001      	movs	r0, #1
  400e14:	e7a7      	b.n	400d66 <xQueueGenericSendFromISR+0x42>
  400e16:	bf00      	nop
  400e18:	00400525 	.word	0x00400525
  400e1c:	00402ff4 	.word	0x00402ff4
  400e20:	00402c05 	.word	0x00402c05
  400e24:	00400869 	.word	0x00400869
  400e28:	004008e9 	.word	0x004008e9
  400e2c:	004018d9 	.word	0x004018d9

00400e30 <xQueueReceive>:
{
  400e30:	b5f0      	push	{r4, r5, r6, r7, lr}
  400e32:	b085      	sub	sp, #20
  400e34:	460f      	mov	r7, r1
  400e36:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
  400e38:	4604      	mov	r4, r0
  400e3a:	b148      	cbz	r0, 400e50 <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e3c:	b177      	cbz	r7, 400e5c <xQueueReceive+0x2c>
  400e3e:	2301      	movs	r3, #1
  400e40:	b193      	cbz	r3, 400e68 <xQueueReceive+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400e42:	4b51      	ldr	r3, [pc, #324]	; (400f88 <xQueueReceive+0x158>)
  400e44:	4798      	blx	r3
  400e46:	b9a8      	cbnz	r0, 400e74 <xQueueReceive+0x44>
  400e48:	9b01      	ldr	r3, [sp, #4]
  400e4a:	b9bb      	cbnz	r3, 400e7c <xQueueReceive+0x4c>
  400e4c:	2301      	movs	r3, #1
  400e4e:	e012      	b.n	400e76 <xQueueReceive+0x46>
	configASSERT( ( pxQueue ) );
  400e50:	f44f 61a0 	mov.w	r1, #1280	; 0x500
  400e54:	484d      	ldr	r0, [pc, #308]	; (400f8c <xQueueReceive+0x15c>)
  400e56:	4b4e      	ldr	r3, [pc, #312]	; (400f90 <xQueueReceive+0x160>)
  400e58:	4798      	blx	r3
  400e5a:	e7ef      	b.n	400e3c <xQueueReceive+0xc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400e5e:	b90b      	cbnz	r3, 400e64 <xQueueReceive+0x34>
  400e60:	2301      	movs	r3, #1
  400e62:	e7ed      	b.n	400e40 <xQueueReceive+0x10>
  400e64:	2300      	movs	r3, #0
  400e66:	e7eb      	b.n	400e40 <xQueueReceive+0x10>
  400e68:	f240 5104 	movw	r1, #1284	; 0x504
  400e6c:	4847      	ldr	r0, [pc, #284]	; (400f8c <xQueueReceive+0x15c>)
  400e6e:	4b48      	ldr	r3, [pc, #288]	; (400f90 <xQueueReceive+0x160>)
  400e70:	4798      	blx	r3
  400e72:	e7e6      	b.n	400e42 <xQueueReceive+0x12>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400e74:	2301      	movs	r3, #1
  400e76:	b11b      	cbz	r3, 400e80 <xQueueReceive+0x50>
  400e78:	2600      	movs	r6, #0
  400e7a:	e044      	b.n	400f06 <xQueueReceive+0xd6>
  400e7c:	2300      	movs	r3, #0
  400e7e:	e7fa      	b.n	400e76 <xQueueReceive+0x46>
  400e80:	f240 5109 	movw	r1, #1289	; 0x509
  400e84:	4841      	ldr	r0, [pc, #260]	; (400f8c <xQueueReceive+0x15c>)
  400e86:	4b42      	ldr	r3, [pc, #264]	; (400f90 <xQueueReceive+0x160>)
  400e88:	4798      	blx	r3
  400e8a:	e7f5      	b.n	400e78 <xQueueReceive+0x48>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400e8c:	4639      	mov	r1, r7
  400e8e:	4620      	mov	r0, r4
  400e90:	4b40      	ldr	r3, [pc, #256]	; (400f94 <xQueueReceive+0x164>)
  400e92:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  400e94:	3d01      	subs	r5, #1
  400e96:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400e98:	6923      	ldr	r3, [r4, #16]
  400e9a:	b923      	cbnz	r3, 400ea6 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
  400e9c:	4b3e      	ldr	r3, [pc, #248]	; (400f98 <xQueueReceive+0x168>)
  400e9e:	4798      	blx	r3
				return pdPASS;
  400ea0:	2001      	movs	r0, #1
}
  400ea2:	b005      	add	sp, #20
  400ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400ea6:	f104 0010 	add.w	r0, r4, #16
  400eaa:	4b3c      	ldr	r3, [pc, #240]	; (400f9c <xQueueReceive+0x16c>)
  400eac:	4798      	blx	r3
  400eae:	2800      	cmp	r0, #0
  400eb0:	d0f4      	beq.n	400e9c <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
  400eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400eb6:	4b3a      	ldr	r3, [pc, #232]	; (400fa0 <xQueueReceive+0x170>)
  400eb8:	601a      	str	r2, [r3, #0]
  400eba:	f3bf 8f4f 	dsb	sy
  400ebe:	f3bf 8f6f 	isb	sy
  400ec2:	e7eb      	b.n	400e9c <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
  400ec4:	4b34      	ldr	r3, [pc, #208]	; (400f98 <xQueueReceive+0x168>)
  400ec6:	4798      	blx	r3
					return errQUEUE_EMPTY;
  400ec8:	2000      	movs	r0, #0
  400eca:	e7ea      	b.n	400ea2 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
  400ecc:	a802      	add	r0, sp, #8
  400ece:	4b35      	ldr	r3, [pc, #212]	; (400fa4 <xQueueReceive+0x174>)
  400ed0:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400ed2:	2601      	movs	r6, #1
  400ed4:	e021      	b.n	400f1a <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
  400ed6:	2300      	movs	r3, #0
  400ed8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  400edc:	e029      	b.n	400f32 <xQueueReceive+0x102>
  400ede:	2300      	movs	r3, #0
  400ee0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  400ee4:	e02b      	b.n	400f3e <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
  400ee6:	4620      	mov	r0, r4
  400ee8:	4b2f      	ldr	r3, [pc, #188]	; (400fa8 <xQueueReceive+0x178>)
  400eea:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400eec:	4b2f      	ldr	r3, [pc, #188]	; (400fac <xQueueReceive+0x17c>)
  400eee:	4798      	blx	r3
  400ef0:	e009      	b.n	400f06 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
  400ef2:	4620      	mov	r0, r4
  400ef4:	4b2c      	ldr	r3, [pc, #176]	; (400fa8 <xQueueReceive+0x178>)
  400ef6:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400ef8:	4b2c      	ldr	r3, [pc, #176]	; (400fac <xQueueReceive+0x17c>)
  400efa:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400efc:	4620      	mov	r0, r4
  400efe:	4b2c      	ldr	r3, [pc, #176]	; (400fb0 <xQueueReceive+0x180>)
  400f00:	4798      	blx	r3
  400f02:	2800      	cmp	r0, #0
  400f04:	d13d      	bne.n	400f82 <xQueueReceive+0x152>
		taskENTER_CRITICAL();
  400f06:	4b2b      	ldr	r3, [pc, #172]	; (400fb4 <xQueueReceive+0x184>)
  400f08:	4798      	blx	r3
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400f0a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  400f0c:	2d00      	cmp	r5, #0
  400f0e:	d1bd      	bne.n	400e8c <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
  400f10:	9b01      	ldr	r3, [sp, #4]
  400f12:	2b00      	cmp	r3, #0
  400f14:	d0d6      	beq.n	400ec4 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
  400f16:	2e00      	cmp	r6, #0
  400f18:	d0d8      	beq.n	400ecc <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
  400f1a:	4b1f      	ldr	r3, [pc, #124]	; (400f98 <xQueueReceive+0x168>)
  400f1c:	4798      	blx	r3
		vTaskSuspendAll();
  400f1e:	4b26      	ldr	r3, [pc, #152]	; (400fb8 <xQueueReceive+0x188>)
  400f20:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400f22:	4b24      	ldr	r3, [pc, #144]	; (400fb4 <xQueueReceive+0x184>)
  400f24:	4798      	blx	r3
  400f26:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400f2a:	b25b      	sxtb	r3, r3
  400f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f30:	d0d1      	beq.n	400ed6 <xQueueReceive+0xa6>
  400f32:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400f36:	b25b      	sxtb	r3, r3
  400f38:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f3c:	d0cf      	beq.n	400ede <xQueueReceive+0xae>
  400f3e:	4b16      	ldr	r3, [pc, #88]	; (400f98 <xQueueReceive+0x168>)
  400f40:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400f42:	a901      	add	r1, sp, #4
  400f44:	a802      	add	r0, sp, #8
  400f46:	4b1d      	ldr	r3, [pc, #116]	; (400fbc <xQueueReceive+0x18c>)
  400f48:	4798      	blx	r3
  400f4a:	2800      	cmp	r0, #0
  400f4c:	d1d1      	bne.n	400ef2 <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400f4e:	4620      	mov	r0, r4
  400f50:	4b17      	ldr	r3, [pc, #92]	; (400fb0 <xQueueReceive+0x180>)
  400f52:	4798      	blx	r3
  400f54:	2800      	cmp	r0, #0
  400f56:	d0c6      	beq.n	400ee6 <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400f58:	9901      	ldr	r1, [sp, #4]
  400f5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400f5e:	4b18      	ldr	r3, [pc, #96]	; (400fc0 <xQueueReceive+0x190>)
  400f60:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400f62:	4620      	mov	r0, r4
  400f64:	4b10      	ldr	r3, [pc, #64]	; (400fa8 <xQueueReceive+0x178>)
  400f66:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400f68:	4b10      	ldr	r3, [pc, #64]	; (400fac <xQueueReceive+0x17c>)
  400f6a:	4798      	blx	r3
  400f6c:	2800      	cmp	r0, #0
  400f6e:	d1ca      	bne.n	400f06 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
  400f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f74:	4b0a      	ldr	r3, [pc, #40]	; (400fa0 <xQueueReceive+0x170>)
  400f76:	601a      	str	r2, [r3, #0]
  400f78:	f3bf 8f4f 	dsb	sy
  400f7c:	f3bf 8f6f 	isb	sy
  400f80:	e7c1      	b.n	400f06 <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
  400f82:	2000      	movs	r0, #0
  400f84:	e78d      	b.n	400ea2 <xQueueReceive+0x72>
  400f86:	bf00      	nop
  400f88:	00401a19 	.word	0x00401a19
  400f8c:	00402ff4 	.word	0x00402ff4
  400f90:	00402c05 	.word	0x00402c05
  400f94:	0040096d 	.word	0x0040096d
  400f98:	0040030d 	.word	0x0040030d
  400f9c:	004018d9 	.word	0x004018d9
  400fa0:	e000ed04 	.word	0xe000ed04
  400fa4:	0040196d 	.word	0x0040196d
  400fa8:	00400995 	.word	0x00400995
  400fac:	00401609 	.word	0x00401609
  400fb0:	00400845 	.word	0x00400845
  400fb4:	004002c5 	.word	0x004002c5
  400fb8:	004014c9 	.word	0x004014c9
  400fbc:	00401985 	.word	0x00401985
  400fc0:	00401851 	.word	0x00401851

00400fc4 <uxQueueMessagesWaiting>:
{
  400fc4:	b510      	push	{r4, lr}
	configASSERT( xQueue );
  400fc6:	4604      	mov	r4, r0
  400fc8:	b130      	cbz	r0, 400fd8 <uxQueueMessagesWaiting+0x14>
	taskENTER_CRITICAL();
  400fca:	4b06      	ldr	r3, [pc, #24]	; (400fe4 <uxQueueMessagesWaiting+0x20>)
  400fcc:	4798      	blx	r3
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
  400fce:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  400fd0:	4b05      	ldr	r3, [pc, #20]	; (400fe8 <uxQueueMessagesWaiting+0x24>)
  400fd2:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
  400fd4:	4620      	mov	r0, r4
  400fd6:	bd10      	pop	{r4, pc}
	configASSERT( xQueue );
  400fd8:	f240 718a 	movw	r1, #1930	; 0x78a
  400fdc:	4803      	ldr	r0, [pc, #12]	; (400fec <uxQueueMessagesWaiting+0x28>)
  400fde:	4b04      	ldr	r3, [pc, #16]	; (400ff0 <uxQueueMessagesWaiting+0x2c>)
  400fe0:	4798      	blx	r3
  400fe2:	e7f2      	b.n	400fca <uxQueueMessagesWaiting+0x6>
  400fe4:	004002c5 	.word	0x004002c5
  400fe8:	0040030d 	.word	0x0040030d
  400fec:	00402ff4 	.word	0x00402ff4
  400ff0:	00402c05 	.word	0x00402c05

00400ff4 <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  400ff4:	2300      	movs	r3, #0
  400ff6:	2b07      	cmp	r3, #7
  400ff8:	d80c      	bhi.n	401014 <vQueueAddToRegistry+0x20>
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  400ffa:	4a07      	ldr	r2, [pc, #28]	; (401018 <vQueueAddToRegistry+0x24>)
  400ffc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  401000:	b10a      	cbz	r2, 401006 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401002:	3301      	adds	r3, #1
  401004:	e7f7      	b.n	400ff6 <vQueueAddToRegistry+0x2>
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401006:	4a04      	ldr	r2, [pc, #16]	; (401018 <vQueueAddToRegistry+0x24>)
  401008:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  40100c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401010:	6058      	str	r0, [r3, #4]
				break;
  401012:	4770      	bx	lr
  401014:	4770      	bx	lr
  401016:	bf00      	nop
  401018:	20000648 	.word	0x20000648

0040101c <vQueueWaitForMessageRestricted>:
	{
  40101c:	b570      	push	{r4, r5, r6, lr}
  40101e:	4604      	mov	r4, r0
  401020:	460d      	mov	r5, r1
  401022:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401024:	4b12      	ldr	r3, [pc, #72]	; (401070 <vQueueWaitForMessageRestricted+0x54>)
  401026:	4798      	blx	r3
  401028:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  40102c:	b25b      	sxtb	r3, r3
  40102e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401032:	d00d      	beq.n	401050 <vQueueWaitForMessageRestricted+0x34>
  401034:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401038:	b25b      	sxtb	r3, r3
  40103a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40103e:	d00b      	beq.n	401058 <vQueueWaitForMessageRestricted+0x3c>
  401040:	4b0c      	ldr	r3, [pc, #48]	; (401074 <vQueueWaitForMessageRestricted+0x58>)
  401042:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401044:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401046:	b15b      	cbz	r3, 401060 <vQueueWaitForMessageRestricted+0x44>
		prvUnlockQueue( pxQueue );
  401048:	4620      	mov	r0, r4
  40104a:	4b0b      	ldr	r3, [pc, #44]	; (401078 <vQueueWaitForMessageRestricted+0x5c>)
  40104c:	4798      	blx	r3
  40104e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401050:	2300      	movs	r3, #0
  401052:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401056:	e7ed      	b.n	401034 <vQueueWaitForMessageRestricted+0x18>
  401058:	2300      	movs	r3, #0
  40105a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  40105e:	e7ef      	b.n	401040 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401060:	4632      	mov	r2, r6
  401062:	4629      	mov	r1, r5
  401064:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401068:	4b04      	ldr	r3, [pc, #16]	; (40107c <vQueueWaitForMessageRestricted+0x60>)
  40106a:	4798      	blx	r3
  40106c:	e7ec      	b.n	401048 <vQueueWaitForMessageRestricted+0x2c>
  40106e:	bf00      	nop
  401070:	004002c5 	.word	0x004002c5
  401074:	0040030d 	.word	0x0040030d
  401078:	00400995 	.word	0x00400995
  40107c:	00401891 	.word	0x00401891

00401080 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401080:	4b08      	ldr	r3, [pc, #32]	; (4010a4 <prvResetNextTaskUnblockTime+0x24>)
  401082:	681b      	ldr	r3, [r3, #0]
  401084:	681b      	ldr	r3, [r3, #0]
  401086:	b13b      	cbz	r3, 401098 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401088:	4b06      	ldr	r3, [pc, #24]	; (4010a4 <prvResetNextTaskUnblockTime+0x24>)
  40108a:	681b      	ldr	r3, [r3, #0]
  40108c:	68db      	ldr	r3, [r3, #12]
  40108e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  401090:	685a      	ldr	r2, [r3, #4]
  401092:	4b05      	ldr	r3, [pc, #20]	; (4010a8 <prvResetNextTaskUnblockTime+0x28>)
  401094:	601a      	str	r2, [r3, #0]
  401096:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401098:	f04f 32ff 	mov.w	r2, #4294967295
  40109c:	4b02      	ldr	r3, [pc, #8]	; (4010a8 <prvResetNextTaskUnblockTime+0x28>)
  40109e:	601a      	str	r2, [r3, #0]
  4010a0:	4770      	bx	lr
  4010a2:	bf00      	nop
  4010a4:	200004b4 	.word	0x200004b4
  4010a8:	200005a0 	.word	0x200005a0

004010ac <prvDeleteTCB>:
	{
  4010ac:	b538      	push	{r3, r4, r5, lr}
  4010ae:	4605      	mov	r5, r0
			vPortFree( pxTCB->pxStack );
  4010b0:	6b00      	ldr	r0, [r0, #48]	; 0x30
  4010b2:	4c02      	ldr	r4, [pc, #8]	; (4010bc <prvDeleteTCB+0x10>)
  4010b4:	47a0      	blx	r4
			vPortFree( pxTCB );
  4010b6:	4628      	mov	r0, r5
  4010b8:	47a0      	blx	r4
  4010ba:	bd38      	pop	{r3, r4, r5, pc}
  4010bc:	004006bd 	.word	0x004006bd

004010c0 <prvInitialiseNewTask>:
{
  4010c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4010c4:	4681      	mov	r9, r0
  4010c6:	460d      	mov	r5, r1
  4010c8:	4617      	mov	r7, r2
  4010ca:	469a      	mov	sl, r3
  4010cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4010ce:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  4010d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  4010d4:	0092      	lsls	r2, r2, #2
  4010d6:	21a5      	movs	r1, #165	; 0xa5
  4010d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4010da:	4b25      	ldr	r3, [pc, #148]	; (401170 <prvInitialiseNewTask+0xb0>)
  4010dc:	4798      	blx	r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
  4010de:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4010e0:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
  4010e4:	3a01      	subs	r2, #1
  4010e6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
  4010ea:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
  4010ee:	b315      	cbz	r5, 401136 <prvInitialiseNewTask+0x76>
  4010f0:	2300      	movs	r3, #0
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4010f2:	2b13      	cmp	r3, #19
  4010f4:	d807      	bhi.n	401106 <prvInitialiseNewTask+0x46>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  4010f6:	5ce9      	ldrb	r1, [r5, r3]
  4010f8:	18e2      	adds	r2, r4, r3
  4010fa:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
  4010fe:	5cea      	ldrb	r2, [r5, r3]
  401100:	b10a      	cbz	r2, 401106 <prvInitialiseNewTask+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401102:	3301      	adds	r3, #1
  401104:	e7f5      	b.n	4010f2 <prvInitialiseNewTask+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401106:	2300      	movs	r3, #0
  401108:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
  40110c:	2e07      	cmp	r6, #7
  40110e:	d900      	bls.n	401112 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
  401110:	2607      	movs	r6, #7
	pxNewTCB->uxPriority = uxPriority;
  401112:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
  401114:	64a6      	str	r6, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
  401116:	2500      	movs	r5, #0
  401118:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  40111a:	1d20      	adds	r0, r4, #4
  40111c:	f8df b058 	ldr.w	fp, [pc, #88]	; 401178 <prvInitialiseNewTask+0xb8>
  401120:	47d8      	blx	fp
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  401122:	f104 0018 	add.w	r0, r4, #24
  401126:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  401128:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40112a:	f1c6 0608 	rsb	r6, r6, #8
  40112e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  401130:	6264      	str	r4, [r4, #36]	; 0x24
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
  401132:	462b      	mov	r3, r5
  401134:	e009      	b.n	40114a <prvInitialiseNewTask+0x8a>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
  401136:	2300      	movs	r3, #0
  401138:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  40113c:	e7e6      	b.n	40110c <prvInitialiseNewTask+0x4c>
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
  40113e:	f103 0214 	add.w	r2, r3, #20
  401142:	2100      	movs	r1, #0
  401144:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
  401148:	3301      	adds	r3, #1
  40114a:	2b02      	cmp	r3, #2
  40114c:	d9f7      	bls.n	40113e <prvInitialiseNewTask+0x7e>
		pxNewTCB->ulNotifiedValue = 0;
  40114e:	2300      	movs	r3, #0
  401150:	65e3      	str	r3, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  401152:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401156:	4652      	mov	r2, sl
  401158:	4649      	mov	r1, r9
  40115a:	4638      	mov	r0, r7
  40115c:	4b05      	ldr	r3, [pc, #20]	; (401174 <prvInitialiseNewTask+0xb4>)
  40115e:	4798      	blx	r3
  401160:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
  401162:	f1b8 0f00 	cmp.w	r8, #0
  401166:	d001      	beq.n	40116c <prvInitialiseNewTask+0xac>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401168:	f8c8 4000 	str.w	r4, [r8]
  40116c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401170:	00402ddd 	.word	0x00402ddd
  401174:	00400275 	.word	0x00400275
  401178:	0040017b 	.word	0x0040017b

0040117c <prvInitialiseTaskLists>:
{
  40117c:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  40117e:	2400      	movs	r4, #0
  401180:	e007      	b.n	401192 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401182:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  401186:	0093      	lsls	r3, r2, #2
  401188:	480c      	ldr	r0, [pc, #48]	; (4011bc <prvInitialiseTaskLists+0x40>)
  40118a:	4418      	add	r0, r3
  40118c:	4b0c      	ldr	r3, [pc, #48]	; (4011c0 <prvInitialiseTaskLists+0x44>)
  40118e:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  401190:	3401      	adds	r4, #1
  401192:	2c07      	cmp	r4, #7
  401194:	d9f5      	bls.n	401182 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
  401196:	4e0b      	ldr	r6, [pc, #44]	; (4011c4 <prvInitialiseTaskLists+0x48>)
  401198:	4630      	mov	r0, r6
  40119a:	4c09      	ldr	r4, [pc, #36]	; (4011c0 <prvInitialiseTaskLists+0x44>)
  40119c:	47a0      	blx	r4
	vListInitialise( &xDelayedTaskList2 );
  40119e:	4d0a      	ldr	r5, [pc, #40]	; (4011c8 <prvInitialiseTaskLists+0x4c>)
  4011a0:	4628      	mov	r0, r5
  4011a2:	47a0      	blx	r4
	vListInitialise( &xPendingReadyList );
  4011a4:	4809      	ldr	r0, [pc, #36]	; (4011cc <prvInitialiseTaskLists+0x50>)
  4011a6:	47a0      	blx	r4
		vListInitialise( &xTasksWaitingTermination );
  4011a8:	4809      	ldr	r0, [pc, #36]	; (4011d0 <prvInitialiseTaskLists+0x54>)
  4011aa:	47a0      	blx	r4
		vListInitialise( &xSuspendedTaskList );
  4011ac:	4809      	ldr	r0, [pc, #36]	; (4011d4 <prvInitialiseTaskLists+0x58>)
  4011ae:	47a0      	blx	r4
	pxDelayedTaskList = &xDelayedTaskList1;
  4011b0:	4b09      	ldr	r3, [pc, #36]	; (4011d8 <prvInitialiseTaskLists+0x5c>)
  4011b2:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4011b4:	4b09      	ldr	r3, [pc, #36]	; (4011dc <prvInitialiseTaskLists+0x60>)
  4011b6:	601d      	str	r5, [r3, #0]
  4011b8:	bd70      	pop	{r4, r5, r6, pc}
  4011ba:	bf00      	nop
  4011bc:	200004bc 	.word	0x200004bc
  4011c0:	00400165 	.word	0x00400165
  4011c4:	20000574 	.word	0x20000574
  4011c8:	20000588 	.word	0x20000588
  4011cc:	200005a8 	.word	0x200005a8
  4011d0:	200005d4 	.word	0x200005d4
  4011d4:	200005c0 	.word	0x200005c0
  4011d8:	200004b4 	.word	0x200004b4
  4011dc:	200004b8 	.word	0x200004b8

004011e0 <prvAddNewTaskToReadyList>:
{
  4011e0:	b510      	push	{r4, lr}
  4011e2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4011e4:	4b21      	ldr	r3, [pc, #132]	; (40126c <prvAddNewTaskToReadyList+0x8c>)
  4011e6:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
  4011e8:	4a21      	ldr	r2, [pc, #132]	; (401270 <prvAddNewTaskToReadyList+0x90>)
  4011ea:	6813      	ldr	r3, [r2, #0]
  4011ec:	3301      	adds	r3, #1
  4011ee:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  4011f0:	4b20      	ldr	r3, [pc, #128]	; (401274 <prvAddNewTaskToReadyList+0x94>)
  4011f2:	681b      	ldr	r3, [r3, #0]
  4011f4:	2b00      	cmp	r3, #0
  4011f6:	d031      	beq.n	40125c <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
  4011f8:	4b1f      	ldr	r3, [pc, #124]	; (401278 <prvAddNewTaskToReadyList+0x98>)
  4011fa:	681b      	ldr	r3, [r3, #0]
  4011fc:	b93b      	cbnz	r3, 40120e <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  4011fe:	4b1d      	ldr	r3, [pc, #116]	; (401274 <prvAddNewTaskToReadyList+0x94>)
  401200:	681b      	ldr	r3, [r3, #0]
  401202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401204:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401206:	429a      	cmp	r2, r3
  401208:	d801      	bhi.n	40120e <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
  40120a:	4b1a      	ldr	r3, [pc, #104]	; (401274 <prvAddNewTaskToReadyList+0x94>)
  40120c:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
  40120e:	4a1b      	ldr	r2, [pc, #108]	; (40127c <prvAddNewTaskToReadyList+0x9c>)
  401210:	6813      	ldr	r3, [r2, #0]
  401212:	3301      	adds	r3, #1
  401214:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
  401216:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401218:	2201      	movs	r2, #1
  40121a:	409a      	lsls	r2, r3
  40121c:	4918      	ldr	r1, [pc, #96]	; (401280 <prvAddNewTaskToReadyList+0xa0>)
  40121e:	6808      	ldr	r0, [r1, #0]
  401220:	4302      	orrs	r2, r0
  401222:	600a      	str	r2, [r1, #0]
  401224:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401228:	009a      	lsls	r2, r3, #2
  40122a:	1d21      	adds	r1, r4, #4
  40122c:	4815      	ldr	r0, [pc, #84]	; (401284 <prvAddNewTaskToReadyList+0xa4>)
  40122e:	4410      	add	r0, r2
  401230:	4b15      	ldr	r3, [pc, #84]	; (401288 <prvAddNewTaskToReadyList+0xa8>)
  401232:	4798      	blx	r3
	taskEXIT_CRITICAL();
  401234:	4b15      	ldr	r3, [pc, #84]	; (40128c <prvAddNewTaskToReadyList+0xac>)
  401236:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
  401238:	4b0f      	ldr	r3, [pc, #60]	; (401278 <prvAddNewTaskToReadyList+0x98>)
  40123a:	681b      	ldr	r3, [r3, #0]
  40123c:	b16b      	cbz	r3, 40125a <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  40123e:	4b0d      	ldr	r3, [pc, #52]	; (401274 <prvAddNewTaskToReadyList+0x94>)
  401240:	681b      	ldr	r3, [r3, #0]
  401242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401244:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401246:	429a      	cmp	r2, r3
  401248:	d207      	bcs.n	40125a <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
  40124a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40124e:	4b10      	ldr	r3, [pc, #64]	; (401290 <prvAddNewTaskToReadyList+0xb0>)
  401250:	601a      	str	r2, [r3, #0]
  401252:	f3bf 8f4f 	dsb	sy
  401256:	f3bf 8f6f 	isb	sy
  40125a:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
  40125c:	4b05      	ldr	r3, [pc, #20]	; (401274 <prvAddNewTaskToReadyList+0x94>)
  40125e:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401260:	6813      	ldr	r3, [r2, #0]
  401262:	2b01      	cmp	r3, #1
  401264:	d1d3      	bne.n	40120e <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
  401266:	4b0b      	ldr	r3, [pc, #44]	; (401294 <prvAddNewTaskToReadyList+0xb4>)
  401268:	4798      	blx	r3
  40126a:	e7d0      	b.n	40120e <prvAddNewTaskToReadyList+0x2e>
  40126c:	004002c5 	.word	0x004002c5
  401270:	2000055c 	.word	0x2000055c
  401274:	200004b0 	.word	0x200004b0
  401278:	200005bc 	.word	0x200005bc
  40127c:	2000056c 	.word	0x2000056c
  401280:	20000570 	.word	0x20000570
  401284:	200004bc 	.word	0x200004bc
  401288:	00400181 	.word	0x00400181
  40128c:	0040030d 	.word	0x0040030d
  401290:	e000ed04 	.word	0xe000ed04
  401294:	0040117d 	.word	0x0040117d

00401298 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401298:	4b0f      	ldr	r3, [pc, #60]	; (4012d8 <prvCheckTasksWaitingTermination+0x40>)
  40129a:	681b      	ldr	r3, [r3, #0]
  40129c:	b1d3      	cbz	r3, 4012d4 <prvCheckTasksWaitingTermination+0x3c>
{
  40129e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
  4012a0:	4b0e      	ldr	r3, [pc, #56]	; (4012dc <prvCheckTasksWaitingTermination+0x44>)
  4012a2:	4798      	blx	r3
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4012a4:	4b0e      	ldr	r3, [pc, #56]	; (4012e0 <prvCheckTasksWaitingTermination+0x48>)
  4012a6:	68db      	ldr	r3, [r3, #12]
  4012a8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4012aa:	1d20      	adds	r0, r4, #4
  4012ac:	4b0d      	ldr	r3, [pc, #52]	; (4012e4 <prvCheckTasksWaitingTermination+0x4c>)
  4012ae:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
  4012b0:	4a0d      	ldr	r2, [pc, #52]	; (4012e8 <prvCheckTasksWaitingTermination+0x50>)
  4012b2:	6813      	ldr	r3, [r2, #0]
  4012b4:	3b01      	subs	r3, #1
  4012b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
  4012b8:	4a07      	ldr	r2, [pc, #28]	; (4012d8 <prvCheckTasksWaitingTermination+0x40>)
  4012ba:	6813      	ldr	r3, [r2, #0]
  4012bc:	3b01      	subs	r3, #1
  4012be:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
  4012c0:	4b0a      	ldr	r3, [pc, #40]	; (4012ec <prvCheckTasksWaitingTermination+0x54>)
  4012c2:	4798      	blx	r3
			prvDeleteTCB( pxTCB );
  4012c4:	4620      	mov	r0, r4
  4012c6:	4b0a      	ldr	r3, [pc, #40]	; (4012f0 <prvCheckTasksWaitingTermination+0x58>)
  4012c8:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  4012ca:	4b03      	ldr	r3, [pc, #12]	; (4012d8 <prvCheckTasksWaitingTermination+0x40>)
  4012cc:	681b      	ldr	r3, [r3, #0]
  4012ce:	2b00      	cmp	r3, #0
  4012d0:	d1e6      	bne.n	4012a0 <prvCheckTasksWaitingTermination+0x8>
}
  4012d2:	bd10      	pop	{r4, pc}
  4012d4:	4770      	bx	lr
  4012d6:	bf00      	nop
  4012d8:	20000560 	.word	0x20000560
  4012dc:	004002c5 	.word	0x004002c5
  4012e0:	200005d4 	.word	0x200005d4
  4012e4:	004001cd 	.word	0x004001cd
  4012e8:	2000055c 	.word	0x2000055c
  4012ec:	0040030d 	.word	0x0040030d
  4012f0:	004010ad 	.word	0x004010ad

004012f4 <prvIdleTask>:
{
  4012f4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
  4012f6:	4b07      	ldr	r3, [pc, #28]	; (401314 <prvIdleTask+0x20>)
  4012f8:	4798      	blx	r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4012fa:	4b07      	ldr	r3, [pc, #28]	; (401318 <prvIdleTask+0x24>)
  4012fc:	681b      	ldr	r3, [r3, #0]
  4012fe:	2b01      	cmp	r3, #1
  401300:	d9f9      	bls.n	4012f6 <prvIdleTask+0x2>
				taskYIELD();
  401302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401306:	4b05      	ldr	r3, [pc, #20]	; (40131c <prvIdleTask+0x28>)
  401308:	601a      	str	r2, [r3, #0]
  40130a:	f3bf 8f4f 	dsb	sy
  40130e:	f3bf 8f6f 	isb	sy
  401312:	e7f0      	b.n	4012f6 <prvIdleTask+0x2>
  401314:	00401299 	.word	0x00401299
  401318:	200004bc 	.word	0x200004bc
  40131c:	e000ed04 	.word	0xe000ed04

00401320 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  401320:	b570      	push	{r4, r5, r6, lr}
  401322:	4604      	mov	r4, r0
  401324:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  401326:	4b1d      	ldr	r3, [pc, #116]	; (40139c <prvAddCurrentTaskToDelayedList+0x7c>)
  401328:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  40132a:	4b1d      	ldr	r3, [pc, #116]	; (4013a0 <prvAddCurrentTaskToDelayedList+0x80>)
  40132c:	6818      	ldr	r0, [r3, #0]
  40132e:	3004      	adds	r0, #4
  401330:	4b1c      	ldr	r3, [pc, #112]	; (4013a4 <prvAddCurrentTaskToDelayedList+0x84>)
  401332:	4798      	blx	r3
  401334:	b950      	cbnz	r0, 40134c <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
  401336:	4b1a      	ldr	r3, [pc, #104]	; (4013a0 <prvAddCurrentTaskToDelayedList+0x80>)
  401338:	681b      	ldr	r3, [r3, #0]
  40133a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40133c:	2301      	movs	r3, #1
  40133e:	fa03 f202 	lsl.w	r2, r3, r2
  401342:	4919      	ldr	r1, [pc, #100]	; (4013a8 <prvAddCurrentTaskToDelayedList+0x88>)
  401344:	680b      	ldr	r3, [r1, #0]
  401346:	ea23 0302 	bic.w	r3, r3, r2
  40134a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  40134c:	f1b4 3fff 	cmp.w	r4, #4294967295
  401350:	d013      	beq.n	40137a <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  401352:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  401354:	4b12      	ldr	r3, [pc, #72]	; (4013a0 <prvAddCurrentTaskToDelayedList+0x80>)
  401356:	681b      	ldr	r3, [r3, #0]
  401358:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
  40135a:	42a5      	cmp	r5, r4
  40135c:	d816      	bhi.n	40138c <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40135e:	4b13      	ldr	r3, [pc, #76]	; (4013ac <prvAddCurrentTaskToDelayedList+0x8c>)
  401360:	6818      	ldr	r0, [r3, #0]
  401362:	4b0f      	ldr	r3, [pc, #60]	; (4013a0 <prvAddCurrentTaskToDelayedList+0x80>)
  401364:	6819      	ldr	r1, [r3, #0]
  401366:	3104      	adds	r1, #4
  401368:	4b11      	ldr	r3, [pc, #68]	; (4013b0 <prvAddCurrentTaskToDelayedList+0x90>)
  40136a:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  40136c:	4b11      	ldr	r3, [pc, #68]	; (4013b4 <prvAddCurrentTaskToDelayedList+0x94>)
  40136e:	681b      	ldr	r3, [r3, #0]
  401370:	429c      	cmp	r4, r3
  401372:	d201      	bcs.n	401378 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
  401374:	4b0f      	ldr	r3, [pc, #60]	; (4013b4 <prvAddCurrentTaskToDelayedList+0x94>)
  401376:	601c      	str	r4, [r3, #0]
  401378:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  40137a:	2e00      	cmp	r6, #0
  40137c:	d0e9      	beq.n	401352 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40137e:	4b08      	ldr	r3, [pc, #32]	; (4013a0 <prvAddCurrentTaskToDelayedList+0x80>)
  401380:	6819      	ldr	r1, [r3, #0]
  401382:	3104      	adds	r1, #4
  401384:	480c      	ldr	r0, [pc, #48]	; (4013b8 <prvAddCurrentTaskToDelayedList+0x98>)
  401386:	4b0d      	ldr	r3, [pc, #52]	; (4013bc <prvAddCurrentTaskToDelayedList+0x9c>)
  401388:	4798      	blx	r3
  40138a:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40138c:	4b0c      	ldr	r3, [pc, #48]	; (4013c0 <prvAddCurrentTaskToDelayedList+0xa0>)
  40138e:	6818      	ldr	r0, [r3, #0]
  401390:	4b03      	ldr	r3, [pc, #12]	; (4013a0 <prvAddCurrentTaskToDelayedList+0x80>)
  401392:	6819      	ldr	r1, [r3, #0]
  401394:	3104      	adds	r1, #4
  401396:	4b06      	ldr	r3, [pc, #24]	; (4013b0 <prvAddCurrentTaskToDelayedList+0x90>)
  401398:	4798      	blx	r3
  40139a:	bd70      	pop	{r4, r5, r6, pc}
  40139c:	200005e8 	.word	0x200005e8
  4013a0:	200004b0 	.word	0x200004b0
  4013a4:	004001cd 	.word	0x004001cd
  4013a8:	20000570 	.word	0x20000570
  4013ac:	200004b4 	.word	0x200004b4
  4013b0:	00400199 	.word	0x00400199
  4013b4:	200005a0 	.word	0x200005a0
  4013b8:	200005c0 	.word	0x200005c0
  4013bc:	00400181 	.word	0x00400181
  4013c0:	200004b8 	.word	0x200004b8

004013c4 <xTaskCreate>:
	{
  4013c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4013c8:	b085      	sub	sp, #20
  4013ca:	4606      	mov	r6, r0
  4013cc:	460f      	mov	r7, r1
  4013ce:	4615      	mov	r5, r2
  4013d0:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
  4013d2:	0090      	lsls	r0, r2, #2
  4013d4:	4b14      	ldr	r3, [pc, #80]	; (401428 <xTaskCreate+0x64>)
  4013d6:	4798      	blx	r3
			if( pxStack != NULL )
  4013d8:	b300      	cbz	r0, 40141c <xTaskCreate+0x58>
  4013da:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
  4013dc:	2064      	movs	r0, #100	; 0x64
  4013de:	4b12      	ldr	r3, [pc, #72]	; (401428 <xTaskCreate+0x64>)
  4013e0:	4798      	blx	r3
				if( pxNewTCB != NULL )
  4013e2:	4604      	mov	r4, r0
  4013e4:	b1b0      	cbz	r0, 401414 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
  4013e6:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
  4013ea:	b1cc      	cbz	r4, 401420 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
  4013ec:	2300      	movs	r3, #0
  4013ee:	9303      	str	r3, [sp, #12]
  4013f0:	9402      	str	r4, [sp, #8]
  4013f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4013f4:	9301      	str	r3, [sp, #4]
  4013f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4013f8:	9300      	str	r3, [sp, #0]
  4013fa:	4643      	mov	r3, r8
  4013fc:	462a      	mov	r2, r5
  4013fe:	4639      	mov	r1, r7
  401400:	4630      	mov	r0, r6
  401402:	4d0a      	ldr	r5, [pc, #40]	; (40142c <xTaskCreate+0x68>)
  401404:	47a8      	blx	r5
			prvAddNewTaskToReadyList( pxNewTCB );
  401406:	4620      	mov	r0, r4
  401408:	4b09      	ldr	r3, [pc, #36]	; (401430 <xTaskCreate+0x6c>)
  40140a:	4798      	blx	r3
			xReturn = pdPASS;
  40140c:	2001      	movs	r0, #1
	}
  40140e:	b005      	add	sp, #20
  401410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
  401414:	4648      	mov	r0, r9
  401416:	4b07      	ldr	r3, [pc, #28]	; (401434 <xTaskCreate+0x70>)
  401418:	4798      	blx	r3
  40141a:	e7e6      	b.n	4013ea <xTaskCreate+0x26>
				pxNewTCB = NULL;
  40141c:	2400      	movs	r4, #0
  40141e:	e7e4      	b.n	4013ea <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401420:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
  401424:	e7f3      	b.n	40140e <xTaskCreate+0x4a>
  401426:	bf00      	nop
  401428:	004005d9 	.word	0x004005d9
  40142c:	004010c1 	.word	0x004010c1
  401430:	004011e1 	.word	0x004011e1
  401434:	004006bd 	.word	0x004006bd

00401438 <vTaskStartScheduler>:
{
  401438:	b510      	push	{r4, lr}
  40143a:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
  40143c:	4b17      	ldr	r3, [pc, #92]	; (40149c <vTaskStartScheduler+0x64>)
  40143e:	9301      	str	r3, [sp, #4]
  401440:	2300      	movs	r3, #0
  401442:	9300      	str	r3, [sp, #0]
  401444:	2282      	movs	r2, #130	; 0x82
  401446:	4916      	ldr	r1, [pc, #88]	; (4014a0 <vTaskStartScheduler+0x68>)
  401448:	4816      	ldr	r0, [pc, #88]	; (4014a4 <vTaskStartScheduler+0x6c>)
  40144a:	4c17      	ldr	r4, [pc, #92]	; (4014a8 <vTaskStartScheduler+0x70>)
  40144c:	47a0      	blx	r4
		if( xReturn == pdPASS )
  40144e:	2801      	cmp	r0, #1
  401450:	d006      	beq.n	401460 <vTaskStartScheduler+0x28>
	if( xReturn == pdPASS )
  401452:	2801      	cmp	r0, #1
  401454:	d007      	beq.n	401466 <vTaskStartScheduler+0x2e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  401456:	f1b0 3fff 	cmp.w	r0, #4294967295
  40145a:	d019      	beq.n	401490 <vTaskStartScheduler+0x58>
}
  40145c:	b002      	add	sp, #8
  40145e:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  401460:	4b12      	ldr	r3, [pc, #72]	; (4014ac <vTaskStartScheduler+0x74>)
  401462:	4798      	blx	r3
  401464:	e7f5      	b.n	401452 <vTaskStartScheduler+0x1a>
	__asm volatile
  401466:	f04f 0350 	mov.w	r3, #80	; 0x50
  40146a:	f383 8811 	msr	BASEPRI, r3
  40146e:	f3bf 8f6f 	isb	sy
  401472:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
  401476:	f04f 32ff 	mov.w	r2, #4294967295
  40147a:	4b0d      	ldr	r3, [pc, #52]	; (4014b0 <vTaskStartScheduler+0x78>)
  40147c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40147e:	2201      	movs	r2, #1
  401480:	4b0c      	ldr	r3, [pc, #48]	; (4014b4 <vTaskStartScheduler+0x7c>)
  401482:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
  401484:	2200      	movs	r2, #0
  401486:	4b0c      	ldr	r3, [pc, #48]	; (4014b8 <vTaskStartScheduler+0x80>)
  401488:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40148a:	4b0c      	ldr	r3, [pc, #48]	; (4014bc <vTaskStartScheduler+0x84>)
  40148c:	4798      	blx	r3
  40148e:	e7e5      	b.n	40145c <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  401490:	f44f 6102 	mov.w	r1, #2080	; 0x820
  401494:	480a      	ldr	r0, [pc, #40]	; (4014c0 <vTaskStartScheduler+0x88>)
  401496:	4b0b      	ldr	r3, [pc, #44]	; (4014c4 <vTaskStartScheduler+0x8c>)
  401498:	4798      	blx	r3
}
  40149a:	e7df      	b.n	40145c <vTaskStartScheduler+0x24>
  40149c:	2000059c 	.word	0x2000059c
  4014a0:	00403024 	.word	0x00403024
  4014a4:	004012f5 	.word	0x004012f5
  4014a8:	004013c5 	.word	0x004013c5
  4014ac:	00401bc9 	.word	0x00401bc9
  4014b0:	200005a0 	.word	0x200005a0
  4014b4:	200005bc 	.word	0x200005bc
  4014b8:	200005e8 	.word	0x200005e8
  4014bc:	0040040d 	.word	0x0040040d
  4014c0:	0040300c 	.word	0x0040300c
  4014c4:	00402c05 	.word	0x00402c05

004014c8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4014c8:	4a02      	ldr	r2, [pc, #8]	; (4014d4 <vTaskSuspendAll+0xc>)
  4014ca:	6813      	ldr	r3, [r2, #0]
  4014cc:	3301      	adds	r3, #1
  4014ce:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
  4014d0:	4770      	bx	lr
  4014d2:	bf00      	nop
  4014d4:	20000568 	.word	0x20000568

004014d8 <xTaskGetTickCount>:
		xTicks = xTickCount;
  4014d8:	4b01      	ldr	r3, [pc, #4]	; (4014e0 <xTaskGetTickCount+0x8>)
  4014da:	6818      	ldr	r0, [r3, #0]
}
  4014dc:	4770      	bx	lr
  4014de:	bf00      	nop
  4014e0:	200005e8 	.word	0x200005e8

004014e4 <xTaskIncrementTick>:
{
  4014e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4014e6:	4b38      	ldr	r3, [pc, #224]	; (4015c8 <xTaskIncrementTick+0xe4>)
  4014e8:	681b      	ldr	r3, [r3, #0]
  4014ea:	2b00      	cmp	r3, #0
  4014ec:	d161      	bne.n	4015b2 <xTaskIncrementTick+0xce>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  4014ee:	4b37      	ldr	r3, [pc, #220]	; (4015cc <xTaskIncrementTick+0xe8>)
  4014f0:	681e      	ldr	r6, [r3, #0]
  4014f2:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
  4014f4:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  4014f6:	b97e      	cbnz	r6, 401518 <xTaskIncrementTick+0x34>
			taskSWITCH_DELAYED_LISTS();
  4014f8:	4b35      	ldr	r3, [pc, #212]	; (4015d0 <xTaskIncrementTick+0xec>)
  4014fa:	681b      	ldr	r3, [r3, #0]
  4014fc:	681b      	ldr	r3, [r3, #0]
  4014fe:	b9e3      	cbnz	r3, 40153a <xTaskIncrementTick+0x56>
  401500:	4a33      	ldr	r2, [pc, #204]	; (4015d0 <xTaskIncrementTick+0xec>)
  401502:	6811      	ldr	r1, [r2, #0]
  401504:	4b33      	ldr	r3, [pc, #204]	; (4015d4 <xTaskIncrementTick+0xf0>)
  401506:	6818      	ldr	r0, [r3, #0]
  401508:	6010      	str	r0, [r2, #0]
  40150a:	6019      	str	r1, [r3, #0]
  40150c:	4a32      	ldr	r2, [pc, #200]	; (4015d8 <xTaskIncrementTick+0xf4>)
  40150e:	6813      	ldr	r3, [r2, #0]
  401510:	3301      	adds	r3, #1
  401512:	6013      	str	r3, [r2, #0]
  401514:	4b31      	ldr	r3, [pc, #196]	; (4015dc <xTaskIncrementTick+0xf8>)
  401516:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
  401518:	4b31      	ldr	r3, [pc, #196]	; (4015e0 <xTaskIncrementTick+0xfc>)
  40151a:	681b      	ldr	r3, [r3, #0]
  40151c:	429e      	cmp	r6, r3
  40151e:	d23e      	bcs.n	40159e <xTaskIncrementTick+0xba>
BaseType_t xSwitchRequired = pdFALSE;
  401520:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401522:	4b30      	ldr	r3, [pc, #192]	; (4015e4 <xTaskIncrementTick+0x100>)
  401524:	681b      	ldr	r3, [r3, #0]
  401526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401528:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40152c:	009a      	lsls	r2, r3, #2
  40152e:	4b2e      	ldr	r3, [pc, #184]	; (4015e8 <xTaskIncrementTick+0x104>)
  401530:	589b      	ldr	r3, [r3, r2]
  401532:	2b01      	cmp	r3, #1
  401534:	d942      	bls.n	4015bc <xTaskIncrementTick+0xd8>
				xSwitchRequired = pdTRUE;
  401536:	2701      	movs	r7, #1
  401538:	e040      	b.n	4015bc <xTaskIncrementTick+0xd8>
			taskSWITCH_DELAYED_LISTS();
  40153a:	f640 217f 	movw	r1, #2687	; 0xa7f
  40153e:	482b      	ldr	r0, [pc, #172]	; (4015ec <xTaskIncrementTick+0x108>)
  401540:	4b2b      	ldr	r3, [pc, #172]	; (4015f0 <xTaskIncrementTick+0x10c>)
  401542:	4798      	blx	r3
  401544:	e7dc      	b.n	401500 <xTaskIncrementTick+0x1c>
							xSwitchRequired = pdTRUE;
  401546:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401548:	4b21      	ldr	r3, [pc, #132]	; (4015d0 <xTaskIncrementTick+0xec>)
  40154a:	681b      	ldr	r3, [r3, #0]
  40154c:	681b      	ldr	r3, [r3, #0]
  40154e:	b343      	cbz	r3, 4015a2 <xTaskIncrementTick+0xbe>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401550:	4b1f      	ldr	r3, [pc, #124]	; (4015d0 <xTaskIncrementTick+0xec>)
  401552:	681b      	ldr	r3, [r3, #0]
  401554:	68db      	ldr	r3, [r3, #12]
  401556:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  401558:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
  40155a:	429e      	cmp	r6, r3
  40155c:	d326      	bcc.n	4015ac <xTaskIncrementTick+0xc8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  40155e:	1d25      	adds	r5, r4, #4
  401560:	4628      	mov	r0, r5
  401562:	4b24      	ldr	r3, [pc, #144]	; (4015f4 <xTaskIncrementTick+0x110>)
  401564:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401566:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  401568:	b11b      	cbz	r3, 401572 <xTaskIncrementTick+0x8e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40156a:	f104 0018 	add.w	r0, r4, #24
  40156e:	4b21      	ldr	r3, [pc, #132]	; (4015f4 <xTaskIncrementTick+0x110>)
  401570:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
  401572:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401574:	2201      	movs	r2, #1
  401576:	409a      	lsls	r2, r3
  401578:	491f      	ldr	r1, [pc, #124]	; (4015f8 <xTaskIncrementTick+0x114>)
  40157a:	6808      	ldr	r0, [r1, #0]
  40157c:	4302      	orrs	r2, r0
  40157e:	600a      	str	r2, [r1, #0]
  401580:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401584:	009a      	lsls	r2, r3, #2
  401586:	4629      	mov	r1, r5
  401588:	4817      	ldr	r0, [pc, #92]	; (4015e8 <xTaskIncrementTick+0x104>)
  40158a:	4410      	add	r0, r2
  40158c:	4b1b      	ldr	r3, [pc, #108]	; (4015fc <xTaskIncrementTick+0x118>)
  40158e:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401590:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401592:	4b14      	ldr	r3, [pc, #80]	; (4015e4 <xTaskIncrementTick+0x100>)
  401594:	681b      	ldr	r3, [r3, #0]
  401596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401598:	429a      	cmp	r2, r3
  40159a:	d2d4      	bcs.n	401546 <xTaskIncrementTick+0x62>
  40159c:	e7d4      	b.n	401548 <xTaskIncrementTick+0x64>
  40159e:	2700      	movs	r7, #0
  4015a0:	e7d2      	b.n	401548 <xTaskIncrementTick+0x64>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4015a2:	f04f 32ff 	mov.w	r2, #4294967295
  4015a6:	4b0e      	ldr	r3, [pc, #56]	; (4015e0 <xTaskIncrementTick+0xfc>)
  4015a8:	601a      	str	r2, [r3, #0]
					break;
  4015aa:	e7ba      	b.n	401522 <xTaskIncrementTick+0x3e>
						xNextTaskUnblockTime = xItemValue;
  4015ac:	4a0c      	ldr	r2, [pc, #48]	; (4015e0 <xTaskIncrementTick+0xfc>)
  4015ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
  4015b0:	e7b7      	b.n	401522 <xTaskIncrementTick+0x3e>
		++uxPendedTicks;
  4015b2:	4a13      	ldr	r2, [pc, #76]	; (401600 <xTaskIncrementTick+0x11c>)
  4015b4:	6813      	ldr	r3, [r2, #0]
  4015b6:	3301      	adds	r3, #1
  4015b8:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
  4015ba:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
  4015bc:	4b11      	ldr	r3, [pc, #68]	; (401604 <xTaskIncrementTick+0x120>)
  4015be:	681b      	ldr	r3, [r3, #0]
  4015c0:	b103      	cbz	r3, 4015c4 <xTaskIncrementTick+0xe0>
			xSwitchRequired = pdTRUE;
  4015c2:	2701      	movs	r7, #1
}
  4015c4:	4638      	mov	r0, r7
  4015c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4015c8:	20000568 	.word	0x20000568
  4015cc:	200005e8 	.word	0x200005e8
  4015d0:	200004b4 	.word	0x200004b4
  4015d4:	200004b8 	.word	0x200004b8
  4015d8:	200005a4 	.word	0x200005a4
  4015dc:	00401081 	.word	0x00401081
  4015e0:	200005a0 	.word	0x200005a0
  4015e4:	200004b0 	.word	0x200004b0
  4015e8:	200004bc 	.word	0x200004bc
  4015ec:	0040300c 	.word	0x0040300c
  4015f0:	00402c05 	.word	0x00402c05
  4015f4:	004001cd 	.word	0x004001cd
  4015f8:	20000570 	.word	0x20000570
  4015fc:	00400181 	.word	0x00400181
  401600:	20000564 	.word	0x20000564
  401604:	200005ec 	.word	0x200005ec

00401608 <xTaskResumeAll>:
{
  401608:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended );
  40160a:	4b34      	ldr	r3, [pc, #208]	; (4016dc <xTaskResumeAll+0xd4>)
  40160c:	681b      	ldr	r3, [r3, #0]
  40160e:	2b00      	cmp	r3, #0
  401610:	d034      	beq.n	40167c <xTaskResumeAll+0x74>
	taskENTER_CRITICAL();
  401612:	4b33      	ldr	r3, [pc, #204]	; (4016e0 <xTaskResumeAll+0xd8>)
  401614:	4798      	blx	r3
		--uxSchedulerSuspended;
  401616:	4b31      	ldr	r3, [pc, #196]	; (4016dc <xTaskResumeAll+0xd4>)
  401618:	681a      	ldr	r2, [r3, #0]
  40161a:	3a01      	subs	r2, #1
  40161c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40161e:	681b      	ldr	r3, [r3, #0]
  401620:	2b00      	cmp	r3, #0
  401622:	d154      	bne.n	4016ce <xTaskResumeAll+0xc6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401624:	4b2f      	ldr	r3, [pc, #188]	; (4016e4 <xTaskResumeAll+0xdc>)
  401626:	681b      	ldr	r3, [r3, #0]
  401628:	2b00      	cmp	r3, #0
  40162a:	d02d      	beq.n	401688 <xTaskResumeAll+0x80>
  40162c:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40162e:	4b2e      	ldr	r3, [pc, #184]	; (4016e8 <xTaskResumeAll+0xe0>)
  401630:	681b      	ldr	r3, [r3, #0]
  401632:	2b00      	cmp	r3, #0
  401634:	d02a      	beq.n	40168c <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401636:	4b2c      	ldr	r3, [pc, #176]	; (4016e8 <xTaskResumeAll+0xe0>)
  401638:	68db      	ldr	r3, [r3, #12]
  40163a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40163c:	f104 0018 	add.w	r0, r4, #24
  401640:	4e2a      	ldr	r6, [pc, #168]	; (4016ec <xTaskResumeAll+0xe4>)
  401642:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401644:	1d25      	adds	r5, r4, #4
  401646:	4628      	mov	r0, r5
  401648:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  40164a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40164c:	2201      	movs	r2, #1
  40164e:	409a      	lsls	r2, r3
  401650:	4927      	ldr	r1, [pc, #156]	; (4016f0 <xTaskResumeAll+0xe8>)
  401652:	6808      	ldr	r0, [r1, #0]
  401654:	4302      	orrs	r2, r0
  401656:	600a      	str	r2, [r1, #0]
  401658:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40165c:	009a      	lsls	r2, r3, #2
  40165e:	4629      	mov	r1, r5
  401660:	4824      	ldr	r0, [pc, #144]	; (4016f4 <xTaskResumeAll+0xec>)
  401662:	4410      	add	r0, r2
  401664:	4b24      	ldr	r3, [pc, #144]	; (4016f8 <xTaskResumeAll+0xf0>)
  401666:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401668:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40166a:	4b24      	ldr	r3, [pc, #144]	; (4016fc <xTaskResumeAll+0xf4>)
  40166c:	681b      	ldr	r3, [r3, #0]
  40166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401670:	429a      	cmp	r2, r3
  401672:	d3dc      	bcc.n	40162e <xTaskResumeAll+0x26>
						xYieldPending = pdTRUE;
  401674:	2201      	movs	r2, #1
  401676:	4b22      	ldr	r3, [pc, #136]	; (401700 <xTaskResumeAll+0xf8>)
  401678:	601a      	str	r2, [r3, #0]
  40167a:	e7d8      	b.n	40162e <xTaskResumeAll+0x26>
	configASSERT( uxSchedulerSuspended );
  40167c:	f640 0185 	movw	r1, #2181	; 0x885
  401680:	4820      	ldr	r0, [pc, #128]	; (401704 <xTaskResumeAll+0xfc>)
  401682:	4b21      	ldr	r3, [pc, #132]	; (401708 <xTaskResumeAll+0x100>)
  401684:	4798      	blx	r3
  401686:	e7c4      	b.n	401612 <xTaskResumeAll+0xa>
BaseType_t xAlreadyYielded = pdFALSE;
  401688:	2400      	movs	r4, #0
  40168a:	e021      	b.n	4016d0 <xTaskResumeAll+0xc8>
				if( pxTCB != NULL )
  40168c:	b10c      	cbz	r4, 401692 <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
  40168e:	4b1f      	ldr	r3, [pc, #124]	; (40170c <xTaskResumeAll+0x104>)
  401690:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  401692:	4b1f      	ldr	r3, [pc, #124]	; (401710 <xTaskResumeAll+0x108>)
  401694:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  401696:	b974      	cbnz	r4, 4016b6 <xTaskResumeAll+0xae>
				if( xYieldPending != pdFALSE )
  401698:	4b19      	ldr	r3, [pc, #100]	; (401700 <xTaskResumeAll+0xf8>)
  40169a:	681b      	ldr	r3, [r3, #0]
  40169c:	b1e3      	cbz	r3, 4016d8 <xTaskResumeAll+0xd0>
					taskYIELD_IF_USING_PREEMPTION();
  40169e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4016a2:	4b1c      	ldr	r3, [pc, #112]	; (401714 <xTaskResumeAll+0x10c>)
  4016a4:	601a      	str	r2, [r3, #0]
  4016a6:	f3bf 8f4f 	dsb	sy
  4016aa:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4016ae:	2401      	movs	r4, #1
  4016b0:	e00e      	b.n	4016d0 <xTaskResumeAll+0xc8>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  4016b2:	3c01      	subs	r4, #1
  4016b4:	d007      	beq.n	4016c6 <xTaskResumeAll+0xbe>
							if( xTaskIncrementTick() != pdFALSE )
  4016b6:	4b18      	ldr	r3, [pc, #96]	; (401718 <xTaskResumeAll+0x110>)
  4016b8:	4798      	blx	r3
  4016ba:	2800      	cmp	r0, #0
  4016bc:	d0f9      	beq.n	4016b2 <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
  4016be:	2201      	movs	r2, #1
  4016c0:	4b0f      	ldr	r3, [pc, #60]	; (401700 <xTaskResumeAll+0xf8>)
  4016c2:	601a      	str	r2, [r3, #0]
  4016c4:	e7f5      	b.n	4016b2 <xTaskResumeAll+0xaa>
						uxPendedTicks = 0;
  4016c6:	2200      	movs	r2, #0
  4016c8:	4b11      	ldr	r3, [pc, #68]	; (401710 <xTaskResumeAll+0x108>)
  4016ca:	601a      	str	r2, [r3, #0]
  4016cc:	e7e4      	b.n	401698 <xTaskResumeAll+0x90>
BaseType_t xAlreadyYielded = pdFALSE;
  4016ce:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4016d0:	4b12      	ldr	r3, [pc, #72]	; (40171c <xTaskResumeAll+0x114>)
  4016d2:	4798      	blx	r3
}
  4016d4:	4620      	mov	r0, r4
  4016d6:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xAlreadyYielded = pdFALSE;
  4016d8:	2400      	movs	r4, #0
  4016da:	e7f9      	b.n	4016d0 <xTaskResumeAll+0xc8>
  4016dc:	20000568 	.word	0x20000568
  4016e0:	004002c5 	.word	0x004002c5
  4016e4:	2000055c 	.word	0x2000055c
  4016e8:	200005a8 	.word	0x200005a8
  4016ec:	004001cd 	.word	0x004001cd
  4016f0:	20000570 	.word	0x20000570
  4016f4:	200004bc 	.word	0x200004bc
  4016f8:	00400181 	.word	0x00400181
  4016fc:	200004b0 	.word	0x200004b0
  401700:	200005ec 	.word	0x200005ec
  401704:	0040300c 	.word	0x0040300c
  401708:	00402c05 	.word	0x00402c05
  40170c:	00401081 	.word	0x00401081
  401710:	20000564 	.word	0x20000564
  401714:	e000ed04 	.word	0xe000ed04
  401718:	004014e5 	.word	0x004014e5
  40171c:	0040030d 	.word	0x0040030d

00401720 <vTaskDelay>:
	{
  401720:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  401722:	b1d8      	cbz	r0, 40175c <vTaskDelay+0x3c>
  401724:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  401726:	4b0e      	ldr	r3, [pc, #56]	; (401760 <vTaskDelay+0x40>)
  401728:	681b      	ldr	r3, [r3, #0]
  40172a:	b98b      	cbnz	r3, 401750 <vTaskDelay+0x30>
			vTaskSuspendAll();
  40172c:	4b0d      	ldr	r3, [pc, #52]	; (401764 <vTaskDelay+0x44>)
  40172e:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  401730:	2100      	movs	r1, #0
  401732:	4620      	mov	r0, r4
  401734:	4b0c      	ldr	r3, [pc, #48]	; (401768 <vTaskDelay+0x48>)
  401736:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  401738:	4b0c      	ldr	r3, [pc, #48]	; (40176c <vTaskDelay+0x4c>)
  40173a:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  40173c:	b938      	cbnz	r0, 40174e <vTaskDelay+0x2e>
			portYIELD_WITHIN_API();
  40173e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401742:	4b0b      	ldr	r3, [pc, #44]	; (401770 <vTaskDelay+0x50>)
  401744:	601a      	str	r2, [r3, #0]
  401746:	f3bf 8f4f 	dsb	sy
  40174a:	f3bf 8f6f 	isb	sy
  40174e:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
  401750:	f240 513c 	movw	r1, #1340	; 0x53c
  401754:	4807      	ldr	r0, [pc, #28]	; (401774 <vTaskDelay+0x54>)
  401756:	4b08      	ldr	r3, [pc, #32]	; (401778 <vTaskDelay+0x58>)
  401758:	4798      	blx	r3
  40175a:	e7e7      	b.n	40172c <vTaskDelay+0xc>
	BaseType_t xAlreadyYielded = pdFALSE;
  40175c:	2000      	movs	r0, #0
  40175e:	e7ed      	b.n	40173c <vTaskDelay+0x1c>
  401760:	20000568 	.word	0x20000568
  401764:	004014c9 	.word	0x004014c9
  401768:	00401321 	.word	0x00401321
  40176c:	00401609 	.word	0x00401609
  401770:	e000ed04 	.word	0xe000ed04
  401774:	0040300c 	.word	0x0040300c
  401778:	00402c05 	.word	0x00402c05

0040177c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  40177c:	4b2c      	ldr	r3, [pc, #176]	; (401830 <vTaskSwitchContext+0xb4>)
  40177e:	681b      	ldr	r3, [r3, #0]
  401780:	2b00      	cmp	r3, #0
  401782:	d135      	bne.n	4017f0 <vTaskSwitchContext+0x74>
{
  401784:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  401786:	2200      	movs	r2, #0
  401788:	4b2a      	ldr	r3, [pc, #168]	; (401834 <vTaskSwitchContext+0xb8>)
  40178a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  40178c:	4b2a      	ldr	r3, [pc, #168]	; (401838 <vTaskSwitchContext+0xbc>)
  40178e:	681b      	ldr	r3, [r3, #0]
  401790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401792:	681a      	ldr	r2, [r3, #0]
  401794:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401798:	d02e      	beq.n	4017f8 <vTaskSwitchContext+0x7c>
  40179a:	4b27      	ldr	r3, [pc, #156]	; (401838 <vTaskSwitchContext+0xbc>)
  40179c:	6818      	ldr	r0, [r3, #0]
  40179e:	6819      	ldr	r1, [r3, #0]
  4017a0:	3134      	adds	r1, #52	; 0x34
  4017a2:	4b26      	ldr	r3, [pc, #152]	; (40183c <vTaskSwitchContext+0xc0>)
  4017a4:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4017a6:	4b26      	ldr	r3, [pc, #152]	; (401840 <vTaskSwitchContext+0xc4>)
  4017a8:	681c      	ldr	r4, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  4017aa:	fab4 f484 	clz	r4, r4
  4017ae:	b2e4      	uxtb	r4, r4
  4017b0:	f1c4 041f 	rsb	r4, r4, #31
  4017b4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  4017b8:	0093      	lsls	r3, r2, #2
  4017ba:	4a22      	ldr	r2, [pc, #136]	; (401844 <vTaskSwitchContext+0xc8>)
  4017bc:	58d3      	ldr	r3, [r2, r3]
  4017be:	b343      	cbz	r3, 401812 <vTaskSwitchContext+0x96>
  4017c0:	4920      	ldr	r1, [pc, #128]	; (401844 <vTaskSwitchContext+0xc8>)
  4017c2:	00a3      	lsls	r3, r4, #2
  4017c4:	1918      	adds	r0, r3, r4
  4017c6:	0082      	lsls	r2, r0, #2
  4017c8:	440a      	add	r2, r1
  4017ca:	6850      	ldr	r0, [r2, #4]
  4017cc:	6840      	ldr	r0, [r0, #4]
  4017ce:	6050      	str	r0, [r2, #4]
  4017d0:	4423      	add	r3, r4
  4017d2:	009a      	lsls	r2, r3, #2
  4017d4:	3208      	adds	r2, #8
  4017d6:	4411      	add	r1, r2
  4017d8:	4288      	cmp	r0, r1
  4017da:	d020      	beq.n	40181e <vTaskSwitchContext+0xa2>
  4017dc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4017e0:	00a2      	lsls	r2, r4, #2
  4017e2:	4b18      	ldr	r3, [pc, #96]	; (401844 <vTaskSwitchContext+0xc8>)
  4017e4:	4413      	add	r3, r2
  4017e6:	685b      	ldr	r3, [r3, #4]
  4017e8:	68da      	ldr	r2, [r3, #12]
  4017ea:	4b13      	ldr	r3, [pc, #76]	; (401838 <vTaskSwitchContext+0xbc>)
  4017ec:	601a      	str	r2, [r3, #0]
  4017ee:	bd10      	pop	{r4, pc}
		xYieldPending = pdTRUE;
  4017f0:	2201      	movs	r2, #1
  4017f2:	4b10      	ldr	r3, [pc, #64]	; (401834 <vTaskSwitchContext+0xb8>)
  4017f4:	601a      	str	r2, [r3, #0]
  4017f6:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4017f8:	685a      	ldr	r2, [r3, #4]
  4017fa:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4017fe:	d1cc      	bne.n	40179a <vTaskSwitchContext+0x1e>
  401800:	689a      	ldr	r2, [r3, #8]
  401802:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401806:	d1c8      	bne.n	40179a <vTaskSwitchContext+0x1e>
  401808:	68db      	ldr	r3, [r3, #12]
  40180a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  40180e:	d1c4      	bne.n	40179a <vTaskSwitchContext+0x1e>
  401810:	e7c9      	b.n	4017a6 <vTaskSwitchContext+0x2a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401812:	f640 31b7 	movw	r1, #2999	; 0xbb7
  401816:	480c      	ldr	r0, [pc, #48]	; (401848 <vTaskSwitchContext+0xcc>)
  401818:	4b0c      	ldr	r3, [pc, #48]	; (40184c <vTaskSwitchContext+0xd0>)
  40181a:	4798      	blx	r3
  40181c:	e7d0      	b.n	4017c0 <vTaskSwitchContext+0x44>
  40181e:	6841      	ldr	r1, [r0, #4]
  401820:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  401824:	009a      	lsls	r2, r3, #2
  401826:	4b07      	ldr	r3, [pc, #28]	; (401844 <vTaskSwitchContext+0xc8>)
  401828:	4413      	add	r3, r2
  40182a:	6059      	str	r1, [r3, #4]
  40182c:	e7d6      	b.n	4017dc <vTaskSwitchContext+0x60>
  40182e:	bf00      	nop
  401830:	20000568 	.word	0x20000568
  401834:	200005ec 	.word	0x200005ec
  401838:	200004b0 	.word	0x200004b0
  40183c:	00402c45 	.word	0x00402c45
  401840:	20000570 	.word	0x20000570
  401844:	200004bc 	.word	0x200004bc
  401848:	0040300c 	.word	0x0040300c
  40184c:	00402c05 	.word	0x00402c05

00401850 <vTaskPlaceOnEventList>:
{
  401850:	b538      	push	{r3, r4, r5, lr}
  401852:	460c      	mov	r4, r1
	configASSERT( pxEventList );
  401854:	4605      	mov	r5, r0
  401856:	b150      	cbz	r0, 40186e <vTaskPlaceOnEventList+0x1e>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401858:	4b08      	ldr	r3, [pc, #32]	; (40187c <vTaskPlaceOnEventList+0x2c>)
  40185a:	6819      	ldr	r1, [r3, #0]
  40185c:	3118      	adds	r1, #24
  40185e:	4628      	mov	r0, r5
  401860:	4b07      	ldr	r3, [pc, #28]	; (401880 <vTaskPlaceOnEventList+0x30>)
  401862:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  401864:	2101      	movs	r1, #1
  401866:	4620      	mov	r0, r4
  401868:	4b06      	ldr	r3, [pc, #24]	; (401884 <vTaskPlaceOnEventList+0x34>)
  40186a:	4798      	blx	r3
  40186c:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxEventList );
  40186e:	f640 31ce 	movw	r1, #3022	; 0xbce
  401872:	4805      	ldr	r0, [pc, #20]	; (401888 <vTaskPlaceOnEventList+0x38>)
  401874:	4b05      	ldr	r3, [pc, #20]	; (40188c <vTaskPlaceOnEventList+0x3c>)
  401876:	4798      	blx	r3
  401878:	e7ee      	b.n	401858 <vTaskPlaceOnEventList+0x8>
  40187a:	bf00      	nop
  40187c:	200004b0 	.word	0x200004b0
  401880:	00400199 	.word	0x00400199
  401884:	00401321 	.word	0x00401321
  401888:	0040300c 	.word	0x0040300c
  40188c:	00402c05 	.word	0x00402c05

00401890 <vTaskPlaceOnEventListRestricted>:
	{
  401890:	b570      	push	{r4, r5, r6, lr}
  401892:	460d      	mov	r5, r1
  401894:	4614      	mov	r4, r2
		configASSERT( pxEventList );
  401896:	4606      	mov	r6, r0
  401898:	b168      	cbz	r0, 4018b6 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40189a:	4b0a      	ldr	r3, [pc, #40]	; (4018c4 <vTaskPlaceOnEventListRestricted+0x34>)
  40189c:	6819      	ldr	r1, [r3, #0]
  40189e:	3118      	adds	r1, #24
  4018a0:	4630      	mov	r0, r6
  4018a2:	4b09      	ldr	r3, [pc, #36]	; (4018c8 <vTaskPlaceOnEventListRestricted+0x38>)
  4018a4:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
  4018a6:	b10c      	cbz	r4, 4018ac <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
  4018a8:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  4018ac:	4621      	mov	r1, r4
  4018ae:	4628      	mov	r0, r5
  4018b0:	4b06      	ldr	r3, [pc, #24]	; (4018cc <vTaskPlaceOnEventListRestricted+0x3c>)
  4018b2:	4798      	blx	r3
  4018b4:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
  4018b6:	f640 31f9 	movw	r1, #3065	; 0xbf9
  4018ba:	4805      	ldr	r0, [pc, #20]	; (4018d0 <vTaskPlaceOnEventListRestricted+0x40>)
  4018bc:	4b05      	ldr	r3, [pc, #20]	; (4018d4 <vTaskPlaceOnEventListRestricted+0x44>)
  4018be:	4798      	blx	r3
  4018c0:	e7eb      	b.n	40189a <vTaskPlaceOnEventListRestricted+0xa>
  4018c2:	bf00      	nop
  4018c4:	200004b0 	.word	0x200004b0
  4018c8:	00400181 	.word	0x00400181
  4018cc:	00401321 	.word	0x00401321
  4018d0:	0040300c 	.word	0x0040300c
  4018d4:	00402c05 	.word	0x00402c05

004018d8 <xTaskRemoveFromEventList>:
{
  4018d8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4018da:	68c3      	ldr	r3, [r0, #12]
  4018dc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4018de:	b324      	cbz	r4, 40192a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4018e0:	f104 0518 	add.w	r5, r4, #24
  4018e4:	4628      	mov	r0, r5
  4018e6:	4b17      	ldr	r3, [pc, #92]	; (401944 <xTaskRemoveFromEventList+0x6c>)
  4018e8:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4018ea:	4b17      	ldr	r3, [pc, #92]	; (401948 <xTaskRemoveFromEventList+0x70>)
  4018ec:	681b      	ldr	r3, [r3, #0]
  4018ee:	bb13      	cbnz	r3, 401936 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  4018f0:	1d25      	adds	r5, r4, #4
  4018f2:	4628      	mov	r0, r5
  4018f4:	4b13      	ldr	r3, [pc, #76]	; (401944 <xTaskRemoveFromEventList+0x6c>)
  4018f6:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4018f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4018fa:	2201      	movs	r2, #1
  4018fc:	409a      	lsls	r2, r3
  4018fe:	4913      	ldr	r1, [pc, #76]	; (40194c <xTaskRemoveFromEventList+0x74>)
  401900:	6808      	ldr	r0, [r1, #0]
  401902:	4302      	orrs	r2, r0
  401904:	600a      	str	r2, [r1, #0]
  401906:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40190a:	009a      	lsls	r2, r3, #2
  40190c:	4629      	mov	r1, r5
  40190e:	4810      	ldr	r0, [pc, #64]	; (401950 <xTaskRemoveFromEventList+0x78>)
  401910:	4410      	add	r0, r2
  401912:	4b10      	ldr	r3, [pc, #64]	; (401954 <xTaskRemoveFromEventList+0x7c>)
  401914:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401916:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401918:	4b0f      	ldr	r3, [pc, #60]	; (401958 <xTaskRemoveFromEventList+0x80>)
  40191a:	681b      	ldr	r3, [r3, #0]
  40191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40191e:	429a      	cmp	r2, r3
  401920:	d90e      	bls.n	401940 <xTaskRemoveFromEventList+0x68>
		xYieldPending = pdTRUE;
  401922:	2001      	movs	r0, #1
  401924:	4b0d      	ldr	r3, [pc, #52]	; (40195c <xTaskRemoveFromEventList+0x84>)
  401926:	6018      	str	r0, [r3, #0]
  401928:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxUnblockedTCB );
  40192a:	f640 4129 	movw	r1, #3113	; 0xc29
  40192e:	480c      	ldr	r0, [pc, #48]	; (401960 <xTaskRemoveFromEventList+0x88>)
  401930:	4b0c      	ldr	r3, [pc, #48]	; (401964 <xTaskRemoveFromEventList+0x8c>)
  401932:	4798      	blx	r3
  401934:	e7d4      	b.n	4018e0 <xTaskRemoveFromEventList+0x8>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401936:	4629      	mov	r1, r5
  401938:	480b      	ldr	r0, [pc, #44]	; (401968 <xTaskRemoveFromEventList+0x90>)
  40193a:	4b06      	ldr	r3, [pc, #24]	; (401954 <xTaskRemoveFromEventList+0x7c>)
  40193c:	4798      	blx	r3
  40193e:	e7ea      	b.n	401916 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  401940:	2000      	movs	r0, #0
}
  401942:	bd38      	pop	{r3, r4, r5, pc}
  401944:	004001cd 	.word	0x004001cd
  401948:	20000568 	.word	0x20000568
  40194c:	20000570 	.word	0x20000570
  401950:	200004bc 	.word	0x200004bc
  401954:	00400181 	.word	0x00400181
  401958:	200004b0 	.word	0x200004b0
  40195c:	200005ec 	.word	0x200005ec
  401960:	0040300c 	.word	0x0040300c
  401964:	00402c05 	.word	0x00402c05
  401968:	200005a8 	.word	0x200005a8

0040196c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40196c:	4b03      	ldr	r3, [pc, #12]	; (40197c <vTaskInternalSetTimeOutState+0x10>)
  40196e:	681b      	ldr	r3, [r3, #0]
  401970:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401972:	4b03      	ldr	r3, [pc, #12]	; (401980 <vTaskInternalSetTimeOutState+0x14>)
  401974:	681b      	ldr	r3, [r3, #0]
  401976:	6043      	str	r3, [r0, #4]
  401978:	4770      	bx	lr
  40197a:	bf00      	nop
  40197c:	200005a4 	.word	0x200005a4
  401980:	200005e8 	.word	0x200005e8

00401984 <xTaskCheckForTimeOut>:
{
  401984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401986:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
  401988:	4605      	mov	r5, r0
  40198a:	b1d0      	cbz	r0, 4019c2 <xTaskCheckForTimeOut+0x3e>
	configASSERT( pxTicksToWait );
  40198c:	b1fc      	cbz	r4, 4019ce <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
  40198e:	4b18      	ldr	r3, [pc, #96]	; (4019f0 <xTaskCheckForTimeOut+0x6c>)
  401990:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  401992:	4b18      	ldr	r3, [pc, #96]	; (4019f4 <xTaskCheckForTimeOut+0x70>)
  401994:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  401996:	686a      	ldr	r2, [r5, #4]
  401998:	1a88      	subs	r0, r1, r2
			if( *pxTicksToWait == portMAX_DELAY )
  40199a:	6823      	ldr	r3, [r4, #0]
  40199c:	f1b3 3fff 	cmp.w	r3, #4294967295
  4019a0:	d022      	beq.n	4019e8 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4019a2:	682f      	ldr	r7, [r5, #0]
  4019a4:	4e14      	ldr	r6, [pc, #80]	; (4019f8 <xTaskCheckForTimeOut+0x74>)
  4019a6:	6836      	ldr	r6, [r6, #0]
  4019a8:	42b7      	cmp	r7, r6
  4019aa:	d001      	beq.n	4019b0 <xTaskCheckForTimeOut+0x2c>
  4019ac:	4291      	cmp	r1, r2
  4019ae:	d21d      	bcs.n	4019ec <xTaskCheckForTimeOut+0x68>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  4019b0:	4298      	cmp	r0, r3
  4019b2:	d312      	bcc.n	4019da <xTaskCheckForTimeOut+0x56>
			*pxTicksToWait = 0;
  4019b4:	2300      	movs	r3, #0
  4019b6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
  4019b8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  4019ba:	4b10      	ldr	r3, [pc, #64]	; (4019fc <xTaskCheckForTimeOut+0x78>)
  4019bc:	4798      	blx	r3
}
  4019be:	4620      	mov	r0, r4
  4019c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxTimeOut );
  4019c2:	f640 4194 	movw	r1, #3220	; 0xc94
  4019c6:	480e      	ldr	r0, [pc, #56]	; (401a00 <xTaskCheckForTimeOut+0x7c>)
  4019c8:	4b0e      	ldr	r3, [pc, #56]	; (401a04 <xTaskCheckForTimeOut+0x80>)
  4019ca:	4798      	blx	r3
  4019cc:	e7de      	b.n	40198c <xTaskCheckForTimeOut+0x8>
	configASSERT( pxTicksToWait );
  4019ce:	f640 4195 	movw	r1, #3221	; 0xc95
  4019d2:	480b      	ldr	r0, [pc, #44]	; (401a00 <xTaskCheckForTimeOut+0x7c>)
  4019d4:	4b0b      	ldr	r3, [pc, #44]	; (401a04 <xTaskCheckForTimeOut+0x80>)
  4019d6:	4798      	blx	r3
  4019d8:	e7d9      	b.n	40198e <xTaskCheckForTimeOut+0xa>
			*pxTicksToWait -= xElapsedTime;
  4019da:	1a1b      	subs	r3, r3, r0
  4019dc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  4019de:	4628      	mov	r0, r5
  4019e0:	4b09      	ldr	r3, [pc, #36]	; (401a08 <xTaskCheckForTimeOut+0x84>)
  4019e2:	4798      	blx	r3
			xReturn = pdFALSE;
  4019e4:	2400      	movs	r4, #0
  4019e6:	e7e8      	b.n	4019ba <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
  4019e8:	2400      	movs	r4, #0
  4019ea:	e7e6      	b.n	4019ba <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
  4019ec:	2401      	movs	r4, #1
  4019ee:	e7e4      	b.n	4019ba <xTaskCheckForTimeOut+0x36>
  4019f0:	004002c5 	.word	0x004002c5
  4019f4:	200005e8 	.word	0x200005e8
  4019f8:	200005a4 	.word	0x200005a4
  4019fc:	0040030d 	.word	0x0040030d
  401a00:	0040300c 	.word	0x0040300c
  401a04:	00402c05 	.word	0x00402c05
  401a08:	0040196d 	.word	0x0040196d

00401a0c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  401a0c:	2201      	movs	r2, #1
  401a0e:	4b01      	ldr	r3, [pc, #4]	; (401a14 <vTaskMissedYield+0x8>)
  401a10:	601a      	str	r2, [r3, #0]
  401a12:	4770      	bx	lr
  401a14:	200005ec 	.word	0x200005ec

00401a18 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
  401a18:	4b05      	ldr	r3, [pc, #20]	; (401a30 <xTaskGetSchedulerState+0x18>)
  401a1a:	681b      	ldr	r3, [r3, #0]
  401a1c:	b123      	cbz	r3, 401a28 <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401a1e:	4b05      	ldr	r3, [pc, #20]	; (401a34 <xTaskGetSchedulerState+0x1c>)
  401a20:	681b      	ldr	r3, [r3, #0]
  401a22:	b91b      	cbnz	r3, 401a2c <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
  401a24:	2002      	movs	r0, #2
  401a26:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  401a28:	2001      	movs	r0, #1
  401a2a:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
  401a2c:	2000      	movs	r0, #0
	}
  401a2e:	4770      	bx	lr
  401a30:	200005bc 	.word	0x200005bc
  401a34:	20000568 	.word	0x20000568

00401a38 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  401a38:	2800      	cmp	r0, #0
  401a3a:	d045      	beq.n	401ac8 <xTaskPriorityDisinherit+0x90>
	{
  401a3c:	b538      	push	{r3, r4, r5, lr}
  401a3e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
  401a40:	4b23      	ldr	r3, [pc, #140]	; (401ad0 <xTaskPriorityDisinherit+0x98>)
  401a42:	681b      	ldr	r3, [r3, #0]
  401a44:	4298      	cmp	r0, r3
  401a46:	d004      	beq.n	401a52 <xTaskPriorityDisinherit+0x1a>
  401a48:	f640 71d1 	movw	r1, #4049	; 0xfd1
  401a4c:	4821      	ldr	r0, [pc, #132]	; (401ad4 <xTaskPriorityDisinherit+0x9c>)
  401a4e:	4b22      	ldr	r3, [pc, #136]	; (401ad8 <xTaskPriorityDisinherit+0xa0>)
  401a50:	4798      	blx	r3
			configASSERT( pxTCB->uxMutexesHeld );
  401a52:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401a54:	b14b      	cbz	r3, 401a6a <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
  401a56:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401a58:	3b01      	subs	r3, #1
  401a5a:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401a5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401a5e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  401a60:	4291      	cmp	r1, r2
  401a62:	d033      	beq.n	401acc <xTaskPriorityDisinherit+0x94>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401a64:	b13b      	cbz	r3, 401a76 <xTaskPriorityDisinherit+0x3e>
	BaseType_t xReturn = pdFALSE;
  401a66:	2000      	movs	r0, #0
	}
  401a68:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB->uxMutexesHeld );
  401a6a:	f640 71d2 	movw	r1, #4050	; 0xfd2
  401a6e:	4819      	ldr	r0, [pc, #100]	; (401ad4 <xTaskPriorityDisinherit+0x9c>)
  401a70:	4b19      	ldr	r3, [pc, #100]	; (401ad8 <xTaskPriorityDisinherit+0xa0>)
  401a72:	4798      	blx	r3
  401a74:	e7ef      	b.n	401a56 <xTaskPriorityDisinherit+0x1e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401a76:	1d25      	adds	r5, r4, #4
  401a78:	4628      	mov	r0, r5
  401a7a:	4b18      	ldr	r3, [pc, #96]	; (401adc <xTaskPriorityDisinherit+0xa4>)
  401a7c:	4798      	blx	r3
  401a7e:	b968      	cbnz	r0, 401a9c <xTaskPriorityDisinherit+0x64>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401a80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401a82:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401a86:	008a      	lsls	r2, r1, #2
  401a88:	4915      	ldr	r1, [pc, #84]	; (401ae0 <xTaskPriorityDisinherit+0xa8>)
  401a8a:	588a      	ldr	r2, [r1, r2]
  401a8c:	b932      	cbnz	r2, 401a9c <xTaskPriorityDisinherit+0x64>
  401a8e:	2201      	movs	r2, #1
  401a90:	409a      	lsls	r2, r3
  401a92:	4914      	ldr	r1, [pc, #80]	; (401ae4 <xTaskPriorityDisinherit+0xac>)
  401a94:	680b      	ldr	r3, [r1, #0]
  401a96:	ea23 0302 	bic.w	r3, r3, r2
  401a9a:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401a9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a9e:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401aa0:	f1c3 0208 	rsb	r2, r3, #8
  401aa4:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  401aa6:	2401      	movs	r4, #1
  401aa8:	fa04 f203 	lsl.w	r2, r4, r3
  401aac:	490d      	ldr	r1, [pc, #52]	; (401ae4 <xTaskPriorityDisinherit+0xac>)
  401aae:	6808      	ldr	r0, [r1, #0]
  401ab0:	4302      	orrs	r2, r0
  401ab2:	600a      	str	r2, [r1, #0]
  401ab4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401ab8:	009a      	lsls	r2, r3, #2
  401aba:	4629      	mov	r1, r5
  401abc:	4808      	ldr	r0, [pc, #32]	; (401ae0 <xTaskPriorityDisinherit+0xa8>)
  401abe:	4410      	add	r0, r2
  401ac0:	4b09      	ldr	r3, [pc, #36]	; (401ae8 <xTaskPriorityDisinherit+0xb0>)
  401ac2:	4798      	blx	r3
					xReturn = pdTRUE;
  401ac4:	4620      	mov	r0, r4
  401ac6:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  401ac8:	2000      	movs	r0, #0
  401aca:	4770      	bx	lr
  401acc:	2000      	movs	r0, #0
  401ace:	bd38      	pop	{r3, r4, r5, pc}
  401ad0:	200004b0 	.word	0x200004b0
  401ad4:	0040300c 	.word	0x0040300c
  401ad8:	00402c05 	.word	0x00402c05
  401adc:	004001cd 	.word	0x004001cd
  401ae0:	200004bc 	.word	0x200004bc
  401ae4:	20000570 	.word	0x20000570
  401ae8:	00400181 	.word	0x00400181

00401aec <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401aec:	4b06      	ldr	r3, [pc, #24]	; (401b08 <prvGetNextExpireTime+0x1c>)
  401aee:	681a      	ldr	r2, [r3, #0]
  401af0:	6813      	ldr	r3, [r2, #0]
  401af2:	b92b      	cbnz	r3, 401b00 <prvGetNextExpireTime+0x14>
  401af4:	2301      	movs	r3, #1
  401af6:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
  401af8:	b923      	cbnz	r3, 401b04 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401afa:	68d3      	ldr	r3, [r2, #12]
  401afc:	6818      	ldr	r0, [r3, #0]
  401afe:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401b00:	2300      	movs	r3, #0
  401b02:	e7f8      	b.n	401af6 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
  401b04:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
  401b06:	4770      	bx	lr
  401b08:	200005f0 	.word	0x200005f0

00401b0c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  401b0c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401b0e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401b10:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  401b12:	4291      	cmp	r1, r2
  401b14:	d80c      	bhi.n	401b30 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401b16:	1ad2      	subs	r2, r2, r3
  401b18:	6983      	ldr	r3, [r0, #24]
  401b1a:	429a      	cmp	r2, r3
  401b1c:	d301      	bcc.n	401b22 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401b1e:	2001      	movs	r0, #1
  401b20:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401b22:	1d01      	adds	r1, r0, #4
  401b24:	4b09      	ldr	r3, [pc, #36]	; (401b4c <prvInsertTimerInActiveList+0x40>)
  401b26:	6818      	ldr	r0, [r3, #0]
  401b28:	4b09      	ldr	r3, [pc, #36]	; (401b50 <prvInsertTimerInActiveList+0x44>)
  401b2a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401b2c:	2000      	movs	r0, #0
  401b2e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401b30:	429a      	cmp	r2, r3
  401b32:	d201      	bcs.n	401b38 <prvInsertTimerInActiveList+0x2c>
  401b34:	4299      	cmp	r1, r3
  401b36:	d206      	bcs.n	401b46 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401b38:	1d01      	adds	r1, r0, #4
  401b3a:	4b06      	ldr	r3, [pc, #24]	; (401b54 <prvInsertTimerInActiveList+0x48>)
  401b3c:	6818      	ldr	r0, [r3, #0]
  401b3e:	4b04      	ldr	r3, [pc, #16]	; (401b50 <prvInsertTimerInActiveList+0x44>)
  401b40:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401b42:	2000      	movs	r0, #0
  401b44:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
  401b46:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
  401b48:	bd08      	pop	{r3, pc}
  401b4a:	bf00      	nop
  401b4c:	200005f4 	.word	0x200005f4
  401b50:	00400199 	.word	0x00400199
  401b54:	200005f0 	.word	0x200005f0

00401b58 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401b58:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401b5a:	4b10      	ldr	r3, [pc, #64]	; (401b9c <prvCheckForValidListAndQueue+0x44>)
  401b5c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401b5e:	4b10      	ldr	r3, [pc, #64]	; (401ba0 <prvCheckForValidListAndQueue+0x48>)
  401b60:	681b      	ldr	r3, [r3, #0]
  401b62:	b113      	cbz	r3, 401b6a <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401b64:	4b0f      	ldr	r3, [pc, #60]	; (401ba4 <prvCheckForValidListAndQueue+0x4c>)
  401b66:	4798      	blx	r3
  401b68:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  401b6a:	4d0f      	ldr	r5, [pc, #60]	; (401ba8 <prvCheckForValidListAndQueue+0x50>)
  401b6c:	4628      	mov	r0, r5
  401b6e:	4e0f      	ldr	r6, [pc, #60]	; (401bac <prvCheckForValidListAndQueue+0x54>)
  401b70:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401b72:	4c0f      	ldr	r4, [pc, #60]	; (401bb0 <prvCheckForValidListAndQueue+0x58>)
  401b74:	4620      	mov	r0, r4
  401b76:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401b78:	4b0e      	ldr	r3, [pc, #56]	; (401bb4 <prvCheckForValidListAndQueue+0x5c>)
  401b7a:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401b7c:	4b0e      	ldr	r3, [pc, #56]	; (401bb8 <prvCheckForValidListAndQueue+0x60>)
  401b7e:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401b80:	2200      	movs	r2, #0
  401b82:	2110      	movs	r1, #16
  401b84:	2005      	movs	r0, #5
  401b86:	4b0d      	ldr	r3, [pc, #52]	; (401bbc <prvCheckForValidListAndQueue+0x64>)
  401b88:	4798      	blx	r3
  401b8a:	4b05      	ldr	r3, [pc, #20]	; (401ba0 <prvCheckForValidListAndQueue+0x48>)
  401b8c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  401b8e:	2800      	cmp	r0, #0
  401b90:	d0e8      	beq.n	401b64 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401b92:	490b      	ldr	r1, [pc, #44]	; (401bc0 <prvCheckForValidListAndQueue+0x68>)
  401b94:	4b0b      	ldr	r3, [pc, #44]	; (401bc4 <prvCheckForValidListAndQueue+0x6c>)
  401b96:	4798      	blx	r3
  401b98:	e7e4      	b.n	401b64 <prvCheckForValidListAndQueue+0xc>
  401b9a:	bf00      	nop
  401b9c:	004002c5 	.word	0x004002c5
  401ba0:	20000624 	.word	0x20000624
  401ba4:	0040030d 	.word	0x0040030d
  401ba8:	200005f8 	.word	0x200005f8
  401bac:	00400165 	.word	0x00400165
  401bb0:	2000060c 	.word	0x2000060c
  401bb4:	200005f0 	.word	0x200005f0
  401bb8:	200005f4 	.word	0x200005f4
  401bbc:	00400ae5 	.word	0x00400ae5
  401bc0:	0040302c 	.word	0x0040302c
  401bc4:	00400ff5 	.word	0x00400ff5

00401bc8 <xTimerCreateTimerTask>:
{
  401bc8:	b510      	push	{r4, lr}
  401bca:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
  401bcc:	4b0e      	ldr	r3, [pc, #56]	; (401c08 <xTimerCreateTimerTask+0x40>)
  401bce:	4798      	blx	r3
	if( xTimerQueue != NULL )
  401bd0:	4b0e      	ldr	r3, [pc, #56]	; (401c0c <xTimerCreateTimerTask+0x44>)
  401bd2:	681b      	ldr	r3, [r3, #0]
  401bd4:	b17b      	cbz	r3, 401bf6 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
  401bd6:	4b0e      	ldr	r3, [pc, #56]	; (401c10 <xTimerCreateTimerTask+0x48>)
  401bd8:	9301      	str	r3, [sp, #4]
  401bda:	2307      	movs	r3, #7
  401bdc:	9300      	str	r3, [sp, #0]
  401bde:	2300      	movs	r3, #0
  401be0:	f44f 7282 	mov.w	r2, #260	; 0x104
  401be4:	490b      	ldr	r1, [pc, #44]	; (401c14 <xTimerCreateTimerTask+0x4c>)
  401be6:	480c      	ldr	r0, [pc, #48]	; (401c18 <xTimerCreateTimerTask+0x50>)
  401be8:	4c0c      	ldr	r4, [pc, #48]	; (401c1c <xTimerCreateTimerTask+0x54>)
  401bea:	47a0      	blx	r4
  401bec:	4604      	mov	r4, r0
	configASSERT( xReturn );
  401bee:	b124      	cbz	r4, 401bfa <xTimerCreateTimerTask+0x32>
}
  401bf0:	4620      	mov	r0, r4
  401bf2:	b002      	add	sp, #8
  401bf4:	bd10      	pop	{r4, pc}
BaseType_t xReturn = pdFAIL;
  401bf6:	2400      	movs	r4, #0
  401bf8:	e7f9      	b.n	401bee <xTimerCreateTimerTask+0x26>
	configASSERT( xReturn );
  401bfa:	f240 1113 	movw	r1, #275	; 0x113
  401bfe:	4808      	ldr	r0, [pc, #32]	; (401c20 <xTimerCreateTimerTask+0x58>)
  401c00:	4b08      	ldr	r3, [pc, #32]	; (401c24 <xTimerCreateTimerTask+0x5c>)
  401c02:	4798      	blx	r3
	return xReturn;
  401c04:	e7f4      	b.n	401bf0 <xTimerCreateTimerTask+0x28>
  401c06:	bf00      	nop
  401c08:	00401b59 	.word	0x00401b59
  401c0c:	20000624 	.word	0x20000624
  401c10:	20000628 	.word	0x20000628
  401c14:	00403050 	.word	0x00403050
  401c18:	00401f91 	.word	0x00401f91
  401c1c:	004013c5 	.word	0x004013c5
  401c20:	00403034 	.word	0x00403034
  401c24:	00402c05 	.word	0x00402c05

00401c28 <xTimerGenericCommand>:
{
  401c28:	b5f0      	push	{r4, r5, r6, r7, lr}
  401c2a:	b085      	sub	sp, #20
  401c2c:	460c      	mov	r4, r1
  401c2e:	4616      	mov	r6, r2
  401c30:	461f      	mov	r7, r3
	configASSERT( xTimer );
  401c32:	4605      	mov	r5, r0
  401c34:	b198      	cbz	r0, 401c5e <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
  401c36:	4b15      	ldr	r3, [pc, #84]	; (401c8c <xTimerGenericCommand+0x64>)
  401c38:	6818      	ldr	r0, [r3, #0]
  401c3a:	b328      	cbz	r0, 401c88 <xTimerGenericCommand+0x60>
		xMessage.xMessageID = xCommandID;
  401c3c:	9400      	str	r4, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  401c3e:	9601      	str	r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
  401c40:	9502      	str	r5, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  401c42:	2c05      	cmp	r4, #5
  401c44:	dc19      	bgt.n	401c7a <xTimerGenericCommand+0x52>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401c46:	4b12      	ldr	r3, [pc, #72]	; (401c90 <xTimerGenericCommand+0x68>)
  401c48:	4798      	blx	r3
  401c4a:	2802      	cmp	r0, #2
  401c4c:	d00d      	beq.n	401c6a <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401c4e:	2300      	movs	r3, #0
  401c50:	461a      	mov	r2, r3
  401c52:	4669      	mov	r1, sp
  401c54:	480d      	ldr	r0, [pc, #52]	; (401c8c <xTimerGenericCommand+0x64>)
  401c56:	6800      	ldr	r0, [r0, #0]
  401c58:	4c0e      	ldr	r4, [pc, #56]	; (401c94 <xTimerGenericCommand+0x6c>)
  401c5a:	47a0      	blx	r4
  401c5c:	e012      	b.n	401c84 <xTimerGenericCommand+0x5c>
	configASSERT( xTimer );
  401c5e:	f44f 71c1 	mov.w	r1, #386	; 0x182
  401c62:	480d      	ldr	r0, [pc, #52]	; (401c98 <xTimerGenericCommand+0x70>)
  401c64:	4b0d      	ldr	r3, [pc, #52]	; (401c9c <xTimerGenericCommand+0x74>)
  401c66:	4798      	blx	r3
  401c68:	e7e5      	b.n	401c36 <xTimerGenericCommand+0xe>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  401c6a:	2300      	movs	r3, #0
  401c6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401c6e:	4669      	mov	r1, sp
  401c70:	4806      	ldr	r0, [pc, #24]	; (401c8c <xTimerGenericCommand+0x64>)
  401c72:	6800      	ldr	r0, [r0, #0]
  401c74:	4c07      	ldr	r4, [pc, #28]	; (401c94 <xTimerGenericCommand+0x6c>)
  401c76:	47a0      	blx	r4
  401c78:	e004      	b.n	401c84 <xTimerGenericCommand+0x5c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401c7a:	2300      	movs	r3, #0
  401c7c:	463a      	mov	r2, r7
  401c7e:	4669      	mov	r1, sp
  401c80:	4c07      	ldr	r4, [pc, #28]	; (401ca0 <xTimerGenericCommand+0x78>)
  401c82:	47a0      	blx	r4
}
  401c84:	b005      	add	sp, #20
  401c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
BaseType_t xReturn = pdFAIL;
  401c88:	2000      	movs	r0, #0
	return xReturn;
  401c8a:	e7fb      	b.n	401c84 <xTimerGenericCommand+0x5c>
  401c8c:	20000624 	.word	0x20000624
  401c90:	00401a19 	.word	0x00401a19
  401c94:	00400b39 	.word	0x00400b39
  401c98:	00403034 	.word	0x00403034
  401c9c:	00402c05 	.word	0x00402c05
  401ca0:	00400d25 	.word	0x00400d25

00401ca4 <prvSwitchTimerLists>:
{
  401ca4:	b570      	push	{r4, r5, r6, lr}
  401ca6:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401ca8:	4b1a      	ldr	r3, [pc, #104]	; (401d14 <prvSwitchTimerLists+0x70>)
  401caa:	681b      	ldr	r3, [r3, #0]
  401cac:	681a      	ldr	r2, [r3, #0]
  401cae:	b34a      	cbz	r2, 401d04 <prvSwitchTimerLists+0x60>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401cb0:	68db      	ldr	r3, [r3, #12]
  401cb2:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401cb4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401cb6:	1d25      	adds	r5, r4, #4
  401cb8:	4628      	mov	r0, r5
  401cba:	4b17      	ldr	r3, [pc, #92]	; (401d18 <prvSwitchTimerLists+0x74>)
  401cbc:	4798      	blx	r3
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401cbe:	6a23      	ldr	r3, [r4, #32]
  401cc0:	4620      	mov	r0, r4
  401cc2:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401cc4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  401cc8:	f013 0f04 	tst.w	r3, #4
  401ccc:	d0ec      	beq.n	401ca8 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  401cce:	69a3      	ldr	r3, [r4, #24]
  401cd0:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
  401cd2:	429e      	cmp	r6, r3
  401cd4:	d207      	bcs.n	401ce6 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  401cd6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401cd8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401cda:	4629      	mov	r1, r5
  401cdc:	4b0d      	ldr	r3, [pc, #52]	; (401d14 <prvSwitchTimerLists+0x70>)
  401cde:	6818      	ldr	r0, [r3, #0]
  401ce0:	4b0e      	ldr	r3, [pc, #56]	; (401d1c <prvSwitchTimerLists+0x78>)
  401ce2:	4798      	blx	r3
  401ce4:	e7e0      	b.n	401ca8 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401ce6:	2100      	movs	r1, #0
  401ce8:	9100      	str	r1, [sp, #0]
  401cea:	460b      	mov	r3, r1
  401cec:	4632      	mov	r2, r6
  401cee:	4620      	mov	r0, r4
  401cf0:	4c0b      	ldr	r4, [pc, #44]	; (401d20 <prvSwitchTimerLists+0x7c>)
  401cf2:	47a0      	blx	r4
				configASSERT( xResult );
  401cf4:	2800      	cmp	r0, #0
  401cf6:	d1d7      	bne.n	401ca8 <prvSwitchTimerLists+0x4>
  401cf8:	f44f 7161 	mov.w	r1, #900	; 0x384
  401cfc:	4809      	ldr	r0, [pc, #36]	; (401d24 <prvSwitchTimerLists+0x80>)
  401cfe:	4b0a      	ldr	r3, [pc, #40]	; (401d28 <prvSwitchTimerLists+0x84>)
  401d00:	4798      	blx	r3
  401d02:	e7d1      	b.n	401ca8 <prvSwitchTimerLists+0x4>
	pxCurrentTimerList = pxOverflowTimerList;
  401d04:	4a09      	ldr	r2, [pc, #36]	; (401d2c <prvSwitchTimerLists+0x88>)
  401d06:	6810      	ldr	r0, [r2, #0]
  401d08:	4902      	ldr	r1, [pc, #8]	; (401d14 <prvSwitchTimerLists+0x70>)
  401d0a:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  401d0c:	6013      	str	r3, [r2, #0]
}
  401d0e:	b002      	add	sp, #8
  401d10:	bd70      	pop	{r4, r5, r6, pc}
  401d12:	bf00      	nop
  401d14:	200005f0 	.word	0x200005f0
  401d18:	004001cd 	.word	0x004001cd
  401d1c:	00400199 	.word	0x00400199
  401d20:	00401c29 	.word	0x00401c29
  401d24:	00403034 	.word	0x00403034
  401d28:	00402c05 	.word	0x00402c05
  401d2c:	200005f4 	.word	0x200005f4

00401d30 <prvSampleTimeNow>:
{
  401d30:	b538      	push	{r3, r4, r5, lr}
  401d32:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
  401d34:	4b08      	ldr	r3, [pc, #32]	; (401d58 <prvSampleTimeNow+0x28>)
  401d36:	4798      	blx	r3
  401d38:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
  401d3a:	4b08      	ldr	r3, [pc, #32]	; (401d5c <prvSampleTimeNow+0x2c>)
  401d3c:	681b      	ldr	r3, [r3, #0]
  401d3e:	4298      	cmp	r0, r3
  401d40:	d305      	bcc.n	401d4e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
  401d42:	2300      	movs	r3, #0
  401d44:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
  401d46:	4b05      	ldr	r3, [pc, #20]	; (401d5c <prvSampleTimeNow+0x2c>)
  401d48:	601c      	str	r4, [r3, #0]
}
  401d4a:	4620      	mov	r0, r4
  401d4c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
  401d4e:	4b04      	ldr	r3, [pc, #16]	; (401d60 <prvSampleTimeNow+0x30>)
  401d50:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  401d52:	2301      	movs	r3, #1
  401d54:	602b      	str	r3, [r5, #0]
  401d56:	e7f6      	b.n	401d46 <prvSampleTimeNow+0x16>
  401d58:	004014d9 	.word	0x004014d9
  401d5c:	20000620 	.word	0x20000620
  401d60:	00401ca5 	.word	0x00401ca5

00401d64 <prvProcessExpiredTimer>:
{
  401d64:	b570      	push	{r4, r5, r6, lr}
  401d66:	b082      	sub	sp, #8
  401d68:	4605      	mov	r5, r0
  401d6a:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401d6c:	4b16      	ldr	r3, [pc, #88]	; (401dc8 <prvProcessExpiredTimer+0x64>)
  401d6e:	681b      	ldr	r3, [r3, #0]
  401d70:	68db      	ldr	r3, [r3, #12]
  401d72:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401d74:	1d20      	adds	r0, r4, #4
  401d76:	4b15      	ldr	r3, [pc, #84]	; (401dcc <prvProcessExpiredTimer+0x68>)
  401d78:	4798      	blx	r3
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401d7a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  401d7e:	f013 0f04 	tst.w	r3, #4
  401d82:	d108      	bne.n	401d96 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
  401d84:	f023 0301 	bic.w	r3, r3, #1
  401d88:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401d8c:	6a23      	ldr	r3, [r4, #32]
  401d8e:	4620      	mov	r0, r4
  401d90:	4798      	blx	r3
}
  401d92:	b002      	add	sp, #8
  401d94:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
  401d96:	69a1      	ldr	r1, [r4, #24]
  401d98:	462b      	mov	r3, r5
  401d9a:	4632      	mov	r2, r6
  401d9c:	4429      	add	r1, r5
  401d9e:	4620      	mov	r0, r4
  401da0:	4e0b      	ldr	r6, [pc, #44]	; (401dd0 <prvProcessExpiredTimer+0x6c>)
  401da2:	47b0      	blx	r6
  401da4:	2800      	cmp	r0, #0
  401da6:	d0f1      	beq.n	401d8c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401da8:	2100      	movs	r1, #0
  401daa:	9100      	str	r1, [sp, #0]
  401dac:	460b      	mov	r3, r1
  401dae:	462a      	mov	r2, r5
  401db0:	4620      	mov	r0, r4
  401db2:	4d08      	ldr	r5, [pc, #32]	; (401dd4 <prvProcessExpiredTimer+0x70>)
  401db4:	47a8      	blx	r5
			configASSERT( xResult );
  401db6:	2800      	cmp	r0, #0
  401db8:	d1e8      	bne.n	401d8c <prvProcessExpiredTimer+0x28>
  401dba:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
  401dbe:	4806      	ldr	r0, [pc, #24]	; (401dd8 <prvProcessExpiredTimer+0x74>)
  401dc0:	4b06      	ldr	r3, [pc, #24]	; (401ddc <prvProcessExpiredTimer+0x78>)
  401dc2:	4798      	blx	r3
  401dc4:	e7e2      	b.n	401d8c <prvProcessExpiredTimer+0x28>
  401dc6:	bf00      	nop
  401dc8:	200005f0 	.word	0x200005f0
  401dcc:	004001cd 	.word	0x004001cd
  401dd0:	00401b0d 	.word	0x00401b0d
  401dd4:	00401c29 	.word	0x00401c29
  401dd8:	00403034 	.word	0x00403034
  401ddc:	00402c05 	.word	0x00402c05

00401de0 <prvProcessTimerOrBlockTask>:
{
  401de0:	b570      	push	{r4, r5, r6, lr}
  401de2:	b082      	sub	sp, #8
  401de4:	4606      	mov	r6, r0
  401de6:	460c      	mov	r4, r1
	vTaskSuspendAll();
  401de8:	4b17      	ldr	r3, [pc, #92]	; (401e48 <prvProcessTimerOrBlockTask+0x68>)
  401dea:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401dec:	a801      	add	r0, sp, #4
  401dee:	4b17      	ldr	r3, [pc, #92]	; (401e4c <prvProcessTimerOrBlockTask+0x6c>)
  401df0:	4798      	blx	r3
		if( xTimerListsWereSwitched == pdFALSE )
  401df2:	9b01      	ldr	r3, [sp, #4]
  401df4:	bb2b      	cbnz	r3, 401e42 <prvProcessTimerOrBlockTask+0x62>
  401df6:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401df8:	b90c      	cbnz	r4, 401dfe <prvProcessTimerOrBlockTask+0x1e>
  401dfa:	42b0      	cmp	r0, r6
  401dfc:	d218      	bcs.n	401e30 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
  401dfe:	b124      	cbz	r4, 401e0a <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  401e00:	4b13      	ldr	r3, [pc, #76]	; (401e50 <prvProcessTimerOrBlockTask+0x70>)
  401e02:	681b      	ldr	r3, [r3, #0]
  401e04:	681b      	ldr	r3, [r3, #0]
  401e06:	b9d3      	cbnz	r3, 401e3e <prvProcessTimerOrBlockTask+0x5e>
  401e08:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401e0a:	4622      	mov	r2, r4
  401e0c:	1b71      	subs	r1, r6, r5
  401e0e:	4b11      	ldr	r3, [pc, #68]	; (401e54 <prvProcessTimerOrBlockTask+0x74>)
  401e10:	6818      	ldr	r0, [r3, #0]
  401e12:	4b11      	ldr	r3, [pc, #68]	; (401e58 <prvProcessTimerOrBlockTask+0x78>)
  401e14:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401e16:	4b11      	ldr	r3, [pc, #68]	; (401e5c <prvProcessTimerOrBlockTask+0x7c>)
  401e18:	4798      	blx	r3
  401e1a:	b938      	cbnz	r0, 401e2c <prvProcessTimerOrBlockTask+0x4c>
					portYIELD_WITHIN_API();
  401e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e20:	4b0f      	ldr	r3, [pc, #60]	; (401e60 <prvProcessTimerOrBlockTask+0x80>)
  401e22:	601a      	str	r2, [r3, #0]
  401e24:	f3bf 8f4f 	dsb	sy
  401e28:	f3bf 8f6f 	isb	sy
}
  401e2c:	b002      	add	sp, #8
  401e2e:	bd70      	pop	{r4, r5, r6, pc}
				( void ) xTaskResumeAll();
  401e30:	4b0a      	ldr	r3, [pc, #40]	; (401e5c <prvProcessTimerOrBlockTask+0x7c>)
  401e32:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  401e34:	4629      	mov	r1, r5
  401e36:	4630      	mov	r0, r6
  401e38:	4b0a      	ldr	r3, [pc, #40]	; (401e64 <prvProcessTimerOrBlockTask+0x84>)
  401e3a:	4798      	blx	r3
  401e3c:	e7f6      	b.n	401e2c <prvProcessTimerOrBlockTask+0x4c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  401e3e:	2400      	movs	r4, #0
  401e40:	e7e3      	b.n	401e0a <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
  401e42:	4b06      	ldr	r3, [pc, #24]	; (401e5c <prvProcessTimerOrBlockTask+0x7c>)
  401e44:	4798      	blx	r3
}
  401e46:	e7f1      	b.n	401e2c <prvProcessTimerOrBlockTask+0x4c>
  401e48:	004014c9 	.word	0x004014c9
  401e4c:	00401d31 	.word	0x00401d31
  401e50:	200005f4 	.word	0x200005f4
  401e54:	20000624 	.word	0x20000624
  401e58:	0040101d 	.word	0x0040101d
  401e5c:	00401609 	.word	0x00401609
  401e60:	e000ed04 	.word	0xe000ed04
  401e64:	00401d65 	.word	0x00401d65

00401e68 <prvProcessReceivedCommands>:
{
  401e68:	b530      	push	{r4, r5, lr}
  401e6a:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401e6c:	e002      	b.n	401e74 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  401e6e:	9b04      	ldr	r3, [sp, #16]
  401e70:	2b00      	cmp	r3, #0
  401e72:	da0f      	bge.n	401e94 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401e74:	2200      	movs	r2, #0
  401e76:	a904      	add	r1, sp, #16
  401e78:	4b3c      	ldr	r3, [pc, #240]	; (401f6c <prvProcessReceivedCommands+0x104>)
  401e7a:	6818      	ldr	r0, [r3, #0]
  401e7c:	4b3c      	ldr	r3, [pc, #240]	; (401f70 <prvProcessReceivedCommands+0x108>)
  401e7e:	4798      	blx	r3
  401e80:	2800      	cmp	r0, #0
  401e82:	d070      	beq.n	401f66 <prvProcessReceivedCommands+0xfe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  401e84:	9b04      	ldr	r3, [sp, #16]
  401e86:	2b00      	cmp	r3, #0
  401e88:	daf1      	bge.n	401e6e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  401e8a:	9907      	ldr	r1, [sp, #28]
  401e8c:	9806      	ldr	r0, [sp, #24]
  401e8e:	9b05      	ldr	r3, [sp, #20]
  401e90:	4798      	blx	r3
  401e92:	e7ec      	b.n	401e6e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  401e94:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  401e96:	6963      	ldr	r3, [r4, #20]
  401e98:	b113      	cbz	r3, 401ea0 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401e9a:	1d20      	adds	r0, r4, #4
  401e9c:	4b35      	ldr	r3, [pc, #212]	; (401f74 <prvProcessReceivedCommands+0x10c>)
  401e9e:	4798      	blx	r3
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401ea0:	a803      	add	r0, sp, #12
  401ea2:	4b35      	ldr	r3, [pc, #212]	; (401f78 <prvProcessReceivedCommands+0x110>)
  401ea4:	4798      	blx	r3
  401ea6:	4605      	mov	r5, r0
			switch( xMessage.xMessageID )
  401ea8:	9b04      	ldr	r3, [sp, #16]
  401eaa:	2b09      	cmp	r3, #9
  401eac:	d8e2      	bhi.n	401e74 <prvProcessReceivedCommands+0xc>
  401eae:	e8df f003 	tbb	[pc, r3]
  401eb2:	0505      	.short	0x0505
  401eb4:	4c352e05 	.word	0x4c352e05
  401eb8:	352e0505 	.word	0x352e0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  401ebc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  401ec0:	f043 0301 	orr.w	r3, r3, #1
  401ec4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  401ec8:	9905      	ldr	r1, [sp, #20]
  401eca:	69a0      	ldr	r0, [r4, #24]
  401ecc:	460b      	mov	r3, r1
  401ece:	462a      	mov	r2, r5
  401ed0:	4401      	add	r1, r0
  401ed2:	4620      	mov	r0, r4
  401ed4:	4d29      	ldr	r5, [pc, #164]	; (401f7c <prvProcessReceivedCommands+0x114>)
  401ed6:	47a8      	blx	r5
  401ed8:	2800      	cmp	r0, #0
  401eda:	d0cb      	beq.n	401e74 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401edc:	6a23      	ldr	r3, [r4, #32]
  401ede:	4620      	mov	r0, r4
  401ee0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401ee2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  401ee6:	f013 0f04 	tst.w	r3, #4
  401eea:	d0c3      	beq.n	401e74 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  401eec:	69a2      	ldr	r2, [r4, #24]
  401eee:	2100      	movs	r1, #0
  401ef0:	9100      	str	r1, [sp, #0]
  401ef2:	460b      	mov	r3, r1
  401ef4:	9805      	ldr	r0, [sp, #20]
  401ef6:	4402      	add	r2, r0
  401ef8:	4620      	mov	r0, r4
  401efa:	4c21      	ldr	r4, [pc, #132]	; (401f80 <prvProcessReceivedCommands+0x118>)
  401efc:	47a0      	blx	r4
							configASSERT( xResult );
  401efe:	2800      	cmp	r0, #0
  401f00:	d1b8      	bne.n	401e74 <prvProcessReceivedCommands+0xc>
  401f02:	f240 3113 	movw	r1, #787	; 0x313
  401f06:	481f      	ldr	r0, [pc, #124]	; (401f84 <prvProcessReceivedCommands+0x11c>)
  401f08:	4b1f      	ldr	r3, [pc, #124]	; (401f88 <prvProcessReceivedCommands+0x120>)
  401f0a:	4798      	blx	r3
  401f0c:	e7b2      	b.n	401e74 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
  401f0e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  401f12:	f023 0301 	bic.w	r3, r3, #1
  401f16:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
					break;
  401f1a:	e7ab      	b.n	401e74 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  401f1c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  401f20:	f043 0301 	orr.w	r3, r3, #1
  401f24:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  401f28:	9b05      	ldr	r3, [sp, #20]
  401f2a:	61a3      	str	r3, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401f2c:	b13b      	cbz	r3, 401f3e <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  401f2e:	69a1      	ldr	r1, [r4, #24]
  401f30:	462b      	mov	r3, r5
  401f32:	462a      	mov	r2, r5
  401f34:	4429      	add	r1, r5
  401f36:	4620      	mov	r0, r4
  401f38:	4c10      	ldr	r4, [pc, #64]	; (401f7c <prvProcessReceivedCommands+0x114>)
  401f3a:	47a0      	blx	r4
					break;
  401f3c:	e79a      	b.n	401e74 <prvProcessReceivedCommands+0xc>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401f3e:	f240 312b 	movw	r1, #811	; 0x32b
  401f42:	4810      	ldr	r0, [pc, #64]	; (401f84 <prvProcessReceivedCommands+0x11c>)
  401f44:	4b10      	ldr	r3, [pc, #64]	; (401f88 <prvProcessReceivedCommands+0x120>)
  401f46:	4798      	blx	r3
  401f48:	e7f1      	b.n	401f2e <prvProcessReceivedCommands+0xc6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
  401f4a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  401f4e:	f013 0f02 	tst.w	r3, #2
  401f52:	d004      	beq.n	401f5e <prvProcessReceivedCommands+0xf6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
  401f54:	f023 0301 	bic.w	r3, r3, #1
  401f58:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  401f5c:	e78a      	b.n	401e74 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
  401f5e:	4620      	mov	r0, r4
  401f60:	4b0a      	ldr	r3, [pc, #40]	; (401f8c <prvProcessReceivedCommands+0x124>)
  401f62:	4798      	blx	r3
  401f64:	e786      	b.n	401e74 <prvProcessReceivedCommands+0xc>
}
  401f66:	b009      	add	sp, #36	; 0x24
  401f68:	bd30      	pop	{r4, r5, pc}
  401f6a:	bf00      	nop
  401f6c:	20000624 	.word	0x20000624
  401f70:	00400e31 	.word	0x00400e31
  401f74:	004001cd 	.word	0x004001cd
  401f78:	00401d31 	.word	0x00401d31
  401f7c:	00401b0d 	.word	0x00401b0d
  401f80:	00401c29 	.word	0x00401c29
  401f84:	00403034 	.word	0x00403034
  401f88:	00402c05 	.word	0x00402c05
  401f8c:	004006bd 	.word	0x004006bd

00401f90 <prvTimerTask>:
{
  401f90:	b500      	push	{lr}
  401f92:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  401f94:	a801      	add	r0, sp, #4
  401f96:	4b04      	ldr	r3, [pc, #16]	; (401fa8 <prvTimerTask+0x18>)
  401f98:	4798      	blx	r3
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  401f9a:	9901      	ldr	r1, [sp, #4]
  401f9c:	4b03      	ldr	r3, [pc, #12]	; (401fac <prvTimerTask+0x1c>)
  401f9e:	4798      	blx	r3
		prvProcessReceivedCommands();
  401fa0:	4b03      	ldr	r3, [pc, #12]	; (401fb0 <prvTimerTask+0x20>)
  401fa2:	4798      	blx	r3
  401fa4:	e7f6      	b.n	401f94 <prvTimerTask+0x4>
  401fa6:	bf00      	nop
  401fa8:	00401aed 	.word	0x00401aed
  401fac:	00401de1 	.word	0x00401de1
  401fb0:	00401e69 	.word	0x00401e69

00401fb4 <intitializeLEDDriver>:
#include "ledDriver.h"
#include "myDefines.h"


void intitializeLEDDriver(void)
{
  401fb4:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  401fb6:	2009      	movs	r0, #9
  401fb8:	4c0e      	ldr	r4, [pc, #56]	; (401ff4 <intitializeLEDDriver+0x40>)
  401fba:	47a0      	blx	r4
  401fbc:	200a      	movs	r0, #10
  401fbe:	47a0      	blx	r4
  401fc0:	200b      	movs	r0, #11
  401fc2:	47a0      	blx	r4
  401fc4:	200c      	movs	r0, #12
  401fc6:	47a0      	blx	r4
  401fc8:	200d      	movs	r0, #13
  401fca:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401fcc:	4b0a      	ldr	r3, [pc, #40]	; (401ff8 <intitializeLEDDriver+0x44>)
  401fce:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
  401fd2:	611c      	str	r4, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401fd4:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401fd8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  401fdc:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401fde:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401fe2:	4a06      	ldr	r2, [pc, #24]	; (401ffc <intitializeLEDDriver+0x48>)
  401fe4:	2102      	movs	r1, #2
  401fe6:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401fe8:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401fec:	631c      	str	r4, [r3, #48]	; 0x30
  401fee:	6318      	str	r0, [r3, #48]	; 0x30
  401ff0:	6311      	str	r1, [r2, #48]	; 0x30
  401ff2:	bd10      	pop	{r4, pc}
  401ff4:	0040274d 	.word	0x0040274d
  401ff8:	400e1400 	.word	0x400e1400
  401ffc:	400e1600 	.word	0x400e1600

00402000 <readLED>:
	1 = EXT_LED1
	2 = EXT_LED2
	3 = EXT_LED3
	*/
	//if the led number is 1, then that will be for the external led #1
	if (uiLedNum == 1)
  402000:	2801      	cmp	r0, #1
  402002:	d008      	beq.n	402016 <readLED+0x16>
	{
		return ioport_get_pin_level(EXT_LED1);
	}
	//else if the led number is 2, then that will be for the external led #2
	else if (uiLedNum == 2)
  402004:	2802      	cmp	r0, #2
  402006:	d00b      	beq.n	402020 <readLED+0x20>
	{
		return ioport_get_pin_level(EXT_LED2);
	}
	//else if the led number is 3, then that will be for the external led #3 
	else if (uiLedNum == 3)
  402008:	2803      	cmp	r0, #3
  40200a:	d00e      	beq.n	40202a <readLED+0x2a>
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  40200c:	4b09      	ldr	r3, [pc, #36]	; (402034 <readLED+0x34>)
  40200e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  402010:	f3c0 5080 	ubfx	r0, r0, #22, #1
	else
	{
		return ioport_get_pin_level(LED_0_PIN);
	}
	
}
  402014:	4770      	bx	lr
  402016:	4b07      	ldr	r3, [pc, #28]	; (402034 <readLED+0x34>)
  402018:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  40201a:	f3c0 7000 	ubfx	r0, r0, #28, #1
		return ioport_get_pin_level(EXT_LED1);
  40201e:	4770      	bx	lr
  402020:	4b04      	ldr	r3, [pc, #16]	; (402034 <readLED+0x34>)
  402022:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  402024:	f3c0 4040 	ubfx	r0, r0, #17, #1
		return ioport_get_pin_level(EXT_LED2);
  402028:	4770      	bx	lr
  40202a:	4b03      	ldr	r3, [pc, #12]	; (402038 <readLED+0x38>)
  40202c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  40202e:	f3c0 0040 	ubfx	r0, r0, #1, #1
		return ioport_get_pin_level(EXT_LED3);
  402032:	4770      	bx	lr
  402034:	400e1400 	.word	0x400e1400
  402038:	400e1600 	.word	0x400e1600

0040203c <setLED>:

uint8_t setLED(uint8_t uiLedNum, uint8_t uiLedValue)
{
  40203c:	b508      	push	{r3, lr}
/*
Sets the LED to a specified value (ON/OFF)
*/
		//if the led number is 1, then set the pin level
		//to on for for the external led #1, and then return the readLED
		if (uiLedNum == 1)
  40203e:	2801      	cmp	r0, #1
  402040:	d00c      	beq.n	40205c <setLED+0x20>
			ioport_set_pin_level(EXT_LED1, uiLedValue);
			return readLED(uiLedNum);			
		}
		//else if the led number is 2, then set the pin level
		//to on for for the external led #2, and then return the readLED
		else if (uiLedNum == 2)
  402042:	2802      	cmp	r0, #2
  402044:	d017      	beq.n	402076 <setLED+0x3a>
			ioport_set_pin_level(EXT_LED2, uiLedValue);
			return readLED(uiLedNum);			
		}
		//else if the led number is 3, then set the pin level
		//to on for for the external led #3, and then return the readLED
		else if (uiLedNum == 3)
  402046:	2803      	cmp	r0, #3
  402048:	d022      	beq.n	402090 <setLED+0x54>
	if (level) {
  40204a:	2900      	cmp	r1, #0
  40204c:	d02b      	beq.n	4020a6 <setLED+0x6a>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40204e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402052:	4b17      	ldr	r3, [pc, #92]	; (4020b0 <setLED+0x74>)
  402054:	631a      	str	r2, [r3, #48]	; 0x30
		}
		//else set the on board led to on, then return the readLED
		else
		{
			ioport_set_pin_level(LED_0_PIN, uiLedValue);
			return readLED(uiLedNum);
  402056:	4b17      	ldr	r3, [pc, #92]	; (4020b4 <setLED+0x78>)
  402058:	4798      	blx	r3
		}
}
  40205a:	bd08      	pop	{r3, pc}
	if (level) {
  40205c:	b131      	cbz	r1, 40206c <setLED+0x30>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40205e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402062:	4b13      	ldr	r3, [pc, #76]	; (4020b0 <setLED+0x74>)
  402064:	631a      	str	r2, [r3, #48]	; 0x30
			return readLED(uiLedNum);			
  402066:	4b13      	ldr	r3, [pc, #76]	; (4020b4 <setLED+0x78>)
  402068:	4798      	blx	r3
  40206a:	bd08      	pop	{r3, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40206c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402070:	4b0f      	ldr	r3, [pc, #60]	; (4020b0 <setLED+0x74>)
  402072:	635a      	str	r2, [r3, #52]	; 0x34
  402074:	e7f7      	b.n	402066 <setLED+0x2a>
	if (level) {
  402076:	b131      	cbz	r1, 402086 <setLED+0x4a>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402078:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40207c:	4b0c      	ldr	r3, [pc, #48]	; (4020b0 <setLED+0x74>)
  40207e:	631a      	str	r2, [r3, #48]	; 0x30
			return readLED(uiLedNum);			
  402080:	4b0c      	ldr	r3, [pc, #48]	; (4020b4 <setLED+0x78>)
  402082:	4798      	blx	r3
  402084:	bd08      	pop	{r3, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402086:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40208a:	4b09      	ldr	r3, [pc, #36]	; (4020b0 <setLED+0x74>)
  40208c:	635a      	str	r2, [r3, #52]	; 0x34
  40208e:	e7f7      	b.n	402080 <setLED+0x44>
	if (level) {
  402090:	b129      	cbz	r1, 40209e <setLED+0x62>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402092:	2202      	movs	r2, #2
  402094:	4b08      	ldr	r3, [pc, #32]	; (4020b8 <setLED+0x7c>)
  402096:	631a      	str	r2, [r3, #48]	; 0x30
			return readLED(uiLedNum);	
  402098:	4b06      	ldr	r3, [pc, #24]	; (4020b4 <setLED+0x78>)
  40209a:	4798      	blx	r3
  40209c:	bd08      	pop	{r3, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40209e:	2202      	movs	r2, #2
  4020a0:	4b05      	ldr	r3, [pc, #20]	; (4020b8 <setLED+0x7c>)
  4020a2:	635a      	str	r2, [r3, #52]	; 0x34
  4020a4:	e7f8      	b.n	402098 <setLED+0x5c>
  4020a6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4020aa:	4b01      	ldr	r3, [pc, #4]	; (4020b0 <setLED+0x74>)
  4020ac:	635a      	str	r2, [r3, #52]	; 0x34
  4020ae:	e7d2      	b.n	402056 <setLED+0x1a>
  4020b0:	400e1400 	.word	0x400e1400
  4020b4:	00402001 	.word	0x00402001
  4020b8:	400e1600 	.word	0x400e1600

004020bc <toggleLED>:

uint8_t toggleLED(uint8_t uiLedNum)
{
  4020bc:	b510      	push	{r4, lr}
  4020be:	4604      	mov	r4, r0
/*
Toggles the LED
If the led is on, then turn it off
If the led is off, then turn it on
*/
	if (readLED(uiLedNum) == 1)
  4020c0:	4b06      	ldr	r3, [pc, #24]	; (4020dc <toggleLED+0x20>)
  4020c2:	4798      	blx	r3
  4020c4:	2801      	cmp	r0, #1
  4020c6:	d004      	beq.n	4020d2 <toggleLED+0x16>
	{
		return setLED(uiLedNum, 0);
		
	}
	else
		return setLED(uiLedNum, 1);
  4020c8:	2101      	movs	r1, #1
  4020ca:	4620      	mov	r0, r4
  4020cc:	4b04      	ldr	r3, [pc, #16]	; (4020e0 <toggleLED+0x24>)
  4020ce:	4798      	blx	r3
	
	
}
  4020d0:	bd10      	pop	{r4, pc}
		return setLED(uiLedNum, 0);
  4020d2:	2100      	movs	r1, #0
  4020d4:	4620      	mov	r0, r4
  4020d6:	4b02      	ldr	r3, [pc, #8]	; (4020e0 <toggleLED+0x24>)
  4020d8:	4798      	blx	r3
  4020da:	bd10      	pop	{r4, pc}
  4020dc:	00402001 	.word	0x00402001
  4020e0:	0040203d 	.word	0x0040203d

004020e4 <initializeButtonDriver>:
#include <FreeRTOS.h>
#include "myButtons.h"
#include "myDefines.h"

void initializeButtonDriver(void)
{
  4020e4:	b410      	push	{r4}
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4020e6:	4b1e      	ldr	r3, [pc, #120]	; (402160 <initializeButtonDriver+0x7c>)
  4020e8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4020ec:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4020ee:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4020f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4020f6:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4020f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4020fc:	4819      	ldr	r0, [pc, #100]	; (402164 <initializeButtonDriver+0x80>)
  4020fe:	2401      	movs	r4, #1
  402100:	6144      	str	r4, [r0, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402102:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
		base->PIO_PUER = mask;
  402106:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402108:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40210c:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40210e:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  402110:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402114:	6f18      	ldr	r0, [r3, #112]	; 0x70
  402116:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  40211a:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40211c:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40211e:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
  402122:	6758      	str	r0, [r3, #116]	; 0x74
		base->PIO_PUER = mask;
  402124:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402126:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40212a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40212c:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40212e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402132:	6f18      	ldr	r0, [r3, #112]	; 0x70
  402134:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  402138:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40213a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40213c:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
  402140:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  402142:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402146:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  40214a:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ESR = mask;
  40214e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402152:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  402156:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	ioport_set_pin_mode(EXT_SW2, (IOPORT_MODE_PULLUP | IOPORT_MODE_DEBOUNCE));
	
	//sets the sensing mode for the external switches 1 and 2 for when they are pushed
	ioport_set_pin_sense_mode(EXT_SW1, (IOPORT_SENSE_RISING));
	ioport_set_pin_sense_mode(EXT_SW2, (IOPORT_SENSE_RISING));
}
  40215a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40215e:	4770      	bx	lr
  402160:	400e1400 	.word	0x400e1400
  402164:	400e0e00 	.word	0x400e0e00

00402168 <readButton>:

uint8_t readButton(uint8_t uiButtonNum)
{
	//if the button number is 1, then it is for the external button #1
	if (uiButtonNum == 1)
  402168:	2801      	cmp	r0, #1
  40216a:	d006      	beq.n	40217a <readButton+0x12>
	{
		return ioport_get_pin_level(EXT_SW1);
	}
	//else if it is 2, then it is for the external button #2
	else if (uiButtonNum == 2)
  40216c:	2802      	cmp	r0, #2
  40216e:	d009      	beq.n	402184 <readButton+0x1c>
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  402170:	4b07      	ldr	r3, [pc, #28]	; (402190 <readButton+0x28>)
  402172:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  402174:	f3c0 0080 	ubfx	r0, r0, #2, #1
	}
	//else it is the built in board button
	else
		return ioport_get_pin_level(BUTTON_0_PIN);

  402178:	4770      	bx	lr
  40217a:	4b06      	ldr	r3, [pc, #24]	; (402194 <readButton+0x2c>)
  40217c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  40217e:	f3c0 6080 	ubfx	r0, r0, #26, #1
		return ioport_get_pin_level(EXT_SW1);
  402182:	4770      	bx	lr
  402184:	4b03      	ldr	r3, [pc, #12]	; (402194 <readButton+0x2c>)
  402186:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  402188:	f3c0 7080 	ubfx	r0, r0, #30, #1
		return ioport_get_pin_level(EXT_SW2);
  40218c:	4770      	bx	lr
  40218e:	bf00      	nop
  402190:	400e0e00 	.word	0x400e0e00
  402194:	400e1400 	.word	0x400e1400

00402198 <taskSystemControl>:

uint8_t currLED = LED1;

//This is the main control for the task system
void taskSystemControl(void * pvParamaters)
{
  402198:	b530      	push	{r4, r5, lr}
  40219a:	b085      	sub	sp, #20
	struct controlStruct * controlParams = (struct controlStruct *) pvParamaters;
	QueueHandle_t ledQueueParam[3];
	ledQueueParam[0] = controlParams->ledQ[0];
  40219c:	6803      	ldr	r3, [r0, #0]
  40219e:	9301      	str	r3, [sp, #4]
	ledQueueParam[1] = controlParams->ledQ[1];
  4021a0:	6843      	ldr	r3, [r0, #4]
  4021a2:	9302      	str	r3, [sp, #8]
	ledQueueParam[2] = controlParams->ledQ[2];
  4021a4:	6883      	ldr	r3, [r0, #8]
  4021a6:	9303      	str	r3, [sp, #12]
	QueueHandle_t uartQueueParam = controlParams->uartQ;
  4021a8:	68c4      	ldr	r4, [r0, #12]
  4021aa:	e01f      	b.n	4021ec <taskSystemControl+0x54>
		xQueueSendToBack(uartQueueParam, uartBufferMainStart, (TickType_t) 0);	
		
		
		if (readButton(SW1) == 1)
		{
			if (SW_Debounce < maxSWDebounce) SW_Debounce++;
  4021ac:	4b39      	ldr	r3, [pc, #228]	; (402294 <taskSystemControl+0xfc>)
  4021ae:	681b      	ldr	r3, [r3, #0]
  4021b0:	2b00      	cmp	r3, #0
  4021b2:	dd44      	ble.n	40223e <taskSystemControl+0xa6>
			else
			{
				SW_Debounce = 0;
  4021b4:	2300      	movs	r3, #0
  4021b6:	4a37      	ldr	r2, [pc, #220]	; (402294 <taskSystemControl+0xfc>)
  4021b8:	6013      	str	r3, [r2, #0]
				//send led1 back to the end of the queue
				incDec = DECREASE;
  4021ba:	a904      	add	r1, sp, #16
  4021bc:	2201      	movs	r2, #1
  4021be:	f801 2d0d 	strb.w	r2, [r1, #-13]!
				xQueueSendToBack(ledQueueParam[currLED-1], (void *) &incDec, (TickType_t) 10);
  4021c2:	4a35      	ldr	r2, [pc, #212]	; (402298 <taskSystemControl+0x100>)
  4021c4:	7810      	ldrb	r0, [r2, #0]
  4021c6:	3801      	subs	r0, #1
  4021c8:	aa04      	add	r2, sp, #16
  4021ca:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4021ce:	220a      	movs	r2, #10
  4021d0:	f850 0c0c 	ldr.w	r0, [r0, #-12]
  4021d4:	4d31      	ldr	r5, [pc, #196]	; (40229c <taskSystemControl+0x104>)
  4021d6:	47a8      	blx	r5
				}
				
			}
		}
		//tell uart that the maincontrol is now blocking
		xQueueSendToBack(uartQueueParam, uartBufferMainBlock, (TickType_t) 0);
  4021d8:	2300      	movs	r3, #0
  4021da:	461a      	mov	r2, r3
  4021dc:	4930      	ldr	r1, [pc, #192]	; (4022a0 <taskSystemControl+0x108>)
  4021de:	6809      	ldr	r1, [r1, #0]
  4021e0:	4620      	mov	r0, r4
  4021e2:	4d2e      	ldr	r5, [pc, #184]	; (40229c <taskSystemControl+0x104>)
  4021e4:	47a8      	blx	r5
		
		//delay for 100ms after all 3 switches
		vTaskDelay(xDelay3);
  4021e6:	2064      	movs	r0, #100	; 0x64
  4021e8:	4b2e      	ldr	r3, [pc, #184]	; (4022a4 <taskSystemControl+0x10c>)
  4021ea:	4798      	blx	r3
		xQueueSendToBack(uartQueueParam, uartBufferMainStart, (TickType_t) 0);	
  4021ec:	2300      	movs	r3, #0
  4021ee:	461a      	mov	r2, r3
  4021f0:	492d      	ldr	r1, [pc, #180]	; (4022a8 <taskSystemControl+0x110>)
  4021f2:	6809      	ldr	r1, [r1, #0]
  4021f4:	4620      	mov	r0, r4
  4021f6:	4d29      	ldr	r5, [pc, #164]	; (40229c <taskSystemControl+0x104>)
  4021f8:	47a8      	blx	r5
		if (readButton(SW1) == 1)
  4021fa:	2001      	movs	r0, #1
  4021fc:	4b2b      	ldr	r3, [pc, #172]	; (4022ac <taskSystemControl+0x114>)
  4021fe:	4798      	blx	r3
  402200:	2801      	cmp	r0, #1
  402202:	d0d3      	beq.n	4021ac <taskSystemControl+0x14>
		else if (readButton(SW2) == 1)
  402204:	2002      	movs	r0, #2
  402206:	4b29      	ldr	r3, [pc, #164]	; (4022ac <taskSystemControl+0x114>)
  402208:	4798      	blx	r3
  40220a:	2801      	cmp	r0, #1
  40220c:	d01b      	beq.n	402246 <taskSystemControl+0xae>
		else if (readButton(SW0) == 1)
  40220e:	2000      	movs	r0, #0
  402210:	4b26      	ldr	r3, [pc, #152]	; (4022ac <taskSystemControl+0x114>)
  402212:	4798      	blx	r3
  402214:	2801      	cmp	r0, #1
  402216:	d1df      	bne.n	4021d8 <taskSystemControl+0x40>
			if (SW_Debounce < maxSWDebounce) SW_Debounce++;
  402218:	4b1e      	ldr	r3, [pc, #120]	; (402294 <taskSystemControl+0xfc>)
  40221a:	681b      	ldr	r3, [r3, #0]
  40221c:	2b00      	cmp	r3, #0
  40221e:	dd2c      	ble.n	40227a <taskSystemControl+0xe2>
				SW_Debounce = 0;
  402220:	2200      	movs	r2, #0
  402222:	4b1c      	ldr	r3, [pc, #112]	; (402294 <taskSystemControl+0xfc>)
  402224:	601a      	str	r2, [r3, #0]
				switch(currLED)
  402226:	4b1c      	ldr	r3, [pc, #112]	; (402298 <taskSystemControl+0x100>)
  402228:	781b      	ldrb	r3, [r3, #0]
  40222a:	2b02      	cmp	r3, #2
  40222c:	d029      	beq.n	402282 <taskSystemControl+0xea>
  40222e:	2b03      	cmp	r3, #3
  402230:	d02b      	beq.n	40228a <taskSystemControl+0xf2>
  402232:	2b01      	cmp	r3, #1
  402234:	d1d0      	bne.n	4021d8 <taskSystemControl+0x40>
						currLED = LED2;
  402236:	2202      	movs	r2, #2
  402238:	4b17      	ldr	r3, [pc, #92]	; (402298 <taskSystemControl+0x100>)
  40223a:	701a      	strb	r2, [r3, #0]
						break;
  40223c:	e7cc      	b.n	4021d8 <taskSystemControl+0x40>
			if (SW_Debounce < maxSWDebounce) SW_Debounce++;
  40223e:	3301      	adds	r3, #1
  402240:	4a14      	ldr	r2, [pc, #80]	; (402294 <taskSystemControl+0xfc>)
  402242:	6013      	str	r3, [r2, #0]
  402244:	e7c8      	b.n	4021d8 <taskSystemControl+0x40>
			if (SW_Debounce < maxSWDebounce) SW_Debounce++;
  402246:	4b13      	ldr	r3, [pc, #76]	; (402294 <taskSystemControl+0xfc>)
  402248:	681b      	ldr	r3, [r3, #0]
  40224a:	2b00      	cmp	r3, #0
  40224c:	dd11      	ble.n	402272 <taskSystemControl+0xda>
				SW_Debounce = 0;
  40224e:	2300      	movs	r3, #0
  402250:	4a10      	ldr	r2, [pc, #64]	; (402294 <taskSystemControl+0xfc>)
  402252:	6013      	str	r3, [r2, #0]
				incDec = INCREASE;
  402254:	a904      	add	r1, sp, #16
  402256:	f801 3d0d 	strb.w	r3, [r1, #-13]!
				xQueueSendToBack(ledQueueParam[currLED-1], (void *) &incDec, (TickType_t) 10);
  40225a:	4a0f      	ldr	r2, [pc, #60]	; (402298 <taskSystemControl+0x100>)
  40225c:	7810      	ldrb	r0, [r2, #0]
  40225e:	3801      	subs	r0, #1
  402260:	aa04      	add	r2, sp, #16
  402262:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  402266:	220a      	movs	r2, #10
  402268:	f850 0c0c 	ldr.w	r0, [r0, #-12]
  40226c:	4d0b      	ldr	r5, [pc, #44]	; (40229c <taskSystemControl+0x104>)
  40226e:	47a8      	blx	r5
  402270:	e7b2      	b.n	4021d8 <taskSystemControl+0x40>
			if (SW_Debounce < maxSWDebounce) SW_Debounce++;
  402272:	3301      	adds	r3, #1
  402274:	4a07      	ldr	r2, [pc, #28]	; (402294 <taskSystemControl+0xfc>)
  402276:	6013      	str	r3, [r2, #0]
  402278:	e7ae      	b.n	4021d8 <taskSystemControl+0x40>
			if (SW_Debounce < maxSWDebounce) SW_Debounce++;
  40227a:	3301      	adds	r3, #1
  40227c:	4a05      	ldr	r2, [pc, #20]	; (402294 <taskSystemControl+0xfc>)
  40227e:	6013      	str	r3, [r2, #0]
  402280:	e7aa      	b.n	4021d8 <taskSystemControl+0x40>
						currLED = LED3;
  402282:	2203      	movs	r2, #3
  402284:	4b04      	ldr	r3, [pc, #16]	; (402298 <taskSystemControl+0x100>)
  402286:	701a      	strb	r2, [r3, #0]
						break;
  402288:	e7a6      	b.n	4021d8 <taskSystemControl+0x40>
						currLED = LED1;
  40228a:	2201      	movs	r2, #1
  40228c:	4b02      	ldr	r3, [pc, #8]	; (402298 <taskSystemControl+0x100>)
  40228e:	701a      	strb	r2, [r3, #0]
						break;
  402290:	e7a2      	b.n	4021d8 <taskSystemControl+0x40>
  402292:	bf00      	nop
  402294:	2000062c 	.word	0x2000062c
  402298:	20000004 	.word	0x20000004
  40229c:	00400b39 	.word	0x00400b39
  4022a0:	2000003c 	.word	0x2000003c
  4022a4:	00401721 	.word	0x00401721
  4022a8:	20000040 	.word	0x20000040
  4022ac:	00402169 	.word	0x00402169

004022b0 <taskHeartBeat>:

}
	
//this is the heartbeat task to have led 0 blink		
void taskHeartBeat (void * pvParamaters)		
{
  4022b0:	b508      	push	{r3, lr}
*/	

	//this is the heartbeat for LED 0 to happen once every second
	while (true)
	{
		toggleLED(LED0);
  4022b2:	2000      	movs	r0, #0
  4022b4:	4b03      	ldr	r3, [pc, #12]	; (4022c4 <taskHeartBeat+0x14>)
  4022b6:	4798      	blx	r3
		vTaskDelay(xDelay2);
  4022b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4022bc:	4b02      	ldr	r3, [pc, #8]	; (4022c8 <taskHeartBeat+0x18>)
  4022be:	4798      	blx	r3
  4022c0:	e7f7      	b.n	4022b2 <taskHeartBeat+0x2>
  4022c2:	bf00      	nop
  4022c4:	004020bd 	.word	0x004020bd
  4022c8:	00401721 	.word	0x00401721

004022cc <taskLED>:
		
}


void taskLED(void * pvParameters)
{
  4022cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4022d0:	b082      	sub	sp, #8
	struct ledStruct * controlParams = (struct ledStruct *) pvParameters;
	QueueHandle_t ledQ = controlParams->ledQ;
  4022d2:	6806      	ldr	r6, [r0, #0]
	QueueHandle_t uartQ = controlParams->uartQ;
  4022d4:	6845      	ldr	r5, [r0, #4]
	uint8_t ledNum = controlParams->ledNum;
  4022d6:	7a04      	ldrb	r4, [r0, #8]
	int defaultMS = 500;
	TickType_t xDelay = defaultMS / portTICK_PERIOD_MS;
  4022d8:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
  4022dc:	e080      	b.n	4023e0 <taskLED+0x114>
	{
		//the switch statement to send message back that the led N has started depending on the led number.
		switch(ledNum)
		{
			case LED1:
				xQueueSendToBack(uartQ, uartBuffer1Start, 0);
  4022de:	2300      	movs	r3, #0
  4022e0:	461a      	mov	r2, r3
  4022e2:	4953      	ldr	r1, [pc, #332]	; (402430 <taskLED+0x164>)
  4022e4:	6809      	ldr	r1, [r1, #0]
  4022e6:	4628      	mov	r0, r5
  4022e8:	f8df 8158 	ldr.w	r8, [pc, #344]	; 402444 <taskLED+0x178>
  4022ec:	47c0      	blx	r8
				break;
  4022ee:	e07e      	b.n	4023ee <taskLED+0x122>
			case LED2:
				xQueueSendToBack(uartQ, uartBuffer2Start, 0);
  4022f0:	2300      	movs	r3, #0
  4022f2:	461a      	mov	r2, r3
  4022f4:	494f      	ldr	r1, [pc, #316]	; (402434 <taskLED+0x168>)
  4022f6:	6809      	ldr	r1, [r1, #0]
  4022f8:	4628      	mov	r0, r5
  4022fa:	f8df 8148 	ldr.w	r8, [pc, #328]	; 402444 <taskLED+0x178>
  4022fe:	47c0      	blx	r8
				break;
  402300:	e075      	b.n	4023ee <taskLED+0x122>
			case LED3:
				xQueueSendToBack(uartQ, uartBuffer3Start, 0);
  402302:	2300      	movs	r3, #0
  402304:	461a      	mov	r2, r3
  402306:	494c      	ldr	r1, [pc, #304]	; (402438 <taskLED+0x16c>)
  402308:	6809      	ldr	r1, [r1, #0]
  40230a:	4628      	mov	r0, r5
  40230c:	f8df 8134 	ldr.w	r8, [pc, #308]	; 402444 <taskLED+0x178>
  402310:	47c0      	blx	r8
				break;
  402312:	e06c      	b.n	4023ee <taskLED+0x122>
		//this will go through the queue for each of the leds and either increase or decrease the delay

		if(uxQueueMessagesWaiting(ledQ))
		{
			//if the queue receive of queue handle[i] goes into &getDelay and it's == to pbTrue, increase or decrease
			if (xQueueReceive(ledQ, &getDelay, 0))
  402314:	2200      	movs	r2, #0
  402316:	f10d 0107 	add.w	r1, sp, #7
  40231a:	4630      	mov	r0, r6
  40231c:	4b47      	ldr	r3, [pc, #284]	; (40243c <taskLED+0x170>)
  40231e:	4798      	blx	r3
  402320:	2800      	cmp	r0, #0
  402322:	d06c      	beq.n	4023fe <taskLED+0x132>
			{

				if(getDelay == DECREASE)
  402324:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402328:	2b01      	cmp	r3, #1
  40232a:	d00a      	beq.n	402342 <taskLED+0x76>
					{
						xDelay = 200;
					}
				}

				else if (getDelay == INCREASE)
  40232c:	2b00      	cmp	r3, #0
  40232e:	d166      	bne.n	4023fe <taskLED+0x132>
				{
					if (ledNum == LED1)
  402330:	2c01      	cmp	r4, #1
  402332:	d02d      	beq.n	402390 <taskLED+0xc4>
					{
						xQueueSendToBack(uartQ, uartBuffer1I, (TickType_t) 0);
					}
					else if (ledNum == LED2)
  402334:	2c02      	cmp	r4, #2
  402336:	d034      	beq.n	4023a2 <taskLED+0xd6>
					{
						xQueueSendToBack(uartQ, uartBuffer2I, (TickType_t) 0);
					}
					else if (ledNum == LED3)
  402338:	2c03      	cmp	r4, #3
  40233a:	d03c      	beq.n	4023b6 <taskLED+0xea>
					{
						xQueueSendToBack(uartQ, uartBuffer3I, (TickType_t) 0);
					}
					xDelay = (defaultMS + 50) / portTICK_PERIOD_MS;
  40233c:	f240 2726 	movw	r7, #550	; 0x226
  402340:	e05d      	b.n	4023fe <taskLED+0x132>
					if (ledNum == LED1)
  402342:	2c01      	cmp	r4, #1
  402344:	d006      	beq.n	402354 <taskLED+0x88>
					else if (ledNum == LED2)
  402346:	2c02      	cmp	r4, #2
  402348:	d00e      	beq.n	402368 <taskLED+0x9c>
					else if (ledNum == LED3)
  40234a:	2c03      	cmp	r4, #3
  40234c:	d016      	beq.n	40237c <taskLED+0xb0>
					xDelay = (defaultMS - 50) / portTICK_PERIOD_MS;
  40234e:	f44f 77e1 	mov.w	r7, #450	; 0x1c2
  402352:	e054      	b.n	4023fe <taskLED+0x132>
						xQueueSendToBack(uartQ, uartBuffer1D, (TickType_t) 0);
  402354:	2300      	movs	r3, #0
  402356:	461a      	mov	r2, r3
  402358:	4939      	ldr	r1, [pc, #228]	; (402440 <taskLED+0x174>)
  40235a:	6809      	ldr	r1, [r1, #0]
  40235c:	4628      	mov	r0, r5
  40235e:	4f39      	ldr	r7, [pc, #228]	; (402444 <taskLED+0x178>)
  402360:	47b8      	blx	r7
					xDelay = (defaultMS - 50) / portTICK_PERIOD_MS;
  402362:	f44f 77e1 	mov.w	r7, #450	; 0x1c2
  402366:	e04a      	b.n	4023fe <taskLED+0x132>
						xQueueSendToBack(uartQ, uartBuffer2D, (TickType_t) 0);
  402368:	2300      	movs	r3, #0
  40236a:	461a      	mov	r2, r3
  40236c:	4936      	ldr	r1, [pc, #216]	; (402448 <taskLED+0x17c>)
  40236e:	6809      	ldr	r1, [r1, #0]
  402370:	4628      	mov	r0, r5
  402372:	4f34      	ldr	r7, [pc, #208]	; (402444 <taskLED+0x178>)
  402374:	47b8      	blx	r7
					xDelay = (defaultMS - 50) / portTICK_PERIOD_MS;
  402376:	f44f 77e1 	mov.w	r7, #450	; 0x1c2
  40237a:	e040      	b.n	4023fe <taskLED+0x132>
						xQueueSendToBack(uartQ, uartBuffer3D, (TickType_t) 0);
  40237c:	2300      	movs	r3, #0
  40237e:	461a      	mov	r2, r3
  402380:	4932      	ldr	r1, [pc, #200]	; (40244c <taskLED+0x180>)
  402382:	6809      	ldr	r1, [r1, #0]
  402384:	4628      	mov	r0, r5
  402386:	4f2f      	ldr	r7, [pc, #188]	; (402444 <taskLED+0x178>)
  402388:	47b8      	blx	r7
					xDelay = (defaultMS - 50) / portTICK_PERIOD_MS;
  40238a:	f44f 77e1 	mov.w	r7, #450	; 0x1c2
  40238e:	e036      	b.n	4023fe <taskLED+0x132>
						xQueueSendToBack(uartQ, uartBuffer1I, (TickType_t) 0);
  402390:	461a      	mov	r2, r3
  402392:	492f      	ldr	r1, [pc, #188]	; (402450 <taskLED+0x184>)
  402394:	6809      	ldr	r1, [r1, #0]
  402396:	4628      	mov	r0, r5
  402398:	4f2a      	ldr	r7, [pc, #168]	; (402444 <taskLED+0x178>)
  40239a:	47b8      	blx	r7
					xDelay = (defaultMS + 50) / portTICK_PERIOD_MS;
  40239c:	f240 2726 	movw	r7, #550	; 0x226
  4023a0:	e02d      	b.n	4023fe <taskLED+0x132>
						xQueueSendToBack(uartQ, uartBuffer2I, (TickType_t) 0);
  4023a2:	2300      	movs	r3, #0
  4023a4:	461a      	mov	r2, r3
  4023a6:	492b      	ldr	r1, [pc, #172]	; (402454 <taskLED+0x188>)
  4023a8:	6809      	ldr	r1, [r1, #0]
  4023aa:	4628      	mov	r0, r5
  4023ac:	4f25      	ldr	r7, [pc, #148]	; (402444 <taskLED+0x178>)
  4023ae:	47b8      	blx	r7
					xDelay = (defaultMS + 50) / portTICK_PERIOD_MS;
  4023b0:	f240 2726 	movw	r7, #550	; 0x226
  4023b4:	e023      	b.n	4023fe <taskLED+0x132>
						xQueueSendToBack(uartQ, uartBuffer3I, (TickType_t) 0);
  4023b6:	2300      	movs	r3, #0
  4023b8:	461a      	mov	r2, r3
  4023ba:	4927      	ldr	r1, [pc, #156]	; (402458 <taskLED+0x18c>)
  4023bc:	6809      	ldr	r1, [r1, #0]
  4023be:	4628      	mov	r0, r5
  4023c0:	4f20      	ldr	r7, [pc, #128]	; (402444 <taskLED+0x178>)
  4023c2:	47b8      	blx	r7
					xDelay = (defaultMS + 50) / portTICK_PERIOD_MS;
  4023c4:	f240 2726 	movw	r7, #550	; 0x226
  4023c8:	e019      	b.n	4023fe <taskLED+0x132>
		}
		
		switch(ledNum)
		{
			case LED1:
				xQueueSendToBack(uartQ, uartBuffer1Block, 0);
  4023ca:	2300      	movs	r3, #0
  4023cc:	461a      	mov	r2, r3
  4023ce:	4923      	ldr	r1, [pc, #140]	; (40245c <taskLED+0x190>)
  4023d0:	6809      	ldr	r1, [r1, #0]
  4023d2:	4628      	mov	r0, r5
  4023d4:	f8df 806c 	ldr.w	r8, [pc, #108]	; 402444 <taskLED+0x178>
  4023d8:	47c0      	blx	r8
				xQueueSendToBack(uartQ, uartBuffer3Block, 0);
				break;
			default:
				break;
		}
		vTaskDelay(xDelay);
  4023da:	4638      	mov	r0, r7
  4023dc:	4b20      	ldr	r3, [pc, #128]	; (402460 <taskLED+0x194>)
  4023de:	4798      	blx	r3
		switch(ledNum)
  4023e0:	2c02      	cmp	r4, #2
  4023e2:	d085      	beq.n	4022f0 <taskLED+0x24>
  4023e4:	2c03      	cmp	r4, #3
  4023e6:	d08c      	beq.n	402302 <taskLED+0x36>
  4023e8:	2c01      	cmp	r4, #1
  4023ea:	f43f af78 	beq.w	4022de <taskLED+0x12>
		toggleLED(ledNum);
  4023ee:	4620      	mov	r0, r4
  4023f0:	4b1c      	ldr	r3, [pc, #112]	; (402464 <taskLED+0x198>)
  4023f2:	4798      	blx	r3
		if(uxQueueMessagesWaiting(ledQ))
  4023f4:	4630      	mov	r0, r6
  4023f6:	4b1c      	ldr	r3, [pc, #112]	; (402468 <taskLED+0x19c>)
  4023f8:	4798      	blx	r3
  4023fa:	2800      	cmp	r0, #0
  4023fc:	d18a      	bne.n	402314 <taskLED+0x48>
		switch(ledNum)
  4023fe:	2c02      	cmp	r4, #2
  402400:	d004      	beq.n	40240c <taskLED+0x140>
  402402:	2c03      	cmp	r4, #3
  402404:	d00b      	beq.n	40241e <taskLED+0x152>
  402406:	2c01      	cmp	r4, #1
  402408:	d1e7      	bne.n	4023da <taskLED+0x10e>
  40240a:	e7de      	b.n	4023ca <taskLED+0xfe>
				xQueueSendToBack(uartQ, uartBuffer2Block, 0);
  40240c:	2300      	movs	r3, #0
  40240e:	461a      	mov	r2, r3
  402410:	4916      	ldr	r1, [pc, #88]	; (40246c <taskLED+0x1a0>)
  402412:	6809      	ldr	r1, [r1, #0]
  402414:	4628      	mov	r0, r5
  402416:	f8df 802c 	ldr.w	r8, [pc, #44]	; 402444 <taskLED+0x178>
  40241a:	47c0      	blx	r8
				break;
  40241c:	e7dd      	b.n	4023da <taskLED+0x10e>
				xQueueSendToBack(uartQ, uartBuffer3Block, 0);
  40241e:	2300      	movs	r3, #0
  402420:	461a      	mov	r2, r3
  402422:	4913      	ldr	r1, [pc, #76]	; (402470 <taskLED+0x1a4>)
  402424:	6809      	ldr	r1, [r1, #0]
  402426:	4628      	mov	r0, r5
  402428:	f8df 8018 	ldr.w	r8, [pc, #24]	; 402444 <taskLED+0x178>
  40242c:	47c0      	blx	r8
				break;
  40242e:	e7d4      	b.n	4023da <taskLED+0x10e>
  402430:	20000018 	.word	0x20000018
  402434:	20000028 	.word	0x20000028
  402438:	20000038 	.word	0x20000038
  40243c:	00400e31 	.word	0x00400e31
  402440:	20000010 	.word	0x20000010
  402444:	00400b39 	.word	0x00400b39
  402448:	20000020 	.word	0x20000020
  40244c:	20000030 	.word	0x20000030
  402450:	20000014 	.word	0x20000014
  402454:	20000024 	.word	0x20000024
  402458:	20000034 	.word	0x20000034
  40245c:	2000000c 	.word	0x2000000c
  402460:	00401721 	.word	0x00401721
  402464:	004020bd 	.word	0x004020bd
  402468:	00400fc5 	.word	0x00400fc5
  40246c:	2000001c 	.word	0x2000001c
  402470:	2000002c 	.word	0x2000002c

00402474 <taskUART>:
	}
}

void taskUART(void *pvParameters)
{
  402474:	b510      	push	{r4, lr}
  402476:	b08e      	sub	sp, #56	; 0x38
  402478:	4604      	mov	r4, r0

char tempUART[50];

	while(true)
	{
		if(uxQueueMessagesWaiting(uartTempQueue))
  40247a:	4620      	mov	r0, r4
  40247c:	4b07      	ldr	r3, [pc, #28]	; (40249c <taskUART+0x28>)
  40247e:	4798      	blx	r3
  402480:	2800      	cmp	r0, #0
  402482:	d0fa      	beq.n	40247a <taskUART+0x6>
		{
			xQueueReceive(uartTempQueue, &tempUART, portMAX_DELAY);
  402484:	f04f 32ff 	mov.w	r2, #4294967295
  402488:	a901      	add	r1, sp, #4
  40248a:	4620      	mov	r0, r4
  40248c:	4b04      	ldr	r3, [pc, #16]	; (4024a0 <taskUART+0x2c>)
  40248e:	4798      	blx	r3
			UARTPutStr(EDBG_UART, tempUART, sizeof(tempUART));
  402490:	2232      	movs	r2, #50	; 0x32
  402492:	a901      	add	r1, sp, #4
  402494:	4803      	ldr	r0, [pc, #12]	; (4024a4 <taskUART+0x30>)
  402496:	4b04      	ldr	r3, [pc, #16]	; (4024a8 <taskUART+0x34>)
  402498:	4798      	blx	r3
  40249a:	e7ee      	b.n	40247a <taskUART+0x6>
  40249c:	00400fc5 	.word	0x00400fc5
  4024a0:	00400e31 	.word	0x00400e31
  4024a4:	400e0600 	.word	0x400e0600
  4024a8:	00402525 	.word	0x00402525

004024ac <taskTX>:
		}
	}
}

void taskTX(void *pvParameters)
{
  4024ac:	4770      	bx	lr

004024ae <taskRX>:
	
	
}

void taskRX(void *pvParameters)
{
  4024ae:	4770      	bx	lr

004024b0 <initUART>:
The UARTPutC() will print a single byte (char) to the UART.
The UARTPutStr() function will use the UARTPutC() to write a complete string to the UART.
*/

uint8_t initUART(Uart * p_Uart)
{
  4024b0:	b510      	push	{r4, lr}
  4024b2:	4604      	mov	r4, r0
		base->PIO_PUDR = mask;
  4024b4:	4b15      	ldr	r3, [pc, #84]	; (40250c <initUART+0x5c>)
  4024b6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4024ba:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4024bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4024c0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4024c2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4024c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4024c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4024ca:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  4024ce:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4024d0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4024d2:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  4024d6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4024d8:	605a      	str	r2, [r3, #4]
  4024da:	2007      	movs	r0, #7
  4024dc:	4b0c      	ldr	r3, [pc, #48]	; (402510 <initUART+0x60>)
  4024de:	4798      	blx	r3
	ioport_disable_port(IOPORT_PIOA, PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
	sysclk_enable_peripheral_clock(ID_UART0);

	// Configure UART Control Registers
	// Reset and Disable RX and TX
	p_Uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
  4024e0:	23ac      	movs	r3, #172	; 0xac
  4024e2:	6023      	str	r3, [r4, #0]
	}
	
	if(retVal != 1)
	{
		// Set The Actual BAUD to Control Register
		p_Uart->UART_BRGR = cd;
  4024e4:	2334      	movs	r3, #52	; 0x34
  4024e6:	6223      	str	r3, [r4, #32]

		// Configure Mode
		p_Uart->UART_MR = UART_SERIAL_PARITY;
  4024e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4024ec:	6063      	str	r3, [r4, #4]
		
		// Disable PDC Channel
		p_Uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4024ee:	f240 2302 	movw	r3, #514	; 0x202
  4024f2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
		
		// Enable RX and TX
		p_Uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4024f6:	2250      	movs	r2, #80	; 0x50
  4024f8:	6022      	str	r2, [r4, #0]
	}
	
	// Enable RX Interrupt
	p_Uart->UART_IER = UART_IER_RXRDY;
  4024fa:	2301      	movs	r3, #1
  4024fc:	60a3      	str	r3, [r4, #8]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4024fe:	4b05      	ldr	r3, [pc, #20]	; (402514 <initUART+0x64>)
  402500:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402504:	2280      	movs	r2, #128	; 0x80
  402506:	601a      	str	r2, [r3, #0]
	NVIC_SetPriority(UART0_IRQn, 5);
	NVIC_EnableIRQ(UART0_IRQn);
	
	return retVal;
}
  402508:	2000      	movs	r0, #0
  40250a:	bd10      	pop	{r4, pc}
  40250c:	400e0e00 	.word	0x400e0e00
  402510:	0040274d 	.word	0x0040274d
  402514:	e000e100 	.word	0xe000e100

00402518 <UARTPutC>:

void UARTPutC(Uart * p_Uart, char data)
{
	// Wait for Transmitter to be Ready
	while((p_Uart->UART_SR & UART_SR_TXRDY) == 0);
  402518:	6943      	ldr	r3, [r0, #20]
  40251a:	f013 0f02 	tst.w	r3, #2
  40251e:	d0fb      	beq.n	402518 <UARTPutC>
	p_Uart->UART_THR = data;
  402520:	61c1      	str	r1, [r0, #28]
  402522:	4770      	bx	lr

00402524 <UARTPutStr>:

}

void UARTPutStr(Uart * p_Uart, const char * data, uint8_t len)
{
  402524:	b538      	push	{r3, r4, r5, lr}
  402526:	4605      	mov	r5, r0
  402528:	460c      	mov	r4, r1
	//call the vUARTPutC();
	while (*data != '\0')
  40252a:	e003      	b.n	402534 <UARTPutStr+0x10>
	{
		UARTPutC(p_Uart, *data);
  40252c:	4628      	mov	r0, r5
  40252e:	4b03      	ldr	r3, [pc, #12]	; (40253c <UARTPutStr+0x18>)
  402530:	4798      	blx	r3
		data++;
  402532:	3401      	adds	r4, #1
	while (*data != '\0')
  402534:	7821      	ldrb	r1, [r4, #0]
  402536:	2900      	cmp	r1, #0
  402538:	d1f8      	bne.n	40252c <UARTPutStr+0x8>
	}
	
}
  40253a:	bd38      	pop	{r3, r4, r5, pc}
  40253c:	00402519 	.word	0x00402519

00402540 <UART0_Handler>:
extern QueueHandle_t theRXQ;
void UART0_Handler()
{
  402540:	b510      	push	{r4, lr}
  402542:	b082      	sub	sp, #8
	uint8_t data = '\0';
  402544:	2300      	movs	r3, #0
  402546:	f88d 3007 	strb.w	r3, [sp, #7]
	uint32_t uiStatus = EDBG_UART->UART_SR;
  40254a:	4b0f      	ldr	r3, [pc, #60]	; (402588 <UART0_Handler+0x48>)
  40254c:	695b      	ldr	r3, [r3, #20]
	BaseType_t xHigherPriorityTaskWoken;


	if(uiStatus & UART_SR_RXRDY)
  40254e:	f013 0f01 	tst.w	r3, #1
  402552:	d101      	bne.n	402558 <UART0_Handler+0x18>
		// Send Queue message to task
		xQueueSendToBackFromISR(&data, &theRXQ, &xHigherPriorityTaskWoken);
		
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
	}
  402554:	b002      	add	sp, #8
  402556:	bd10      	pop	{r4, pc}
		data = (uint8_t) EDBG_UART->UART_RHR;
  402558:	4b0b      	ldr	r3, [pc, #44]	; (402588 <UART0_Handler+0x48>)
  40255a:	699b      	ldr	r3, [r3, #24]
  40255c:	f88d 3007 	strb.w	r3, [sp, #7]
		xQueueSendToBackFromISR(&data, &theRXQ, &xHigherPriorityTaskWoken);
  402560:	2300      	movs	r3, #0
  402562:	466a      	mov	r2, sp
  402564:	4909      	ldr	r1, [pc, #36]	; (40258c <UART0_Handler+0x4c>)
  402566:	f10d 0007 	add.w	r0, sp, #7
  40256a:	4c09      	ldr	r4, [pc, #36]	; (402590 <UART0_Handler+0x50>)
  40256c:	47a0      	blx	r4
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
  40256e:	9b00      	ldr	r3, [sp, #0]
  402570:	2b00      	cmp	r3, #0
  402572:	d0ef      	beq.n	402554 <UART0_Handler+0x14>
  402574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402578:	4b06      	ldr	r3, [pc, #24]	; (402594 <UART0_Handler+0x54>)
  40257a:	601a      	str	r2, [r3, #0]
  40257c:	f3bf 8f4f 	dsb	sy
  402580:	f3bf 8f6f 	isb	sy
  402584:	e7e6      	b.n	402554 <UART0_Handler+0x14>
  402586:	bf00      	nop
  402588:	400e0600 	.word	0x400e0600
  40258c:	200006ac 	.word	0x200006ac
  402590:	00400d25 	.word	0x00400d25
  402594:	e000ed04 	.word	0xe000ed04

00402598 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402598:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40259a:	480e      	ldr	r0, [pc, #56]	; (4025d4 <sysclk_init+0x3c>)
  40259c:	4b0e      	ldr	r3, [pc, #56]	; (4025d8 <sysclk_init+0x40>)
  40259e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4025a0:	213e      	movs	r1, #62	; 0x3e
  4025a2:	2000      	movs	r0, #0
  4025a4:	4b0d      	ldr	r3, [pc, #52]	; (4025dc <sysclk_init+0x44>)
  4025a6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4025a8:	4b0d      	ldr	r3, [pc, #52]	; (4025e0 <sysclk_init+0x48>)
  4025aa:	4798      	blx	r3
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4025ac:	2800      	cmp	r0, #0
  4025ae:	d0fb      	beq.n	4025a8 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4025b0:	4b0c      	ldr	r3, [pc, #48]	; (4025e4 <sysclk_init+0x4c>)
  4025b2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4025b4:	4a0c      	ldr	r2, [pc, #48]	; (4025e8 <sysclk_init+0x50>)
  4025b6:	4b0d      	ldr	r3, [pc, #52]	; (4025ec <sysclk_init+0x54>)
  4025b8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  4025ba:	4b0d      	ldr	r3, [pc, #52]	; (4025f0 <sysclk_init+0x58>)
  4025bc:	4798      	blx	r3
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4025be:	2800      	cmp	r0, #0
  4025c0:	d0fb      	beq.n	4025ba <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4025c2:	2010      	movs	r0, #16
  4025c4:	4b0b      	ldr	r3, [pc, #44]	; (4025f4 <sysclk_init+0x5c>)
  4025c6:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4025c8:	4b0b      	ldr	r3, [pc, #44]	; (4025f8 <sysclk_init+0x60>)
  4025ca:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4025cc:	480b      	ldr	r0, [pc, #44]	; (4025fc <sysclk_init+0x64>)
  4025ce:	4b02      	ldr	r3, [pc, #8]	; (4025d8 <sysclk_init+0x40>)
  4025d0:	4798      	blx	r3
  4025d2:	bd08      	pop	{r3, pc}
  4025d4:	07270e00 	.word	0x07270e00
  4025d8:	00402961 	.word	0x00402961
  4025dc:	004026c9 	.word	0x004026c9
  4025e0:	0040271d 	.word	0x0040271d
  4025e4:	0040272d 	.word	0x0040272d
  4025e8:	200f3f01 	.word	0x200f3f01
  4025ec:	400e0400 	.word	0x400e0400
  4025f0:	0040273d 	.word	0x0040273d
  4025f4:	00402675 	.word	0x00402675
  4025f8:	00402851 	.word	0x00402851
  4025fc:	05b8d800 	.word	0x05b8d800

00402600 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  402600:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402602:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402606:	4b18      	ldr	r3, [pc, #96]	; (402668 <board_init+0x68>)
  402608:	605a      	str	r2, [r3, #4]
  40260a:	2009      	movs	r0, #9
  40260c:	4c17      	ldr	r4, [pc, #92]	; (40266c <board_init+0x6c>)
  40260e:	47a0      	blx	r4
  402610:	200a      	movs	r0, #10
  402612:	47a0      	blx	r4
  402614:	200b      	movs	r0, #11
  402616:	47a0      	blx	r4
  402618:	200c      	movs	r0, #12
  40261a:	47a0      	blx	r4
  40261c:	200d      	movs	r0, #13
  40261e:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402620:	4b13      	ldr	r3, [pc, #76]	; (402670 <board_init+0x70>)
  402622:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  402626:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402628:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40262c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40262e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  402632:	2204      	movs	r2, #4
  402634:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402636:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40263a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40263c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  402640:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  402642:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  402644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402648:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40264a:	f021 0104 	bic.w	r1, r1, #4
  40264e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402650:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402652:	f021 0104 	bic.w	r1, r1, #4
  402656:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  402658:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40265c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  402660:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  402664:	bd10      	pop	{r4, pc}
  402666:	bf00      	nop
  402668:	400e1850 	.word	0x400e1850
  40266c:	0040274d 	.word	0x0040274d
  402670:	400e1400 	.word	0x400e1400

00402674 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402674:	4a13      	ldr	r2, [pc, #76]	; (4026c4 <pmc_switch_mck_to_pllack+0x50>)
  402676:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40267c:	4318      	orrs	r0, r3
  40267e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402680:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402684:	4a0f      	ldr	r2, [pc, #60]	; (4026c4 <pmc_switch_mck_to_pllack+0x50>)
  402686:	6e92      	ldr	r2, [r2, #104]	; 0x68
  402688:	f012 0f08 	tst.w	r2, #8
  40268c:	d102      	bne.n	402694 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40268e:	b1a3      	cbz	r3, 4026ba <pmc_switch_mck_to_pllack+0x46>
			--ul_timeout) {
  402690:	3b01      	subs	r3, #1
  402692:	e7f7      	b.n	402684 <pmc_switch_mck_to_pllack+0x10>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402694:	4a0b      	ldr	r2, [pc, #44]	; (4026c4 <pmc_switch_mck_to_pllack+0x50>)
  402696:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402698:	f023 0303 	bic.w	r3, r3, #3
  40269c:	f043 0302 	orr.w	r3, r3, #2
  4026a0:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4026a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4026a6:	4a07      	ldr	r2, [pc, #28]	; (4026c4 <pmc_switch_mck_to_pllack+0x50>)
  4026a8:	6e92      	ldr	r2, [r2, #104]	; 0x68
  4026aa:	f012 0f08 	tst.w	r2, #8
  4026ae:	d102      	bne.n	4026b6 <pmc_switch_mck_to_pllack+0x42>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4026b0:	b12b      	cbz	r3, 4026be <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
  4026b2:	3b01      	subs	r3, #1
  4026b4:	e7f7      	b.n	4026a6 <pmc_switch_mck_to_pllack+0x32>
			return 1;
		}
	}

	return 0;
  4026b6:	2000      	movs	r0, #0
  4026b8:	4770      	bx	lr
			return 1;
  4026ba:	2001      	movs	r0, #1
  4026bc:	4770      	bx	lr
			return 1;
  4026be:	2001      	movs	r0, #1
}
  4026c0:	4770      	bx	lr
  4026c2:	bf00      	nop
  4026c4:	400e0400 	.word	0x400e0400

004026c8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4026c8:	b9d0      	cbnz	r0, 402700 <pmc_switch_mainck_to_xtal+0x38>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4026ca:	4a11      	ldr	r2, [pc, #68]	; (402710 <pmc_switch_mainck_to_xtal+0x48>)
  4026cc:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4026ce:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4026d2:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4026d6:	0209      	lsls	r1, r1, #8
  4026d8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4026da:	430b      	orrs	r3, r1
  4026dc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4026e0:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4026e4:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4026e6:	4b0a      	ldr	r3, [pc, #40]	; (402710 <pmc_switch_mainck_to_xtal+0x48>)
  4026e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4026ea:	f013 0f01 	tst.w	r3, #1
  4026ee:	d0fa      	beq.n	4026e6 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4026f0:	4a07      	ldr	r2, [pc, #28]	; (402710 <pmc_switch_mainck_to_xtal+0x48>)
  4026f2:	6a13      	ldr	r3, [r2, #32]
  4026f4:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4026f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4026fc:	6213      	str	r3, [r2, #32]
  4026fe:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402700:	4903      	ldr	r1, [pc, #12]	; (402710 <pmc_switch_mainck_to_xtal+0x48>)
  402702:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402704:	4a03      	ldr	r2, [pc, #12]	; (402714 <pmc_switch_mainck_to_xtal+0x4c>)
  402706:	401a      	ands	r2, r3
  402708:	4b03      	ldr	r3, [pc, #12]	; (402718 <pmc_switch_mainck_to_xtal+0x50>)
  40270a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40270c:	620b      	str	r3, [r1, #32]
  40270e:	4770      	bx	lr
  402710:	400e0400 	.word	0x400e0400
  402714:	fec8fffc 	.word	0xfec8fffc
  402718:	01370002 	.word	0x01370002

0040271c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40271c:	4b02      	ldr	r3, [pc, #8]	; (402728 <pmc_osc_is_ready_mainck+0xc>)
  40271e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402720:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402724:	4770      	bx	lr
  402726:	bf00      	nop
  402728:	400e0400 	.word	0x400e0400

0040272c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40272c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402730:	4b01      	ldr	r3, [pc, #4]	; (402738 <pmc_disable_pllack+0xc>)
  402732:	629a      	str	r2, [r3, #40]	; 0x28
  402734:	4770      	bx	lr
  402736:	bf00      	nop
  402738:	400e0400 	.word	0x400e0400

0040273c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40273c:	4b02      	ldr	r3, [pc, #8]	; (402748 <pmc_is_locked_pllack+0xc>)
  40273e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402740:	f000 0002 	and.w	r0, r0, #2
  402744:	4770      	bx	lr
  402746:	bf00      	nop
  402748:	400e0400 	.word	0x400e0400

0040274c <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  40274c:	282f      	cmp	r0, #47	; 0x2f
  40274e:	d81e      	bhi.n	40278e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402750:	281f      	cmp	r0, #31
  402752:	d80c      	bhi.n	40276e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402754:	4b11      	ldr	r3, [pc, #68]	; (40279c <pmc_enable_periph_clk+0x50>)
  402756:	699a      	ldr	r2, [r3, #24]
  402758:	2301      	movs	r3, #1
  40275a:	4083      	lsls	r3, r0
  40275c:	4393      	bics	r3, r2
  40275e:	d018      	beq.n	402792 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402760:	2301      	movs	r3, #1
  402762:	fa03 f000 	lsl.w	r0, r3, r0
  402766:	4b0d      	ldr	r3, [pc, #52]	; (40279c <pmc_enable_periph_clk+0x50>)
  402768:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40276a:	2000      	movs	r0, #0
  40276c:	4770      	bx	lr
		ul_id -= 32;
  40276e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402770:	4b0a      	ldr	r3, [pc, #40]	; (40279c <pmc_enable_periph_clk+0x50>)
  402772:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402776:	2301      	movs	r3, #1
  402778:	4083      	lsls	r3, r0
  40277a:	4393      	bics	r3, r2
  40277c:	d00b      	beq.n	402796 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40277e:	2301      	movs	r3, #1
  402780:	fa03 f000 	lsl.w	r0, r3, r0
  402784:	4b05      	ldr	r3, [pc, #20]	; (40279c <pmc_enable_periph_clk+0x50>)
  402786:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40278a:	2000      	movs	r0, #0
  40278c:	4770      	bx	lr
		return 1;
  40278e:	2001      	movs	r0, #1
  402790:	4770      	bx	lr
	return 0;
  402792:	2000      	movs	r0, #0
  402794:	4770      	bx	lr
  402796:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  402798:	4770      	bx	lr
  40279a:	bf00      	nop
  40279c:	400e0400 	.word	0x400e0400

004027a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4027a0:	e7fe      	b.n	4027a0 <Dummy_Handler>
	...

004027a4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4027a4:	b500      	push	{lr}
  4027a6:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4027a8:	4b1e      	ldr	r3, [pc, #120]	; (402824 <Reset_Handler+0x80>)
  4027aa:	4a1f      	ldr	r2, [pc, #124]	; (402828 <Reset_Handler+0x84>)
  4027ac:	429a      	cmp	r2, r3
  4027ae:	d009      	beq.n	4027c4 <Reset_Handler+0x20>
  4027b0:	4b1c      	ldr	r3, [pc, #112]	; (402824 <Reset_Handler+0x80>)
  4027b2:	4a1d      	ldr	r2, [pc, #116]	; (402828 <Reset_Handler+0x84>)
  4027b4:	e003      	b.n	4027be <Reset_Handler+0x1a>
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  4027b6:	6811      	ldr	r1, [r2, #0]
  4027b8:	6019      	str	r1, [r3, #0]
  4027ba:	3304      	adds	r3, #4
  4027bc:	3204      	adds	r2, #4
		for (; pDest < &_erelocate;) {
  4027be:	491b      	ldr	r1, [pc, #108]	; (40282c <Reset_Handler+0x88>)
  4027c0:	428b      	cmp	r3, r1
  4027c2:	d3f8      	bcc.n	4027b6 <Reset_Handler+0x12>
			*pDest++ = *pSrc++;
  4027c4:	4b1a      	ldr	r3, [pc, #104]	; (402830 <Reset_Handler+0x8c>)
  4027c6:	e002      	b.n	4027ce <Reset_Handler+0x2a>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
  4027c8:	2200      	movs	r2, #0
  4027ca:	601a      	str	r2, [r3, #0]
  4027cc:	3304      	adds	r3, #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4027ce:	4a19      	ldr	r2, [pc, #100]	; (402834 <Reset_Handler+0x90>)
  4027d0:	4293      	cmp	r3, r2
  4027d2:	d3f9      	bcc.n	4027c8 <Reset_Handler+0x24>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4027d4:	4a18      	ldr	r2, [pc, #96]	; (402838 <Reset_Handler+0x94>)
  4027d6:	4b19      	ldr	r3, [pc, #100]	; (40283c <Reset_Handler+0x98>)
  4027d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4027dc:	6093      	str	r3, [r2, #8]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4027de:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4027e2:	fab3 f383 	clz	r3, r3
  4027e6:	095b      	lsrs	r3, r3, #5
  4027e8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4027ea:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4027ec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4027f0:	2200      	movs	r2, #0
  4027f2:	4b13      	ldr	r3, [pc, #76]	; (402840 <Reset_Handler+0x9c>)
  4027f4:	701a      	strb	r2, [r3, #0]
	return flags;
  4027f6:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4027f8:	4a12      	ldr	r2, [pc, #72]	; (402844 <Reset_Handler+0xa0>)
  4027fa:	6813      	ldr	r3, [r2, #0]
  4027fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402800:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  402802:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402806:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40280a:	b129      	cbz	r1, 402818 <Reset_Handler+0x74>
		cpu_irq_enable();
  40280c:	2201      	movs	r2, #1
  40280e:	4b0c      	ldr	r3, [pc, #48]	; (402840 <Reset_Handler+0x9c>)
  402810:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  402812:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402816:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  402818:	4b0b      	ldr	r3, [pc, #44]	; (402848 <Reset_Handler+0xa4>)
  40281a:	4798      	blx	r3

	/* Branch to main function */
	main();
  40281c:	4b0b      	ldr	r3, [pc, #44]	; (40284c <Reset_Handler+0xa8>)
  40281e:	4798      	blx	r3
  402820:	e7fe      	b.n	402820 <Reset_Handler+0x7c>
  402822:	bf00      	nop
  402824:	20000000 	.word	0x20000000
  402828:	004032a8 	.word	0x004032a8
  40282c:	20000474 	.word	0x20000474
  402830:	20000474 	.word	0x20000474
  402834:	200006ec 	.word	0x200006ec
  402838:	e000ed00 	.word	0xe000ed00
  40283c:	00400000 	.word	0x00400000
  402840:	20000005 	.word	0x20000005
  402844:	e000ed88 	.word	0xe000ed88
  402848:	00402c59 	.word	0x00402c59
  40284c:	00402a59 	.word	0x00402a59

00402850 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  402850:	4b3c      	ldr	r3, [pc, #240]	; (402944 <SystemCoreClockUpdate+0xf4>)
  402852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402854:	f003 0303 	and.w	r3, r3, #3
  402858:	2b01      	cmp	r3, #1
  40285a:	d020      	beq.n	40289e <SystemCoreClockUpdate+0x4e>
  40285c:	b183      	cbz	r3, 402880 <SystemCoreClockUpdate+0x30>
  40285e:	2b02      	cmp	r3, #2
  402860:	d039      	beq.n	4028d6 <SystemCoreClockUpdate+0x86>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  402862:	4b38      	ldr	r3, [pc, #224]	; (402944 <SystemCoreClockUpdate+0xf4>)
  402864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402866:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40286a:	2b70      	cmp	r3, #112	; 0x70
  40286c:	d062      	beq.n	402934 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  40286e:	4b35      	ldr	r3, [pc, #212]	; (402944 <SystemCoreClockUpdate+0xf4>)
  402870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402872:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402876:	4934      	ldr	r1, [pc, #208]	; (402948 <SystemCoreClockUpdate+0xf8>)
  402878:	680b      	ldr	r3, [r1, #0]
  40287a:	40d3      	lsrs	r3, r2
  40287c:	600b      	str	r3, [r1, #0]
  40287e:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402880:	4b32      	ldr	r3, [pc, #200]	; (40294c <SystemCoreClockUpdate+0xfc>)
  402882:	695b      	ldr	r3, [r3, #20]
  402884:	f013 0f80 	tst.w	r3, #128	; 0x80
  402888:	d004      	beq.n	402894 <SystemCoreClockUpdate+0x44>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40288a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40288e:	4b2e      	ldr	r3, [pc, #184]	; (402948 <SystemCoreClockUpdate+0xf8>)
  402890:	601a      	str	r2, [r3, #0]
  402892:	e7e6      	b.n	402862 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402894:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402898:	4b2b      	ldr	r3, [pc, #172]	; (402948 <SystemCoreClockUpdate+0xf8>)
  40289a:	601a      	str	r2, [r3, #0]
  40289c:	e7e1      	b.n	402862 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40289e:	4b29      	ldr	r3, [pc, #164]	; (402944 <SystemCoreClockUpdate+0xf4>)
  4028a0:	6a1b      	ldr	r3, [r3, #32]
  4028a2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4028a6:	d003      	beq.n	4028b0 <SystemCoreClockUpdate+0x60>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4028a8:	4a29      	ldr	r2, [pc, #164]	; (402950 <SystemCoreClockUpdate+0x100>)
  4028aa:	4b27      	ldr	r3, [pc, #156]	; (402948 <SystemCoreClockUpdate+0xf8>)
  4028ac:	601a      	str	r2, [r3, #0]
  4028ae:	e7d8      	b.n	402862 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4028b0:	4a28      	ldr	r2, [pc, #160]	; (402954 <SystemCoreClockUpdate+0x104>)
  4028b2:	4b25      	ldr	r3, [pc, #148]	; (402948 <SystemCoreClockUpdate+0xf8>)
  4028b4:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4028b6:	4b23      	ldr	r3, [pc, #140]	; (402944 <SystemCoreClockUpdate+0xf4>)
  4028b8:	6a1b      	ldr	r3, [r3, #32]
  4028ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4028be:	2b10      	cmp	r3, #16
  4028c0:	d005      	beq.n	4028ce <SystemCoreClockUpdate+0x7e>
  4028c2:	2b20      	cmp	r3, #32
  4028c4:	d1cd      	bne.n	402862 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  4028c6:	4a22      	ldr	r2, [pc, #136]	; (402950 <SystemCoreClockUpdate+0x100>)
  4028c8:	4b1f      	ldr	r3, [pc, #124]	; (402948 <SystemCoreClockUpdate+0xf8>)
  4028ca:	601a      	str	r2, [r3, #0]
				break;
  4028cc:	e7c9      	b.n	402862 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  4028ce:	4a22      	ldr	r2, [pc, #136]	; (402958 <SystemCoreClockUpdate+0x108>)
  4028d0:	4b1d      	ldr	r3, [pc, #116]	; (402948 <SystemCoreClockUpdate+0xf8>)
  4028d2:	601a      	str	r2, [r3, #0]
				break;
  4028d4:	e7c5      	b.n	402862 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4028d6:	4b1b      	ldr	r3, [pc, #108]	; (402944 <SystemCoreClockUpdate+0xf4>)
  4028d8:	6a1b      	ldr	r3, [r3, #32]
  4028da:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4028de:	d016      	beq.n	40290e <SystemCoreClockUpdate+0xbe>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4028e0:	4a1b      	ldr	r2, [pc, #108]	; (402950 <SystemCoreClockUpdate+0x100>)
  4028e2:	4b19      	ldr	r3, [pc, #100]	; (402948 <SystemCoreClockUpdate+0xf8>)
  4028e4:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  4028e6:	4b17      	ldr	r3, [pc, #92]	; (402944 <SystemCoreClockUpdate+0xf4>)
  4028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4028ea:	f003 0303 	and.w	r3, r3, #3
  4028ee:	2b02      	cmp	r3, #2
  4028f0:	d1b7      	bne.n	402862 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4028f2:	4814      	ldr	r0, [pc, #80]	; (402944 <SystemCoreClockUpdate+0xf4>)
  4028f4:	6a82      	ldr	r2, [r0, #40]	; 0x28
  4028f6:	f3c2 420a 	ubfx	r2, r2, #16, #11
  4028fa:	4913      	ldr	r1, [pc, #76]	; (402948 <SystemCoreClockUpdate+0xf8>)
  4028fc:	680b      	ldr	r3, [r1, #0]
  4028fe:	fb02 3303 	mla	r3, r2, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402902:	6a82      	ldr	r2, [r0, #40]	; 0x28
  402904:	b2d2      	uxtb	r2, r2
  402906:	fbb3 f3f2 	udiv	r3, r3, r2
  40290a:	600b      	str	r3, [r1, #0]
  40290c:	e7a9      	b.n	402862 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40290e:	4a11      	ldr	r2, [pc, #68]	; (402954 <SystemCoreClockUpdate+0x104>)
  402910:	4b0d      	ldr	r3, [pc, #52]	; (402948 <SystemCoreClockUpdate+0xf8>)
  402912:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402914:	4b0b      	ldr	r3, [pc, #44]	; (402944 <SystemCoreClockUpdate+0xf4>)
  402916:	6a1b      	ldr	r3, [r3, #32]
  402918:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40291c:	2b10      	cmp	r3, #16
  40291e:	d005      	beq.n	40292c <SystemCoreClockUpdate+0xdc>
  402920:	2b20      	cmp	r3, #32
  402922:	d1e0      	bne.n	4028e6 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
  402924:	4a0a      	ldr	r2, [pc, #40]	; (402950 <SystemCoreClockUpdate+0x100>)
  402926:	4b08      	ldr	r3, [pc, #32]	; (402948 <SystemCoreClockUpdate+0xf8>)
  402928:	601a      	str	r2, [r3, #0]
				break;
  40292a:	e7dc      	b.n	4028e6 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
  40292c:	4a0a      	ldr	r2, [pc, #40]	; (402958 <SystemCoreClockUpdate+0x108>)
  40292e:	4b06      	ldr	r3, [pc, #24]	; (402948 <SystemCoreClockUpdate+0xf8>)
  402930:	601a      	str	r2, [r3, #0]
				break;
  402932:	e7d8      	b.n	4028e6 <SystemCoreClockUpdate+0x96>
		SystemCoreClock /= 3U;
  402934:	4a04      	ldr	r2, [pc, #16]	; (402948 <SystemCoreClockUpdate+0xf8>)
  402936:	6813      	ldr	r3, [r2, #0]
  402938:	4908      	ldr	r1, [pc, #32]	; (40295c <SystemCoreClockUpdate+0x10c>)
  40293a:	fba1 1303 	umull	r1, r3, r1, r3
  40293e:	085b      	lsrs	r3, r3, #1
  402940:	6013      	str	r3, [r2, #0]
  402942:	4770      	bx	lr
  402944:	400e0400 	.word	0x400e0400
  402948:	20000008 	.word	0x20000008
  40294c:	400e1810 	.word	0x400e1810
  402950:	00b71b00 	.word	0x00b71b00
  402954:	003d0900 	.word	0x003d0900
  402958:	007a1200 	.word	0x007a1200
  40295c:	aaaaaaab 	.word	0xaaaaaaab

00402960 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402960:	4b14      	ldr	r3, [pc, #80]	; (4029b4 <system_init_flash+0x54>)
  402962:	4298      	cmp	r0, r3
  402964:	d90f      	bls.n	402986 <system_init_flash+0x26>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  402966:	4b14      	ldr	r3, [pc, #80]	; (4029b8 <system_init_flash+0x58>)
  402968:	4298      	cmp	r0, r3
  40296a:	d911      	bls.n	402990 <system_init_flash+0x30>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  40296c:	4b13      	ldr	r3, [pc, #76]	; (4029bc <system_init_flash+0x5c>)
  40296e:	4298      	cmp	r0, r3
  402970:	d912      	bls.n	402998 <system_init_flash+0x38>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402972:	4b13      	ldr	r3, [pc, #76]	; (4029c0 <system_init_flash+0x60>)
  402974:	4298      	cmp	r0, r3
  402976:	d913      	bls.n	4029a0 <system_init_flash+0x40>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402978:	4b12      	ldr	r3, [pc, #72]	; (4029c4 <system_init_flash+0x64>)
  40297a:	4298      	cmp	r0, r3
  40297c:	d914      	bls.n	4029a8 <system_init_flash+0x48>
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40297e:	4a12      	ldr	r2, [pc, #72]	; (4029c8 <system_init_flash+0x68>)
  402980:	4b12      	ldr	r3, [pc, #72]	; (4029cc <system_init_flash+0x6c>)
  402982:	601a      	str	r2, [r3, #0]
  402984:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402986:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40298a:	4b10      	ldr	r3, [pc, #64]	; (4029cc <system_init_flash+0x6c>)
  40298c:	601a      	str	r2, [r3, #0]
  40298e:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402990:	4a0f      	ldr	r2, [pc, #60]	; (4029d0 <system_init_flash+0x70>)
  402992:	4b0e      	ldr	r3, [pc, #56]	; (4029cc <system_init_flash+0x6c>)
  402994:	601a      	str	r2, [r3, #0]
  402996:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402998:	4a0e      	ldr	r2, [pc, #56]	; (4029d4 <system_init_flash+0x74>)
  40299a:	4b0c      	ldr	r3, [pc, #48]	; (4029cc <system_init_flash+0x6c>)
  40299c:	601a      	str	r2, [r3, #0]
  40299e:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4029a0:	4a0d      	ldr	r2, [pc, #52]	; (4029d8 <system_init_flash+0x78>)
  4029a2:	4b0a      	ldr	r3, [pc, #40]	; (4029cc <system_init_flash+0x6c>)
  4029a4:	601a      	str	r2, [r3, #0]
  4029a6:	4770      	bx	lr
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4029a8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4029ac:	4b07      	ldr	r3, [pc, #28]	; (4029cc <system_init_flash+0x6c>)
  4029ae:	601a      	str	r2, [r3, #0]
  4029b0:	4770      	bx	lr
  4029b2:	bf00      	nop
  4029b4:	01312cff 	.word	0x01312cff
  4029b8:	026259ff 	.word	0x026259ff
  4029bc:	039386ff 	.word	0x039386ff
  4029c0:	04c4b3ff 	.word	0x04c4b3ff
  4029c4:	05f5e0ff 	.word	0x05f5e0ff
  4029c8:	04000500 	.word	0x04000500
  4029cc:	400e0a00 	.word	0x400e0a00
  4029d0:	04000100 	.word	0x04000100
  4029d4:	04000200 	.word	0x04000200
  4029d8:	04000300 	.word	0x04000300

004029dc <prvInitialiseHeap>:
	while(true) {}
}


static void prvInitialiseHeap( )
{
  4029dc:	b500      	push	{lr}
  4029de:	b089      	sub	sp, #36	; 0x24
       uint32_t ulHeapSize;
       uint8_t *pucHeapStart, *pucHeapEnd;

       pucHeapStart = ( uint8_t * ) ( ( ( ( uint32_t ) &mainHEAP_START ) + 7 ) & ~0x07ul );
  4029e0:	4b10      	ldr	r3, [pc, #64]	; (402a24 <prvInitialiseHeap+0x48>)
  4029e2:	1dda      	adds	r2, r3, #7
  4029e4:	f022 0207 	bic.w	r2, r2, #7
       pucHeapEnd = ( uint8_t * ) ( mainRAM_START + mainRAM_LENGTH );
       ulHeapSize = ( uint32_t ) ( ( uint32_t ) pucHeapEnd - ( uint32_t ) &mainHEAP_START );
  4029e8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
  4029ec:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
       ulHeapSize &= ~0x07ul;
  4029f0:	f023 0307 	bic.w	r3, r3, #7
       ulHeapSize -= 1024;
  4029f4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
       HeapRegion_t xHeapRegions[] = {
  4029f8:	9200      	str	r2, [sp, #0]
  4029fa:	9301      	str	r3, [sp, #4]
  4029fc:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  402a00:	9302      	str	r3, [sp, #8]
  402a02:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  402a06:	9303      	str	r3, [sp, #12]
  402a08:	f04f 42c6 	mov.w	r2, #1660944384	; 0x63000000
  402a0c:	9204      	str	r2, [sp, #16]
  402a0e:	9305      	str	r3, [sp, #20]
  402a10:	2300      	movs	r3, #0
  402a12:	9306      	str	r3, [sp, #24]
  402a14:	9307      	str	r3, [sp, #28]
              { ( unsigned char *) SRAM_BASE_ADDRESS, mainEXTERNAL_SRAM_SIZE },
              { ( unsigned char *) SRAM_BASE_ADDRESS_2ND, mainEXTERNAL_SRAM_SIZE },
              { NULL, 0 }
       };

       vPortDefineHeapRegions( xHeapRegions );
  402a16:	4668      	mov	r0, sp
  402a18:	4b03      	ldr	r3, [pc, #12]	; (402a28 <prvInitialiseHeap+0x4c>)
  402a1a:	4798      	blx	r3
}
  402a1c:	b009      	add	sp, #36	; 0x24
  402a1e:	f85d fb04 	ldr.w	pc, [sp], #4
  402a22:	bf00      	nop
  402a24:	200036f0 	.word	0x200036f0
  402a28:	00400749 	.word	0x00400749

00402a2c <prvMiscInitialisation>:
static void prvMiscInitialisation( void )
{
  402a2c:	b510      	push	{r4, lr}
       /* Initialize the SAM system */
       sysclk_init();
  402a2e:	4b06      	ldr	r3, [pc, #24]	; (402a48 <prvMiscInitialisation+0x1c>)
  402a30:	4798      	blx	r3
       board_init();
  402a32:	4b06      	ldr	r3, [pc, #24]	; (402a4c <prvMiscInitialisation+0x20>)
  402a34:	4798      	blx	r3
       prvInitialiseHeap();
  402a36:	4b06      	ldr	r3, [pc, #24]	; (402a50 <prvMiscInitialisation+0x24>)
  402a38:	4798      	blx	r3
       pmc_enable_periph_clk(ID_PIOA);
  402a3a:	2009      	movs	r0, #9
  402a3c:	4c05      	ldr	r4, [pc, #20]	; (402a54 <prvMiscInitialisation+0x28>)
  402a3e:	47a0      	blx	r4
       pmc_enable_periph_clk(ID_PIOB);
  402a40:	200a      	movs	r0, #10
  402a42:	47a0      	blx	r4
  402a44:	bd10      	pop	{r4, pc}
  402a46:	bf00      	nop
  402a48:	00402599 	.word	0x00402599
  402a4c:	00402601 	.word	0x00402601
  402a50:	004029dd 	.word	0x004029dd
  402a54:	0040274d 	.word	0x0040274d

00402a58 <main>:
{
  402a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402a5c:	b083      	sub	sp, #12
	prvMiscInitialisation();
  402a5e:	4b48      	ldr	r3, [pc, #288]	; (402b80 <main+0x128>)
  402a60:	4798      	blx	r3
	intitializeLEDDriver();
  402a62:	4b48      	ldr	r3, [pc, #288]	; (402b84 <main+0x12c>)
  402a64:	4798      	blx	r3
	initializeButtonDriver();
  402a66:	4b48      	ldr	r3, [pc, #288]	; (402b88 <main+0x130>)
  402a68:	4798      	blx	r3
	initUART(EDBG_UART);
  402a6a:	4c48      	ldr	r4, [pc, #288]	; (402b8c <main+0x134>)
  402a6c:	4620      	mov	r0, r4
  402a6e:	4b48      	ldr	r3, [pc, #288]	; (402b90 <main+0x138>)
  402a70:	4798      	blx	r3
	UARTPutStr(EDBG_UART, startText, 0);
  402a72:	2200      	movs	r2, #0
  402a74:	4947      	ldr	r1, [pc, #284]	; (402b94 <main+0x13c>)
  402a76:	4620      	mov	r0, r4
  402a78:	4b47      	ldr	r3, [pc, #284]	; (402b98 <main+0x140>)
  402a7a:	4798      	blx	r3
	ledQ[0] = xQueueCreate(5, sizeof(timeDelay));
  402a7c:	2200      	movs	r2, #0
  402a7e:	2101      	movs	r1, #1
  402a80:	2005      	movs	r0, #5
  402a82:	4c46      	ldr	r4, [pc, #280]	; (402b9c <main+0x144>)
  402a84:	47a0      	blx	r4
  402a86:	4d46      	ldr	r5, [pc, #280]	; (402ba0 <main+0x148>)
  402a88:	6028      	str	r0, [r5, #0]
	ledQ[1] = xQueueCreate(5, sizeof(timeDelay));
  402a8a:	2200      	movs	r2, #0
  402a8c:	2101      	movs	r1, #1
  402a8e:	2005      	movs	r0, #5
  402a90:	47a0      	blx	r4
  402a92:	6068      	str	r0, [r5, #4]
	ledQ[2] = xQueueCreate(5, sizeof(timeDelay));
  402a94:	2200      	movs	r2, #0
  402a96:	2101      	movs	r1, #1
  402a98:	2005      	movs	r0, #5
  402a9a:	47a0      	blx	r4
  402a9c:	60a8      	str	r0, [r5, #8]
	uartQ = xQueueCreate(20, sizeof(char[50]));
  402a9e:	2200      	movs	r2, #0
  402aa0:	2132      	movs	r1, #50	; 0x32
  402aa2:	2014      	movs	r0, #20
  402aa4:	47a0      	blx	r4
  402aa6:	f8df 8154 	ldr.w	r8, [pc, #340]	; 402bfc <main+0x1a4>
  402aaa:	f8c8 0000 	str.w	r0, [r8]
	theRXQ = xQueueCreate(50, sizeof(twentyMessages[20]));
  402aae:	2200      	movs	r2, #0
  402ab0:	2101      	movs	r1, #1
  402ab2:	2032      	movs	r0, #50	; 0x32
  402ab4:	47a0      	blx	r4
  402ab6:	4f3b      	ldr	r7, [pc, #236]	; (402ba4 <main+0x14c>)
  402ab8:	6038      	str	r0, [r7, #0]
	theRXQ = xQueueCreate(1, sizeof(twentyMessages[20]));
  402aba:	2200      	movs	r2, #0
  402abc:	2101      	movs	r1, #1
  402abe:	4608      	mov	r0, r1
  402ac0:	47a0      	blx	r4
  402ac2:	6038      	str	r0, [r7, #0]
	theLEDQ = xQueueCreate(1, sizeof(fiveMessages[5]));
  402ac4:	2200      	movs	r2, #0
  402ac6:	2101      	movs	r1, #1
  402ac8:	4608      	mov	r0, r1
  402aca:	47a0      	blx	r4
  402acc:	f8df 9130 	ldr.w	r9, [pc, #304]	; 402c00 <main+0x1a8>
  402ad0:	f8c9 0000 	str.w	r0, [r9]
	controlLED.ledQ[0] = ledQ[0];
  402ad4:	6829      	ldr	r1, [r5, #0]
  402ad6:	4e34      	ldr	r6, [pc, #208]	; (402ba8 <main+0x150>)
  402ad8:	6031      	str	r1, [r6, #0]
	controlLED.ledQ[1] = ledQ[1];
  402ada:	686c      	ldr	r4, [r5, #4]
  402adc:	6074      	str	r4, [r6, #4]
	controlLED.ledQ[2] = ledQ[2];
  402ade:	68a8      	ldr	r0, [r5, #8]
  402ae0:	60b0      	str	r0, [r6, #8]
	controlLED.uartQ = uartQ;
  402ae2:	f8d8 3000 	ldr.w	r3, [r8]
  402ae6:	60f3      	str	r3, [r6, #12]
	LED1Struct.ledQ = ledQ[0];
  402ae8:	4a30      	ldr	r2, [pc, #192]	; (402bac <main+0x154>)
  402aea:	6011      	str	r1, [r2, #0]
	LED1Struct.uartQ = uartQ;
  402aec:	6053      	str	r3, [r2, #4]
	LED1Struct.ledNum = LED1;
  402aee:	2101      	movs	r1, #1
  402af0:	7211      	strb	r1, [r2, #8]
	LED2Struct.ledQ = ledQ[1];
  402af2:	4a2f      	ldr	r2, [pc, #188]	; (402bb0 <main+0x158>)
  402af4:	6014      	str	r4, [r2, #0]
	LED2Struct.uartQ = uartQ;
  402af6:	6053      	str	r3, [r2, #4]
	LED2Struct.ledNum = LED2;
  402af8:	f04f 0a02 	mov.w	sl, #2
  402afc:	f882 a008 	strb.w	sl, [r2, #8]
	LED3Struct.ledQ = ledQ[2];
  402b00:	4a2c      	ldr	r2, [pc, #176]	; (402bb4 <main+0x15c>)
  402b02:	6010      	str	r0, [r2, #0]
	LED3Struct.uartQ = uartQ;
  402b04:	6053      	str	r3, [r2, #4]
	LED3Struct.ledNum = LED3;
  402b06:	f04f 0b03 	mov.w	fp, #3
  402b0a:	f882 b008 	strb.w	fp, [r2, #8]
	xTaskCreate(taskHeartBeat, "LED0 Heart Beat", configMINIMAL_STACK_SIZE, (void *) 0, heartbeatPriority, NULL);
  402b0e:	2500      	movs	r5, #0
  402b10:	9501      	str	r5, [sp, #4]
  402b12:	9100      	str	r1, [sp, #0]
  402b14:	462b      	mov	r3, r5
  402b16:	2282      	movs	r2, #130	; 0x82
  402b18:	4927      	ldr	r1, [pc, #156]	; (402bb8 <main+0x160>)
  402b1a:	4828      	ldr	r0, [pc, #160]	; (402bbc <main+0x164>)
  402b1c:	4c28      	ldr	r4, [pc, #160]	; (402bc0 <main+0x168>)
  402b1e:	47a0      	blx	r4
	xTaskCreate(taskUART, "Main UART Task", configMINIMAL_STACK_SIZE, (void *) uartQ, uartControlPriority, &uartHandle);
  402b20:	f8d8 3000 	ldr.w	r3, [r8]
  402b24:	4a27      	ldr	r2, [pc, #156]	; (402bc4 <main+0x16c>)
  402b26:	9201      	str	r2, [sp, #4]
  402b28:	f8cd a000 	str.w	sl, [sp]
  402b2c:	2282      	movs	r2, #130	; 0x82
  402b2e:	4926      	ldr	r1, [pc, #152]	; (402bc8 <main+0x170>)
  402b30:	4826      	ldr	r0, [pc, #152]	; (402bcc <main+0x174>)
  402b32:	47a0      	blx	r4
	xTaskCreate(taskSystemControl, "Main Control in Main", configMINIMAL_STACK_SIZE, (void *) &controlLED, mainControlPriority, &controlHandle);
  402b34:	4b26      	ldr	r3, [pc, #152]	; (402bd0 <main+0x178>)
  402b36:	9301      	str	r3, [sp, #4]
  402b38:	f8cd b000 	str.w	fp, [sp]
  402b3c:	4633      	mov	r3, r6
  402b3e:	2282      	movs	r2, #130	; 0x82
  402b40:	4924      	ldr	r1, [pc, #144]	; (402bd4 <main+0x17c>)
  402b42:	4825      	ldr	r0, [pc, #148]	; (402bd8 <main+0x180>)
  402b44:	47a0      	blx	r4
	xTaskCreate(taskTX, "The TX Task", configMINIMAL_STACK_SIZE, (void *) theTXQ, txTaskPriority, NULL);
  402b46:	4b25      	ldr	r3, [pc, #148]	; (402bdc <main+0x184>)
  402b48:	681b      	ldr	r3, [r3, #0]
  402b4a:	9501      	str	r5, [sp, #4]
  402b4c:	f8cd b000 	str.w	fp, [sp]
  402b50:	2282      	movs	r2, #130	; 0x82
  402b52:	4923      	ldr	r1, [pc, #140]	; (402be0 <main+0x188>)
  402b54:	4823      	ldr	r0, [pc, #140]	; (402be4 <main+0x18c>)
  402b56:	47a0      	blx	r4
	xTaskCreate(taskRX, "The RX Task", configMINIMAL_STACK_SIZE, (void *) theRXQ, rxTaskPriority, NULL);
  402b58:	683b      	ldr	r3, [r7, #0]
  402b5a:	9501      	str	r5, [sp, #4]
  402b5c:	2204      	movs	r2, #4
  402b5e:	9200      	str	r2, [sp, #0]
  402b60:	2282      	movs	r2, #130	; 0x82
  402b62:	4921      	ldr	r1, [pc, #132]	; (402be8 <main+0x190>)
  402b64:	4821      	ldr	r0, [pc, #132]	; (402bec <main+0x194>)
  402b66:	47a0      	blx	r4
	xTaskCreate(taskLED, "The LED Task", configMINIMAL_STACK_SIZE, (void *) theLEDQ, ledTaskPriority, NULL);
  402b68:	f8d9 3000 	ldr.w	r3, [r9]
  402b6c:	9501      	str	r5, [sp, #4]
  402b6e:	f8cd a000 	str.w	sl, [sp]
  402b72:	2282      	movs	r2, #130	; 0x82
  402b74:	491e      	ldr	r1, [pc, #120]	; (402bf0 <main+0x198>)
  402b76:	481f      	ldr	r0, [pc, #124]	; (402bf4 <main+0x19c>)
  402b78:	47a0      	blx	r4
	vTaskStartScheduler();
  402b7a:	4b1f      	ldr	r3, [pc, #124]	; (402bf8 <main+0x1a0>)
  402b7c:	4798      	blx	r3
  402b7e:	e7fe      	b.n	402b7e <main+0x126>
  402b80:	00402a2d 	.word	0x00402a2d
  402b84:	00401fb5 	.word	0x00401fb5
  402b88:	004020e5 	.word	0x004020e5
  402b8c:	400e0600 	.word	0x400e0600
  402b90:	004024b1 	.word	0x004024b1
  402b94:	00403058 	.word	0x00403058
  402b98:	00402525 	.word	0x00402525
  402b9c:	00400ae5 	.word	0x00400ae5
  402ba0:	20000634 	.word	0x20000634
  402ba4:	200006ac 	.word	0x200006ac
  402ba8:	200006b8 	.word	0x200006b8
  402bac:	20000688 	.word	0x20000688
  402bb0:	20000694 	.word	0x20000694
  402bb4:	200006a0 	.word	0x200006a0
  402bb8:	00403068 	.word	0x00403068
  402bbc:	004022b1 	.word	0x004022b1
  402bc0:	004013c5 	.word	0x004013c5
  402bc4:	20000640 	.word	0x20000640
  402bc8:	00403078 	.word	0x00403078
  402bcc:	00402475 	.word	0x00402475
  402bd0:	20000630 	.word	0x20000630
  402bd4:	00403088 	.word	0x00403088
  402bd8:	00402199 	.word	0x00402199
  402bdc:	200006b4 	.word	0x200006b4
  402be0:	004030a0 	.word	0x004030a0
  402be4:	004024ad 	.word	0x004024ad
  402be8:	004030ac 	.word	0x004030ac
  402bec:	004024af 	.word	0x004024af
  402bf0:	004030b8 	.word	0x004030b8
  402bf4:	004022cd 	.word	0x004022cd
  402bf8:	00401439 	.word	0x00401439
  402bfc:	20000644 	.word	0x20000644
  402c00:	200006b0 	.word	0x200006b0

00402c04 <vAssertCalled>:
}

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
  402c04:	b082      	sub	sp, #8
       volatile uint32_t ulBlockVariable = 0UL;
  402c06:	2300      	movs	r3, #0
  402c08:	9301      	str	r3, [sp, #4]
	__asm volatile
  402c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
  402c0e:	f383 8811 	msr	BASEPRI, r3
  402c12:	f3bf 8f6f 	isb	sy
  402c16:	f3bf 8f4f 	dsb	sy
  402c1a:	e000      	b.n	402c1e <vAssertCalled+0x1a>
       this function to be exited. */
       taskDISABLE_INTERRUPTS();
       {
              while( ulBlockVariable == 0UL )
              {
                     __asm volatile( "NOP" );
  402c1c:	bf00      	nop
              while( ulBlockVariable == 0UL )
  402c1e:	9b01      	ldr	r3, [sp, #4]
  402c20:	2b00      	cmp	r3, #0
  402c22:	d0fb      	beq.n	402c1c <vAssertCalled+0x18>
	__asm volatile
  402c24:	2300      	movs	r3, #0
  402c26:	f383 8811 	msr	BASEPRI, r3
              }
       }
       taskENABLE_INTERRUPTS();
}
  402c2a:	b002      	add	sp, #8
  402c2c:	4770      	bx	lr
	...

00402c30 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
  402c30:	b508      	push	{r3, lr}
       /* Called if a call to pvPortMalloc() fails because there is insufficient
       free memory available in the FreeRTOS heap.  pvPortMalloc() is called
       internally by FreeRTOS API functions that create tasks, queues, software
       timers, and semaphores.  The size of the FreeRTOS heap is set by the
       configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
       vAssertCalled( __FILE__, __LINE__ );
  402c32:	21de      	movs	r1, #222	; 0xde
  402c34:	4801      	ldr	r0, [pc, #4]	; (402c3c <vApplicationMallocFailedHook+0xc>)
  402c36:	4b02      	ldr	r3, [pc, #8]	; (402c40 <vApplicationMallocFailedHook+0x10>)
  402c38:	4798      	blx	r3
  402c3a:	bd08      	pop	{r3, pc}
  402c3c:	00403270 	.word	0x00403270
  402c40:	00402c05 	.word	0x00402c05

00402c44 <vApplicationStackOverflowHook>:
	__asm volatile
  402c44:	f04f 0350 	mov.w	r3, #80	; 0x50
  402c48:	f383 8811 	msr	BASEPRI, r3
  402c4c:	f3bf 8f6f 	isb	sy
  402c50:	f3bf 8f4f 	dsb	sy
  402c54:	e7fe      	b.n	402c54 <vApplicationStackOverflowHook+0x10>
	...

00402c58 <__libc_init_array>:
  402c58:	b570      	push	{r4, r5, r6, lr}
  402c5a:	4e0f      	ldr	r6, [pc, #60]	; (402c98 <__libc_init_array+0x40>)
  402c5c:	4d0f      	ldr	r5, [pc, #60]	; (402c9c <__libc_init_array+0x44>)
  402c5e:	1b76      	subs	r6, r6, r5
  402c60:	10b6      	asrs	r6, r6, #2
  402c62:	bf18      	it	ne
  402c64:	2400      	movne	r4, #0
  402c66:	d005      	beq.n	402c74 <__libc_init_array+0x1c>
  402c68:	3401      	adds	r4, #1
  402c6a:	f855 3b04 	ldr.w	r3, [r5], #4
  402c6e:	4798      	blx	r3
  402c70:	42a6      	cmp	r6, r4
  402c72:	d1f9      	bne.n	402c68 <__libc_init_array+0x10>
  402c74:	4e0a      	ldr	r6, [pc, #40]	; (402ca0 <__libc_init_array+0x48>)
  402c76:	4d0b      	ldr	r5, [pc, #44]	; (402ca4 <__libc_init_array+0x4c>)
  402c78:	1b76      	subs	r6, r6, r5
  402c7a:	f000 fb03 	bl	403284 <_init>
  402c7e:	10b6      	asrs	r6, r6, #2
  402c80:	bf18      	it	ne
  402c82:	2400      	movne	r4, #0
  402c84:	d006      	beq.n	402c94 <__libc_init_array+0x3c>
  402c86:	3401      	adds	r4, #1
  402c88:	f855 3b04 	ldr.w	r3, [r5], #4
  402c8c:	4798      	blx	r3
  402c8e:	42a6      	cmp	r6, r4
  402c90:	d1f9      	bne.n	402c86 <__libc_init_array+0x2e>
  402c92:	bd70      	pop	{r4, r5, r6, pc}
  402c94:	bd70      	pop	{r4, r5, r6, pc}
  402c96:	bf00      	nop
  402c98:	00403290 	.word	0x00403290
  402c9c:	00403290 	.word	0x00403290
  402ca0:	00403298 	.word	0x00403298
  402ca4:	00403290 	.word	0x00403290

00402ca8 <memcpy>:
  402ca8:	4684      	mov	ip, r0
  402caa:	ea41 0300 	orr.w	r3, r1, r0
  402cae:	f013 0303 	ands.w	r3, r3, #3
  402cb2:	d16d      	bne.n	402d90 <memcpy+0xe8>
  402cb4:	3a40      	subs	r2, #64	; 0x40
  402cb6:	d341      	bcc.n	402d3c <memcpy+0x94>
  402cb8:	f851 3b04 	ldr.w	r3, [r1], #4
  402cbc:	f840 3b04 	str.w	r3, [r0], #4
  402cc0:	f851 3b04 	ldr.w	r3, [r1], #4
  402cc4:	f840 3b04 	str.w	r3, [r0], #4
  402cc8:	f851 3b04 	ldr.w	r3, [r1], #4
  402ccc:	f840 3b04 	str.w	r3, [r0], #4
  402cd0:	f851 3b04 	ldr.w	r3, [r1], #4
  402cd4:	f840 3b04 	str.w	r3, [r0], #4
  402cd8:	f851 3b04 	ldr.w	r3, [r1], #4
  402cdc:	f840 3b04 	str.w	r3, [r0], #4
  402ce0:	f851 3b04 	ldr.w	r3, [r1], #4
  402ce4:	f840 3b04 	str.w	r3, [r0], #4
  402ce8:	f851 3b04 	ldr.w	r3, [r1], #4
  402cec:	f840 3b04 	str.w	r3, [r0], #4
  402cf0:	f851 3b04 	ldr.w	r3, [r1], #4
  402cf4:	f840 3b04 	str.w	r3, [r0], #4
  402cf8:	f851 3b04 	ldr.w	r3, [r1], #4
  402cfc:	f840 3b04 	str.w	r3, [r0], #4
  402d00:	f851 3b04 	ldr.w	r3, [r1], #4
  402d04:	f840 3b04 	str.w	r3, [r0], #4
  402d08:	f851 3b04 	ldr.w	r3, [r1], #4
  402d0c:	f840 3b04 	str.w	r3, [r0], #4
  402d10:	f851 3b04 	ldr.w	r3, [r1], #4
  402d14:	f840 3b04 	str.w	r3, [r0], #4
  402d18:	f851 3b04 	ldr.w	r3, [r1], #4
  402d1c:	f840 3b04 	str.w	r3, [r0], #4
  402d20:	f851 3b04 	ldr.w	r3, [r1], #4
  402d24:	f840 3b04 	str.w	r3, [r0], #4
  402d28:	f851 3b04 	ldr.w	r3, [r1], #4
  402d2c:	f840 3b04 	str.w	r3, [r0], #4
  402d30:	f851 3b04 	ldr.w	r3, [r1], #4
  402d34:	f840 3b04 	str.w	r3, [r0], #4
  402d38:	3a40      	subs	r2, #64	; 0x40
  402d3a:	d2bd      	bcs.n	402cb8 <memcpy+0x10>
  402d3c:	3230      	adds	r2, #48	; 0x30
  402d3e:	d311      	bcc.n	402d64 <memcpy+0xbc>
  402d40:	f851 3b04 	ldr.w	r3, [r1], #4
  402d44:	f840 3b04 	str.w	r3, [r0], #4
  402d48:	f851 3b04 	ldr.w	r3, [r1], #4
  402d4c:	f840 3b04 	str.w	r3, [r0], #4
  402d50:	f851 3b04 	ldr.w	r3, [r1], #4
  402d54:	f840 3b04 	str.w	r3, [r0], #4
  402d58:	f851 3b04 	ldr.w	r3, [r1], #4
  402d5c:	f840 3b04 	str.w	r3, [r0], #4
  402d60:	3a10      	subs	r2, #16
  402d62:	d2ed      	bcs.n	402d40 <memcpy+0x98>
  402d64:	320c      	adds	r2, #12
  402d66:	d305      	bcc.n	402d74 <memcpy+0xcc>
  402d68:	f851 3b04 	ldr.w	r3, [r1], #4
  402d6c:	f840 3b04 	str.w	r3, [r0], #4
  402d70:	3a04      	subs	r2, #4
  402d72:	d2f9      	bcs.n	402d68 <memcpy+0xc0>
  402d74:	3204      	adds	r2, #4
  402d76:	d008      	beq.n	402d8a <memcpy+0xe2>
  402d78:	07d2      	lsls	r2, r2, #31
  402d7a:	bf1c      	itt	ne
  402d7c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402d80:	f800 3b01 	strbne.w	r3, [r0], #1
  402d84:	d301      	bcc.n	402d8a <memcpy+0xe2>
  402d86:	880b      	ldrh	r3, [r1, #0]
  402d88:	8003      	strh	r3, [r0, #0]
  402d8a:	4660      	mov	r0, ip
  402d8c:	4770      	bx	lr
  402d8e:	bf00      	nop
  402d90:	2a08      	cmp	r2, #8
  402d92:	d313      	bcc.n	402dbc <memcpy+0x114>
  402d94:	078b      	lsls	r3, r1, #30
  402d96:	d08d      	beq.n	402cb4 <memcpy+0xc>
  402d98:	f010 0303 	ands.w	r3, r0, #3
  402d9c:	d08a      	beq.n	402cb4 <memcpy+0xc>
  402d9e:	f1c3 0304 	rsb	r3, r3, #4
  402da2:	1ad2      	subs	r2, r2, r3
  402da4:	07db      	lsls	r3, r3, #31
  402da6:	bf1c      	itt	ne
  402da8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402dac:	f800 3b01 	strbne.w	r3, [r0], #1
  402db0:	d380      	bcc.n	402cb4 <memcpy+0xc>
  402db2:	f831 3b02 	ldrh.w	r3, [r1], #2
  402db6:	f820 3b02 	strh.w	r3, [r0], #2
  402dba:	e77b      	b.n	402cb4 <memcpy+0xc>
  402dbc:	3a04      	subs	r2, #4
  402dbe:	d3d9      	bcc.n	402d74 <memcpy+0xcc>
  402dc0:	3a01      	subs	r2, #1
  402dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
  402dc6:	f800 3b01 	strb.w	r3, [r0], #1
  402dca:	d2f9      	bcs.n	402dc0 <memcpy+0x118>
  402dcc:	780b      	ldrb	r3, [r1, #0]
  402dce:	7003      	strb	r3, [r0, #0]
  402dd0:	784b      	ldrb	r3, [r1, #1]
  402dd2:	7043      	strb	r3, [r0, #1]
  402dd4:	788b      	ldrb	r3, [r1, #2]
  402dd6:	7083      	strb	r3, [r0, #2]
  402dd8:	4660      	mov	r0, ip
  402dda:	4770      	bx	lr

00402ddc <memset>:
  402ddc:	b470      	push	{r4, r5, r6}
  402dde:	0786      	lsls	r6, r0, #30
  402de0:	d046      	beq.n	402e70 <memset+0x94>
  402de2:	1e54      	subs	r4, r2, #1
  402de4:	2a00      	cmp	r2, #0
  402de6:	d041      	beq.n	402e6c <memset+0x90>
  402de8:	b2ca      	uxtb	r2, r1
  402dea:	4603      	mov	r3, r0
  402dec:	e002      	b.n	402df4 <memset+0x18>
  402dee:	f114 34ff 	adds.w	r4, r4, #4294967295
  402df2:	d33b      	bcc.n	402e6c <memset+0x90>
  402df4:	f803 2b01 	strb.w	r2, [r3], #1
  402df8:	079d      	lsls	r5, r3, #30
  402dfa:	d1f8      	bne.n	402dee <memset+0x12>
  402dfc:	2c03      	cmp	r4, #3
  402dfe:	d92e      	bls.n	402e5e <memset+0x82>
  402e00:	b2cd      	uxtb	r5, r1
  402e02:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402e06:	2c0f      	cmp	r4, #15
  402e08:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402e0c:	d919      	bls.n	402e42 <memset+0x66>
  402e0e:	f103 0210 	add.w	r2, r3, #16
  402e12:	4626      	mov	r6, r4
  402e14:	3e10      	subs	r6, #16
  402e16:	2e0f      	cmp	r6, #15
  402e18:	f842 5c10 	str.w	r5, [r2, #-16]
  402e1c:	f842 5c0c 	str.w	r5, [r2, #-12]
  402e20:	f842 5c08 	str.w	r5, [r2, #-8]
  402e24:	f842 5c04 	str.w	r5, [r2, #-4]
  402e28:	f102 0210 	add.w	r2, r2, #16
  402e2c:	d8f2      	bhi.n	402e14 <memset+0x38>
  402e2e:	f1a4 0210 	sub.w	r2, r4, #16
  402e32:	f022 020f 	bic.w	r2, r2, #15
  402e36:	f004 040f 	and.w	r4, r4, #15
  402e3a:	3210      	adds	r2, #16
  402e3c:	2c03      	cmp	r4, #3
  402e3e:	4413      	add	r3, r2
  402e40:	d90d      	bls.n	402e5e <memset+0x82>
  402e42:	461e      	mov	r6, r3
  402e44:	4622      	mov	r2, r4
  402e46:	3a04      	subs	r2, #4
  402e48:	2a03      	cmp	r2, #3
  402e4a:	f846 5b04 	str.w	r5, [r6], #4
  402e4e:	d8fa      	bhi.n	402e46 <memset+0x6a>
  402e50:	1f22      	subs	r2, r4, #4
  402e52:	f022 0203 	bic.w	r2, r2, #3
  402e56:	3204      	adds	r2, #4
  402e58:	4413      	add	r3, r2
  402e5a:	f004 0403 	and.w	r4, r4, #3
  402e5e:	b12c      	cbz	r4, 402e6c <memset+0x90>
  402e60:	b2c9      	uxtb	r1, r1
  402e62:	441c      	add	r4, r3
  402e64:	f803 1b01 	strb.w	r1, [r3], #1
  402e68:	429c      	cmp	r4, r3
  402e6a:	d1fb      	bne.n	402e64 <memset+0x88>
  402e6c:	bc70      	pop	{r4, r5, r6}
  402e6e:	4770      	bx	lr
  402e70:	4614      	mov	r4, r2
  402e72:	4603      	mov	r3, r0
  402e74:	e7c2      	b.n	402dfc <memset+0x20>
  402e76:	bf00      	nop

00402e78 <register_fini>:
  402e78:	4b02      	ldr	r3, [pc, #8]	; (402e84 <register_fini+0xc>)
  402e7a:	b113      	cbz	r3, 402e82 <register_fini+0xa>
  402e7c:	4802      	ldr	r0, [pc, #8]	; (402e88 <register_fini+0x10>)
  402e7e:	f000 b805 	b.w	402e8c <atexit>
  402e82:	4770      	bx	lr
  402e84:	00000000 	.word	0x00000000
  402e88:	00402e99 	.word	0x00402e99

00402e8c <atexit>:
  402e8c:	2300      	movs	r3, #0
  402e8e:	4601      	mov	r1, r0
  402e90:	461a      	mov	r2, r3
  402e92:	4618      	mov	r0, r3
  402e94:	f000 b81e 	b.w	402ed4 <__register_exitproc>

00402e98 <__libc_fini_array>:
  402e98:	b538      	push	{r3, r4, r5, lr}
  402e9a:	4c0a      	ldr	r4, [pc, #40]	; (402ec4 <__libc_fini_array+0x2c>)
  402e9c:	4d0a      	ldr	r5, [pc, #40]	; (402ec8 <__libc_fini_array+0x30>)
  402e9e:	1b64      	subs	r4, r4, r5
  402ea0:	10a4      	asrs	r4, r4, #2
  402ea2:	d00a      	beq.n	402eba <__libc_fini_array+0x22>
  402ea4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402ea8:	3b01      	subs	r3, #1
  402eaa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402eae:	3c01      	subs	r4, #1
  402eb0:	f855 3904 	ldr.w	r3, [r5], #-4
  402eb4:	4798      	blx	r3
  402eb6:	2c00      	cmp	r4, #0
  402eb8:	d1f9      	bne.n	402eae <__libc_fini_array+0x16>
  402eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402ebe:	f000 b9eb 	b.w	403298 <_fini>
  402ec2:	bf00      	nop
  402ec4:	004032a8 	.word	0x004032a8
  402ec8:	004032a4 	.word	0x004032a4

00402ecc <__retarget_lock_acquire_recursive>:
  402ecc:	4770      	bx	lr
  402ece:	bf00      	nop

00402ed0 <__retarget_lock_release_recursive>:
  402ed0:	4770      	bx	lr
  402ed2:	bf00      	nop

00402ed4 <__register_exitproc>:
  402ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402ed8:	4d2c      	ldr	r5, [pc, #176]	; (402f8c <__register_exitproc+0xb8>)
  402eda:	4606      	mov	r6, r0
  402edc:	6828      	ldr	r0, [r5, #0]
  402ede:	4698      	mov	r8, r3
  402ee0:	460f      	mov	r7, r1
  402ee2:	4691      	mov	r9, r2
  402ee4:	f7ff fff2 	bl	402ecc <__retarget_lock_acquire_recursive>
  402ee8:	4b29      	ldr	r3, [pc, #164]	; (402f90 <__register_exitproc+0xbc>)
  402eea:	681c      	ldr	r4, [r3, #0]
  402eec:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402ef0:	2b00      	cmp	r3, #0
  402ef2:	d03e      	beq.n	402f72 <__register_exitproc+0x9e>
  402ef4:	685a      	ldr	r2, [r3, #4]
  402ef6:	2a1f      	cmp	r2, #31
  402ef8:	dc1c      	bgt.n	402f34 <__register_exitproc+0x60>
  402efa:	f102 0e01 	add.w	lr, r2, #1
  402efe:	b176      	cbz	r6, 402f1e <__register_exitproc+0x4a>
  402f00:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402f04:	2401      	movs	r4, #1
  402f06:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402f0a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402f0e:	4094      	lsls	r4, r2
  402f10:	4320      	orrs	r0, r4
  402f12:	2e02      	cmp	r6, #2
  402f14:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402f18:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402f1c:	d023      	beq.n	402f66 <__register_exitproc+0x92>
  402f1e:	3202      	adds	r2, #2
  402f20:	f8c3 e004 	str.w	lr, [r3, #4]
  402f24:	6828      	ldr	r0, [r5, #0]
  402f26:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  402f2a:	f7ff ffd1 	bl	402ed0 <__retarget_lock_release_recursive>
  402f2e:	2000      	movs	r0, #0
  402f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402f34:	4b17      	ldr	r3, [pc, #92]	; (402f94 <__register_exitproc+0xc0>)
  402f36:	b30b      	cbz	r3, 402f7c <__register_exitproc+0xa8>
  402f38:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402f3c:	f3af 8000 	nop.w
  402f40:	4603      	mov	r3, r0
  402f42:	b1d8      	cbz	r0, 402f7c <__register_exitproc+0xa8>
  402f44:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402f48:	6002      	str	r2, [r0, #0]
  402f4a:	2100      	movs	r1, #0
  402f4c:	6041      	str	r1, [r0, #4]
  402f4e:	460a      	mov	r2, r1
  402f50:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402f54:	f04f 0e01 	mov.w	lr, #1
  402f58:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402f5c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402f60:	2e00      	cmp	r6, #0
  402f62:	d0dc      	beq.n	402f1e <__register_exitproc+0x4a>
  402f64:	e7cc      	b.n	402f00 <__register_exitproc+0x2c>
  402f66:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  402f6a:	430c      	orrs	r4, r1
  402f6c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402f70:	e7d5      	b.n	402f1e <__register_exitproc+0x4a>
  402f72:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402f76:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  402f7a:	e7bb      	b.n	402ef4 <__register_exitproc+0x20>
  402f7c:	6828      	ldr	r0, [r5, #0]
  402f7e:	f7ff ffa7 	bl	402ed0 <__retarget_lock_release_recursive>
  402f82:	f04f 30ff 	mov.w	r0, #4294967295
  402f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402f8a:	bf00      	nop
  402f8c:	20000470 	.word	0x20000470
  402f90:	00403280 	.word	0x00403280
  402f94:	00000000 	.word	0x00000000
  402f98:	732f2e2e 	.word	0x732f2e2e
  402f9c:	462f6372 	.word	0x462f6372
  402fa0:	52656572 	.word	0x52656572
  402fa4:	2f534f54 	.word	0x2f534f54
  402fa8:	74726f70 	.word	0x74726f70
  402fac:	656c6261 	.word	0x656c6261
  402fb0:	4343472f 	.word	0x4343472f
  402fb4:	4d52412f 	.word	0x4d52412f
  402fb8:	344d435f 	.word	0x344d435f
  402fbc:	6f702f46 	.word	0x6f702f46
  402fc0:	632e7472 	.word	0x632e7472
  402fc4:	00000000 	.word	0x00000000
  402fc8:	732f2e2e 	.word	0x732f2e2e
  402fcc:	462f6372 	.word	0x462f6372
  402fd0:	52656572 	.word	0x52656572
  402fd4:	2f534f54 	.word	0x2f534f54
  402fd8:	74726f70 	.word	0x74726f70
  402fdc:	656c6261 	.word	0x656c6261
  402fe0:	6d654d2f 	.word	0x6d654d2f
  402fe4:	676e614d 	.word	0x676e614d
  402fe8:	6165682f 	.word	0x6165682f
  402fec:	2e355f70 	.word	0x2e355f70
  402ff0:	00000063 	.word	0x00000063
  402ff4:	732f2e2e 	.word	0x732f2e2e
  402ff8:	462f6372 	.word	0x462f6372
  402ffc:	52656572 	.word	0x52656572
  403000:	2f534f54 	.word	0x2f534f54
  403004:	75657571 	.word	0x75657571
  403008:	00632e65 	.word	0x00632e65
  40300c:	732f2e2e 	.word	0x732f2e2e
  403010:	462f6372 	.word	0x462f6372
  403014:	52656572 	.word	0x52656572
  403018:	2f534f54 	.word	0x2f534f54
  40301c:	6b736174 	.word	0x6b736174
  403020:	00632e73 	.word	0x00632e73
  403024:	454c4449 	.word	0x454c4449
  403028:	00000000 	.word	0x00000000
  40302c:	51726d54 	.word	0x51726d54
  403030:	00000000 	.word	0x00000000
  403034:	732f2e2e 	.word	0x732f2e2e
  403038:	462f6372 	.word	0x462f6372
  40303c:	52656572 	.word	0x52656572
  403040:	2f534f54 	.word	0x2f534f54
  403044:	656d6974 	.word	0x656d6974
  403048:	632e7372 	.word	0x632e7372
  40304c:	00000000 	.word	0x00000000
  403050:	20726d54 	.word	0x20726d54
  403054:	00637653 	.word	0x00637653
  403058:	73696854 	.word	0x73696854
  40305c:	20736920 	.word	0x20736920
  403060:	3462614c 	.word	0x3462614c
  403064:	00000a0d 	.word	0x00000a0d
  403068:	3044454c 	.word	0x3044454c
  40306c:	61654820 	.word	0x61654820
  403070:	42207472 	.word	0x42207472
  403074:	00746165 	.word	0x00746165
  403078:	6e69614d 	.word	0x6e69614d
  40307c:	52415520 	.word	0x52415520
  403080:	61542054 	.word	0x61542054
  403084:	00006b73 	.word	0x00006b73
  403088:	6e69614d 	.word	0x6e69614d
  40308c:	6e6f4320 	.word	0x6e6f4320
  403090:	6c6f7274 	.word	0x6c6f7274
  403094:	206e6920 	.word	0x206e6920
  403098:	6e69614d 	.word	0x6e69614d
  40309c:	00000000 	.word	0x00000000
  4030a0:	20656854 	.word	0x20656854
  4030a4:	54205854 	.word	0x54205854
  4030a8:	006b7361 	.word	0x006b7361
  4030ac:	20656854 	.word	0x20656854
  4030b0:	54205852 	.word	0x54205852
  4030b4:	006b7361 	.word	0x006b7361
  4030b8:	20656854 	.word	0x20656854
  4030bc:	2044454c 	.word	0x2044454c
  4030c0:	6b736154 	.word	0x6b736154
  4030c4:	00000000 	.word	0x00000000
  4030c8:	2044454c 	.word	0x2044454c
  4030cc:	53492033 	.word	0x53492033
  4030d0:	574f4e20 	.word	0x574f4e20
  4030d4:	4f4c4220 	.word	0x4f4c4220
  4030d8:	4e494b43 	.word	0x4e494b43
  4030dc:	000a0d47 	.word	0x000a0d47
  4030e0:	2044454c 	.word	0x2044454c
  4030e4:	53492032 	.word	0x53492032
  4030e8:	574f4e20 	.word	0x574f4e20
  4030ec:	4f4c4220 	.word	0x4f4c4220
  4030f0:	4e494b43 	.word	0x4e494b43
  4030f4:	000a0d47 	.word	0x000a0d47
  4030f8:	2044454c 	.word	0x2044454c
  4030fc:	53492031 	.word	0x53492031
  403100:	574f4e20 	.word	0x574f4e20
  403104:	4f4c4220 	.word	0x4f4c4220
  403108:	4e494b43 	.word	0x4e494b43
  40310c:	000a0d47 	.word	0x000a0d47
  403110:	2044454c 	.word	0x2044454c
  403114:	53492033 	.word	0x53492033
  403118:	574f4e20 	.word	0x574f4e20
  40311c:	41545320 	.word	0x41545320
  403120:	4e495452 	.word	0x4e495452
  403124:	000a0d47 	.word	0x000a0d47
  403128:	2044454c 	.word	0x2044454c
  40312c:	53492032 	.word	0x53492032
  403130:	574f4e20 	.word	0x574f4e20
  403134:	41545320 	.word	0x41545320
  403138:	4e495452 	.word	0x4e495452
  40313c:	000a0d47 	.word	0x000a0d47
  403140:	2044454c 	.word	0x2044454c
  403144:	53492031 	.word	0x53492031
  403148:	574f4e20 	.word	0x574f4e20
  40314c:	41545320 	.word	0x41545320
  403150:	4e495452 	.word	0x4e495452
  403154:	000a0d47 	.word	0x000a0d47
  403158:	6e69614d 	.word	0x6e69614d
  40315c:	6e6f4320 	.word	0x6e6f4320
  403160:	6c6f7274 	.word	0x6c6f7274
  403164:	20736920 	.word	0x20736920
  403168:	20776f6e 	.word	0x20776f6e
  40316c:	636f6c62 	.word	0x636f6c62
  403170:	676e696b 	.word	0x676e696b
  403174:	000a0d2e 	.word	0x000a0d2e
  403178:	6e69614d 	.word	0x6e69614d
  40317c:	6e6f4320 	.word	0x6e6f4320
  403180:	6c6f7274 	.word	0x6c6f7274
  403184:	20736920 	.word	0x20736920
  403188:	20776f6e 	.word	0x20776f6e
  40318c:	72617473 	.word	0x72617473
  403190:	676e6974 	.word	0x676e6974
  403194:	000a0d2e 	.word	0x000a0d2e
  403198:	2044454c 	.word	0x2044454c
  40319c:	53492033 	.word	0x53492033
  4031a0:	574f4e20 	.word	0x574f4e20
  4031a4:	54434120 	.word	0x54434120
  4031a8:	0d455649 	.word	0x0d455649
  4031ac:	0000000a 	.word	0x0000000a
  4031b0:	2044454c 	.word	0x2044454c
  4031b4:	53492032 	.word	0x53492032
  4031b8:	574f4e20 	.word	0x574f4e20
  4031bc:	54434120 	.word	0x54434120
  4031c0:	0d455649 	.word	0x0d455649
  4031c4:	0000000a 	.word	0x0000000a
  4031c8:	2044454c 	.word	0x2044454c
  4031cc:	53492031 	.word	0x53492031
  4031d0:	574f4e20 	.word	0x574f4e20
  4031d4:	54434120 	.word	0x54434120
  4031d8:	0d455649 	.word	0x0d455649
  4031dc:	0000000a 	.word	0x0000000a
  4031e0:	75657571 	.word	0x75657571
  4031e4:	454c2065 	.word	0x454c2065
  4031e8:	69203344 	.word	0x69203344
  4031ec:	6572636e 	.word	0x6572636e
  4031f0:	0d657361 	.word	0x0d657361
  4031f4:	0000000a 	.word	0x0000000a
  4031f8:	75657571 	.word	0x75657571
  4031fc:	454c2065 	.word	0x454c2065
  403200:	69203244 	.word	0x69203244
  403204:	6572636e 	.word	0x6572636e
  403208:	0d657361 	.word	0x0d657361
  40320c:	0000000a 	.word	0x0000000a
  403210:	75657571 	.word	0x75657571
  403214:	454c2065 	.word	0x454c2065
  403218:	69203144 	.word	0x69203144
  40321c:	6572636e 	.word	0x6572636e
  403220:	0d657361 	.word	0x0d657361
  403224:	0000000a 	.word	0x0000000a
  403228:	75657571 	.word	0x75657571
  40322c:	454c2065 	.word	0x454c2065
  403230:	64203344 	.word	0x64203344
  403234:	65726365 	.word	0x65726365
  403238:	0d657361 	.word	0x0d657361
  40323c:	0000000a 	.word	0x0000000a
  403240:	75657571 	.word	0x75657571
  403244:	454c2065 	.word	0x454c2065
  403248:	64203244 	.word	0x64203244
  40324c:	65726365 	.word	0x65726365
  403250:	0d657361 	.word	0x0d657361
  403254:	0000000a 	.word	0x0000000a
  403258:	75657571 	.word	0x75657571
  40325c:	454c2065 	.word	0x454c2065
  403260:	64203144 	.word	0x64203144
  403264:	65726365 	.word	0x65726365
  403268:	0d657361 	.word	0x0d657361
  40326c:	0000000a 	.word	0x0000000a
  403270:	732f2e2e 	.word	0x732f2e2e
  403274:	6d2f6372 	.word	0x6d2f6372
  403278:	2e6e6961 	.word	0x2e6e6961
  40327c:	00000063 	.word	0x00000063

00403280 <_global_impure_ptr>:
  403280:	20000048                                H.. 

00403284 <_init>:
  403284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403286:	bf00      	nop
  403288:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40328a:	bc08      	pop	{r3}
  40328c:	469e      	mov	lr, r3
  40328e:	4770      	bx	lr

00403290 <__init_array_start>:
  403290:	00402e79 	.word	0x00402e79

00403294 <__frame_dummy_init_array_entry>:
  403294:	0040011d                                ..@.

00403298 <_fini>:
  403298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40329a:	bf00      	nop
  40329c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40329e:	bc08      	pop	{r3}
  4032a0:	469e      	mov	lr, r3
  4032a2:	4770      	bx	lr

004032a4 <__fini_array_start>:
  4032a4:	004000f9 	.word	0x004000f9
