
Lab05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035a4  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  004035a4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002cc  2000043c  004039e0  0002043c  2**2
                  ALLOC
  3 .stack        00003000  20000708  00403cac  0002043c  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002046a  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001a1bb  00000000  00000000  000204c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003737  00000000  00000000  0003a67e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007f2a  00000000  00000000  0003ddb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ac8  00000000  00000000  00045cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000bb8  00000000  00000000  000467a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019494  00000000  00000000  0004735f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ca6e  00000000  00000000  000607f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006a80d  00000000  00000000  0006d261  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001cc0  00000000  00000000  000d7a70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	08 37 00 20 61 2b 40 00 5d 2b 40 00 5d 2b 40 00     .7. a+@.]+@.]+@.
  400010:	5d 2b 40 00 5d 2b 40 00 5d 2b 40 00 00 00 00 00     ]+@.]+@.]+@.....
	...
  40002c:	a1 06 40 00 5d 2b 40 00 00 00 00 00 41 07 40 00     ..@.]+@.....A.@.
  40003c:	a5 07 40 00 5d 2b 40 00 5d 2b 40 00 5d 2b 40 00     ..@.]+@.]+@.]+@.
  40004c:	5d 2b 40 00 5d 2b 40 00 5d 2b 40 00 5d 2b 40 00     ]+@.]+@.]+@.]+@.
  40005c:	fd 28 40 00 5d 2b 40 00 4d 04 40 00 61 04 40 00     .(@.]+@.M.@.a.@.
  40006c:	75 04 40 00 89 04 40 00 9d 04 40 00 5d 2b 40 00     u.@...@...@.]+@.
  40007c:	5d 2b 40 00 5d 2b 40 00 5d 2b 40 00 5d 2b 40 00     ]+@.]+@.]+@.]+@.
  40008c:	5d 2b 40 00 5d 2b 40 00 5d 2b 40 00 5d 2b 40 00     ]+@.]+@.]+@.]+@.
  40009c:	5d 2b 40 00 5d 2b 40 00 5d 2b 40 00 5d 2b 40 00     ]+@.]+@.]+@.]+@.
  4000ac:	5d 2b 40 00 5d 2b 40 00 5d 2b 40 00 5d 2b 40 00     ]+@.]+@.]+@.]+@.
  4000bc:	5d 2b 40 00 5d 2b 40 00 5d 2b 40 00 5d 2b 40 00     ]+@.]+@.]+@.]+@.
  4000cc:	5d 2b 40 00 5d 2b 40 00 5d 2b 40 00 5d 2b 40 00     ]+@.]+@.]+@.]+@.
  4000dc:	5d 2b 40 00 5d 2b 40 00 5d 2b 40 00 5d 2b 40 00     ]+@.]+@.]+@.]+@.
  4000ec:	5d 2b 40 00 5d 2b 40 00 5d 2b 40 00                 ]+@.]+@.]+@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	2000043c 	.word	0x2000043c
  400114:	00000000 	.word	0x00000000
  400118:	004035a4 	.word	0x004035a4

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	004035a4 	.word	0x004035a4
  400158:	20000440 	.word	0x20000440
  40015c:	004035a4 	.word	0x004035a4
  400160:	00000000 	.word	0x00000000

00400164 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400164:	b90a      	cbnz	r2, 40016a <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400166:	6601      	str	r1, [r0, #96]	; 0x60
  400168:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40016a:	6641      	str	r1, [r0, #100]	; 0x64
  40016c:	4770      	bx	lr

0040016e <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  40016e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400172:	0053      	lsls	r3, r2, #1
  400174:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400178:	fbb2 f2f3 	udiv	r2, r2, r3
  40017c:	3a01      	subs	r2, #1
  40017e:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400182:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400186:	4770      	bx	lr

00400188 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400188:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40018a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40018e:	d039      	beq.n	400204 <pio_set_peripheral+0x7c>
  400190:	d813      	bhi.n	4001ba <pio_set_peripheral+0x32>
  400192:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400196:	d025      	beq.n	4001e4 <pio_set_peripheral+0x5c>
  400198:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40019c:	d10a      	bne.n	4001b4 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40019e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4001a0:	4313      	orrs	r3, r2
  4001a2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4001a4:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4001a6:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4001a8:	ea21 0102 	bic.w	r1, r1, r2
  4001ac:	400b      	ands	r3, r1
  4001ae:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4001b0:	6042      	str	r2, [r0, #4]
  4001b2:	4770      	bx	lr
	switch (ul_type) {
  4001b4:	2900      	cmp	r1, #0
  4001b6:	d1fb      	bne.n	4001b0 <pio_set_peripheral+0x28>
  4001b8:	4770      	bx	lr
  4001ba:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4001be:	d020      	beq.n	400202 <pio_set_peripheral+0x7a>
  4001c0:	d809      	bhi.n	4001d6 <pio_set_peripheral+0x4e>
  4001c2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4001c6:	d1f3      	bne.n	4001b0 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4001c8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4001ca:	4313      	orrs	r3, r2
  4001cc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4001ce:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4001d0:	4313      	orrs	r3, r2
  4001d2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4001d4:	e7ec      	b.n	4001b0 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4001d6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4001da:	d012      	beq.n	400202 <pio_set_peripheral+0x7a>
  4001dc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4001e0:	d00f      	beq.n	400202 <pio_set_peripheral+0x7a>
  4001e2:	e7e5      	b.n	4001b0 <pio_set_peripheral+0x28>
{
  4001e4:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4001e6:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4001e8:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4001ea:	43d3      	mvns	r3, r2
  4001ec:	401c      	ands	r4, r3
  4001ee:	4021      	ands	r1, r4
  4001f0:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4001f2:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4001f4:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4001f6:	4023      	ands	r3, r4
  4001f8:	400b      	ands	r3, r1
  4001fa:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4001fc:	6042      	str	r2, [r0, #4]
}
  4001fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  400202:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400204:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400206:	6f03      	ldr	r3, [r0, #112]	; 0x70
  400208:	ea21 0102 	bic.w	r1, r1, r2
  40020c:	400b      	ands	r3, r1
  40020e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400210:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400212:	4313      	orrs	r3, r2
  400214:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400216:	e7cb      	b.n	4001b0 <pio_set_peripheral+0x28>

00400218 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400218:	f012 0f10 	tst.w	r2, #16
  40021c:	d012      	beq.n	400244 <pio_configure_interrupt+0x2c>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40021e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400222:	f012 0f20 	tst.w	r2, #32
  400226:	d007      	beq.n	400238 <pio_configure_interrupt+0x20>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400228:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40022c:	f012 0f40 	tst.w	r2, #64	; 0x40
  400230:	d005      	beq.n	40023e <pio_configure_interrupt+0x26>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400232:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400236:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400238:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  40023c:	e7f6      	b.n	40022c <pio_configure_interrupt+0x14>
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  40023e:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400242:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  400244:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400248:	4770      	bx	lr

0040024a <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  40024a:	6401      	str	r1, [r0, #64]	; 0x40
  40024c:	4770      	bx	lr

0040024e <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40024e:	6441      	str	r1, [r0, #68]	; 0x44
  400250:	4770      	bx	lr
	...

00400254 <pio_set_input>:
{
  400254:	b570      	push	{r4, r5, r6, lr}
  400256:	4604      	mov	r4, r0
  400258:	460d      	mov	r5, r1
  40025a:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
  40025c:	4b0d      	ldr	r3, [pc, #52]	; (400294 <pio_set_input+0x40>)
  40025e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400260:	f006 0201 	and.w	r2, r6, #1
  400264:	4629      	mov	r1, r5
  400266:	4620      	mov	r0, r4
  400268:	4b0b      	ldr	r3, [pc, #44]	; (400298 <pio_set_input+0x44>)
  40026a:	4798      	blx	r3
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40026c:	f016 0f0a 	tst.w	r6, #10
  400270:	d009      	beq.n	400286 <pio_set_input+0x32>
		p_pio->PIO_IFER = ul_mask;
  400272:	6225      	str	r5, [r4, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400274:	f016 0f02 	tst.w	r6, #2
  400278:	d107      	bne.n	40028a <pio_set_input+0x36>
		if (ul_attribute & PIO_DEBOUNCE) {
  40027a:	f016 0f08 	tst.w	r6, #8
  40027e:	d006      	beq.n	40028e <pio_set_input+0x3a>
			p_pio->PIO_IFSCER = ul_mask;
  400280:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  400284:	e003      	b.n	40028e <pio_set_input+0x3a>
		p_pio->PIO_IFDR = ul_mask;
  400286:	6265      	str	r5, [r4, #36]	; 0x24
  400288:	e7f4      	b.n	400274 <pio_set_input+0x20>
		p_pio->PIO_IFSCDR = ul_mask;
  40028a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40028e:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
  400290:	6025      	str	r5, [r4, #0]
  400292:	bd70      	pop	{r4, r5, r6, pc}
  400294:	0040024f 	.word	0x0040024f
  400298:	00400165 	.word	0x00400165

0040029c <pio_set_output>:
{
  40029c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40029e:	4604      	mov	r4, r0
  4002a0:	460d      	mov	r5, r1
  4002a2:	4616      	mov	r6, r2
  4002a4:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
  4002a6:	4b09      	ldr	r3, [pc, #36]	; (4002cc <pio_set_output+0x30>)
  4002a8:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4002aa:	9a06      	ldr	r2, [sp, #24]
  4002ac:	4629      	mov	r1, r5
  4002ae:	4620      	mov	r0, r4
  4002b0:	4b07      	ldr	r3, [pc, #28]	; (4002d0 <pio_set_output+0x34>)
  4002b2:	4798      	blx	r3
	if (ul_multidrive_enable) {
  4002b4:	b12f      	cbz	r7, 4002c2 <pio_set_output+0x26>
		p_pio->PIO_MDER = ul_mask;
  4002b6:	6525      	str	r5, [r4, #80]	; 0x50
	if (ul_default_level) {
  4002b8:	b92e      	cbnz	r6, 4002c6 <pio_set_output+0x2a>
		p_pio->PIO_CODR = ul_mask;
  4002ba:	6365      	str	r5, [r4, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4002bc:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
  4002be:	6025      	str	r5, [r4, #0]
  4002c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p_pio->PIO_MDDR = ul_mask;
  4002c2:	6565      	str	r5, [r4, #84]	; 0x54
  4002c4:	e7f8      	b.n	4002b8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4002c6:	6325      	str	r5, [r4, #48]	; 0x30
  4002c8:	e7f8      	b.n	4002bc <pio_set_output+0x20>
  4002ca:	bf00      	nop
  4002cc:	0040024f 	.word	0x0040024f
  4002d0:	00400165 	.word	0x00400165

004002d4 <pio_configure>:
{
  4002d4:	b570      	push	{r4, r5, r6, lr}
  4002d6:	b082      	sub	sp, #8
  4002d8:	4604      	mov	r4, r0
  4002da:	4615      	mov	r5, r2
  4002dc:	461e      	mov	r6, r3
	switch (ul_type) {
  4002de:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4002e2:	d014      	beq.n	40030e <pio_configure+0x3a>
  4002e4:	d90a      	bls.n	4002fc <pio_configure+0x28>
  4002e6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4002ea:	d023      	beq.n	400334 <pio_configure+0x60>
  4002ec:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4002f0:	d020      	beq.n	400334 <pio_configure+0x60>
  4002f2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4002f6:	d017      	beq.n	400328 <pio_configure+0x54>
		return 0;
  4002f8:	2000      	movs	r0, #0
  4002fa:	e013      	b.n	400324 <pio_configure+0x50>
	switch (ul_type) {
  4002fc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400300:	d005      	beq.n	40030e <pio_configure+0x3a>
  400302:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400306:	d002      	beq.n	40030e <pio_configure+0x3a>
  400308:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40030c:	d1f4      	bne.n	4002f8 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40030e:	462a      	mov	r2, r5
  400310:	4620      	mov	r0, r4
  400312:	4b10      	ldr	r3, [pc, #64]	; (400354 <pio_configure+0x80>)
  400314:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  400316:	f006 0201 	and.w	r2, r6, #1
  40031a:	4629      	mov	r1, r5
  40031c:	4620      	mov	r0, r4
  40031e:	4b0e      	ldr	r3, [pc, #56]	; (400358 <pio_configure+0x84>)
  400320:	4798      	blx	r3
	return 1;
  400322:	2001      	movs	r0, #1
}
  400324:	b002      	add	sp, #8
  400326:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400328:	461a      	mov	r2, r3
  40032a:	4629      	mov	r1, r5
  40032c:	4b0b      	ldr	r3, [pc, #44]	; (40035c <pio_configure+0x88>)
  40032e:	4798      	blx	r3
	return 1;
  400330:	2001      	movs	r0, #1
		break;
  400332:	e7f7      	b.n	400324 <pio_configure+0x50>
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  400334:	f006 0301 	and.w	r3, r6, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400338:	9300      	str	r3, [sp, #0]
  40033a:	f3c6 0380 	ubfx	r3, r6, #2, #1
  40033e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400342:	bf14      	ite	ne
  400344:	2200      	movne	r2, #0
  400346:	2201      	moveq	r2, #1
  400348:	4629      	mov	r1, r5
  40034a:	4620      	mov	r0, r4
  40034c:	4c04      	ldr	r4, [pc, #16]	; (400360 <pio_configure+0x8c>)
  40034e:	47a0      	blx	r4
	return 1;
  400350:	2001      	movs	r0, #1
		break;
  400352:	e7e7      	b.n	400324 <pio_configure+0x50>
  400354:	00400189 	.word	0x00400189
  400358:	00400165 	.word	0x00400165
  40035c:	00400255 	.word	0x00400255
  400360:	0040029d 	.word	0x0040029d

00400364 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400364:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400366:	4770      	bx	lr

00400368 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400368:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40036a:	4770      	bx	lr

0040036c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40036c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400370:	4607      	mov	r7, r0
  400372:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400374:	4b16      	ldr	r3, [pc, #88]	; (4003d0 <pio_handler_process+0x64>)
  400376:	4798      	blx	r3
  400378:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40037a:	4638      	mov	r0, r7
  40037c:	4b15      	ldr	r3, [pc, #84]	; (4003d4 <pio_handler_process+0x68>)
  40037e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400380:	4005      	ands	r5, r0
  400382:	d122      	bne.n	4003ca <pio_handler_process+0x5e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400384:	4b14      	ldr	r3, [pc, #80]	; (4003d8 <pio_handler_process+0x6c>)
  400386:	681b      	ldr	r3, [r3, #0]
  400388:	b123      	cbz	r3, 400394 <pio_handler_process+0x28>
		if (pio_capture_handler) {
  40038a:	4b14      	ldr	r3, [pc, #80]	; (4003dc <pio_handler_process+0x70>)
  40038c:	681b      	ldr	r3, [r3, #0]
  40038e:	b10b      	cbz	r3, 400394 <pio_handler_process+0x28>
			pio_capture_handler(p_pio);
  400390:	4638      	mov	r0, r7
  400392:	4798      	blx	r3
  400394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			i++;
  400398:	3401      	adds	r4, #1
			if (i >= MAX_INTERRUPT_SOURCES) {
  40039a:	2c06      	cmp	r4, #6
  40039c:	d8f2      	bhi.n	400384 <pio_handler_process+0x18>
		while (status != 0) {
  40039e:	2d00      	cmp	r5, #0
  4003a0:	d0f0      	beq.n	400384 <pio_handler_process+0x18>
			if (gs_interrupt_sources[i].id == ul_id) {
  4003a2:	0123      	lsls	r3, r4, #4
  4003a4:	4a0e      	ldr	r2, [pc, #56]	; (4003e0 <pio_handler_process+0x74>)
  4003a6:	58d0      	ldr	r0, [r2, r3]
  4003a8:	42b0      	cmp	r0, r6
  4003aa:	d1f5      	bne.n	400398 <pio_handler_process+0x2c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4003ac:	eb02 1304 	add.w	r3, r2, r4, lsl #4
  4003b0:	6859      	ldr	r1, [r3, #4]
  4003b2:	420d      	tst	r5, r1
  4003b4:	d0f0      	beq.n	400398 <pio_handler_process+0x2c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4003b6:	eb02 1804 	add.w	r8, r2, r4, lsl #4
  4003ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
  4003be:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4003c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4003c4:	ea25 0503 	bic.w	r5, r5, r3
  4003c8:	e7e6      	b.n	400398 <pio_handler_process+0x2c>
  4003ca:	2400      	movs	r4, #0
  4003cc:	e7e7      	b.n	40039e <pio_handler_process+0x32>
  4003ce:	bf00      	nop
  4003d0:	00400365 	.word	0x00400365
  4003d4:	00400369 	.word	0x00400369
  4003d8:	20000684 	.word	0x20000684
  4003dc:	200004cc 	.word	0x200004cc
  4003e0:	20000458 	.word	0x20000458

004003e4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4003e6:	4c16      	ldr	r4, [pc, #88]	; (400440 <pio_handler_set+0x5c>)
  4003e8:	6827      	ldr	r7, [r4, #0]
  4003ea:	2f06      	cmp	r7, #6
  4003ec:	d826      	bhi.n	40043c <pio_handler_set+0x58>
  4003ee:	2400      	movs	r4, #0
  4003f0:	e001      	b.n	4003f6 <pio_handler_set+0x12>
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4003f2:	3401      	adds	r4, #1
  4003f4:	b2e4      	uxtb	r4, r4
  4003f6:	46a4      	mov	ip, r4
  4003f8:	42a7      	cmp	r7, r4
  4003fa:	d30a      	bcc.n	400412 <pio_handler_set+0x2e>
		pSource = &(gs_interrupt_sources[i]);
  4003fc:	4e11      	ldr	r6, [pc, #68]	; (400444 <pio_handler_set+0x60>)
  4003fe:	0125      	lsls	r5, r4, #4
  400400:	eb06 0e05 	add.w	lr, r6, r5
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400404:	5975      	ldr	r5, [r6, r5]
  400406:	428d      	cmp	r5, r1
  400408:	d1f3      	bne.n	4003f2 <pio_handler_set+0xe>
  40040a:	f8de 5004 	ldr.w	r5, [lr, #4]
  40040e:	4295      	cmp	r5, r2
  400410:	d1ef      	bne.n	4003f2 <pio_handler_set+0xe>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400412:	f8ce 1000 	str.w	r1, [lr]
	pSource->mask = ul_mask;
  400416:	f8ce 2004 	str.w	r2, [lr, #4]
	pSource->attr = ul_attr;
  40041a:	f8ce 3008 	str.w	r3, [lr, #8]
	pSource->handler = p_handler;
  40041e:	9906      	ldr	r1, [sp, #24]
  400420:	f8ce 100c 	str.w	r1, [lr, #12]
	if (i == gs_ul_nb_sources + 1) {
  400424:	3701      	adds	r7, #1
  400426:	45bc      	cmp	ip, r7
  400428:	d005      	beq.n	400436 <pio_handler_set+0x52>
  40042a:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40042c:	461a      	mov	r2, r3
  40042e:	4b06      	ldr	r3, [pc, #24]	; (400448 <pio_handler_set+0x64>)
  400430:	4798      	blx	r3

	return 0;
  400432:	2000      	movs	r0, #0
  400434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400436:	4902      	ldr	r1, [pc, #8]	; (400440 <pio_handler_set+0x5c>)
  400438:	600f      	str	r7, [r1, #0]
  40043a:	e7f6      	b.n	40042a <pio_handler_set+0x46>
		return 1;
  40043c:	2001      	movs	r0, #1
}
  40043e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400440:	200004c8 	.word	0x200004c8
  400444:	20000458 	.word	0x20000458
  400448:	00400219 	.word	0x00400219

0040044c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40044c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40044e:	2109      	movs	r1, #9
  400450:	4801      	ldr	r0, [pc, #4]	; (400458 <PIOA_Handler+0xc>)
  400452:	4b02      	ldr	r3, [pc, #8]	; (40045c <PIOA_Handler+0x10>)
  400454:	4798      	blx	r3
  400456:	bd08      	pop	{r3, pc}
  400458:	400e0e00 	.word	0x400e0e00
  40045c:	0040036d 	.word	0x0040036d

00400460 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400460:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400462:	210a      	movs	r1, #10
  400464:	4801      	ldr	r0, [pc, #4]	; (40046c <PIOB_Handler+0xc>)
  400466:	4b02      	ldr	r3, [pc, #8]	; (400470 <PIOB_Handler+0x10>)
  400468:	4798      	blx	r3
  40046a:	bd08      	pop	{r3, pc}
  40046c:	400e1000 	.word	0x400e1000
  400470:	0040036d 	.word	0x0040036d

00400474 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400474:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400476:	210b      	movs	r1, #11
  400478:	4801      	ldr	r0, [pc, #4]	; (400480 <PIOC_Handler+0xc>)
  40047a:	4b02      	ldr	r3, [pc, #8]	; (400484 <PIOC_Handler+0x10>)
  40047c:	4798      	blx	r3
  40047e:	bd08      	pop	{r3, pc}
  400480:	400e1200 	.word	0x400e1200
  400484:	0040036d 	.word	0x0040036d

00400488 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400488:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40048a:	210c      	movs	r1, #12
  40048c:	4801      	ldr	r0, [pc, #4]	; (400494 <PIOD_Handler+0xc>)
  40048e:	4b02      	ldr	r3, [pc, #8]	; (400498 <PIOD_Handler+0x10>)
  400490:	4798      	blx	r3
  400492:	bd08      	pop	{r3, pc}
  400494:	400e1400 	.word	0x400e1400
  400498:	0040036d 	.word	0x0040036d

0040049c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40049c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40049e:	210d      	movs	r1, #13
  4004a0:	4801      	ldr	r0, [pc, #4]	; (4004a8 <PIOE_Handler+0xc>)
  4004a2:	4b02      	ldr	r3, [pc, #8]	; (4004ac <PIOE_Handler+0x10>)
  4004a4:	4798      	blx	r3
  4004a6:	bd08      	pop	{r3, pc}
  4004a8:	400e1600 	.word	0x400e1600
  4004ac:	0040036d 	.word	0x0040036d

004004b0 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  4004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4004b2:	4606      	mov	r6, r0
  4004b4:	460c      	mov	r4, r1
  4004b6:	4615      	mov	r5, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  4004b8:	4b22      	ldr	r3, [pc, #136]	; (400544 <pio_handler_set_priority+0x94>)
  4004ba:	4798      	blx	r3
  4004bc:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  4004be:	f04f 31ff 	mov.w	r1, #4294967295
  4004c2:	4630      	mov	r0, r6
  4004c4:	4b20      	ldr	r3, [pc, #128]	; (400548 <pio_handler_set_priority+0x98>)
  4004c6:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  4004c8:	4630      	mov	r0, r6
  4004ca:	4b20      	ldr	r3, [pc, #128]	; (40054c <pio_handler_set_priority+0x9c>)
  4004cc:	4798      	blx	r3
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4004ce:	2c00      	cmp	r4, #0
  4004d0:	db0c      	blt.n	4004ec <pio_handler_set_priority+0x3c>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4004d2:	0963      	lsrs	r3, r4, #5
  4004d4:	f004 011f 	and.w	r1, r4, #31
  4004d8:	2201      	movs	r2, #1
  4004da:	408a      	lsls	r2, r1
  4004dc:	3320      	adds	r3, #32
  4004de:	491c      	ldr	r1, [pc, #112]	; (400550 <pio_handler_set_priority+0xa0>)
  4004e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4004e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4004e8:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  4004ec:	2c00      	cmp	r4, #0
  4004ee:	db08      	blt.n	400502 <pio_handler_set_priority+0x52>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4004f0:	0963      	lsrs	r3, r4, #5
  4004f2:	f004 011f 	and.w	r1, r4, #31
  4004f6:	2201      	movs	r2, #1
  4004f8:	408a      	lsls	r2, r1
  4004fa:	3360      	adds	r3, #96	; 0x60
  4004fc:	4914      	ldr	r1, [pc, #80]	; (400550 <pio_handler_set_priority+0xa0>)
  4004fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  400502:	2c00      	cmp	r4, #0
  400504:	db17      	blt.n	400536 <pio_handler_set_priority+0x86>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400506:	012d      	lsls	r5, r5, #4
  400508:	b2ed      	uxtb	r5, r5
  40050a:	f104 4360 	add.w	r3, r4, #3758096384	; 0xe0000000
  40050e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  400512:	f883 5300 	strb.w	r5, [r3, #768]	; 0x300
  if ((int32_t)(IRQn) >= 0)
  400516:	2c00      	cmp	r4, #0
  400518:	db08      	blt.n	40052c <pio_handler_set_priority+0x7c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40051a:	0962      	lsrs	r2, r4, #5
  40051c:	f004 041f 	and.w	r4, r4, #31
  400520:	2301      	movs	r3, #1
  400522:	fa03 f404 	lsl.w	r4, r3, r4
  400526:	4b0a      	ldr	r3, [pc, #40]	; (400550 <pio_handler_set_priority+0xa0>)
  400528:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  40052c:	4639      	mov	r1, r7
  40052e:	4630      	mov	r0, r6
  400530:	4b08      	ldr	r3, [pc, #32]	; (400554 <pio_handler_set_priority+0xa4>)
  400532:	4798      	blx	r3
  400534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400536:	f004 020f 	and.w	r2, r4, #15
  40053a:	012d      	lsls	r5, r5, #4
  40053c:	b2ed      	uxtb	r5, r5
  40053e:	4b06      	ldr	r3, [pc, #24]	; (400558 <pio_handler_set_priority+0xa8>)
  400540:	549d      	strb	r5, [r3, r2]
  400542:	e7e8      	b.n	400516 <pio_handler_set_priority+0x66>
  400544:	00400369 	.word	0x00400369
  400548:	0040024f 	.word	0x0040024f
  40054c:	00400365 	.word	0x00400365
  400550:	e000e100 	.word	0xe000e100
  400554:	0040024b 	.word	0x0040024b
  400558:	e000ed14 	.word	0xe000ed14

0040055c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40055c:	f100 0308 	add.w	r3, r0, #8
  400560:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400562:	f04f 32ff 	mov.w	r2, #4294967295
  400566:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400568:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40056a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  40056c:	2300      	movs	r3, #0
  40056e:	6003      	str	r3, [r0, #0]
  400570:	4770      	bx	lr

00400572 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
  400572:	2300      	movs	r3, #0
  400574:	6103      	str	r3, [r0, #16]
  400576:	4770      	bx	lr

00400578 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400578:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  40057a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  40057c:	689a      	ldr	r2, [r3, #8]
  40057e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400580:	689a      	ldr	r2, [r3, #8]
  400582:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400584:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
  400586:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400588:	6803      	ldr	r3, [r0, #0]
  40058a:	3301      	adds	r3, #1
  40058c:	6003      	str	r3, [r0, #0]
  40058e:	4770      	bx	lr

00400590 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400590:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400592:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400594:	f1b5 3fff 	cmp.w	r5, #4294967295
  400598:	d002      	beq.n	4005a0 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  40059a:	f100 0208 	add.w	r2, r0, #8
  40059e:	e002      	b.n	4005a6 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4005a0:	6902      	ldr	r2, [r0, #16]
  4005a2:	e004      	b.n	4005ae <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
  4005a4:	461a      	mov	r2, r3
  4005a6:	6853      	ldr	r3, [r2, #4]
  4005a8:	681c      	ldr	r4, [r3, #0]
  4005aa:	42a5      	cmp	r5, r4
  4005ac:	d2fa      	bcs.n	4005a4 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4005ae:	6853      	ldr	r3, [r2, #4]
  4005b0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4005b2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4005b4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4005b6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
  4005b8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4005ba:	6803      	ldr	r3, [r0, #0]
  4005bc:	3301      	adds	r3, #1
  4005be:	6003      	str	r3, [r0, #0]
}
  4005c0:	bc30      	pop	{r4, r5}
  4005c2:	4770      	bx	lr

004005c4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
  4005c4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4005c6:	6842      	ldr	r2, [r0, #4]
  4005c8:	6881      	ldr	r1, [r0, #8]
  4005ca:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4005cc:	6882      	ldr	r2, [r0, #8]
  4005ce:	6841      	ldr	r1, [r0, #4]
  4005d0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4005d2:	685a      	ldr	r2, [r3, #4]
  4005d4:	4290      	cmp	r0, r2
  4005d6:	d006      	beq.n	4005e6 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
  4005d8:	2200      	movs	r2, #0
  4005da:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4005dc:	681a      	ldr	r2, [r3, #0]
  4005de:	3a01      	subs	r2, #1
  4005e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  4005e2:	6818      	ldr	r0, [r3, #0]
}
  4005e4:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4005e6:	6882      	ldr	r2, [r0, #8]
  4005e8:	605a      	str	r2, [r3, #4]
  4005ea:	e7f5      	b.n	4005d8 <uxListRemove+0x14>

004005ec <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
  4005ec:	4808      	ldr	r0, [pc, #32]	; (400610 <prvPortStartFirstTask+0x24>)
  4005ee:	6800      	ldr	r0, [r0, #0]
  4005f0:	6800      	ldr	r0, [r0, #0]
  4005f2:	f380 8808 	msr	MSP, r0
  4005f6:	f04f 0000 	mov.w	r0, #0
  4005fa:	f380 8814 	msr	CONTROL, r0
  4005fe:	b662      	cpsie	i
  400600:	b661      	cpsie	f
  400602:	f3bf 8f4f 	dsb	sy
  400606:	f3bf 8f6f 	isb	sy
  40060a:	df00      	svc	0
  40060c:	bf00      	nop
  40060e:	0000      	.short	0x0000
  400610:	e000ed08 	.word	0xe000ed08

00400614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400624 <vPortEnableVFP+0x10>
  400618:	6801      	ldr	r1, [r0, #0]
  40061a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40061e:	6001      	str	r1, [r0, #0]
  400620:	4770      	bx	lr
  400622:	0000      	.short	0x0000
  400624:	e000ed88 	.word	0xe000ed88

00400628 <prvTaskExitError>:
{
  400628:	b500      	push	{lr}
  40062a:	b083      	sub	sp, #12
volatile uint32_t ulDummy = 0;
  40062c:	2300      	movs	r3, #0
  40062e:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
  400630:	4b0b      	ldr	r3, [pc, #44]	; (400660 <prvTaskExitError+0x38>)
  400632:	681b      	ldr	r3, [r3, #0]
  400634:	f1b3 3fff 	cmp.w	r3, #4294967295
  400638:	d003      	beq.n	400642 <prvTaskExitError+0x1a>
  40063a:	21e3      	movs	r1, #227	; 0xe3
  40063c:	4809      	ldr	r0, [pc, #36]	; (400664 <prvTaskExitError+0x3c>)
  40063e:	4b0a      	ldr	r3, [pc, #40]	; (400668 <prvTaskExitError+0x40>)
  400640:	4798      	blx	r3

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400642:	f04f 0350 	mov.w	r3, #80	; 0x50
  400646:	f383 8811 	msr	BASEPRI, r3
  40064a:	f3bf 8f6f 	isb	sy
  40064e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
  400652:	9b01      	ldr	r3, [sp, #4]
  400654:	2b00      	cmp	r3, #0
  400656:	d0fc      	beq.n	400652 <prvTaskExitError+0x2a>
}
  400658:	b003      	add	sp, #12
  40065a:	f85d fb04 	ldr.w	pc, [sp], #4
  40065e:	bf00      	nop
  400660:	20000000 	.word	0x20000000
  400664:	004032b4 	.word	0x004032b4
  400668:	00402f21 	.word	0x00402f21

0040066c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  40066c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400670:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  400674:	f021 0101 	bic.w	r1, r1, #1
  400678:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  40067c:	4b05      	ldr	r3, [pc, #20]	; (400694 <pxPortInitialiseStack+0x28>)
  40067e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400682:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  400686:	f06f 0302 	mvn.w	r3, #2
  40068a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40068e:	3844      	subs	r0, #68	; 0x44
  400690:	4770      	bx	lr
  400692:	bf00      	nop
  400694:	00400629 	.word	0x00400629
	...

004006a0 <SVC_Handler>:
	__asm volatile (
  4006a0:	4b07      	ldr	r3, [pc, #28]	; (4006c0 <pxCurrentTCBConst2>)
  4006a2:	6819      	ldr	r1, [r3, #0]
  4006a4:	6808      	ldr	r0, [r1, #0]
  4006a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006aa:	f380 8809 	msr	PSP, r0
  4006ae:	f3bf 8f6f 	isb	sy
  4006b2:	f04f 0000 	mov.w	r0, #0
  4006b6:	f380 8811 	msr	BASEPRI, r0
  4006ba:	4770      	bx	lr
  4006bc:	f3af 8000 	nop.w

004006c0 <pxCurrentTCBConst2>:
  4006c0:	200004f0 	.word	0x200004f0

004006c4 <vPortEnterCritical>:
{
  4006c4:	b508      	push	{r3, lr}
  4006c6:	f04f 0350 	mov.w	r3, #80	; 0x50
  4006ca:	f383 8811 	msr	BASEPRI, r3
  4006ce:	f3bf 8f6f 	isb	sy
  4006d2:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
  4006d6:	4a09      	ldr	r2, [pc, #36]	; (4006fc <vPortEnterCritical+0x38>)
  4006d8:	6813      	ldr	r3, [r2, #0]
  4006da:	3301      	adds	r3, #1
  4006dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4006de:	2b01      	cmp	r3, #1
  4006e0:	d000      	beq.n	4006e4 <vPortEnterCritical+0x20>
  4006e2:	bd08      	pop	{r3, pc}
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4006e4:	4b06      	ldr	r3, [pc, #24]	; (400700 <vPortEnterCritical+0x3c>)
  4006e6:	681b      	ldr	r3, [r3, #0]
  4006e8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4006ec:	d0f9      	beq.n	4006e2 <vPortEnterCritical+0x1e>
  4006ee:	f240 119f 	movw	r1, #415	; 0x19f
  4006f2:	4804      	ldr	r0, [pc, #16]	; (400704 <vPortEnterCritical+0x40>)
  4006f4:	4b04      	ldr	r3, [pc, #16]	; (400708 <vPortEnterCritical+0x44>)
  4006f6:	4798      	blx	r3
}
  4006f8:	e7f3      	b.n	4006e2 <vPortEnterCritical+0x1e>
  4006fa:	bf00      	nop
  4006fc:	20000000 	.word	0x20000000
  400700:	e000ed04 	.word	0xe000ed04
  400704:	004032b4 	.word	0x004032b4
  400708:	00402f21 	.word	0x00402f21

0040070c <vPortExitCritical>:
{
  40070c:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
  40070e:	4b08      	ldr	r3, [pc, #32]	; (400730 <vPortExitCritical+0x24>)
  400710:	681b      	ldr	r3, [r3, #0]
  400712:	b13b      	cbz	r3, 400724 <vPortExitCritical+0x18>
	uxCriticalNesting--;
  400714:	4a06      	ldr	r2, [pc, #24]	; (400730 <vPortExitCritical+0x24>)
  400716:	6813      	ldr	r3, [r2, #0]
  400718:	3b01      	subs	r3, #1
  40071a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40071c:	b90b      	cbnz	r3, 400722 <vPortExitCritical+0x16>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  40071e:	f383 8811 	msr	BASEPRI, r3
  400722:	bd08      	pop	{r3, pc}
	configASSERT( uxCriticalNesting );
  400724:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
  400728:	4802      	ldr	r0, [pc, #8]	; (400734 <vPortExitCritical+0x28>)
  40072a:	4b03      	ldr	r3, [pc, #12]	; (400738 <vPortExitCritical+0x2c>)
  40072c:	4798      	blx	r3
  40072e:	e7f1      	b.n	400714 <vPortExitCritical+0x8>
  400730:	20000000 	.word	0x20000000
  400734:	004032b4 	.word	0x004032b4
  400738:	00402f21 	.word	0x00402f21
  40073c:	00000000 	.word	0x00000000

00400740 <PendSV_Handler>:
	__asm volatile
  400740:	f3ef 8009 	mrs	r0, PSP
  400744:	f3bf 8f6f 	isb	sy
  400748:	4b15      	ldr	r3, [pc, #84]	; (4007a0 <pxCurrentTCBConst>)
  40074a:	681a      	ldr	r2, [r3, #0]
  40074c:	f01e 0f10 	tst.w	lr, #16
  400750:	bf08      	it	eq
  400752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40075a:	6010      	str	r0, [r2, #0]
  40075c:	e92d 0009 	stmdb	sp!, {r0, r3}
  400760:	f04f 0050 	mov.w	r0, #80	; 0x50
  400764:	f380 8811 	msr	BASEPRI, r0
  400768:	f3bf 8f4f 	dsb	sy
  40076c:	f3bf 8f6f 	isb	sy
  400770:	f001 f9ec 	bl	401b4c <vTaskSwitchContext>
  400774:	f04f 0000 	mov.w	r0, #0
  400778:	f380 8811 	msr	BASEPRI, r0
  40077c:	bc09      	pop	{r0, r3}
  40077e:	6819      	ldr	r1, [r3, #0]
  400780:	6808      	ldr	r0, [r1, #0]
  400782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400786:	f01e 0f10 	tst.w	lr, #16
  40078a:	bf08      	it	eq
  40078c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400790:	f380 8809 	msr	PSP, r0
  400794:	f3bf 8f6f 	isb	sy
  400798:	4770      	bx	lr
  40079a:	bf00      	nop
  40079c:	f3af 8000 	nop.w

004007a0 <pxCurrentTCBConst>:
  4007a0:	200004f0 	.word	0x200004f0

004007a4 <SysTick_Handler>:
{
  4007a4:	b508      	push	{r3, lr}
	__asm volatile
  4007a6:	f04f 0350 	mov.w	r3, #80	; 0x50
  4007aa:	f383 8811 	msr	BASEPRI, r3
  4007ae:	f3bf 8f6f 	isb	sy
  4007b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
  4007b6:	4b05      	ldr	r3, [pc, #20]	; (4007cc <SysTick_Handler+0x28>)
  4007b8:	4798      	blx	r3
  4007ba:	b118      	cbz	r0, 4007c4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4007bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4007c0:	4b03      	ldr	r3, [pc, #12]	; (4007d0 <SysTick_Handler+0x2c>)
  4007c2:	601a      	str	r2, [r3, #0]
	__asm volatile
  4007c4:	2300      	movs	r3, #0
  4007c6:	f383 8811 	msr	BASEPRI, r3
  4007ca:	bd08      	pop	{r3, pc}
  4007cc:	004018b5 	.word	0x004018b5
  4007d0:	e000ed04 	.word	0xe000ed04

004007d4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  4007d4:	4a08      	ldr	r2, [pc, #32]	; (4007f8 <vPortSetupTimerInterrupt+0x24>)
  4007d6:	2300      	movs	r3, #0
  4007d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  4007da:	4908      	ldr	r1, [pc, #32]	; (4007fc <vPortSetupTimerInterrupt+0x28>)
  4007dc:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4007de:	4b08      	ldr	r3, [pc, #32]	; (400800 <vPortSetupTimerInterrupt+0x2c>)
  4007e0:	681b      	ldr	r3, [r3, #0]
  4007e2:	4908      	ldr	r1, [pc, #32]	; (400804 <vPortSetupTimerInterrupt+0x30>)
  4007e4:	fba1 1303 	umull	r1, r3, r1, r3
  4007e8:	099b      	lsrs	r3, r3, #6
  4007ea:	3b01      	subs	r3, #1
  4007ec:	4906      	ldr	r1, [pc, #24]	; (400808 <vPortSetupTimerInterrupt+0x34>)
  4007ee:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4007f0:	2307      	movs	r3, #7
  4007f2:	6013      	str	r3, [r2, #0]
  4007f4:	4770      	bx	lr
  4007f6:	bf00      	nop
  4007f8:	e000e010 	.word	0xe000e010
  4007fc:	e000e018 	.word	0xe000e018
  400800:	20000008 	.word	0x20000008
  400804:	10624dd3 	.word	0x10624dd3
  400808:	e000e014 	.word	0xe000e014

0040080c <xPortStartScheduler>:
{
  40080c:	b510      	push	{r4, lr}
  40080e:	b082      	sub	sp, #8
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  400810:	4b34      	ldr	r3, [pc, #208]	; (4008e4 <xPortStartScheduler+0xd8>)
  400812:	681a      	ldr	r2, [r3, #0]
  400814:	4b34      	ldr	r3, [pc, #208]	; (4008e8 <xPortStartScheduler+0xdc>)
  400816:	429a      	cmp	r2, r3
  400818:	d018      	beq.n	40084c <xPortStartScheduler+0x40>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  40081a:	4b32      	ldr	r3, [pc, #200]	; (4008e4 <xPortStartScheduler+0xd8>)
  40081c:	681a      	ldr	r2, [r3, #0]
  40081e:	4b33      	ldr	r3, [pc, #204]	; (4008ec <xPortStartScheduler+0xe0>)
  400820:	429a      	cmp	r2, r3
  400822:	d019      	beq.n	400858 <xPortStartScheduler+0x4c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400824:	4b32      	ldr	r3, [pc, #200]	; (4008f0 <xPortStartScheduler+0xe4>)
  400826:	781a      	ldrb	r2, [r3, #0]
  400828:	b2d2      	uxtb	r2, r2
  40082a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40082c:	22ff      	movs	r2, #255	; 0xff
  40082e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400830:	781b      	ldrb	r3, [r3, #0]
  400832:	b2db      	uxtb	r3, r3
  400834:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400838:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40083c:	f003 0350 	and.w	r3, r3, #80	; 0x50
  400840:	4a2c      	ldr	r2, [pc, #176]	; (4008f4 <xPortStartScheduler+0xe8>)
  400842:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400844:	2207      	movs	r2, #7
  400846:	4b2c      	ldr	r3, [pc, #176]	; (4008f8 <xPortStartScheduler+0xec>)
  400848:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40084a:	e015      	b.n	400878 <xPortStartScheduler+0x6c>
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  40084c:	f44f 7194 	mov.w	r1, #296	; 0x128
  400850:	482a      	ldr	r0, [pc, #168]	; (4008fc <xPortStartScheduler+0xf0>)
  400852:	4b2b      	ldr	r3, [pc, #172]	; (400900 <xPortStartScheduler+0xf4>)
  400854:	4798      	blx	r3
  400856:	e7e0      	b.n	40081a <xPortStartScheduler+0xe>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  400858:	f240 1129 	movw	r1, #297	; 0x129
  40085c:	4827      	ldr	r0, [pc, #156]	; (4008fc <xPortStartScheduler+0xf0>)
  40085e:	4b28      	ldr	r3, [pc, #160]	; (400900 <xPortStartScheduler+0xf4>)
  400860:	4798      	blx	r3
  400862:	e7df      	b.n	400824 <xPortStartScheduler+0x18>
			ulMaxPRIGROUPValue--;
  400864:	4a24      	ldr	r2, [pc, #144]	; (4008f8 <xPortStartScheduler+0xec>)
  400866:	6813      	ldr	r3, [r2, #0]
  400868:	3b01      	subs	r3, #1
  40086a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40086c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400870:	005b      	lsls	r3, r3, #1
  400872:	b2db      	uxtb	r3, r3
  400874:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400878:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40087c:	f013 0f80 	tst.w	r3, #128	; 0x80
  400880:	d1f0      	bne.n	400864 <xPortStartScheduler+0x58>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
  400882:	4b1d      	ldr	r3, [pc, #116]	; (4008f8 <xPortStartScheduler+0xec>)
  400884:	681b      	ldr	r3, [r3, #0]
  400886:	2b03      	cmp	r3, #3
  400888:	d004      	beq.n	400894 <xPortStartScheduler+0x88>
  40088a:	f44f 71ad 	mov.w	r1, #346	; 0x15a
  40088e:	481b      	ldr	r0, [pc, #108]	; (4008fc <xPortStartScheduler+0xf0>)
  400890:	4b1b      	ldr	r3, [pc, #108]	; (400900 <xPortStartScheduler+0xf4>)
  400892:	4798      	blx	r3
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400894:	4a18      	ldr	r2, [pc, #96]	; (4008f8 <xPortStartScheduler+0xec>)
  400896:	6813      	ldr	r3, [r2, #0]
  400898:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40089a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40089e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4008a0:	9b01      	ldr	r3, [sp, #4]
  4008a2:	b2db      	uxtb	r3, r3
  4008a4:	4a12      	ldr	r2, [pc, #72]	; (4008f0 <xPortStartScheduler+0xe4>)
  4008a6:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4008a8:	4b16      	ldr	r3, [pc, #88]	; (400904 <xPortStartScheduler+0xf8>)
  4008aa:	681a      	ldr	r2, [r3, #0]
  4008ac:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  4008b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4008b2:	681a      	ldr	r2, [r3, #0]
  4008b4:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  4008b8:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4008ba:	4b13      	ldr	r3, [pc, #76]	; (400908 <xPortStartScheduler+0xfc>)
  4008bc:	4798      	blx	r3
	uxCriticalNesting = 0;
  4008be:	2400      	movs	r4, #0
  4008c0:	4b12      	ldr	r3, [pc, #72]	; (40090c <xPortStartScheduler+0x100>)
  4008c2:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  4008c4:	4b12      	ldr	r3, [pc, #72]	; (400910 <xPortStartScheduler+0x104>)
  4008c6:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4008c8:	4a12      	ldr	r2, [pc, #72]	; (400914 <xPortStartScheduler+0x108>)
  4008ca:	6813      	ldr	r3, [r2, #0]
  4008cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4008d0:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4008d2:	4b11      	ldr	r3, [pc, #68]	; (400918 <xPortStartScheduler+0x10c>)
  4008d4:	4798      	blx	r3
	vTaskSwitchContext();
  4008d6:	4b11      	ldr	r3, [pc, #68]	; (40091c <xPortStartScheduler+0x110>)
  4008d8:	4798      	blx	r3
	prvTaskExitError();
  4008da:	4b11      	ldr	r3, [pc, #68]	; (400920 <xPortStartScheduler+0x114>)
  4008dc:	4798      	blx	r3
}
  4008de:	4620      	mov	r0, r4
  4008e0:	b002      	add	sp, #8
  4008e2:	bd10      	pop	{r4, pc}
  4008e4:	e000ed00 	.word	0xe000ed00
  4008e8:	410fc271 	.word	0x410fc271
  4008ec:	410fc270 	.word	0x410fc270
  4008f0:	e000e400 	.word	0xe000e400
  4008f4:	200004d0 	.word	0x200004d0
  4008f8:	200004d4 	.word	0x200004d4
  4008fc:	004032b4 	.word	0x004032b4
  400900:	00402f21 	.word	0x00402f21
  400904:	e000ed20 	.word	0xe000ed20
  400908:	004007d5 	.word	0x004007d5
  40090c:	20000000 	.word	0x20000000
  400910:	00400615 	.word	0x00400615
  400914:	e000ef34 	.word	0xe000ef34
  400918:	004005ed 	.word	0x004005ed
  40091c:	00401b4d 	.word	0x00401b4d
  400920:	00400629 	.word	0x00400629

00400924 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
  400924:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
  400926:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  40092a:	2b0f      	cmp	r3, #15
  40092c:	d906      	bls.n	40093c <vPortValidateInterruptPriority+0x18>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  40092e:	4a0e      	ldr	r2, [pc, #56]	; (400968 <vPortValidateInterruptPriority+0x44>)
  400930:	5c9b      	ldrb	r3, [r3, r2]
  400932:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400934:	4a0d      	ldr	r2, [pc, #52]	; (40096c <vPortValidateInterruptPriority+0x48>)
  400936:	7812      	ldrb	r2, [r2, #0]
  400938:	4293      	cmp	r3, r2
  40093a:	d308      	bcc.n	40094e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40093c:	4b0c      	ldr	r3, [pc, #48]	; (400970 <vPortValidateInterruptPriority+0x4c>)
  40093e:	681b      	ldr	r3, [r3, #0]
  400940:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400944:	4a0b      	ldr	r2, [pc, #44]	; (400974 <vPortValidateInterruptPriority+0x50>)
  400946:	6812      	ldr	r2, [r2, #0]
  400948:	4293      	cmp	r3, r2
  40094a:	d806      	bhi.n	40095a <vPortValidateInterruptPriority+0x36>
  40094c:	bd08      	pop	{r3, pc}
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40094e:	f240 21f2 	movw	r1, #754	; 0x2f2
  400952:	4809      	ldr	r0, [pc, #36]	; (400978 <vPortValidateInterruptPriority+0x54>)
  400954:	4b09      	ldr	r3, [pc, #36]	; (40097c <vPortValidateInterruptPriority+0x58>)
  400956:	4798      	blx	r3
  400958:	e7f0      	b.n	40093c <vPortValidateInterruptPriority+0x18>
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40095a:	f240 3102 	movw	r1, #770	; 0x302
  40095e:	4806      	ldr	r0, [pc, #24]	; (400978 <vPortValidateInterruptPriority+0x54>)
  400960:	4b06      	ldr	r3, [pc, #24]	; (40097c <vPortValidateInterruptPriority+0x58>)
  400962:	4798      	blx	r3
	}
  400964:	e7f2      	b.n	40094c <vPortValidateInterruptPriority+0x28>
  400966:	bf00      	nop
  400968:	e000e3f0 	.word	0xe000e3f0
  40096c:	200004d0 	.word	0x200004d0
  400970:	e000ed0c 	.word	0xe000ed0c
  400974:	200004d4 	.word	0x200004d4
  400978:	004032b4 	.word	0x004032b4
  40097c:	00402f21 	.word	0x00402f21

00400980 <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
  400980:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  400982:	4a13      	ldr	r2, [pc, #76]	; (4009d0 <prvInsertBlockIntoFreeList+0x50>)
  400984:	e000      	b.n	400988 <prvInsertBlockIntoFreeList+0x8>
  400986:	461a      	mov	r2, r3
  400988:	6813      	ldr	r3, [r2, #0]
  40098a:	4283      	cmp	r3, r0
  40098c:	d3fb      	bcc.n	400986 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
  40098e:	6851      	ldr	r1, [r2, #4]
  400990:	1854      	adds	r4, r2, r1
  400992:	42a0      	cmp	r0, r4
  400994:	d00a      	beq.n	4009ac <prvInsertBlockIntoFreeList+0x2c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  400996:	6841      	ldr	r1, [r0, #4]
  400998:	1844      	adds	r4, r0, r1
  40099a:	42a3      	cmp	r3, r4
  40099c:	d00b      	beq.n	4009b6 <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
  40099e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  4009a0:	4290      	cmp	r0, r2
  4009a2:	d000      	beq.n	4009a6 <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  4009a4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
  4009a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009aa:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  4009ac:	6840      	ldr	r0, [r0, #4]
  4009ae:	4401      	add	r1, r0
  4009b0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
  4009b2:	4610      	mov	r0, r2
  4009b4:	e7ef      	b.n	400996 <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
  4009b6:	4c07      	ldr	r4, [pc, #28]	; (4009d4 <prvInsertBlockIntoFreeList+0x54>)
  4009b8:	6824      	ldr	r4, [r4, #0]
  4009ba:	42a3      	cmp	r3, r4
  4009bc:	d006      	beq.n	4009cc <prvInsertBlockIntoFreeList+0x4c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4009be:	685b      	ldr	r3, [r3, #4]
  4009c0:	4419      	add	r1, r3
  4009c2:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4009c4:	6813      	ldr	r3, [r2, #0]
  4009c6:	681b      	ldr	r3, [r3, #0]
  4009c8:	6003      	str	r3, [r0, #0]
  4009ca:	e7e9      	b.n	4009a0 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  4009cc:	6004      	str	r4, [r0, #0]
  4009ce:	e7e7      	b.n	4009a0 <prvInsertBlockIntoFreeList+0x20>
  4009d0:	200004e8 	.word	0x200004e8
  4009d4:	200004d8 	.word	0x200004d8

004009d8 <pvPortMalloc>:
{
  4009d8:	b570      	push	{r4, r5, r6, lr}
  4009da:	4605      	mov	r5, r0
	configASSERT( pxEnd );
  4009dc:	4b2c      	ldr	r3, [pc, #176]	; (400a90 <pvPortMalloc+0xb8>)
  4009de:	681b      	ldr	r3, [r3, #0]
  4009e0:	b1b3      	cbz	r3, 400a10 <pvPortMalloc+0x38>
	vTaskSuspendAll();
  4009e2:	4b2c      	ldr	r3, [pc, #176]	; (400a94 <pvPortMalloc+0xbc>)
  4009e4:	4798      	blx	r3
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
  4009e6:	4b2c      	ldr	r3, [pc, #176]	; (400a98 <pvPortMalloc+0xc0>)
  4009e8:	681b      	ldr	r3, [r3, #0]
  4009ea:	421d      	tst	r5, r3
  4009ec:	d145      	bne.n	400a7a <pvPortMalloc+0xa2>
			if( xWantedSize > 0 )
  4009ee:	b135      	cbz	r5, 4009fe <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
  4009f0:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
  4009f2:	f015 0f07 	tst.w	r5, #7
  4009f6:	d002      	beq.n	4009fe <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4009f8:	f025 0507 	bic.w	r5, r5, #7
  4009fc:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
  4009fe:	2d00      	cmp	r5, #0
  400a00:	d03d      	beq.n	400a7e <pvPortMalloc+0xa6>
  400a02:	4b26      	ldr	r3, [pc, #152]	; (400a9c <pvPortMalloc+0xc4>)
  400a04:	681b      	ldr	r3, [r3, #0]
  400a06:	429d      	cmp	r5, r3
  400a08:	d83b      	bhi.n	400a82 <pvPortMalloc+0xaa>
				pxBlock = xStart.pxNextFreeBlock;
  400a0a:	4a25      	ldr	r2, [pc, #148]	; (400aa0 <pvPortMalloc+0xc8>)
  400a0c:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  400a0e:	e006      	b.n	400a1e <pvPortMalloc+0x46>
	configASSERT( pxEnd );
  400a10:	218b      	movs	r1, #139	; 0x8b
  400a12:	4824      	ldr	r0, [pc, #144]	; (400aa4 <pvPortMalloc+0xcc>)
  400a14:	4b24      	ldr	r3, [pc, #144]	; (400aa8 <pvPortMalloc+0xd0>)
  400a16:	4798      	blx	r3
  400a18:	e7e3      	b.n	4009e2 <pvPortMalloc+0xa>
					pxPreviousBlock = pxBlock;
  400a1a:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
  400a1c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  400a1e:	6863      	ldr	r3, [r4, #4]
  400a20:	429d      	cmp	r5, r3
  400a22:	d902      	bls.n	400a2a <pvPortMalloc+0x52>
  400a24:	6823      	ldr	r3, [r4, #0]
  400a26:	2b00      	cmp	r3, #0
  400a28:	d1f7      	bne.n	400a1a <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
  400a2a:	4b19      	ldr	r3, [pc, #100]	; (400a90 <pvPortMalloc+0xb8>)
  400a2c:	681b      	ldr	r3, [r3, #0]
  400a2e:	429c      	cmp	r4, r3
  400a30:	d029      	beq.n	400a86 <pvPortMalloc+0xae>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
  400a32:	6816      	ldr	r6, [r2, #0]
  400a34:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  400a36:	6823      	ldr	r3, [r4, #0]
  400a38:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  400a3a:	6863      	ldr	r3, [r4, #4]
  400a3c:	1b5b      	subs	r3, r3, r5
  400a3e:	2b10      	cmp	r3, #16
  400a40:	d815      	bhi.n	400a6e <pvPortMalloc+0x96>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
  400a42:	6862      	ldr	r2, [r4, #4]
  400a44:	4915      	ldr	r1, [pc, #84]	; (400a9c <pvPortMalloc+0xc4>)
  400a46:	680b      	ldr	r3, [r1, #0]
  400a48:	1a9b      	subs	r3, r3, r2
  400a4a:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
  400a4c:	4917      	ldr	r1, [pc, #92]	; (400aac <pvPortMalloc+0xd4>)
  400a4e:	6809      	ldr	r1, [r1, #0]
  400a50:	428b      	cmp	r3, r1
  400a52:	d201      	bcs.n	400a58 <pvPortMalloc+0x80>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
  400a54:	4915      	ldr	r1, [pc, #84]	; (400aac <pvPortMalloc+0xd4>)
  400a56:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
  400a58:	4b0f      	ldr	r3, [pc, #60]	; (400a98 <pvPortMalloc+0xc0>)
  400a5a:	681b      	ldr	r3, [r3, #0]
  400a5c:	4313      	orrs	r3, r2
  400a5e:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
  400a60:	2300      	movs	r3, #0
  400a62:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
  400a64:	4b12      	ldr	r3, [pc, #72]	; (400ab0 <pvPortMalloc+0xd8>)
  400a66:	4798      	blx	r3
		if( pvReturn == NULL )
  400a68:	b17e      	cbz	r6, 400a8a <pvPortMalloc+0xb2>
}
  400a6a:	4630      	mov	r0, r6
  400a6c:	bd70      	pop	{r4, r5, r6, pc}
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
  400a6e:	1960      	adds	r0, r4, r5
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  400a70:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
  400a72:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  400a74:	4b0f      	ldr	r3, [pc, #60]	; (400ab4 <pvPortMalloc+0xdc>)
  400a76:	4798      	blx	r3
  400a78:	e7e3      	b.n	400a42 <pvPortMalloc+0x6a>
void *pvReturn = NULL;
  400a7a:	2600      	movs	r6, #0
  400a7c:	e7f2      	b.n	400a64 <pvPortMalloc+0x8c>
  400a7e:	2600      	movs	r6, #0
  400a80:	e7f0      	b.n	400a64 <pvPortMalloc+0x8c>
  400a82:	2600      	movs	r6, #0
  400a84:	e7ee      	b.n	400a64 <pvPortMalloc+0x8c>
  400a86:	2600      	movs	r6, #0
  400a88:	e7ec      	b.n	400a64 <pvPortMalloc+0x8c>
			vApplicationMallocFailedHook();
  400a8a:	4b0b      	ldr	r3, [pc, #44]	; (400ab8 <pvPortMalloc+0xe0>)
  400a8c:	4798      	blx	r3
	return pvReturn;
  400a8e:	e7ec      	b.n	400a6a <pvPortMalloc+0x92>
  400a90:	200004d8 	.word	0x200004d8
  400a94:	00401899 	.word	0x00401899
  400a98:	200004dc 	.word	0x200004dc
  400a9c:	200004e0 	.word	0x200004e0
  400aa0:	200004e8 	.word	0x200004e8
  400aa4:	004032e4 	.word	0x004032e4
  400aa8:	00402f21 	.word	0x00402f21
  400aac:	200004e4 	.word	0x200004e4
  400ab0:	004019d9 	.word	0x004019d9
  400ab4:	00400981 	.word	0x00400981
  400ab8:	00402f4d 	.word	0x00402f4d

00400abc <vPortFree>:
	if( pv != NULL )
  400abc:	2800      	cmp	r0, #0
  400abe:	d033      	beq.n	400b28 <vPortFree+0x6c>
{
  400ac0:	b538      	push	{r3, r4, r5, lr}
  400ac2:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
  400ac4:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  400ac8:	f850 2c04 	ldr.w	r2, [r0, #-4]
  400acc:	4b17      	ldr	r3, [pc, #92]	; (400b2c <vPortFree+0x70>)
  400ace:	681b      	ldr	r3, [r3, #0]
  400ad0:	421a      	tst	r2, r3
  400ad2:	d011      	beq.n	400af8 <vPortFree+0x3c>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
  400ad4:	f854 3c08 	ldr.w	r3, [r4, #-8]
  400ad8:	b123      	cbz	r3, 400ae4 <vPortFree+0x28>
  400ada:	f44f 7190 	mov.w	r1, #288	; 0x120
  400ade:	4814      	ldr	r0, [pc, #80]	; (400b30 <vPortFree+0x74>)
  400ae0:	4b14      	ldr	r3, [pc, #80]	; (400b34 <vPortFree+0x78>)
  400ae2:	4798      	blx	r3
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
  400ae4:	f854 3c04 	ldr.w	r3, [r4, #-4]
  400ae8:	4a10      	ldr	r2, [pc, #64]	; (400b2c <vPortFree+0x70>)
  400aea:	6812      	ldr	r2, [r2, #0]
  400aec:	4213      	tst	r3, r2
  400aee:	d002      	beq.n	400af6 <vPortFree+0x3a>
			if( pxLink->pxNextFreeBlock == NULL )
  400af0:	f854 1c08 	ldr.w	r1, [r4, #-8]
  400af4:	b131      	cbz	r1, 400b04 <vPortFree+0x48>
  400af6:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  400af8:	f240 111f 	movw	r1, #287	; 0x11f
  400afc:	480c      	ldr	r0, [pc, #48]	; (400b30 <vPortFree+0x74>)
  400afe:	4b0d      	ldr	r3, [pc, #52]	; (400b34 <vPortFree+0x78>)
  400b00:	4798      	blx	r3
  400b02:	e7e7      	b.n	400ad4 <vPortFree+0x18>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
  400b04:	ea23 0302 	bic.w	r3, r3, r2
  400b08:	f844 3c04 	str.w	r3, [r4, #-4]
				vTaskSuspendAll();
  400b0c:	4b0a      	ldr	r3, [pc, #40]	; (400b38 <vPortFree+0x7c>)
  400b0e:	4798      	blx	r3
					xFreeBytesRemaining += pxLink->xBlockSize;
  400b10:	f854 1c04 	ldr.w	r1, [r4, #-4]
  400b14:	4a09      	ldr	r2, [pc, #36]	; (400b3c <vPortFree+0x80>)
  400b16:	6813      	ldr	r3, [r2, #0]
  400b18:	440b      	add	r3, r1
  400b1a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
  400b1c:	4628      	mov	r0, r5
  400b1e:	4b08      	ldr	r3, [pc, #32]	; (400b40 <vPortFree+0x84>)
  400b20:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400b22:	4b08      	ldr	r3, [pc, #32]	; (400b44 <vPortFree+0x88>)
  400b24:	4798      	blx	r3
}
  400b26:	e7e6      	b.n	400af6 <vPortFree+0x3a>
  400b28:	4770      	bx	lr
  400b2a:	bf00      	nop
  400b2c:	200004dc 	.word	0x200004dc
  400b30:	004032e4 	.word	0x004032e4
  400b34:	00402f21 	.word	0x00402f21
  400b38:	00401899 	.word	0x00401899
  400b3c:	200004e0 	.word	0x200004e0
  400b40:	00400981 	.word	0x00400981
  400b44:	004019d9 	.word	0x004019d9

00400b48 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
  400b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b4c:	4680      	mov	r8, r0
BaseType_t xDefinedRegions = 0;
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
  400b4e:	4b2c      	ldr	r3, [pc, #176]	; (400c00 <vPortDefineHeapRegions+0xb8>)
  400b50:	681b      	ldr	r3, [r3, #0]
  400b52:	b123      	cbz	r3, 400b5e <vPortDefineHeapRegions+0x16>
  400b54:	f240 1193 	movw	r1, #403	; 0x193
  400b58:	482a      	ldr	r0, [pc, #168]	; (400c04 <vPortDefineHeapRegions+0xbc>)
  400b5a:	4b2b      	ldr	r3, [pc, #172]	; (400c08 <vPortDefineHeapRegions+0xc0>)
  400b5c:	4798      	blx	r3
		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
  400b5e:	4643      	mov	r3, r8
  400b60:	2600      	movs	r6, #0
  400b62:	4637      	mov	r7, r6
  400b64:	e01b      	b.n	400b9e <vPortDefineHeapRegions+0x56>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
  400b66:	4b26      	ldr	r3, [pc, #152]	; (400c00 <vPortDefineHeapRegions+0xb8>)
  400b68:	681b      	ldr	r3, [r3, #0]
  400b6a:	b35b      	cbz	r3, 400bc4 <vPortDefineHeapRegions+0x7c>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
  400b6c:	4b24      	ldr	r3, [pc, #144]	; (400c00 <vPortDefineHeapRegions+0xb8>)
  400b6e:	681b      	ldr	r3, [r3, #0]
  400b70:	429d      	cmp	r5, r3
  400b72:	d92d      	bls.n	400bd0 <vPortDefineHeapRegions+0x88>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
  400b74:	4a22      	ldr	r2, [pc, #136]	; (400c00 <vPortDefineHeapRegions+0xb8>)
  400b76:	6811      	ldr	r1, [r2, #0]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
  400b78:	1963      	adds	r3, r4, r5
		xAddress -= xHeapStructSize;
  400b7a:	3b08      	subs	r3, #8
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
  400b7c:	f023 0307 	bic.w	r3, r3, #7
		pxEnd = ( BlockLink_t * ) xAddress;
  400b80:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
  400b82:	2200      	movs	r2, #0
  400b84:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
  400b86:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
  400b88:	462a      	mov	r2, r5
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
  400b8a:	1b58      	subs	r0, r3, r5
  400b8c:	6068      	str	r0, [r5, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
  400b8e:	602b      	str	r3, [r5, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
  400b90:	b101      	cbz	r1, 400b94 <vPortDefineHeapRegions+0x4c>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
  400b92:	600d      	str	r5, [r1, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
  400b94:	6853      	ldr	r3, [r2, #4]
  400b96:	441f      	add	r7, r3

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
  400b98:	3601      	adds	r6, #1
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
  400b9a:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
	while( pxHeapRegion->xSizeInBytes > 0 )
  400b9e:	685c      	ldr	r4, [r3, #4]
  400ba0:	b1e4      	cbz	r4, 400bdc <vPortDefineHeapRegions+0x94>
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
  400ba2:	681d      	ldr	r5, [r3, #0]
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  400ba4:	f015 0f07 	tst.w	r5, #7
  400ba8:	d005      	beq.n	400bb6 <vPortDefineHeapRegions+0x6e>
			xAddress += ( portBYTE_ALIGNMENT - 1 );
  400baa:	1deb      	adds	r3, r5, #7
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
  400bac:	f023 0307 	bic.w	r3, r3, #7
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
  400bb0:	1aed      	subs	r5, r5, r3
  400bb2:	442c      	add	r4, r5
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
  400bb4:	461d      	mov	r5, r3
		if( xDefinedRegions == 0 )
  400bb6:	2e00      	cmp	r6, #0
  400bb8:	d1d5      	bne.n	400b66 <vPortDefineHeapRegions+0x1e>
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
  400bba:	4b14      	ldr	r3, [pc, #80]	; (400c0c <vPortDefineHeapRegions+0xc4>)
  400bbc:	601d      	str	r5, [r3, #0]
			xStart.xBlockSize = ( size_t ) 0;
  400bbe:	2200      	movs	r2, #0
  400bc0:	605a      	str	r2, [r3, #4]
  400bc2:	e7d7      	b.n	400b74 <vPortDefineHeapRegions+0x2c>
			configASSERT( pxEnd != NULL );
  400bc4:	f44f 71da 	mov.w	r1, #436	; 0x1b4
  400bc8:	480e      	ldr	r0, [pc, #56]	; (400c04 <vPortDefineHeapRegions+0xbc>)
  400bca:	4b0f      	ldr	r3, [pc, #60]	; (400c08 <vPortDefineHeapRegions+0xc0>)
  400bcc:	4798      	blx	r3
  400bce:	e7cd      	b.n	400b6c <vPortDefineHeapRegions+0x24>
			configASSERT( xAddress > ( size_t ) pxEnd );
  400bd0:	f240 11b7 	movw	r1, #439	; 0x1b7
  400bd4:	480b      	ldr	r0, [pc, #44]	; (400c04 <vPortDefineHeapRegions+0xbc>)
  400bd6:	4b0c      	ldr	r3, [pc, #48]	; (400c08 <vPortDefineHeapRegions+0xc0>)
  400bd8:	4798      	blx	r3
  400bda:	e7cb      	b.n	400b74 <vPortDefineHeapRegions+0x2c>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
  400bdc:	4b0c      	ldr	r3, [pc, #48]	; (400c10 <vPortDefineHeapRegions+0xc8>)
  400bde:	601f      	str	r7, [r3, #0]
	xFreeBytesRemaining = xTotalHeapSize;
  400be0:	4b0c      	ldr	r3, [pc, #48]	; (400c14 <vPortDefineHeapRegions+0xcc>)
  400be2:	601f      	str	r7, [r3, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
  400be4:	b12f      	cbz	r7, 400bf2 <vPortDefineHeapRegions+0xaa>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
  400be6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400bea:	4b0b      	ldr	r3, [pc, #44]	; (400c18 <vPortDefineHeapRegions+0xd0>)
  400bec:	601a      	str	r2, [r3, #0]
  400bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( xTotalHeapSize );
  400bf2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  400bf6:	4803      	ldr	r0, [pc, #12]	; (400c04 <vPortDefineHeapRegions+0xbc>)
  400bf8:	4b03      	ldr	r3, [pc, #12]	; (400c08 <vPortDefineHeapRegions+0xc0>)
  400bfa:	4798      	blx	r3
  400bfc:	e7f3      	b.n	400be6 <vPortDefineHeapRegions+0x9e>
  400bfe:	bf00      	nop
  400c00:	200004d8 	.word	0x200004d8
  400c04:	004032e4 	.word	0x004032e4
  400c08:	00402f21 	.word	0x00402f21
  400c0c:	200004e8 	.word	0x200004e8
  400c10:	200004e4 	.word	0x200004e4
  400c14:	200004e0 	.word	0x200004e0
  400c18:	200004dc 	.word	0x200004dc

00400c1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
  400c1c:	b510      	push	{r4, lr}
  400c1e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  400c20:	4b06      	ldr	r3, [pc, #24]	; (400c3c <prvIsQueueFull+0x20>)
  400c22:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400c24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400c26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400c28:	429a      	cmp	r2, r3
  400c2a:	d004      	beq.n	400c36 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
  400c2c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
  400c2e:	4b04      	ldr	r3, [pc, #16]	; (400c40 <prvIsQueueFull+0x24>)
  400c30:	4798      	blx	r3

	return xReturn;
}
  400c32:	4620      	mov	r0, r4
  400c34:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
  400c36:	2401      	movs	r4, #1
  400c38:	e7f9      	b.n	400c2e <prvIsQueueFull+0x12>
  400c3a:	bf00      	nop
  400c3c:	004006c5 	.word	0x004006c5
  400c40:	0040070d 	.word	0x0040070d

00400c44 <prvIsQueueEmpty>:
{
  400c44:	b510      	push	{r4, lr}
  400c46:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  400c48:	4b05      	ldr	r3, [pc, #20]	; (400c60 <prvIsQueueEmpty+0x1c>)
  400c4a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  400c4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400c4e:	b123      	cbz	r3, 400c5a <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
  400c50:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  400c52:	4b04      	ldr	r3, [pc, #16]	; (400c64 <prvIsQueueEmpty+0x20>)
  400c54:	4798      	blx	r3
}
  400c56:	4620      	mov	r0, r4
  400c58:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
  400c5a:	2401      	movs	r4, #1
  400c5c:	e7f9      	b.n	400c52 <prvIsQueueEmpty+0xe>
  400c5e:	bf00      	nop
  400c60:	004006c5 	.word	0x004006c5
  400c64:	0040070d 	.word	0x0040070d

00400c68 <prvCopyDataToQueue>:
{
  400c68:	b570      	push	{r4, r5, r6, lr}
  400c6a:	4604      	mov	r4, r0
  400c6c:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400c6e:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400c70:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400c72:	b95a      	cbnz	r2, 400c8c <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400c74:	6803      	ldr	r3, [r0, #0]
  400c76:	b11b      	cbz	r3, 400c80 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
  400c78:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  400c7a:	3501      	adds	r5, #1
  400c7c:	63a5      	str	r5, [r4, #56]	; 0x38
}
  400c7e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
  400c80:	6880      	ldr	r0, [r0, #8]
  400c82:	4b17      	ldr	r3, [pc, #92]	; (400ce0 <prvCopyDataToQueue+0x78>)
  400c84:	4798      	blx	r3
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
  400c86:	2300      	movs	r3, #0
  400c88:	60a3      	str	r3, [r4, #8]
  400c8a:	e7f6      	b.n	400c7a <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
  400c8c:	b96e      	cbnz	r6, 400caa <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  400c8e:	6840      	ldr	r0, [r0, #4]
  400c90:	4b14      	ldr	r3, [pc, #80]	; (400ce4 <prvCopyDataToQueue+0x7c>)
  400c92:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  400c94:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400c96:	6863      	ldr	r3, [r4, #4]
  400c98:	4413      	add	r3, r2
  400c9a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400c9c:	68a2      	ldr	r2, [r4, #8]
  400c9e:	4293      	cmp	r3, r2
  400ca0:	d319      	bcc.n	400cd6 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400ca2:	6823      	ldr	r3, [r4, #0]
  400ca4:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
  400ca6:	2000      	movs	r0, #0
  400ca8:	e7e7      	b.n	400c7a <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
  400caa:	68c0      	ldr	r0, [r0, #12]
  400cac:	4b0d      	ldr	r3, [pc, #52]	; (400ce4 <prvCopyDataToQueue+0x7c>)
  400cae:	4798      	blx	r3
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
  400cb0:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400cb2:	4252      	negs	r2, r2
  400cb4:	68e3      	ldr	r3, [r4, #12]
  400cb6:	4413      	add	r3, r2
  400cb8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400cba:	6821      	ldr	r1, [r4, #0]
  400cbc:	428b      	cmp	r3, r1
  400cbe:	d202      	bcs.n	400cc6 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
  400cc0:	68a3      	ldr	r3, [r4, #8]
  400cc2:	441a      	add	r2, r3
  400cc4:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
  400cc6:	2e02      	cmp	r6, #2
  400cc8:	d001      	beq.n	400cce <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
  400cca:	2000      	movs	r0, #0
  400ccc:	e7d5      	b.n	400c7a <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  400cce:	b125      	cbz	r5, 400cda <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
  400cd0:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  400cd2:	2000      	movs	r0, #0
  400cd4:	e7d1      	b.n	400c7a <prvCopyDataToQueue+0x12>
  400cd6:	2000      	movs	r0, #0
  400cd8:	e7cf      	b.n	400c7a <prvCopyDataToQueue+0x12>
  400cda:	2000      	movs	r0, #0
  400cdc:	e7cd      	b.n	400c7a <prvCopyDataToQueue+0x12>
  400cde:	bf00      	nop
  400ce0:	00401e09 	.word	0x00401e09
  400ce4:	00402fc5 	.word	0x00402fc5

00400ce8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400ce8:	b570      	push	{r4, r5, r6, lr}
  400cea:	b082      	sub	sp, #8
  400cec:	9001      	str	r0, [sp, #4]
  400cee:	460e      	mov	r6, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400cf0:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400cf2:	b15c      	cbz	r4, 400d0c <prvNotifyQueueSetContainer+0x24>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400cf4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400cf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400cf8:	429a      	cmp	r2, r3
  400cfa:	d20d      	bcs.n	400d18 <prvNotifyQueueSetContainer+0x30>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400cfc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400cfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d00:	429a      	cmp	r2, r3
  400d02:	d30f      	bcc.n	400d24 <prvNotifyQueueSetContainer+0x3c>
	BaseType_t xReturn = pdFALSE;
  400d04:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400d06:	4630      	mov	r0, r6
  400d08:	b002      	add	sp, #8
  400d0a:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxQueueSetContainer );
  400d0c:	f640 3145 	movw	r1, #2885	; 0xb45
  400d10:	4812      	ldr	r0, [pc, #72]	; (400d5c <prvNotifyQueueSetContainer+0x74>)
  400d12:	4b13      	ldr	r3, [pc, #76]	; (400d60 <prvNotifyQueueSetContainer+0x78>)
  400d14:	4798      	blx	r3
  400d16:	e7ed      	b.n	400cf4 <prvNotifyQueueSetContainer+0xc>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400d18:	f640 3146 	movw	r1, #2886	; 0xb46
  400d1c:	480f      	ldr	r0, [pc, #60]	; (400d5c <prvNotifyQueueSetContainer+0x74>)
  400d1e:	4b10      	ldr	r3, [pc, #64]	; (400d60 <prvNotifyQueueSetContainer+0x78>)
  400d20:	4798      	blx	r3
  400d22:	e7eb      	b.n	400cfc <prvNotifyQueueSetContainer+0x14>
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  400d24:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  400d28:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400d2a:	4632      	mov	r2, r6
  400d2c:	a901      	add	r1, sp, #4
  400d2e:	4620      	mov	r0, r4
  400d30:	4b0c      	ldr	r3, [pc, #48]	; (400d64 <prvNotifyQueueSetContainer+0x7c>)
  400d32:	4798      	blx	r3
  400d34:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
  400d36:	f1b5 3fff 	cmp.w	r5, #4294967295
  400d3a:	d004      	beq.n	400d46 <prvNotifyQueueSetContainer+0x5e>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  400d3c:	3501      	adds	r5, #1
  400d3e:	b26d      	sxtb	r5, r5
  400d40:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  400d44:	e7df      	b.n	400d06 <prvNotifyQueueSetContainer+0x1e>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400d48:	2b00      	cmp	r3, #0
  400d4a:	d0dc      	beq.n	400d06 <prvNotifyQueueSetContainer+0x1e>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400d4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400d50:	4b05      	ldr	r3, [pc, #20]	; (400d68 <prvNotifyQueueSetContainer+0x80>)
  400d52:	4798      	blx	r3
  400d54:	2800      	cmp	r0, #0
  400d56:	d0d6      	beq.n	400d06 <prvNotifyQueueSetContainer+0x1e>
						xReturn = pdTRUE;
  400d58:	2601      	movs	r6, #1
		return xReturn;
  400d5a:	e7d4      	b.n	400d06 <prvNotifyQueueSetContainer+0x1e>
  400d5c:	00403310 	.word	0x00403310
  400d60:	00402f21 	.word	0x00402f21
  400d64:	00400c69 	.word	0x00400c69
  400d68:	00401ca9 	.word	0x00401ca9

00400d6c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400d6c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400d6e:	b172      	cbz	r2, 400d8e <prvCopyDataFromQueue+0x22>
{
  400d70:	b510      	push	{r4, lr}
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  400d72:	68c3      	ldr	r3, [r0, #12]
  400d74:	4413      	add	r3, r2
  400d76:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400d78:	6884      	ldr	r4, [r0, #8]
  400d7a:	42a3      	cmp	r3, r4
  400d7c:	d301      	bcc.n	400d82 <prvCopyDataFromQueue+0x16>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
  400d7e:	6803      	ldr	r3, [r0, #0]
  400d80:	60c3      	str	r3, [r0, #12]
  400d82:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  400d84:	68c1      	ldr	r1, [r0, #12]
  400d86:	4620      	mov	r0, r4
  400d88:	4b01      	ldr	r3, [pc, #4]	; (400d90 <prvCopyDataFromQueue+0x24>)
  400d8a:	4798      	blx	r3
  400d8c:	bd10      	pop	{r4, pc}
  400d8e:	4770      	bx	lr
  400d90:	00402fc5 	.word	0x00402fc5

00400d94 <prvUnlockQueue>:
{
  400d94:	b538      	push	{r3, r4, r5, lr}
  400d96:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  400d98:	4b1f      	ldr	r3, [pc, #124]	; (400e18 <prvUnlockQueue+0x84>)
  400d9a:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
  400d9c:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  400da0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  400da2:	e008      	b.n	400db6 <prvUnlockQueue+0x22>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400da4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  400da6:	b1bb      	cbz	r3, 400dd8 <prvUnlockQueue+0x44>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400da8:	f105 0024 	add.w	r0, r5, #36	; 0x24
  400dac:	4b1b      	ldr	r3, [pc, #108]	; (400e1c <prvUnlockQueue+0x88>)
  400dae:	4798      	blx	r3
  400db0:	b978      	cbnz	r0, 400dd2 <prvUnlockQueue+0x3e>
			--cTxLock;
  400db2:	3c01      	subs	r4, #1
  400db4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  400db6:	2c00      	cmp	r4, #0
  400db8:	dd0e      	ble.n	400dd8 <prvUnlockQueue+0x44>
				if( pxQueue->pxQueueSetContainer != NULL )
  400dba:	6cab      	ldr	r3, [r5, #72]	; 0x48
  400dbc:	2b00      	cmp	r3, #0
  400dbe:	d0f1      	beq.n	400da4 <prvUnlockQueue+0x10>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  400dc0:	2100      	movs	r1, #0
  400dc2:	4628      	mov	r0, r5
  400dc4:	4b16      	ldr	r3, [pc, #88]	; (400e20 <prvUnlockQueue+0x8c>)
  400dc6:	4798      	blx	r3
  400dc8:	2800      	cmp	r0, #0
  400dca:	d0f2      	beq.n	400db2 <prvUnlockQueue+0x1e>
						vTaskMissedYield();
  400dcc:	4b15      	ldr	r3, [pc, #84]	; (400e24 <prvUnlockQueue+0x90>)
  400dce:	4798      	blx	r3
  400dd0:	e7ef      	b.n	400db2 <prvUnlockQueue+0x1e>
							vTaskMissedYield();
  400dd2:	4b14      	ldr	r3, [pc, #80]	; (400e24 <prvUnlockQueue+0x90>)
  400dd4:	4798      	blx	r3
  400dd6:	e7ec      	b.n	400db2 <prvUnlockQueue+0x1e>
		pxQueue->cTxLock = queueUNLOCKED;
  400dd8:	23ff      	movs	r3, #255	; 0xff
  400dda:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
  400dde:	4b12      	ldr	r3, [pc, #72]	; (400e28 <prvUnlockQueue+0x94>)
  400de0:	4798      	blx	r3
	taskENTER_CRITICAL();
  400de2:	4b0d      	ldr	r3, [pc, #52]	; (400e18 <prvUnlockQueue+0x84>)
  400de4:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
  400de6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  400dea:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  400dec:	e001      	b.n	400df2 <prvUnlockQueue+0x5e>
				--cRxLock;
  400dee:	3c01      	subs	r4, #1
  400df0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  400df2:	2c00      	cmp	r4, #0
  400df4:	dd0a      	ble.n	400e0c <prvUnlockQueue+0x78>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400df6:	692b      	ldr	r3, [r5, #16]
  400df8:	b143      	cbz	r3, 400e0c <prvUnlockQueue+0x78>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400dfa:	f105 0010 	add.w	r0, r5, #16
  400dfe:	4b07      	ldr	r3, [pc, #28]	; (400e1c <prvUnlockQueue+0x88>)
  400e00:	4798      	blx	r3
  400e02:	2800      	cmp	r0, #0
  400e04:	d0f3      	beq.n	400dee <prvUnlockQueue+0x5a>
					vTaskMissedYield();
  400e06:	4b07      	ldr	r3, [pc, #28]	; (400e24 <prvUnlockQueue+0x90>)
  400e08:	4798      	blx	r3
  400e0a:	e7f0      	b.n	400dee <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
  400e0c:	23ff      	movs	r3, #255	; 0xff
  400e0e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
  400e12:	4b05      	ldr	r3, [pc, #20]	; (400e28 <prvUnlockQueue+0x94>)
  400e14:	4798      	blx	r3
  400e16:	bd38      	pop	{r3, r4, r5, pc}
  400e18:	004006c5 	.word	0x004006c5
  400e1c:	00401ca9 	.word	0x00401ca9
  400e20:	00400ce9 	.word	0x00400ce9
  400e24:	00401ddd 	.word	0x00401ddd
  400e28:	0040070d 	.word	0x0040070d

00400e2c <xQueueGenericReset>:
{
  400e2c:	b538      	push	{r3, r4, r5, lr}
  400e2e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
  400e30:	4604      	mov	r4, r0
  400e32:	b1d0      	cbz	r0, 400e6a <xQueueGenericReset+0x3e>
	taskENTER_CRITICAL();
  400e34:	4b1b      	ldr	r3, [pc, #108]	; (400ea4 <xQueueGenericReset+0x78>)
  400e36:	4798      	blx	r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400e38:	6821      	ldr	r1, [r4, #0]
  400e3a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  400e3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400e3e:	fb03 1002 	mla	r0, r3, r2, r1
  400e42:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400e44:	2000      	movs	r0, #0
  400e46:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400e48:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400e4a:	3a01      	subs	r2, #1
  400e4c:	fb02 1303 	mla	r3, r2, r3, r1
  400e50:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  400e52:	23ff      	movs	r3, #255	; 0xff
  400e54:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  400e58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  400e5c:	b9d5      	cbnz	r5, 400e94 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400e5e:	6923      	ldr	r3, [r4, #16]
  400e60:	b94b      	cbnz	r3, 400e76 <xQueueGenericReset+0x4a>
	taskEXIT_CRITICAL();
  400e62:	4b11      	ldr	r3, [pc, #68]	; (400ea8 <xQueueGenericReset+0x7c>)
  400e64:	4798      	blx	r3
}
  400e66:	2001      	movs	r0, #1
  400e68:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
  400e6a:	f240 1103 	movw	r1, #259	; 0x103
  400e6e:	480f      	ldr	r0, [pc, #60]	; (400eac <xQueueGenericReset+0x80>)
  400e70:	4b0f      	ldr	r3, [pc, #60]	; (400eb0 <xQueueGenericReset+0x84>)
  400e72:	4798      	blx	r3
  400e74:	e7de      	b.n	400e34 <xQueueGenericReset+0x8>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400e76:	f104 0010 	add.w	r0, r4, #16
  400e7a:	4b0e      	ldr	r3, [pc, #56]	; (400eb4 <xQueueGenericReset+0x88>)
  400e7c:	4798      	blx	r3
  400e7e:	2800      	cmp	r0, #0
  400e80:	d0ef      	beq.n	400e62 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
  400e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400e86:	4b0c      	ldr	r3, [pc, #48]	; (400eb8 <xQueueGenericReset+0x8c>)
  400e88:	601a      	str	r2, [r3, #0]
  400e8a:	f3bf 8f4f 	dsb	sy
  400e8e:	f3bf 8f6f 	isb	sy
  400e92:	e7e6      	b.n	400e62 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400e94:	f104 0010 	add.w	r0, r4, #16
  400e98:	4d08      	ldr	r5, [pc, #32]	; (400ebc <xQueueGenericReset+0x90>)
  400e9a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400e9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ea0:	47a8      	blx	r5
  400ea2:	e7de      	b.n	400e62 <xQueueGenericReset+0x36>
  400ea4:	004006c5 	.word	0x004006c5
  400ea8:	0040070d 	.word	0x0040070d
  400eac:	00403310 	.word	0x00403310
  400eb0:	00402f21 	.word	0x00402f21
  400eb4:	00401ca9 	.word	0x00401ca9
  400eb8:	e000ed04 	.word	0xe000ed04
  400ebc:	0040055d 	.word	0x0040055d

00400ec0 <prvInitialiseNewQueue>:
{
  400ec0:	b510      	push	{r4, lr}
  400ec2:	9c02      	ldr	r4, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
  400ec4:	460b      	mov	r3, r1
  400ec6:	b149      	cbz	r1, 400edc <prvInitialiseNewQueue+0x1c>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  400ec8:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
  400eca:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  400ecc:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400ece:	2101      	movs	r1, #1
  400ed0:	4620      	mov	r0, r4
  400ed2:	4b03      	ldr	r3, [pc, #12]	; (400ee0 <prvInitialiseNewQueue+0x20>)
  400ed4:	4798      	blx	r3
		pxNewQueue->pxQueueSetContainer = NULL;
  400ed6:	2300      	movs	r3, #0
  400ed8:	64a3      	str	r3, [r4, #72]	; 0x48
  400eda:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400edc:	6024      	str	r4, [r4, #0]
  400ede:	e7f4      	b.n	400eca <prvInitialiseNewQueue+0xa>
  400ee0:	00400e2d 	.word	0x00400e2d

00400ee4 <xQueueGenericCreate>:
	{
  400ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
  400ee6:	b083      	sub	sp, #12
  400ee8:	460d      	mov	r5, r1
  400eea:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400eec:	4606      	mov	r6, r0
  400eee:	b190      	cbz	r0, 400f16 <xQueueGenericCreate+0x32>
		if( uxItemSize == ( UBaseType_t ) 0 )
  400ef0:	b1bd      	cbz	r5, 400f22 <xQueueGenericCreate+0x3e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400ef2:	fb05 f006 	mul.w	r0, r5, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
  400ef6:	304c      	adds	r0, #76	; 0x4c
  400ef8:	4b0b      	ldr	r3, [pc, #44]	; (400f28 <xQueueGenericCreate+0x44>)
  400efa:	4798      	blx	r3
		if( pxNewQueue != NULL )
  400efc:	4604      	mov	r4, r0
  400efe:	b138      	cbz	r0, 400f10 <xQueueGenericCreate+0x2c>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
  400f00:	9000      	str	r0, [sp, #0]
  400f02:	463b      	mov	r3, r7
  400f04:	f100 024c 	add.w	r2, r0, #76	; 0x4c
  400f08:	4629      	mov	r1, r5
  400f0a:	4630      	mov	r0, r6
  400f0c:	4d07      	ldr	r5, [pc, #28]	; (400f2c <xQueueGenericCreate+0x48>)
  400f0e:	47a8      	blx	r5
	}
  400f10:	4620      	mov	r0, r4
  400f12:	b003      	add	sp, #12
  400f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400f16:	f44f 71bb 	mov.w	r1, #374	; 0x176
  400f1a:	4805      	ldr	r0, [pc, #20]	; (400f30 <xQueueGenericCreate+0x4c>)
  400f1c:	4b05      	ldr	r3, [pc, #20]	; (400f34 <xQueueGenericCreate+0x50>)
  400f1e:	4798      	blx	r3
  400f20:	e7e6      	b.n	400ef0 <xQueueGenericCreate+0xc>
			xQueueSizeInBytes = ( size_t ) 0;
  400f22:	2000      	movs	r0, #0
  400f24:	e7e7      	b.n	400ef6 <xQueueGenericCreate+0x12>
  400f26:	bf00      	nop
  400f28:	004009d9 	.word	0x004009d9
  400f2c:	00400ec1 	.word	0x00400ec1
  400f30:	00403310 	.word	0x00403310
  400f34:	00402f21 	.word	0x00402f21

00400f38 <xQueueGenericSend>:
{
  400f38:	b5f0      	push	{r4, r5, r6, r7, lr}
  400f3a:	b085      	sub	sp, #20
  400f3c:	460f      	mov	r7, r1
  400f3e:	9201      	str	r2, [sp, #4]
  400f40:	461e      	mov	r6, r3
	configASSERT( pxQueue );
  400f42:	4604      	mov	r4, r0
  400f44:	b168      	cbz	r0, 400f62 <xQueueGenericSend+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400f46:	b197      	cbz	r7, 400f6e <xQueueGenericSend+0x36>
  400f48:	2301      	movs	r3, #1
  400f4a:	b1b3      	cbz	r3, 400f7a <xQueueGenericSend+0x42>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400f4c:	2e02      	cmp	r6, #2
  400f4e:	d01a      	beq.n	400f86 <xQueueGenericSend+0x4e>
  400f50:	2301      	movs	r3, #1
  400f52:	b1eb      	cbz	r3, 400f90 <xQueueGenericSend+0x58>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400f54:	4b63      	ldr	r3, [pc, #396]	; (4010e4 <xQueueGenericSend+0x1ac>)
  400f56:	4798      	blx	r3
  400f58:	bb00      	cbnz	r0, 400f9c <xQueueGenericSend+0x64>
  400f5a:	9b01      	ldr	r3, [sp, #4]
  400f5c:	bb13      	cbnz	r3, 400fa4 <xQueueGenericSend+0x6c>
  400f5e:	2301      	movs	r3, #1
  400f60:	e01d      	b.n	400f9e <xQueueGenericSend+0x66>
	configASSERT( pxQueue );
  400f62:	f240 21f1 	movw	r1, #753	; 0x2f1
  400f66:	4860      	ldr	r0, [pc, #384]	; (4010e8 <xQueueGenericSend+0x1b0>)
  400f68:	4b60      	ldr	r3, [pc, #384]	; (4010ec <xQueueGenericSend+0x1b4>)
  400f6a:	4798      	blx	r3
  400f6c:	e7eb      	b.n	400f46 <xQueueGenericSend+0xe>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400f6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400f70:	b90b      	cbnz	r3, 400f76 <xQueueGenericSend+0x3e>
  400f72:	2301      	movs	r3, #1
  400f74:	e7e9      	b.n	400f4a <xQueueGenericSend+0x12>
  400f76:	2300      	movs	r3, #0
  400f78:	e7e7      	b.n	400f4a <xQueueGenericSend+0x12>
  400f7a:	f240 21f2 	movw	r1, #754	; 0x2f2
  400f7e:	485a      	ldr	r0, [pc, #360]	; (4010e8 <xQueueGenericSend+0x1b0>)
  400f80:	4b5a      	ldr	r3, [pc, #360]	; (4010ec <xQueueGenericSend+0x1b4>)
  400f82:	4798      	blx	r3
  400f84:	e7e2      	b.n	400f4c <xQueueGenericSend+0x14>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400f86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f88:	2b01      	cmp	r3, #1
  400f8a:	d0e2      	beq.n	400f52 <xQueueGenericSend+0x1a>
  400f8c:	2300      	movs	r3, #0
  400f8e:	e7e0      	b.n	400f52 <xQueueGenericSend+0x1a>
  400f90:	f240 21f3 	movw	r1, #755	; 0x2f3
  400f94:	4854      	ldr	r0, [pc, #336]	; (4010e8 <xQueueGenericSend+0x1b0>)
  400f96:	4b55      	ldr	r3, [pc, #340]	; (4010ec <xQueueGenericSend+0x1b4>)
  400f98:	4798      	blx	r3
  400f9a:	e7db      	b.n	400f54 <xQueueGenericSend+0x1c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400f9c:	2301      	movs	r3, #1
  400f9e:	b11b      	cbz	r3, 400fa8 <xQueueGenericSend+0x70>
  400fa0:	2500      	movs	r5, #0
  400fa2:	e058      	b.n	401056 <xQueueGenericSend+0x11e>
  400fa4:	2300      	movs	r3, #0
  400fa6:	e7fa      	b.n	400f9e <xQueueGenericSend+0x66>
  400fa8:	f240 21f6 	movw	r1, #758	; 0x2f6
  400fac:	484e      	ldr	r0, [pc, #312]	; (4010e8 <xQueueGenericSend+0x1b0>)
  400fae:	4b4f      	ldr	r3, [pc, #316]	; (4010ec <xQueueGenericSend+0x1b4>)
  400fb0:	4798      	blx	r3
  400fb2:	e7f5      	b.n	400fa0 <xQueueGenericSend+0x68>
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  400fb4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400fb6:	4632      	mov	r2, r6
  400fb8:	4639      	mov	r1, r7
  400fba:	4620      	mov	r0, r4
  400fbc:	4b4c      	ldr	r3, [pc, #304]	; (4010f0 <xQueueGenericSend+0x1b8>)
  400fbe:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  400fc0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400fc2:	b1b3      	cbz	r3, 400ff2 <xQueueGenericSend+0xba>
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400fc4:	2e02      	cmp	r6, #2
  400fc6:	d011      	beq.n	400fec <xQueueGenericSend+0xb4>
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  400fc8:	4631      	mov	r1, r6
  400fca:	4620      	mov	r0, r4
  400fcc:	4b49      	ldr	r3, [pc, #292]	; (4010f4 <xQueueGenericSend+0x1bc>)
  400fce:	4798      	blx	r3
  400fd0:	b138      	cbz	r0, 400fe2 <xQueueGenericSend+0xaa>
							queueYIELD_IF_USING_PREEMPTION();
  400fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400fd6:	4b48      	ldr	r3, [pc, #288]	; (4010f8 <xQueueGenericSend+0x1c0>)
  400fd8:	601a      	str	r2, [r3, #0]
  400fda:	f3bf 8f4f 	dsb	sy
  400fde:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  400fe2:	4b46      	ldr	r3, [pc, #280]	; (4010fc <xQueueGenericSend+0x1c4>)
  400fe4:	4798      	blx	r3
				return pdPASS;
  400fe6:	2001      	movs	r0, #1
}
  400fe8:	b005      	add	sp, #20
  400fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400fec:	2d00      	cmp	r5, #0
  400fee:	d0eb      	beq.n	400fc8 <xQueueGenericSend+0x90>
  400ff0:	e7f7      	b.n	400fe2 <xQueueGenericSend+0xaa>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400ff4:	b953      	cbnz	r3, 40100c <xQueueGenericSend+0xd4>
						else if( xYieldRequired != pdFALSE )
  400ff6:	2800      	cmp	r0, #0
  400ff8:	d0f3      	beq.n	400fe2 <xQueueGenericSend+0xaa>
							queueYIELD_IF_USING_PREEMPTION();
  400ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400ffe:	4b3e      	ldr	r3, [pc, #248]	; (4010f8 <xQueueGenericSend+0x1c0>)
  401000:	601a      	str	r2, [r3, #0]
  401002:	f3bf 8f4f 	dsb	sy
  401006:	f3bf 8f6f 	isb	sy
  40100a:	e7ea      	b.n	400fe2 <xQueueGenericSend+0xaa>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40100c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401010:	4b3b      	ldr	r3, [pc, #236]	; (401100 <xQueueGenericSend+0x1c8>)
  401012:	4798      	blx	r3
  401014:	2800      	cmp	r0, #0
  401016:	d0e4      	beq.n	400fe2 <xQueueGenericSend+0xaa>
								queueYIELD_IF_USING_PREEMPTION();
  401018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40101c:	4b36      	ldr	r3, [pc, #216]	; (4010f8 <xQueueGenericSend+0x1c0>)
  40101e:	601a      	str	r2, [r3, #0]
  401020:	f3bf 8f4f 	dsb	sy
  401024:	f3bf 8f6f 	isb	sy
  401028:	e7db      	b.n	400fe2 <xQueueGenericSend+0xaa>
					taskEXIT_CRITICAL();
  40102a:	4b34      	ldr	r3, [pc, #208]	; (4010fc <xQueueGenericSend+0x1c4>)
  40102c:	4798      	blx	r3
					return errQUEUE_FULL;
  40102e:	2000      	movs	r0, #0
  401030:	e7da      	b.n	400fe8 <xQueueGenericSend+0xb0>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401032:	a802      	add	r0, sp, #8
  401034:	4b33      	ldr	r3, [pc, #204]	; (401104 <xQueueGenericSend+0x1cc>)
  401036:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  401038:	2501      	movs	r5, #1
  40103a:	e019      	b.n	401070 <xQueueGenericSend+0x138>
		prvLockQueue( pxQueue );
  40103c:	2300      	movs	r3, #0
  40103e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401042:	e021      	b.n	401088 <xQueueGenericSend+0x150>
  401044:	2300      	movs	r3, #0
  401046:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  40104a:	e023      	b.n	401094 <xQueueGenericSend+0x15c>
				prvUnlockQueue( pxQueue );
  40104c:	4620      	mov	r0, r4
  40104e:	4b2e      	ldr	r3, [pc, #184]	; (401108 <xQueueGenericSend+0x1d0>)
  401050:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401052:	4b2e      	ldr	r3, [pc, #184]	; (40110c <xQueueGenericSend+0x1d4>)
  401054:	4798      	blx	r3
		taskENTER_CRITICAL();
  401056:	4b2e      	ldr	r3, [pc, #184]	; (401110 <xQueueGenericSend+0x1d8>)
  401058:	4798      	blx	r3
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40105a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40105c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40105e:	429a      	cmp	r2, r3
  401060:	d3a8      	bcc.n	400fb4 <xQueueGenericSend+0x7c>
  401062:	2e02      	cmp	r6, #2
  401064:	d0a6      	beq.n	400fb4 <xQueueGenericSend+0x7c>
				if( xTicksToWait == ( TickType_t ) 0 )
  401066:	9b01      	ldr	r3, [sp, #4]
  401068:	2b00      	cmp	r3, #0
  40106a:	d0de      	beq.n	40102a <xQueueGenericSend+0xf2>
				else if( xEntryTimeSet == pdFALSE )
  40106c:	2d00      	cmp	r5, #0
  40106e:	d0e0      	beq.n	401032 <xQueueGenericSend+0xfa>
		taskEXIT_CRITICAL();
  401070:	4b22      	ldr	r3, [pc, #136]	; (4010fc <xQueueGenericSend+0x1c4>)
  401072:	4798      	blx	r3
		vTaskSuspendAll();
  401074:	4b27      	ldr	r3, [pc, #156]	; (401114 <xQueueGenericSend+0x1dc>)
  401076:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401078:	4b25      	ldr	r3, [pc, #148]	; (401110 <xQueueGenericSend+0x1d8>)
  40107a:	4798      	blx	r3
  40107c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401080:	b25b      	sxtb	r3, r3
  401082:	f1b3 3fff 	cmp.w	r3, #4294967295
  401086:	d0d9      	beq.n	40103c <xQueueGenericSend+0x104>
  401088:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  40108c:	b25b      	sxtb	r3, r3
  40108e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401092:	d0d7      	beq.n	401044 <xQueueGenericSend+0x10c>
  401094:	4b19      	ldr	r3, [pc, #100]	; (4010fc <xQueueGenericSend+0x1c4>)
  401096:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401098:	a901      	add	r1, sp, #4
  40109a:	a802      	add	r0, sp, #8
  40109c:	4b1e      	ldr	r3, [pc, #120]	; (401118 <xQueueGenericSend+0x1e0>)
  40109e:	4798      	blx	r3
  4010a0:	b9c8      	cbnz	r0, 4010d6 <xQueueGenericSend+0x19e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4010a2:	4620      	mov	r0, r4
  4010a4:	4b1d      	ldr	r3, [pc, #116]	; (40111c <xQueueGenericSend+0x1e4>)
  4010a6:	4798      	blx	r3
  4010a8:	2800      	cmp	r0, #0
  4010aa:	d0cf      	beq.n	40104c <xQueueGenericSend+0x114>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4010ac:	9901      	ldr	r1, [sp, #4]
  4010ae:	f104 0010 	add.w	r0, r4, #16
  4010b2:	4b1b      	ldr	r3, [pc, #108]	; (401120 <xQueueGenericSend+0x1e8>)
  4010b4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4010b6:	4620      	mov	r0, r4
  4010b8:	4b13      	ldr	r3, [pc, #76]	; (401108 <xQueueGenericSend+0x1d0>)
  4010ba:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4010bc:	4b13      	ldr	r3, [pc, #76]	; (40110c <xQueueGenericSend+0x1d4>)
  4010be:	4798      	blx	r3
  4010c0:	2800      	cmp	r0, #0
  4010c2:	d1c8      	bne.n	401056 <xQueueGenericSend+0x11e>
					portYIELD_WITHIN_API();
  4010c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4010c8:	4b0b      	ldr	r3, [pc, #44]	; (4010f8 <xQueueGenericSend+0x1c0>)
  4010ca:	601a      	str	r2, [r3, #0]
  4010cc:	f3bf 8f4f 	dsb	sy
  4010d0:	f3bf 8f6f 	isb	sy
  4010d4:	e7bf      	b.n	401056 <xQueueGenericSend+0x11e>
			prvUnlockQueue( pxQueue );
  4010d6:	4620      	mov	r0, r4
  4010d8:	4b0b      	ldr	r3, [pc, #44]	; (401108 <xQueueGenericSend+0x1d0>)
  4010da:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4010dc:	4b0b      	ldr	r3, [pc, #44]	; (40110c <xQueueGenericSend+0x1d4>)
  4010de:	4798      	blx	r3
			return errQUEUE_FULL;
  4010e0:	2000      	movs	r0, #0
  4010e2:	e781      	b.n	400fe8 <xQueueGenericSend+0xb0>
  4010e4:	00401de9 	.word	0x00401de9
  4010e8:	00403310 	.word	0x00403310
  4010ec:	00402f21 	.word	0x00402f21
  4010f0:	00400c69 	.word	0x00400c69
  4010f4:	00400ce9 	.word	0x00400ce9
  4010f8:	e000ed04 	.word	0xe000ed04
  4010fc:	0040070d 	.word	0x0040070d
  401100:	00401ca9 	.word	0x00401ca9
  401104:	00401d3d 	.word	0x00401d3d
  401108:	00400d95 	.word	0x00400d95
  40110c:	004019d9 	.word	0x004019d9
  401110:	004006c5 	.word	0x004006c5
  401114:	00401899 	.word	0x00401899
  401118:	00401d55 	.word	0x00401d55
  40111c:	00400c1d 	.word	0x00400c1d
  401120:	00401c21 	.word	0x00401c21

00401124 <xQueueGenericSendFromISR>:
{
  401124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401128:	460f      	mov	r7, r1
  40112a:	4691      	mov	r9, r2
  40112c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
  40112e:	4604      	mov	r4, r0
  401130:	b1e8      	cbz	r0, 40116e <xQueueGenericSendFromISR+0x4a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401132:	b317      	cbz	r7, 40117a <xQueueGenericSendFromISR+0x56>
  401134:	2301      	movs	r3, #1
  401136:	b333      	cbz	r3, 401186 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401138:	2e02      	cmp	r6, #2
  40113a:	d02a      	beq.n	401192 <xQueueGenericSendFromISR+0x6e>
  40113c:	2301      	movs	r3, #1
  40113e:	b36b      	cbz	r3, 40119c <xQueueGenericSendFromISR+0x78>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401140:	4b35      	ldr	r3, [pc, #212]	; (401218 <xQueueGenericSendFromISR+0xf4>)
  401142:	4798      	blx	r3
	__asm volatile
  401144:	f3ef 8811 	mrs	r8, BASEPRI
  401148:	f04f 0350 	mov.w	r3, #80	; 0x50
  40114c:	f383 8811 	msr	BASEPRI, r3
  401150:	f3bf 8f6f 	isb	sy
  401154:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401158:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40115a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40115c:	429a      	cmp	r2, r3
  40115e:	d323      	bcc.n	4011a8 <xQueueGenericSendFromISR+0x84>
  401160:	2e02      	cmp	r6, #2
  401162:	d021      	beq.n	4011a8 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
  401164:	2000      	movs	r0, #0
	__asm volatile
  401166:	f388 8811 	msr	BASEPRI, r8
}
  40116a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( pxQueue );
  40116e:	f240 31c3 	movw	r1, #963	; 0x3c3
  401172:	482a      	ldr	r0, [pc, #168]	; (40121c <xQueueGenericSendFromISR+0xf8>)
  401174:	4b2a      	ldr	r3, [pc, #168]	; (401220 <xQueueGenericSendFromISR+0xfc>)
  401176:	4798      	blx	r3
  401178:	e7db      	b.n	401132 <xQueueGenericSendFromISR+0xe>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40117a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40117c:	b90b      	cbnz	r3, 401182 <xQueueGenericSendFromISR+0x5e>
  40117e:	2301      	movs	r3, #1
  401180:	e7d9      	b.n	401136 <xQueueGenericSendFromISR+0x12>
  401182:	2300      	movs	r3, #0
  401184:	e7d7      	b.n	401136 <xQueueGenericSendFromISR+0x12>
  401186:	f44f 7171 	mov.w	r1, #964	; 0x3c4
  40118a:	4824      	ldr	r0, [pc, #144]	; (40121c <xQueueGenericSendFromISR+0xf8>)
  40118c:	4b24      	ldr	r3, [pc, #144]	; (401220 <xQueueGenericSendFromISR+0xfc>)
  40118e:	4798      	blx	r3
  401190:	e7d2      	b.n	401138 <xQueueGenericSendFromISR+0x14>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401192:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401194:	2b01      	cmp	r3, #1
  401196:	d0d2      	beq.n	40113e <xQueueGenericSendFromISR+0x1a>
  401198:	2300      	movs	r3, #0
  40119a:	e7d0      	b.n	40113e <xQueueGenericSendFromISR+0x1a>
  40119c:	f240 31c5 	movw	r1, #965	; 0x3c5
  4011a0:	481e      	ldr	r0, [pc, #120]	; (40121c <xQueueGenericSendFromISR+0xf8>)
  4011a2:	4b1f      	ldr	r3, [pc, #124]	; (401220 <xQueueGenericSendFromISR+0xfc>)
  4011a4:	4798      	blx	r3
  4011a6:	e7cb      	b.n	401140 <xQueueGenericSendFromISR+0x1c>
			const int8_t cTxLock = pxQueue->cTxLock;
  4011a8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  4011ac:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4011ae:	4632      	mov	r2, r6
  4011b0:	4639      	mov	r1, r7
  4011b2:	4620      	mov	r0, r4
  4011b4:	4b1b      	ldr	r3, [pc, #108]	; (401224 <xQueueGenericSendFromISR+0x100>)
  4011b6:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
  4011b8:	f1b5 3fff 	cmp.w	r5, #4294967295
  4011bc:	d005      	beq.n	4011ca <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  4011be:	3501      	adds	r5, #1
  4011c0:	b26d      	sxtb	r5, r5
  4011c2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			xReturn = pdPASS;
  4011c6:	2001      	movs	r0, #1
  4011c8:	e7cd      	b.n	401166 <xQueueGenericSendFromISR+0x42>
					if( pxQueue->pxQueueSetContainer != NULL )
  4011ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4011cc:	b15b      	cbz	r3, 4011e6 <xQueueGenericSendFromISR+0xc2>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  4011ce:	4631      	mov	r1, r6
  4011d0:	4620      	mov	r0, r4
  4011d2:	4b15      	ldr	r3, [pc, #84]	; (401228 <xQueueGenericSendFromISR+0x104>)
  4011d4:	4798      	blx	r3
  4011d6:	b1b0      	cbz	r0, 401206 <xQueueGenericSendFromISR+0xe2>
							if( pxHigherPriorityTaskWoken != NULL )
  4011d8:	f1b9 0f00 	cmp.w	r9, #0
  4011dc:	d015      	beq.n	40120a <xQueueGenericSendFromISR+0xe6>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4011de:	2001      	movs	r0, #1
  4011e0:	f8c9 0000 	str.w	r0, [r9]
  4011e4:	e7bf      	b.n	401166 <xQueueGenericSendFromISR+0x42>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4011e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4011e8:	b90b      	cbnz	r3, 4011ee <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
  4011ea:	2001      	movs	r0, #1
  4011ec:	e7bb      	b.n	401166 <xQueueGenericSendFromISR+0x42>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4011ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4011f2:	4b0e      	ldr	r3, [pc, #56]	; (40122c <xQueueGenericSendFromISR+0x108>)
  4011f4:	4798      	blx	r3
  4011f6:	b150      	cbz	r0, 40120e <xQueueGenericSendFromISR+0xea>
								if( pxHigherPriorityTaskWoken != NULL )
  4011f8:	f1b9 0f00 	cmp.w	r9, #0
  4011fc:	d009      	beq.n	401212 <xQueueGenericSendFromISR+0xee>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4011fe:	2001      	movs	r0, #1
  401200:	f8c9 0000 	str.w	r0, [r9]
  401204:	e7af      	b.n	401166 <xQueueGenericSendFromISR+0x42>
			xReturn = pdPASS;
  401206:	2001      	movs	r0, #1
  401208:	e7ad      	b.n	401166 <xQueueGenericSendFromISR+0x42>
  40120a:	2001      	movs	r0, #1
  40120c:	e7ab      	b.n	401166 <xQueueGenericSendFromISR+0x42>
  40120e:	2001      	movs	r0, #1
  401210:	e7a9      	b.n	401166 <xQueueGenericSendFromISR+0x42>
  401212:	2001      	movs	r0, #1
  401214:	e7a7      	b.n	401166 <xQueueGenericSendFromISR+0x42>
  401216:	bf00      	nop
  401218:	00400925 	.word	0x00400925
  40121c:	00403310 	.word	0x00403310
  401220:	00402f21 	.word	0x00402f21
  401224:	00400c69 	.word	0x00400c69
  401228:	00400ce9 	.word	0x00400ce9
  40122c:	00401ca9 	.word	0x00401ca9

00401230 <xQueueReceive>:
{
  401230:	b5f0      	push	{r4, r5, r6, r7, lr}
  401232:	b085      	sub	sp, #20
  401234:	460f      	mov	r7, r1
  401236:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
  401238:	4604      	mov	r4, r0
  40123a:	b148      	cbz	r0, 401250 <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40123c:	b177      	cbz	r7, 40125c <xQueueReceive+0x2c>
  40123e:	2301      	movs	r3, #1
  401240:	b193      	cbz	r3, 401268 <xQueueReceive+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401242:	4b51      	ldr	r3, [pc, #324]	; (401388 <xQueueReceive+0x158>)
  401244:	4798      	blx	r3
  401246:	b9a8      	cbnz	r0, 401274 <xQueueReceive+0x44>
  401248:	9b01      	ldr	r3, [sp, #4]
  40124a:	b9bb      	cbnz	r3, 40127c <xQueueReceive+0x4c>
  40124c:	2301      	movs	r3, #1
  40124e:	e012      	b.n	401276 <xQueueReceive+0x46>
	configASSERT( ( pxQueue ) );
  401250:	f44f 61a0 	mov.w	r1, #1280	; 0x500
  401254:	484d      	ldr	r0, [pc, #308]	; (40138c <xQueueReceive+0x15c>)
  401256:	4b4e      	ldr	r3, [pc, #312]	; (401390 <xQueueReceive+0x160>)
  401258:	4798      	blx	r3
  40125a:	e7ef      	b.n	40123c <xQueueReceive+0xc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40125c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40125e:	b90b      	cbnz	r3, 401264 <xQueueReceive+0x34>
  401260:	2301      	movs	r3, #1
  401262:	e7ed      	b.n	401240 <xQueueReceive+0x10>
  401264:	2300      	movs	r3, #0
  401266:	e7eb      	b.n	401240 <xQueueReceive+0x10>
  401268:	f240 5104 	movw	r1, #1284	; 0x504
  40126c:	4847      	ldr	r0, [pc, #284]	; (40138c <xQueueReceive+0x15c>)
  40126e:	4b48      	ldr	r3, [pc, #288]	; (401390 <xQueueReceive+0x160>)
  401270:	4798      	blx	r3
  401272:	e7e6      	b.n	401242 <xQueueReceive+0x12>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401274:	2301      	movs	r3, #1
  401276:	b11b      	cbz	r3, 401280 <xQueueReceive+0x50>
  401278:	2600      	movs	r6, #0
  40127a:	e044      	b.n	401306 <xQueueReceive+0xd6>
  40127c:	2300      	movs	r3, #0
  40127e:	e7fa      	b.n	401276 <xQueueReceive+0x46>
  401280:	f240 5109 	movw	r1, #1289	; 0x509
  401284:	4841      	ldr	r0, [pc, #260]	; (40138c <xQueueReceive+0x15c>)
  401286:	4b42      	ldr	r3, [pc, #264]	; (401390 <xQueueReceive+0x160>)
  401288:	4798      	blx	r3
  40128a:	e7f5      	b.n	401278 <xQueueReceive+0x48>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  40128c:	4639      	mov	r1, r7
  40128e:	4620      	mov	r0, r4
  401290:	4b40      	ldr	r3, [pc, #256]	; (401394 <xQueueReceive+0x164>)
  401292:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  401294:	3d01      	subs	r5, #1
  401296:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401298:	6923      	ldr	r3, [r4, #16]
  40129a:	b923      	cbnz	r3, 4012a6 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
  40129c:	4b3e      	ldr	r3, [pc, #248]	; (401398 <xQueueReceive+0x168>)
  40129e:	4798      	blx	r3
				return pdPASS;
  4012a0:	2001      	movs	r0, #1
}
  4012a2:	b005      	add	sp, #20
  4012a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4012a6:	f104 0010 	add.w	r0, r4, #16
  4012aa:	4b3c      	ldr	r3, [pc, #240]	; (40139c <xQueueReceive+0x16c>)
  4012ac:	4798      	blx	r3
  4012ae:	2800      	cmp	r0, #0
  4012b0:	d0f4      	beq.n	40129c <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
  4012b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4012b6:	4b3a      	ldr	r3, [pc, #232]	; (4013a0 <xQueueReceive+0x170>)
  4012b8:	601a      	str	r2, [r3, #0]
  4012ba:	f3bf 8f4f 	dsb	sy
  4012be:	f3bf 8f6f 	isb	sy
  4012c2:	e7eb      	b.n	40129c <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
  4012c4:	4b34      	ldr	r3, [pc, #208]	; (401398 <xQueueReceive+0x168>)
  4012c6:	4798      	blx	r3
					return errQUEUE_EMPTY;
  4012c8:	2000      	movs	r0, #0
  4012ca:	e7ea      	b.n	4012a2 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
  4012cc:	a802      	add	r0, sp, #8
  4012ce:	4b35      	ldr	r3, [pc, #212]	; (4013a4 <xQueueReceive+0x174>)
  4012d0:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  4012d2:	2601      	movs	r6, #1
  4012d4:	e021      	b.n	40131a <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
  4012d6:	2300      	movs	r3, #0
  4012d8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  4012dc:	e029      	b.n	401332 <xQueueReceive+0x102>
  4012de:	2300      	movs	r3, #0
  4012e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  4012e4:	e02b      	b.n	40133e <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
  4012e6:	4620      	mov	r0, r4
  4012e8:	4b2f      	ldr	r3, [pc, #188]	; (4013a8 <xQueueReceive+0x178>)
  4012ea:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4012ec:	4b2f      	ldr	r3, [pc, #188]	; (4013ac <xQueueReceive+0x17c>)
  4012ee:	4798      	blx	r3
  4012f0:	e009      	b.n	401306 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
  4012f2:	4620      	mov	r0, r4
  4012f4:	4b2c      	ldr	r3, [pc, #176]	; (4013a8 <xQueueReceive+0x178>)
  4012f6:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4012f8:	4b2c      	ldr	r3, [pc, #176]	; (4013ac <xQueueReceive+0x17c>)
  4012fa:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4012fc:	4620      	mov	r0, r4
  4012fe:	4b2c      	ldr	r3, [pc, #176]	; (4013b0 <xQueueReceive+0x180>)
  401300:	4798      	blx	r3
  401302:	2800      	cmp	r0, #0
  401304:	d13d      	bne.n	401382 <xQueueReceive+0x152>
		taskENTER_CRITICAL();
  401306:	4b2b      	ldr	r3, [pc, #172]	; (4013b4 <xQueueReceive+0x184>)
  401308:	4798      	blx	r3
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  40130a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  40130c:	2d00      	cmp	r5, #0
  40130e:	d1bd      	bne.n	40128c <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
  401310:	9b01      	ldr	r3, [sp, #4]
  401312:	2b00      	cmp	r3, #0
  401314:	d0d6      	beq.n	4012c4 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
  401316:	2e00      	cmp	r6, #0
  401318:	d0d8      	beq.n	4012cc <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
  40131a:	4b1f      	ldr	r3, [pc, #124]	; (401398 <xQueueReceive+0x168>)
  40131c:	4798      	blx	r3
		vTaskSuspendAll();
  40131e:	4b26      	ldr	r3, [pc, #152]	; (4013b8 <xQueueReceive+0x188>)
  401320:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401322:	4b24      	ldr	r3, [pc, #144]	; (4013b4 <xQueueReceive+0x184>)
  401324:	4798      	blx	r3
  401326:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  40132a:	b25b      	sxtb	r3, r3
  40132c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401330:	d0d1      	beq.n	4012d6 <xQueueReceive+0xa6>
  401332:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401336:	b25b      	sxtb	r3, r3
  401338:	f1b3 3fff 	cmp.w	r3, #4294967295
  40133c:	d0cf      	beq.n	4012de <xQueueReceive+0xae>
  40133e:	4b16      	ldr	r3, [pc, #88]	; (401398 <xQueueReceive+0x168>)
  401340:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401342:	a901      	add	r1, sp, #4
  401344:	a802      	add	r0, sp, #8
  401346:	4b1d      	ldr	r3, [pc, #116]	; (4013bc <xQueueReceive+0x18c>)
  401348:	4798      	blx	r3
  40134a:	2800      	cmp	r0, #0
  40134c:	d1d1      	bne.n	4012f2 <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40134e:	4620      	mov	r0, r4
  401350:	4b17      	ldr	r3, [pc, #92]	; (4013b0 <xQueueReceive+0x180>)
  401352:	4798      	blx	r3
  401354:	2800      	cmp	r0, #0
  401356:	d0c6      	beq.n	4012e6 <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401358:	9901      	ldr	r1, [sp, #4]
  40135a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40135e:	4b18      	ldr	r3, [pc, #96]	; (4013c0 <xQueueReceive+0x190>)
  401360:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401362:	4620      	mov	r0, r4
  401364:	4b10      	ldr	r3, [pc, #64]	; (4013a8 <xQueueReceive+0x178>)
  401366:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401368:	4b10      	ldr	r3, [pc, #64]	; (4013ac <xQueueReceive+0x17c>)
  40136a:	4798      	blx	r3
  40136c:	2800      	cmp	r0, #0
  40136e:	d1ca      	bne.n	401306 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
  401370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401374:	4b0a      	ldr	r3, [pc, #40]	; (4013a0 <xQueueReceive+0x170>)
  401376:	601a      	str	r2, [r3, #0]
  401378:	f3bf 8f4f 	dsb	sy
  40137c:	f3bf 8f6f 	isb	sy
  401380:	e7c1      	b.n	401306 <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
  401382:	2000      	movs	r0, #0
  401384:	e78d      	b.n	4012a2 <xQueueReceive+0x72>
  401386:	bf00      	nop
  401388:	00401de9 	.word	0x00401de9
  40138c:	00403310 	.word	0x00403310
  401390:	00402f21 	.word	0x00402f21
  401394:	00400d6d 	.word	0x00400d6d
  401398:	0040070d 	.word	0x0040070d
  40139c:	00401ca9 	.word	0x00401ca9
  4013a0:	e000ed04 	.word	0xe000ed04
  4013a4:	00401d3d 	.word	0x00401d3d
  4013a8:	00400d95 	.word	0x00400d95
  4013ac:	004019d9 	.word	0x004019d9
  4013b0:	00400c45 	.word	0x00400c45
  4013b4:	004006c5 	.word	0x004006c5
  4013b8:	00401899 	.word	0x00401899
  4013bc:	00401d55 	.word	0x00401d55
  4013c0:	00401c21 	.word	0x00401c21

004013c4 <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4013c4:	2300      	movs	r3, #0
  4013c6:	2b07      	cmp	r3, #7
  4013c8:	d80c      	bhi.n	4013e4 <vQueueAddToRegistry+0x20>
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4013ca:	4a07      	ldr	r2, [pc, #28]	; (4013e8 <vQueueAddToRegistry+0x24>)
  4013cc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  4013d0:	b10a      	cbz	r2, 4013d6 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4013d2:	3301      	adds	r3, #1
  4013d4:	e7f7      	b.n	4013c6 <vQueueAddToRegistry+0x2>
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4013d6:	4a04      	ldr	r2, [pc, #16]	; (4013e8 <vQueueAddToRegistry+0x24>)
  4013d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4013dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4013e0:	6058      	str	r0, [r3, #4]
				break;
  4013e2:	4770      	bx	lr
  4013e4:	4770      	bx	lr
  4013e6:	bf00      	nop
  4013e8:	20000688 	.word	0x20000688

004013ec <vQueueWaitForMessageRestricted>:
	{
  4013ec:	b570      	push	{r4, r5, r6, lr}
  4013ee:	4604      	mov	r4, r0
  4013f0:	460d      	mov	r5, r1
  4013f2:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  4013f4:	4b12      	ldr	r3, [pc, #72]	; (401440 <vQueueWaitForMessageRestricted+0x54>)
  4013f6:	4798      	blx	r3
  4013f8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4013fc:	b25b      	sxtb	r3, r3
  4013fe:	f1b3 3fff 	cmp.w	r3, #4294967295
  401402:	d00d      	beq.n	401420 <vQueueWaitForMessageRestricted+0x34>
  401404:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401408:	b25b      	sxtb	r3, r3
  40140a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40140e:	d00b      	beq.n	401428 <vQueueWaitForMessageRestricted+0x3c>
  401410:	4b0c      	ldr	r3, [pc, #48]	; (401444 <vQueueWaitForMessageRestricted+0x58>)
  401412:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401414:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401416:	b15b      	cbz	r3, 401430 <vQueueWaitForMessageRestricted+0x44>
		prvUnlockQueue( pxQueue );
  401418:	4620      	mov	r0, r4
  40141a:	4b0b      	ldr	r3, [pc, #44]	; (401448 <vQueueWaitForMessageRestricted+0x5c>)
  40141c:	4798      	blx	r3
  40141e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401420:	2300      	movs	r3, #0
  401422:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401426:	e7ed      	b.n	401404 <vQueueWaitForMessageRestricted+0x18>
  401428:	2300      	movs	r3, #0
  40142a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  40142e:	e7ef      	b.n	401410 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401430:	4632      	mov	r2, r6
  401432:	4629      	mov	r1, r5
  401434:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401438:	4b04      	ldr	r3, [pc, #16]	; (40144c <vQueueWaitForMessageRestricted+0x60>)
  40143a:	4798      	blx	r3
  40143c:	e7ec      	b.n	401418 <vQueueWaitForMessageRestricted+0x2c>
  40143e:	bf00      	nop
  401440:	004006c5 	.word	0x004006c5
  401444:	0040070d 	.word	0x0040070d
  401448:	00400d95 	.word	0x00400d95
  40144c:	00401c61 	.word	0x00401c61

00401450 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401450:	4b08      	ldr	r3, [pc, #32]	; (401474 <prvResetNextTaskUnblockTime+0x24>)
  401452:	681b      	ldr	r3, [r3, #0]
  401454:	681b      	ldr	r3, [r3, #0]
  401456:	b13b      	cbz	r3, 401468 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401458:	4b06      	ldr	r3, [pc, #24]	; (401474 <prvResetNextTaskUnblockTime+0x24>)
  40145a:	681b      	ldr	r3, [r3, #0]
  40145c:	68db      	ldr	r3, [r3, #12]
  40145e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  401460:	685a      	ldr	r2, [r3, #4]
  401462:	4b05      	ldr	r3, [pc, #20]	; (401478 <prvResetNextTaskUnblockTime+0x28>)
  401464:	601a      	str	r2, [r3, #0]
  401466:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401468:	f04f 32ff 	mov.w	r2, #4294967295
  40146c:	4b02      	ldr	r3, [pc, #8]	; (401478 <prvResetNextTaskUnblockTime+0x28>)
  40146e:	601a      	str	r2, [r3, #0]
  401470:	4770      	bx	lr
  401472:	bf00      	nop
  401474:	200004f4 	.word	0x200004f4
  401478:	200005e0 	.word	0x200005e0

0040147c <prvDeleteTCB>:
	{
  40147c:	b538      	push	{r3, r4, r5, lr}
  40147e:	4605      	mov	r5, r0
			vPortFree( pxTCB->pxStack );
  401480:	6b00      	ldr	r0, [r0, #48]	; 0x30
  401482:	4c02      	ldr	r4, [pc, #8]	; (40148c <prvDeleteTCB+0x10>)
  401484:	47a0      	blx	r4
			vPortFree( pxTCB );
  401486:	4628      	mov	r0, r5
  401488:	47a0      	blx	r4
  40148a:	bd38      	pop	{r3, r4, r5, pc}
  40148c:	00400abd 	.word	0x00400abd

00401490 <prvInitialiseNewTask>:
{
  401490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401494:	4681      	mov	r9, r0
  401496:	460d      	mov	r5, r1
  401498:	4617      	mov	r7, r2
  40149a:	469a      	mov	sl, r3
  40149c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40149e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  4014a2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  4014a4:	0092      	lsls	r2, r2, #2
  4014a6:	21a5      	movs	r1, #165	; 0xa5
  4014a8:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4014aa:	4b25      	ldr	r3, [pc, #148]	; (401540 <prvInitialiseNewTask+0xb0>)
  4014ac:	4798      	blx	r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
  4014ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4014b0:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
  4014b4:	3a01      	subs	r2, #1
  4014b6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
  4014ba:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
  4014be:	b315      	cbz	r5, 401506 <prvInitialiseNewTask+0x76>
  4014c0:	2300      	movs	r3, #0
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4014c2:	2b13      	cmp	r3, #19
  4014c4:	d807      	bhi.n	4014d6 <prvInitialiseNewTask+0x46>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  4014c6:	5ce9      	ldrb	r1, [r5, r3]
  4014c8:	18e2      	adds	r2, r4, r3
  4014ca:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
  4014ce:	5cea      	ldrb	r2, [r5, r3]
  4014d0:	b10a      	cbz	r2, 4014d6 <prvInitialiseNewTask+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4014d2:	3301      	adds	r3, #1
  4014d4:	e7f5      	b.n	4014c2 <prvInitialiseNewTask+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4014d6:	2300      	movs	r3, #0
  4014d8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
  4014dc:	2e07      	cmp	r6, #7
  4014de:	d900      	bls.n	4014e2 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
  4014e0:	2607      	movs	r6, #7
	pxNewTCB->uxPriority = uxPriority;
  4014e2:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
  4014e4:	64a6      	str	r6, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
  4014e6:	2500      	movs	r5, #0
  4014e8:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  4014ea:	1d20      	adds	r0, r4, #4
  4014ec:	f8df b058 	ldr.w	fp, [pc, #88]	; 401548 <prvInitialiseNewTask+0xb8>
  4014f0:	47d8      	blx	fp
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  4014f2:	f104 0018 	add.w	r0, r4, #24
  4014f6:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  4014f8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4014fa:	f1c6 0608 	rsb	r6, r6, #8
  4014fe:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  401500:	6264      	str	r4, [r4, #36]	; 0x24
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
  401502:	462b      	mov	r3, r5
  401504:	e009      	b.n	40151a <prvInitialiseNewTask+0x8a>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
  401506:	2300      	movs	r3, #0
  401508:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  40150c:	e7e6      	b.n	4014dc <prvInitialiseNewTask+0x4c>
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
  40150e:	f103 0214 	add.w	r2, r3, #20
  401512:	2100      	movs	r1, #0
  401514:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
  401518:	3301      	adds	r3, #1
  40151a:	2b02      	cmp	r3, #2
  40151c:	d9f7      	bls.n	40150e <prvInitialiseNewTask+0x7e>
		pxNewTCB->ulNotifiedValue = 0;
  40151e:	2300      	movs	r3, #0
  401520:	65e3      	str	r3, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  401522:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401526:	4652      	mov	r2, sl
  401528:	4649      	mov	r1, r9
  40152a:	4638      	mov	r0, r7
  40152c:	4b05      	ldr	r3, [pc, #20]	; (401544 <prvInitialiseNewTask+0xb4>)
  40152e:	4798      	blx	r3
  401530:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
  401532:	f1b8 0f00 	cmp.w	r8, #0
  401536:	d001      	beq.n	40153c <prvInitialiseNewTask+0xac>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401538:	f8c8 4000 	str.w	r4, [r8]
  40153c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401540:	004030f9 	.word	0x004030f9
  401544:	0040066d 	.word	0x0040066d
  401548:	00400573 	.word	0x00400573

0040154c <prvInitialiseTaskLists>:
{
  40154c:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  40154e:	2400      	movs	r4, #0
  401550:	e007      	b.n	401562 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401552:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  401556:	0093      	lsls	r3, r2, #2
  401558:	480c      	ldr	r0, [pc, #48]	; (40158c <prvInitialiseTaskLists+0x40>)
  40155a:	4418      	add	r0, r3
  40155c:	4b0c      	ldr	r3, [pc, #48]	; (401590 <prvInitialiseTaskLists+0x44>)
  40155e:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  401560:	3401      	adds	r4, #1
  401562:	2c07      	cmp	r4, #7
  401564:	d9f5      	bls.n	401552 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
  401566:	4e0b      	ldr	r6, [pc, #44]	; (401594 <prvInitialiseTaskLists+0x48>)
  401568:	4630      	mov	r0, r6
  40156a:	4c09      	ldr	r4, [pc, #36]	; (401590 <prvInitialiseTaskLists+0x44>)
  40156c:	47a0      	blx	r4
	vListInitialise( &xDelayedTaskList2 );
  40156e:	4d0a      	ldr	r5, [pc, #40]	; (401598 <prvInitialiseTaskLists+0x4c>)
  401570:	4628      	mov	r0, r5
  401572:	47a0      	blx	r4
	vListInitialise( &xPendingReadyList );
  401574:	4809      	ldr	r0, [pc, #36]	; (40159c <prvInitialiseTaskLists+0x50>)
  401576:	47a0      	blx	r4
		vListInitialise( &xTasksWaitingTermination );
  401578:	4809      	ldr	r0, [pc, #36]	; (4015a0 <prvInitialiseTaskLists+0x54>)
  40157a:	47a0      	blx	r4
		vListInitialise( &xSuspendedTaskList );
  40157c:	4809      	ldr	r0, [pc, #36]	; (4015a4 <prvInitialiseTaskLists+0x58>)
  40157e:	47a0      	blx	r4
	pxDelayedTaskList = &xDelayedTaskList1;
  401580:	4b09      	ldr	r3, [pc, #36]	; (4015a8 <prvInitialiseTaskLists+0x5c>)
  401582:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401584:	4b09      	ldr	r3, [pc, #36]	; (4015ac <prvInitialiseTaskLists+0x60>)
  401586:	601d      	str	r5, [r3, #0]
  401588:	bd70      	pop	{r4, r5, r6, pc}
  40158a:	bf00      	nop
  40158c:	200004fc 	.word	0x200004fc
  401590:	0040055d 	.word	0x0040055d
  401594:	200005b4 	.word	0x200005b4
  401598:	200005c8 	.word	0x200005c8
  40159c:	200005e8 	.word	0x200005e8
  4015a0:	20000614 	.word	0x20000614
  4015a4:	20000600 	.word	0x20000600
  4015a8:	200004f4 	.word	0x200004f4
  4015ac:	200004f8 	.word	0x200004f8

004015b0 <prvAddNewTaskToReadyList>:
{
  4015b0:	b510      	push	{r4, lr}
  4015b2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4015b4:	4b21      	ldr	r3, [pc, #132]	; (40163c <prvAddNewTaskToReadyList+0x8c>)
  4015b6:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
  4015b8:	4a21      	ldr	r2, [pc, #132]	; (401640 <prvAddNewTaskToReadyList+0x90>)
  4015ba:	6813      	ldr	r3, [r2, #0]
  4015bc:	3301      	adds	r3, #1
  4015be:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  4015c0:	4b20      	ldr	r3, [pc, #128]	; (401644 <prvAddNewTaskToReadyList+0x94>)
  4015c2:	681b      	ldr	r3, [r3, #0]
  4015c4:	2b00      	cmp	r3, #0
  4015c6:	d031      	beq.n	40162c <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
  4015c8:	4b1f      	ldr	r3, [pc, #124]	; (401648 <prvAddNewTaskToReadyList+0x98>)
  4015ca:	681b      	ldr	r3, [r3, #0]
  4015cc:	b93b      	cbnz	r3, 4015de <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  4015ce:	4b1d      	ldr	r3, [pc, #116]	; (401644 <prvAddNewTaskToReadyList+0x94>)
  4015d0:	681b      	ldr	r3, [r3, #0]
  4015d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4015d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4015d6:	429a      	cmp	r2, r3
  4015d8:	d801      	bhi.n	4015de <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
  4015da:	4b1a      	ldr	r3, [pc, #104]	; (401644 <prvAddNewTaskToReadyList+0x94>)
  4015dc:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
  4015de:	4a1b      	ldr	r2, [pc, #108]	; (40164c <prvAddNewTaskToReadyList+0x9c>)
  4015e0:	6813      	ldr	r3, [r2, #0]
  4015e2:	3301      	adds	r3, #1
  4015e4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
  4015e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4015e8:	2201      	movs	r2, #1
  4015ea:	409a      	lsls	r2, r3
  4015ec:	4918      	ldr	r1, [pc, #96]	; (401650 <prvAddNewTaskToReadyList+0xa0>)
  4015ee:	6808      	ldr	r0, [r1, #0]
  4015f0:	4302      	orrs	r2, r0
  4015f2:	600a      	str	r2, [r1, #0]
  4015f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4015f8:	009a      	lsls	r2, r3, #2
  4015fa:	1d21      	adds	r1, r4, #4
  4015fc:	4815      	ldr	r0, [pc, #84]	; (401654 <prvAddNewTaskToReadyList+0xa4>)
  4015fe:	4410      	add	r0, r2
  401600:	4b15      	ldr	r3, [pc, #84]	; (401658 <prvAddNewTaskToReadyList+0xa8>)
  401602:	4798      	blx	r3
	taskEXIT_CRITICAL();
  401604:	4b15      	ldr	r3, [pc, #84]	; (40165c <prvAddNewTaskToReadyList+0xac>)
  401606:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
  401608:	4b0f      	ldr	r3, [pc, #60]	; (401648 <prvAddNewTaskToReadyList+0x98>)
  40160a:	681b      	ldr	r3, [r3, #0]
  40160c:	b16b      	cbz	r3, 40162a <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  40160e:	4b0d      	ldr	r3, [pc, #52]	; (401644 <prvAddNewTaskToReadyList+0x94>)
  401610:	681b      	ldr	r3, [r3, #0]
  401612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401614:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401616:	429a      	cmp	r2, r3
  401618:	d207      	bcs.n	40162a <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
  40161a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40161e:	4b10      	ldr	r3, [pc, #64]	; (401660 <prvAddNewTaskToReadyList+0xb0>)
  401620:	601a      	str	r2, [r3, #0]
  401622:	f3bf 8f4f 	dsb	sy
  401626:	f3bf 8f6f 	isb	sy
  40162a:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
  40162c:	4b05      	ldr	r3, [pc, #20]	; (401644 <prvAddNewTaskToReadyList+0x94>)
  40162e:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401630:	6813      	ldr	r3, [r2, #0]
  401632:	2b01      	cmp	r3, #1
  401634:	d1d3      	bne.n	4015de <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
  401636:	4b0b      	ldr	r3, [pc, #44]	; (401664 <prvAddNewTaskToReadyList+0xb4>)
  401638:	4798      	blx	r3
  40163a:	e7d0      	b.n	4015de <prvAddNewTaskToReadyList+0x2e>
  40163c:	004006c5 	.word	0x004006c5
  401640:	2000059c 	.word	0x2000059c
  401644:	200004f0 	.word	0x200004f0
  401648:	200005fc 	.word	0x200005fc
  40164c:	200005ac 	.word	0x200005ac
  401650:	200005b0 	.word	0x200005b0
  401654:	200004fc 	.word	0x200004fc
  401658:	00400579 	.word	0x00400579
  40165c:	0040070d 	.word	0x0040070d
  401660:	e000ed04 	.word	0xe000ed04
  401664:	0040154d 	.word	0x0040154d

00401668 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401668:	4b0f      	ldr	r3, [pc, #60]	; (4016a8 <prvCheckTasksWaitingTermination+0x40>)
  40166a:	681b      	ldr	r3, [r3, #0]
  40166c:	b1d3      	cbz	r3, 4016a4 <prvCheckTasksWaitingTermination+0x3c>
{
  40166e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
  401670:	4b0e      	ldr	r3, [pc, #56]	; (4016ac <prvCheckTasksWaitingTermination+0x44>)
  401672:	4798      	blx	r3
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401674:	4b0e      	ldr	r3, [pc, #56]	; (4016b0 <prvCheckTasksWaitingTermination+0x48>)
  401676:	68db      	ldr	r3, [r3, #12]
  401678:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  40167a:	1d20      	adds	r0, r4, #4
  40167c:	4b0d      	ldr	r3, [pc, #52]	; (4016b4 <prvCheckTasksWaitingTermination+0x4c>)
  40167e:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
  401680:	4a0d      	ldr	r2, [pc, #52]	; (4016b8 <prvCheckTasksWaitingTermination+0x50>)
  401682:	6813      	ldr	r3, [r2, #0]
  401684:	3b01      	subs	r3, #1
  401686:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
  401688:	4a07      	ldr	r2, [pc, #28]	; (4016a8 <prvCheckTasksWaitingTermination+0x40>)
  40168a:	6813      	ldr	r3, [r2, #0]
  40168c:	3b01      	subs	r3, #1
  40168e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
  401690:	4b0a      	ldr	r3, [pc, #40]	; (4016bc <prvCheckTasksWaitingTermination+0x54>)
  401692:	4798      	blx	r3
			prvDeleteTCB( pxTCB );
  401694:	4620      	mov	r0, r4
  401696:	4b0a      	ldr	r3, [pc, #40]	; (4016c0 <prvCheckTasksWaitingTermination+0x58>)
  401698:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  40169a:	4b03      	ldr	r3, [pc, #12]	; (4016a8 <prvCheckTasksWaitingTermination+0x40>)
  40169c:	681b      	ldr	r3, [r3, #0]
  40169e:	2b00      	cmp	r3, #0
  4016a0:	d1e6      	bne.n	401670 <prvCheckTasksWaitingTermination+0x8>
}
  4016a2:	bd10      	pop	{r4, pc}
  4016a4:	4770      	bx	lr
  4016a6:	bf00      	nop
  4016a8:	200005a0 	.word	0x200005a0
  4016ac:	004006c5 	.word	0x004006c5
  4016b0:	20000614 	.word	0x20000614
  4016b4:	004005c5 	.word	0x004005c5
  4016b8:	2000059c 	.word	0x2000059c
  4016bc:	0040070d 	.word	0x0040070d
  4016c0:	0040147d 	.word	0x0040147d

004016c4 <prvIdleTask>:
{
  4016c4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
  4016c6:	4b07      	ldr	r3, [pc, #28]	; (4016e4 <prvIdleTask+0x20>)
  4016c8:	4798      	blx	r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4016ca:	4b07      	ldr	r3, [pc, #28]	; (4016e8 <prvIdleTask+0x24>)
  4016cc:	681b      	ldr	r3, [r3, #0]
  4016ce:	2b01      	cmp	r3, #1
  4016d0:	d9f9      	bls.n	4016c6 <prvIdleTask+0x2>
				taskYIELD();
  4016d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4016d6:	4b05      	ldr	r3, [pc, #20]	; (4016ec <prvIdleTask+0x28>)
  4016d8:	601a      	str	r2, [r3, #0]
  4016da:	f3bf 8f4f 	dsb	sy
  4016de:	f3bf 8f6f 	isb	sy
  4016e2:	e7f0      	b.n	4016c6 <prvIdleTask+0x2>
  4016e4:	00401669 	.word	0x00401669
  4016e8:	200004fc 	.word	0x200004fc
  4016ec:	e000ed04 	.word	0xe000ed04

004016f0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  4016f0:	b570      	push	{r4, r5, r6, lr}
  4016f2:	4604      	mov	r4, r0
  4016f4:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  4016f6:	4b1d      	ldr	r3, [pc, #116]	; (40176c <prvAddCurrentTaskToDelayedList+0x7c>)
  4016f8:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  4016fa:	4b1d      	ldr	r3, [pc, #116]	; (401770 <prvAddCurrentTaskToDelayedList+0x80>)
  4016fc:	6818      	ldr	r0, [r3, #0]
  4016fe:	3004      	adds	r0, #4
  401700:	4b1c      	ldr	r3, [pc, #112]	; (401774 <prvAddCurrentTaskToDelayedList+0x84>)
  401702:	4798      	blx	r3
  401704:	b950      	cbnz	r0, 40171c <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
  401706:	4b1a      	ldr	r3, [pc, #104]	; (401770 <prvAddCurrentTaskToDelayedList+0x80>)
  401708:	681b      	ldr	r3, [r3, #0]
  40170a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40170c:	2301      	movs	r3, #1
  40170e:	fa03 f202 	lsl.w	r2, r3, r2
  401712:	4919      	ldr	r1, [pc, #100]	; (401778 <prvAddCurrentTaskToDelayedList+0x88>)
  401714:	680b      	ldr	r3, [r1, #0]
  401716:	ea23 0302 	bic.w	r3, r3, r2
  40171a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  40171c:	f1b4 3fff 	cmp.w	r4, #4294967295
  401720:	d013      	beq.n	40174a <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  401722:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  401724:	4b12      	ldr	r3, [pc, #72]	; (401770 <prvAddCurrentTaskToDelayedList+0x80>)
  401726:	681b      	ldr	r3, [r3, #0]
  401728:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
  40172a:	42a5      	cmp	r5, r4
  40172c:	d816      	bhi.n	40175c <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40172e:	4b13      	ldr	r3, [pc, #76]	; (40177c <prvAddCurrentTaskToDelayedList+0x8c>)
  401730:	6818      	ldr	r0, [r3, #0]
  401732:	4b0f      	ldr	r3, [pc, #60]	; (401770 <prvAddCurrentTaskToDelayedList+0x80>)
  401734:	6819      	ldr	r1, [r3, #0]
  401736:	3104      	adds	r1, #4
  401738:	4b11      	ldr	r3, [pc, #68]	; (401780 <prvAddCurrentTaskToDelayedList+0x90>)
  40173a:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  40173c:	4b11      	ldr	r3, [pc, #68]	; (401784 <prvAddCurrentTaskToDelayedList+0x94>)
  40173e:	681b      	ldr	r3, [r3, #0]
  401740:	429c      	cmp	r4, r3
  401742:	d201      	bcs.n	401748 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
  401744:	4b0f      	ldr	r3, [pc, #60]	; (401784 <prvAddCurrentTaskToDelayedList+0x94>)
  401746:	601c      	str	r4, [r3, #0]
  401748:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  40174a:	2e00      	cmp	r6, #0
  40174c:	d0e9      	beq.n	401722 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40174e:	4b08      	ldr	r3, [pc, #32]	; (401770 <prvAddCurrentTaskToDelayedList+0x80>)
  401750:	6819      	ldr	r1, [r3, #0]
  401752:	3104      	adds	r1, #4
  401754:	480c      	ldr	r0, [pc, #48]	; (401788 <prvAddCurrentTaskToDelayedList+0x98>)
  401756:	4b0d      	ldr	r3, [pc, #52]	; (40178c <prvAddCurrentTaskToDelayedList+0x9c>)
  401758:	4798      	blx	r3
  40175a:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40175c:	4b0c      	ldr	r3, [pc, #48]	; (401790 <prvAddCurrentTaskToDelayedList+0xa0>)
  40175e:	6818      	ldr	r0, [r3, #0]
  401760:	4b03      	ldr	r3, [pc, #12]	; (401770 <prvAddCurrentTaskToDelayedList+0x80>)
  401762:	6819      	ldr	r1, [r3, #0]
  401764:	3104      	adds	r1, #4
  401766:	4b06      	ldr	r3, [pc, #24]	; (401780 <prvAddCurrentTaskToDelayedList+0x90>)
  401768:	4798      	blx	r3
  40176a:	bd70      	pop	{r4, r5, r6, pc}
  40176c:	20000628 	.word	0x20000628
  401770:	200004f0 	.word	0x200004f0
  401774:	004005c5 	.word	0x004005c5
  401778:	200005b0 	.word	0x200005b0
  40177c:	200004f4 	.word	0x200004f4
  401780:	00400591 	.word	0x00400591
  401784:	200005e0 	.word	0x200005e0
  401788:	20000600 	.word	0x20000600
  40178c:	00400579 	.word	0x00400579
  401790:	200004f8 	.word	0x200004f8

00401794 <xTaskCreate>:
	{
  401794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401798:	b085      	sub	sp, #20
  40179a:	4606      	mov	r6, r0
  40179c:	460f      	mov	r7, r1
  40179e:	4615      	mov	r5, r2
  4017a0:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
  4017a2:	0090      	lsls	r0, r2, #2
  4017a4:	4b14      	ldr	r3, [pc, #80]	; (4017f8 <xTaskCreate+0x64>)
  4017a6:	4798      	blx	r3
			if( pxStack != NULL )
  4017a8:	b300      	cbz	r0, 4017ec <xTaskCreate+0x58>
  4017aa:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
  4017ac:	2064      	movs	r0, #100	; 0x64
  4017ae:	4b12      	ldr	r3, [pc, #72]	; (4017f8 <xTaskCreate+0x64>)
  4017b0:	4798      	blx	r3
				if( pxNewTCB != NULL )
  4017b2:	4604      	mov	r4, r0
  4017b4:	b1b0      	cbz	r0, 4017e4 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
  4017b6:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
  4017ba:	b1cc      	cbz	r4, 4017f0 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
  4017bc:	2300      	movs	r3, #0
  4017be:	9303      	str	r3, [sp, #12]
  4017c0:	9402      	str	r4, [sp, #8]
  4017c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4017c4:	9301      	str	r3, [sp, #4]
  4017c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4017c8:	9300      	str	r3, [sp, #0]
  4017ca:	4643      	mov	r3, r8
  4017cc:	462a      	mov	r2, r5
  4017ce:	4639      	mov	r1, r7
  4017d0:	4630      	mov	r0, r6
  4017d2:	4d0a      	ldr	r5, [pc, #40]	; (4017fc <xTaskCreate+0x68>)
  4017d4:	47a8      	blx	r5
			prvAddNewTaskToReadyList( pxNewTCB );
  4017d6:	4620      	mov	r0, r4
  4017d8:	4b09      	ldr	r3, [pc, #36]	; (401800 <xTaskCreate+0x6c>)
  4017da:	4798      	blx	r3
			xReturn = pdPASS;
  4017dc:	2001      	movs	r0, #1
	}
  4017de:	b005      	add	sp, #20
  4017e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
  4017e4:	4648      	mov	r0, r9
  4017e6:	4b07      	ldr	r3, [pc, #28]	; (401804 <xTaskCreate+0x70>)
  4017e8:	4798      	blx	r3
  4017ea:	e7e6      	b.n	4017ba <xTaskCreate+0x26>
				pxNewTCB = NULL;
  4017ec:	2400      	movs	r4, #0
  4017ee:	e7e4      	b.n	4017ba <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4017f0:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
  4017f4:	e7f3      	b.n	4017de <xTaskCreate+0x4a>
  4017f6:	bf00      	nop
  4017f8:	004009d9 	.word	0x004009d9
  4017fc:	00401491 	.word	0x00401491
  401800:	004015b1 	.word	0x004015b1
  401804:	00400abd 	.word	0x00400abd

00401808 <vTaskStartScheduler>:
{
  401808:	b510      	push	{r4, lr}
  40180a:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
  40180c:	4b17      	ldr	r3, [pc, #92]	; (40186c <vTaskStartScheduler+0x64>)
  40180e:	9301      	str	r3, [sp, #4]
  401810:	2300      	movs	r3, #0
  401812:	9300      	str	r3, [sp, #0]
  401814:	2282      	movs	r2, #130	; 0x82
  401816:	4916      	ldr	r1, [pc, #88]	; (401870 <vTaskStartScheduler+0x68>)
  401818:	4816      	ldr	r0, [pc, #88]	; (401874 <vTaskStartScheduler+0x6c>)
  40181a:	4c17      	ldr	r4, [pc, #92]	; (401878 <vTaskStartScheduler+0x70>)
  40181c:	47a0      	blx	r4
		if( xReturn == pdPASS )
  40181e:	2801      	cmp	r0, #1
  401820:	d006      	beq.n	401830 <vTaskStartScheduler+0x28>
	if( xReturn == pdPASS )
  401822:	2801      	cmp	r0, #1
  401824:	d007      	beq.n	401836 <vTaskStartScheduler+0x2e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  401826:	f1b0 3fff 	cmp.w	r0, #4294967295
  40182a:	d019      	beq.n	401860 <vTaskStartScheduler+0x58>
}
  40182c:	b002      	add	sp, #8
  40182e:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  401830:	4b12      	ldr	r3, [pc, #72]	; (40187c <vTaskStartScheduler+0x74>)
  401832:	4798      	blx	r3
  401834:	e7f5      	b.n	401822 <vTaskStartScheduler+0x1a>
	__asm volatile
  401836:	f04f 0350 	mov.w	r3, #80	; 0x50
  40183a:	f383 8811 	msr	BASEPRI, r3
  40183e:	f3bf 8f6f 	isb	sy
  401842:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
  401846:	f04f 32ff 	mov.w	r2, #4294967295
  40184a:	4b0d      	ldr	r3, [pc, #52]	; (401880 <vTaskStartScheduler+0x78>)
  40184c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40184e:	2201      	movs	r2, #1
  401850:	4b0c      	ldr	r3, [pc, #48]	; (401884 <vTaskStartScheduler+0x7c>)
  401852:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
  401854:	2200      	movs	r2, #0
  401856:	4b0c      	ldr	r3, [pc, #48]	; (401888 <vTaskStartScheduler+0x80>)
  401858:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40185a:	4b0c      	ldr	r3, [pc, #48]	; (40188c <vTaskStartScheduler+0x84>)
  40185c:	4798      	blx	r3
  40185e:	e7e5      	b.n	40182c <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  401860:	f44f 6102 	mov.w	r1, #2080	; 0x820
  401864:	480a      	ldr	r0, [pc, #40]	; (401890 <vTaskStartScheduler+0x88>)
  401866:	4b0b      	ldr	r3, [pc, #44]	; (401894 <vTaskStartScheduler+0x8c>)
  401868:	4798      	blx	r3
}
  40186a:	e7df      	b.n	40182c <vTaskStartScheduler+0x24>
  40186c:	200005dc 	.word	0x200005dc
  401870:	00403340 	.word	0x00403340
  401874:	004016c5 	.word	0x004016c5
  401878:	00401795 	.word	0x00401795
  40187c:	0040206d 	.word	0x0040206d
  401880:	200005e0 	.word	0x200005e0
  401884:	200005fc 	.word	0x200005fc
  401888:	20000628 	.word	0x20000628
  40188c:	0040080d 	.word	0x0040080d
  401890:	00403328 	.word	0x00403328
  401894:	00402f21 	.word	0x00402f21

00401898 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401898:	4a02      	ldr	r2, [pc, #8]	; (4018a4 <vTaskSuspendAll+0xc>)
  40189a:	6813      	ldr	r3, [r2, #0]
  40189c:	3301      	adds	r3, #1
  40189e:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
  4018a0:	4770      	bx	lr
  4018a2:	bf00      	nop
  4018a4:	200005a8 	.word	0x200005a8

004018a8 <xTaskGetTickCount>:
		xTicks = xTickCount;
  4018a8:	4b01      	ldr	r3, [pc, #4]	; (4018b0 <xTaskGetTickCount+0x8>)
  4018aa:	6818      	ldr	r0, [r3, #0]
}
  4018ac:	4770      	bx	lr
  4018ae:	bf00      	nop
  4018b0:	20000628 	.word	0x20000628

004018b4 <xTaskIncrementTick>:
{
  4018b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4018b6:	4b38      	ldr	r3, [pc, #224]	; (401998 <xTaskIncrementTick+0xe4>)
  4018b8:	681b      	ldr	r3, [r3, #0]
  4018ba:	2b00      	cmp	r3, #0
  4018bc:	d161      	bne.n	401982 <xTaskIncrementTick+0xce>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  4018be:	4b37      	ldr	r3, [pc, #220]	; (40199c <xTaskIncrementTick+0xe8>)
  4018c0:	681e      	ldr	r6, [r3, #0]
  4018c2:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
  4018c4:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  4018c6:	b97e      	cbnz	r6, 4018e8 <xTaskIncrementTick+0x34>
			taskSWITCH_DELAYED_LISTS();
  4018c8:	4b35      	ldr	r3, [pc, #212]	; (4019a0 <xTaskIncrementTick+0xec>)
  4018ca:	681b      	ldr	r3, [r3, #0]
  4018cc:	681b      	ldr	r3, [r3, #0]
  4018ce:	b9e3      	cbnz	r3, 40190a <xTaskIncrementTick+0x56>
  4018d0:	4a33      	ldr	r2, [pc, #204]	; (4019a0 <xTaskIncrementTick+0xec>)
  4018d2:	6811      	ldr	r1, [r2, #0]
  4018d4:	4b33      	ldr	r3, [pc, #204]	; (4019a4 <xTaskIncrementTick+0xf0>)
  4018d6:	6818      	ldr	r0, [r3, #0]
  4018d8:	6010      	str	r0, [r2, #0]
  4018da:	6019      	str	r1, [r3, #0]
  4018dc:	4a32      	ldr	r2, [pc, #200]	; (4019a8 <xTaskIncrementTick+0xf4>)
  4018de:	6813      	ldr	r3, [r2, #0]
  4018e0:	3301      	adds	r3, #1
  4018e2:	6013      	str	r3, [r2, #0]
  4018e4:	4b31      	ldr	r3, [pc, #196]	; (4019ac <xTaskIncrementTick+0xf8>)
  4018e6:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
  4018e8:	4b31      	ldr	r3, [pc, #196]	; (4019b0 <xTaskIncrementTick+0xfc>)
  4018ea:	681b      	ldr	r3, [r3, #0]
  4018ec:	429e      	cmp	r6, r3
  4018ee:	d23e      	bcs.n	40196e <xTaskIncrementTick+0xba>
BaseType_t xSwitchRequired = pdFALSE;
  4018f0:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4018f2:	4b30      	ldr	r3, [pc, #192]	; (4019b4 <xTaskIncrementTick+0x100>)
  4018f4:	681b      	ldr	r3, [r3, #0]
  4018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4018f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4018fc:	009a      	lsls	r2, r3, #2
  4018fe:	4b2e      	ldr	r3, [pc, #184]	; (4019b8 <xTaskIncrementTick+0x104>)
  401900:	589b      	ldr	r3, [r3, r2]
  401902:	2b01      	cmp	r3, #1
  401904:	d942      	bls.n	40198c <xTaskIncrementTick+0xd8>
				xSwitchRequired = pdTRUE;
  401906:	2701      	movs	r7, #1
  401908:	e040      	b.n	40198c <xTaskIncrementTick+0xd8>
			taskSWITCH_DELAYED_LISTS();
  40190a:	f640 217f 	movw	r1, #2687	; 0xa7f
  40190e:	482b      	ldr	r0, [pc, #172]	; (4019bc <xTaskIncrementTick+0x108>)
  401910:	4b2b      	ldr	r3, [pc, #172]	; (4019c0 <xTaskIncrementTick+0x10c>)
  401912:	4798      	blx	r3
  401914:	e7dc      	b.n	4018d0 <xTaskIncrementTick+0x1c>
							xSwitchRequired = pdTRUE;
  401916:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401918:	4b21      	ldr	r3, [pc, #132]	; (4019a0 <xTaskIncrementTick+0xec>)
  40191a:	681b      	ldr	r3, [r3, #0]
  40191c:	681b      	ldr	r3, [r3, #0]
  40191e:	b343      	cbz	r3, 401972 <xTaskIncrementTick+0xbe>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401920:	4b1f      	ldr	r3, [pc, #124]	; (4019a0 <xTaskIncrementTick+0xec>)
  401922:	681b      	ldr	r3, [r3, #0]
  401924:	68db      	ldr	r3, [r3, #12]
  401926:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  401928:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
  40192a:	429e      	cmp	r6, r3
  40192c:	d326      	bcc.n	40197c <xTaskIncrementTick+0xc8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  40192e:	1d25      	adds	r5, r4, #4
  401930:	4628      	mov	r0, r5
  401932:	4b24      	ldr	r3, [pc, #144]	; (4019c4 <xTaskIncrementTick+0x110>)
  401934:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401936:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  401938:	b11b      	cbz	r3, 401942 <xTaskIncrementTick+0x8e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40193a:	f104 0018 	add.w	r0, r4, #24
  40193e:	4b21      	ldr	r3, [pc, #132]	; (4019c4 <xTaskIncrementTick+0x110>)
  401940:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
  401942:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401944:	2201      	movs	r2, #1
  401946:	409a      	lsls	r2, r3
  401948:	491f      	ldr	r1, [pc, #124]	; (4019c8 <xTaskIncrementTick+0x114>)
  40194a:	6808      	ldr	r0, [r1, #0]
  40194c:	4302      	orrs	r2, r0
  40194e:	600a      	str	r2, [r1, #0]
  401950:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401954:	009a      	lsls	r2, r3, #2
  401956:	4629      	mov	r1, r5
  401958:	4817      	ldr	r0, [pc, #92]	; (4019b8 <xTaskIncrementTick+0x104>)
  40195a:	4410      	add	r0, r2
  40195c:	4b1b      	ldr	r3, [pc, #108]	; (4019cc <xTaskIncrementTick+0x118>)
  40195e:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401960:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401962:	4b14      	ldr	r3, [pc, #80]	; (4019b4 <xTaskIncrementTick+0x100>)
  401964:	681b      	ldr	r3, [r3, #0]
  401966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401968:	429a      	cmp	r2, r3
  40196a:	d2d4      	bcs.n	401916 <xTaskIncrementTick+0x62>
  40196c:	e7d4      	b.n	401918 <xTaskIncrementTick+0x64>
  40196e:	2700      	movs	r7, #0
  401970:	e7d2      	b.n	401918 <xTaskIncrementTick+0x64>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401972:	f04f 32ff 	mov.w	r2, #4294967295
  401976:	4b0e      	ldr	r3, [pc, #56]	; (4019b0 <xTaskIncrementTick+0xfc>)
  401978:	601a      	str	r2, [r3, #0]
					break;
  40197a:	e7ba      	b.n	4018f2 <xTaskIncrementTick+0x3e>
						xNextTaskUnblockTime = xItemValue;
  40197c:	4a0c      	ldr	r2, [pc, #48]	; (4019b0 <xTaskIncrementTick+0xfc>)
  40197e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
  401980:	e7b7      	b.n	4018f2 <xTaskIncrementTick+0x3e>
		++uxPendedTicks;
  401982:	4a13      	ldr	r2, [pc, #76]	; (4019d0 <xTaskIncrementTick+0x11c>)
  401984:	6813      	ldr	r3, [r2, #0]
  401986:	3301      	adds	r3, #1
  401988:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
  40198a:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
  40198c:	4b11      	ldr	r3, [pc, #68]	; (4019d4 <xTaskIncrementTick+0x120>)
  40198e:	681b      	ldr	r3, [r3, #0]
  401990:	b103      	cbz	r3, 401994 <xTaskIncrementTick+0xe0>
			xSwitchRequired = pdTRUE;
  401992:	2701      	movs	r7, #1
}
  401994:	4638      	mov	r0, r7
  401996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401998:	200005a8 	.word	0x200005a8
  40199c:	20000628 	.word	0x20000628
  4019a0:	200004f4 	.word	0x200004f4
  4019a4:	200004f8 	.word	0x200004f8
  4019a8:	200005e4 	.word	0x200005e4
  4019ac:	00401451 	.word	0x00401451
  4019b0:	200005e0 	.word	0x200005e0
  4019b4:	200004f0 	.word	0x200004f0
  4019b8:	200004fc 	.word	0x200004fc
  4019bc:	00403328 	.word	0x00403328
  4019c0:	00402f21 	.word	0x00402f21
  4019c4:	004005c5 	.word	0x004005c5
  4019c8:	200005b0 	.word	0x200005b0
  4019cc:	00400579 	.word	0x00400579
  4019d0:	200005a4 	.word	0x200005a4
  4019d4:	2000062c 	.word	0x2000062c

004019d8 <xTaskResumeAll>:
{
  4019d8:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended );
  4019da:	4b34      	ldr	r3, [pc, #208]	; (401aac <xTaskResumeAll+0xd4>)
  4019dc:	681b      	ldr	r3, [r3, #0]
  4019de:	2b00      	cmp	r3, #0
  4019e0:	d034      	beq.n	401a4c <xTaskResumeAll+0x74>
	taskENTER_CRITICAL();
  4019e2:	4b33      	ldr	r3, [pc, #204]	; (401ab0 <xTaskResumeAll+0xd8>)
  4019e4:	4798      	blx	r3
		--uxSchedulerSuspended;
  4019e6:	4b31      	ldr	r3, [pc, #196]	; (401aac <xTaskResumeAll+0xd4>)
  4019e8:	681a      	ldr	r2, [r3, #0]
  4019ea:	3a01      	subs	r2, #1
  4019ec:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4019ee:	681b      	ldr	r3, [r3, #0]
  4019f0:	2b00      	cmp	r3, #0
  4019f2:	d154      	bne.n	401a9e <xTaskResumeAll+0xc6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4019f4:	4b2f      	ldr	r3, [pc, #188]	; (401ab4 <xTaskResumeAll+0xdc>)
  4019f6:	681b      	ldr	r3, [r3, #0]
  4019f8:	2b00      	cmp	r3, #0
  4019fa:	d02d      	beq.n	401a58 <xTaskResumeAll+0x80>
  4019fc:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4019fe:	4b2e      	ldr	r3, [pc, #184]	; (401ab8 <xTaskResumeAll+0xe0>)
  401a00:	681b      	ldr	r3, [r3, #0]
  401a02:	2b00      	cmp	r3, #0
  401a04:	d02a      	beq.n	401a5c <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401a06:	4b2c      	ldr	r3, [pc, #176]	; (401ab8 <xTaskResumeAll+0xe0>)
  401a08:	68db      	ldr	r3, [r3, #12]
  401a0a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401a0c:	f104 0018 	add.w	r0, r4, #24
  401a10:	4e2a      	ldr	r6, [pc, #168]	; (401abc <xTaskResumeAll+0xe4>)
  401a12:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401a14:	1d25      	adds	r5, r4, #4
  401a16:	4628      	mov	r0, r5
  401a18:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401a1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401a1c:	2201      	movs	r2, #1
  401a1e:	409a      	lsls	r2, r3
  401a20:	4927      	ldr	r1, [pc, #156]	; (401ac0 <xTaskResumeAll+0xe8>)
  401a22:	6808      	ldr	r0, [r1, #0]
  401a24:	4302      	orrs	r2, r0
  401a26:	600a      	str	r2, [r1, #0]
  401a28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401a2c:	009a      	lsls	r2, r3, #2
  401a2e:	4629      	mov	r1, r5
  401a30:	4824      	ldr	r0, [pc, #144]	; (401ac4 <xTaskResumeAll+0xec>)
  401a32:	4410      	add	r0, r2
  401a34:	4b24      	ldr	r3, [pc, #144]	; (401ac8 <xTaskResumeAll+0xf0>)
  401a36:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401a38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401a3a:	4b24      	ldr	r3, [pc, #144]	; (401acc <xTaskResumeAll+0xf4>)
  401a3c:	681b      	ldr	r3, [r3, #0]
  401a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401a40:	429a      	cmp	r2, r3
  401a42:	d3dc      	bcc.n	4019fe <xTaskResumeAll+0x26>
						xYieldPending = pdTRUE;
  401a44:	2201      	movs	r2, #1
  401a46:	4b22      	ldr	r3, [pc, #136]	; (401ad0 <xTaskResumeAll+0xf8>)
  401a48:	601a      	str	r2, [r3, #0]
  401a4a:	e7d8      	b.n	4019fe <xTaskResumeAll+0x26>
	configASSERT( uxSchedulerSuspended );
  401a4c:	f640 0185 	movw	r1, #2181	; 0x885
  401a50:	4820      	ldr	r0, [pc, #128]	; (401ad4 <xTaskResumeAll+0xfc>)
  401a52:	4b21      	ldr	r3, [pc, #132]	; (401ad8 <xTaskResumeAll+0x100>)
  401a54:	4798      	blx	r3
  401a56:	e7c4      	b.n	4019e2 <xTaskResumeAll+0xa>
BaseType_t xAlreadyYielded = pdFALSE;
  401a58:	2400      	movs	r4, #0
  401a5a:	e021      	b.n	401aa0 <xTaskResumeAll+0xc8>
				if( pxTCB != NULL )
  401a5c:	b10c      	cbz	r4, 401a62 <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
  401a5e:	4b1f      	ldr	r3, [pc, #124]	; (401adc <xTaskResumeAll+0x104>)
  401a60:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  401a62:	4b1f      	ldr	r3, [pc, #124]	; (401ae0 <xTaskResumeAll+0x108>)
  401a64:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  401a66:	b974      	cbnz	r4, 401a86 <xTaskResumeAll+0xae>
				if( xYieldPending != pdFALSE )
  401a68:	4b19      	ldr	r3, [pc, #100]	; (401ad0 <xTaskResumeAll+0xf8>)
  401a6a:	681b      	ldr	r3, [r3, #0]
  401a6c:	b1e3      	cbz	r3, 401aa8 <xTaskResumeAll+0xd0>
					taskYIELD_IF_USING_PREEMPTION();
  401a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401a72:	4b1c      	ldr	r3, [pc, #112]	; (401ae4 <xTaskResumeAll+0x10c>)
  401a74:	601a      	str	r2, [r3, #0]
  401a76:	f3bf 8f4f 	dsb	sy
  401a7a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  401a7e:	2401      	movs	r4, #1
  401a80:	e00e      	b.n	401aa0 <xTaskResumeAll+0xc8>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  401a82:	3c01      	subs	r4, #1
  401a84:	d007      	beq.n	401a96 <xTaskResumeAll+0xbe>
							if( xTaskIncrementTick() != pdFALSE )
  401a86:	4b18      	ldr	r3, [pc, #96]	; (401ae8 <xTaskResumeAll+0x110>)
  401a88:	4798      	blx	r3
  401a8a:	2800      	cmp	r0, #0
  401a8c:	d0f9      	beq.n	401a82 <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
  401a8e:	2201      	movs	r2, #1
  401a90:	4b0f      	ldr	r3, [pc, #60]	; (401ad0 <xTaskResumeAll+0xf8>)
  401a92:	601a      	str	r2, [r3, #0]
  401a94:	e7f5      	b.n	401a82 <xTaskResumeAll+0xaa>
						uxPendedTicks = 0;
  401a96:	2200      	movs	r2, #0
  401a98:	4b11      	ldr	r3, [pc, #68]	; (401ae0 <xTaskResumeAll+0x108>)
  401a9a:	601a      	str	r2, [r3, #0]
  401a9c:	e7e4      	b.n	401a68 <xTaskResumeAll+0x90>
BaseType_t xAlreadyYielded = pdFALSE;
  401a9e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401aa0:	4b12      	ldr	r3, [pc, #72]	; (401aec <xTaskResumeAll+0x114>)
  401aa2:	4798      	blx	r3
}
  401aa4:	4620      	mov	r0, r4
  401aa6:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xAlreadyYielded = pdFALSE;
  401aa8:	2400      	movs	r4, #0
  401aaa:	e7f9      	b.n	401aa0 <xTaskResumeAll+0xc8>
  401aac:	200005a8 	.word	0x200005a8
  401ab0:	004006c5 	.word	0x004006c5
  401ab4:	2000059c 	.word	0x2000059c
  401ab8:	200005e8 	.word	0x200005e8
  401abc:	004005c5 	.word	0x004005c5
  401ac0:	200005b0 	.word	0x200005b0
  401ac4:	200004fc 	.word	0x200004fc
  401ac8:	00400579 	.word	0x00400579
  401acc:	200004f0 	.word	0x200004f0
  401ad0:	2000062c 	.word	0x2000062c
  401ad4:	00403328 	.word	0x00403328
  401ad8:	00402f21 	.word	0x00402f21
  401adc:	00401451 	.word	0x00401451
  401ae0:	200005a4 	.word	0x200005a4
  401ae4:	e000ed04 	.word	0xe000ed04
  401ae8:	004018b5 	.word	0x004018b5
  401aec:	0040070d 	.word	0x0040070d

00401af0 <vTaskDelay>:
	{
  401af0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  401af2:	b1d8      	cbz	r0, 401b2c <vTaskDelay+0x3c>
  401af4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  401af6:	4b0e      	ldr	r3, [pc, #56]	; (401b30 <vTaskDelay+0x40>)
  401af8:	681b      	ldr	r3, [r3, #0]
  401afa:	b98b      	cbnz	r3, 401b20 <vTaskDelay+0x30>
			vTaskSuspendAll();
  401afc:	4b0d      	ldr	r3, [pc, #52]	; (401b34 <vTaskDelay+0x44>)
  401afe:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  401b00:	2100      	movs	r1, #0
  401b02:	4620      	mov	r0, r4
  401b04:	4b0c      	ldr	r3, [pc, #48]	; (401b38 <vTaskDelay+0x48>)
  401b06:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  401b08:	4b0c      	ldr	r3, [pc, #48]	; (401b3c <vTaskDelay+0x4c>)
  401b0a:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  401b0c:	b938      	cbnz	r0, 401b1e <vTaskDelay+0x2e>
			portYIELD_WITHIN_API();
  401b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401b12:	4b0b      	ldr	r3, [pc, #44]	; (401b40 <vTaskDelay+0x50>)
  401b14:	601a      	str	r2, [r3, #0]
  401b16:	f3bf 8f4f 	dsb	sy
  401b1a:	f3bf 8f6f 	isb	sy
  401b1e:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
  401b20:	f240 513c 	movw	r1, #1340	; 0x53c
  401b24:	4807      	ldr	r0, [pc, #28]	; (401b44 <vTaskDelay+0x54>)
  401b26:	4b08      	ldr	r3, [pc, #32]	; (401b48 <vTaskDelay+0x58>)
  401b28:	4798      	blx	r3
  401b2a:	e7e7      	b.n	401afc <vTaskDelay+0xc>
	BaseType_t xAlreadyYielded = pdFALSE;
  401b2c:	2000      	movs	r0, #0
  401b2e:	e7ed      	b.n	401b0c <vTaskDelay+0x1c>
  401b30:	200005a8 	.word	0x200005a8
  401b34:	00401899 	.word	0x00401899
  401b38:	004016f1 	.word	0x004016f1
  401b3c:	004019d9 	.word	0x004019d9
  401b40:	e000ed04 	.word	0xe000ed04
  401b44:	00403328 	.word	0x00403328
  401b48:	00402f21 	.word	0x00402f21

00401b4c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401b4c:	4b2c      	ldr	r3, [pc, #176]	; (401c00 <vTaskSwitchContext+0xb4>)
  401b4e:	681b      	ldr	r3, [r3, #0]
  401b50:	2b00      	cmp	r3, #0
  401b52:	d135      	bne.n	401bc0 <vTaskSwitchContext+0x74>
{
  401b54:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  401b56:	2200      	movs	r2, #0
  401b58:	4b2a      	ldr	r3, [pc, #168]	; (401c04 <vTaskSwitchContext+0xb8>)
  401b5a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  401b5c:	4b2a      	ldr	r3, [pc, #168]	; (401c08 <vTaskSwitchContext+0xbc>)
  401b5e:	681b      	ldr	r3, [r3, #0]
  401b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b62:	681a      	ldr	r2, [r3, #0]
  401b64:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401b68:	d02e      	beq.n	401bc8 <vTaskSwitchContext+0x7c>
  401b6a:	4b27      	ldr	r3, [pc, #156]	; (401c08 <vTaskSwitchContext+0xbc>)
  401b6c:	6818      	ldr	r0, [r3, #0]
  401b6e:	6819      	ldr	r1, [r3, #0]
  401b70:	3134      	adds	r1, #52	; 0x34
  401b72:	4b26      	ldr	r3, [pc, #152]	; (401c0c <vTaskSwitchContext+0xc0>)
  401b74:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401b76:	4b26      	ldr	r3, [pc, #152]	; (401c10 <vTaskSwitchContext+0xc4>)
  401b78:	681c      	ldr	r4, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  401b7a:	fab4 f484 	clz	r4, r4
  401b7e:	b2e4      	uxtb	r4, r4
  401b80:	f1c4 041f 	rsb	r4, r4, #31
  401b84:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  401b88:	0093      	lsls	r3, r2, #2
  401b8a:	4a22      	ldr	r2, [pc, #136]	; (401c14 <vTaskSwitchContext+0xc8>)
  401b8c:	58d3      	ldr	r3, [r2, r3]
  401b8e:	b343      	cbz	r3, 401be2 <vTaskSwitchContext+0x96>
  401b90:	4920      	ldr	r1, [pc, #128]	; (401c14 <vTaskSwitchContext+0xc8>)
  401b92:	00a3      	lsls	r3, r4, #2
  401b94:	1918      	adds	r0, r3, r4
  401b96:	0082      	lsls	r2, r0, #2
  401b98:	440a      	add	r2, r1
  401b9a:	6850      	ldr	r0, [r2, #4]
  401b9c:	6840      	ldr	r0, [r0, #4]
  401b9e:	6050      	str	r0, [r2, #4]
  401ba0:	4423      	add	r3, r4
  401ba2:	009a      	lsls	r2, r3, #2
  401ba4:	3208      	adds	r2, #8
  401ba6:	4411      	add	r1, r2
  401ba8:	4288      	cmp	r0, r1
  401baa:	d020      	beq.n	401bee <vTaskSwitchContext+0xa2>
  401bac:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  401bb0:	00a2      	lsls	r2, r4, #2
  401bb2:	4b18      	ldr	r3, [pc, #96]	; (401c14 <vTaskSwitchContext+0xc8>)
  401bb4:	4413      	add	r3, r2
  401bb6:	685b      	ldr	r3, [r3, #4]
  401bb8:	68da      	ldr	r2, [r3, #12]
  401bba:	4b13      	ldr	r3, [pc, #76]	; (401c08 <vTaskSwitchContext+0xbc>)
  401bbc:	601a      	str	r2, [r3, #0]
  401bbe:	bd10      	pop	{r4, pc}
		xYieldPending = pdTRUE;
  401bc0:	2201      	movs	r2, #1
  401bc2:	4b10      	ldr	r3, [pc, #64]	; (401c04 <vTaskSwitchContext+0xb8>)
  401bc4:	601a      	str	r2, [r3, #0]
  401bc6:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  401bc8:	685a      	ldr	r2, [r3, #4]
  401bca:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401bce:	d1cc      	bne.n	401b6a <vTaskSwitchContext+0x1e>
  401bd0:	689a      	ldr	r2, [r3, #8]
  401bd2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401bd6:	d1c8      	bne.n	401b6a <vTaskSwitchContext+0x1e>
  401bd8:	68db      	ldr	r3, [r3, #12]
  401bda:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  401bde:	d1c4      	bne.n	401b6a <vTaskSwitchContext+0x1e>
  401be0:	e7c9      	b.n	401b76 <vTaskSwitchContext+0x2a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401be2:	f640 31b7 	movw	r1, #2999	; 0xbb7
  401be6:	480c      	ldr	r0, [pc, #48]	; (401c18 <vTaskSwitchContext+0xcc>)
  401be8:	4b0c      	ldr	r3, [pc, #48]	; (401c1c <vTaskSwitchContext+0xd0>)
  401bea:	4798      	blx	r3
  401bec:	e7d0      	b.n	401b90 <vTaskSwitchContext+0x44>
  401bee:	6841      	ldr	r1, [r0, #4]
  401bf0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  401bf4:	009a      	lsls	r2, r3, #2
  401bf6:	4b07      	ldr	r3, [pc, #28]	; (401c14 <vTaskSwitchContext+0xc8>)
  401bf8:	4413      	add	r3, r2
  401bfa:	6059      	str	r1, [r3, #4]
  401bfc:	e7d6      	b.n	401bac <vTaskSwitchContext+0x60>
  401bfe:	bf00      	nop
  401c00:	200005a8 	.word	0x200005a8
  401c04:	2000062c 	.word	0x2000062c
  401c08:	200004f0 	.word	0x200004f0
  401c0c:	00402f61 	.word	0x00402f61
  401c10:	200005b0 	.word	0x200005b0
  401c14:	200004fc 	.word	0x200004fc
  401c18:	00403328 	.word	0x00403328
  401c1c:	00402f21 	.word	0x00402f21

00401c20 <vTaskPlaceOnEventList>:
{
  401c20:	b538      	push	{r3, r4, r5, lr}
  401c22:	460c      	mov	r4, r1
	configASSERT( pxEventList );
  401c24:	4605      	mov	r5, r0
  401c26:	b150      	cbz	r0, 401c3e <vTaskPlaceOnEventList+0x1e>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401c28:	4b08      	ldr	r3, [pc, #32]	; (401c4c <vTaskPlaceOnEventList+0x2c>)
  401c2a:	6819      	ldr	r1, [r3, #0]
  401c2c:	3118      	adds	r1, #24
  401c2e:	4628      	mov	r0, r5
  401c30:	4b07      	ldr	r3, [pc, #28]	; (401c50 <vTaskPlaceOnEventList+0x30>)
  401c32:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  401c34:	2101      	movs	r1, #1
  401c36:	4620      	mov	r0, r4
  401c38:	4b06      	ldr	r3, [pc, #24]	; (401c54 <vTaskPlaceOnEventList+0x34>)
  401c3a:	4798      	blx	r3
  401c3c:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxEventList );
  401c3e:	f640 31ce 	movw	r1, #3022	; 0xbce
  401c42:	4805      	ldr	r0, [pc, #20]	; (401c58 <vTaskPlaceOnEventList+0x38>)
  401c44:	4b05      	ldr	r3, [pc, #20]	; (401c5c <vTaskPlaceOnEventList+0x3c>)
  401c46:	4798      	blx	r3
  401c48:	e7ee      	b.n	401c28 <vTaskPlaceOnEventList+0x8>
  401c4a:	bf00      	nop
  401c4c:	200004f0 	.word	0x200004f0
  401c50:	00400591 	.word	0x00400591
  401c54:	004016f1 	.word	0x004016f1
  401c58:	00403328 	.word	0x00403328
  401c5c:	00402f21 	.word	0x00402f21

00401c60 <vTaskPlaceOnEventListRestricted>:
	{
  401c60:	b570      	push	{r4, r5, r6, lr}
  401c62:	460d      	mov	r5, r1
  401c64:	4614      	mov	r4, r2
		configASSERT( pxEventList );
  401c66:	4606      	mov	r6, r0
  401c68:	b168      	cbz	r0, 401c86 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401c6a:	4b0a      	ldr	r3, [pc, #40]	; (401c94 <vTaskPlaceOnEventListRestricted+0x34>)
  401c6c:	6819      	ldr	r1, [r3, #0]
  401c6e:	3118      	adds	r1, #24
  401c70:	4630      	mov	r0, r6
  401c72:	4b09      	ldr	r3, [pc, #36]	; (401c98 <vTaskPlaceOnEventListRestricted+0x38>)
  401c74:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
  401c76:	b10c      	cbz	r4, 401c7c <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
  401c78:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  401c7c:	4621      	mov	r1, r4
  401c7e:	4628      	mov	r0, r5
  401c80:	4b06      	ldr	r3, [pc, #24]	; (401c9c <vTaskPlaceOnEventListRestricted+0x3c>)
  401c82:	4798      	blx	r3
  401c84:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
  401c86:	f640 31f9 	movw	r1, #3065	; 0xbf9
  401c8a:	4805      	ldr	r0, [pc, #20]	; (401ca0 <vTaskPlaceOnEventListRestricted+0x40>)
  401c8c:	4b05      	ldr	r3, [pc, #20]	; (401ca4 <vTaskPlaceOnEventListRestricted+0x44>)
  401c8e:	4798      	blx	r3
  401c90:	e7eb      	b.n	401c6a <vTaskPlaceOnEventListRestricted+0xa>
  401c92:	bf00      	nop
  401c94:	200004f0 	.word	0x200004f0
  401c98:	00400579 	.word	0x00400579
  401c9c:	004016f1 	.word	0x004016f1
  401ca0:	00403328 	.word	0x00403328
  401ca4:	00402f21 	.word	0x00402f21

00401ca8 <xTaskRemoveFromEventList>:
{
  401ca8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401caa:	68c3      	ldr	r3, [r0, #12]
  401cac:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401cae:	b324      	cbz	r4, 401cfa <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401cb0:	f104 0518 	add.w	r5, r4, #24
  401cb4:	4628      	mov	r0, r5
  401cb6:	4b17      	ldr	r3, [pc, #92]	; (401d14 <xTaskRemoveFromEventList+0x6c>)
  401cb8:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401cba:	4b17      	ldr	r3, [pc, #92]	; (401d18 <xTaskRemoveFromEventList+0x70>)
  401cbc:	681b      	ldr	r3, [r3, #0]
  401cbe:	bb13      	cbnz	r3, 401d06 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  401cc0:	1d25      	adds	r5, r4, #4
  401cc2:	4628      	mov	r0, r5
  401cc4:	4b13      	ldr	r3, [pc, #76]	; (401d14 <xTaskRemoveFromEventList+0x6c>)
  401cc6:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401cc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401cca:	2201      	movs	r2, #1
  401ccc:	409a      	lsls	r2, r3
  401cce:	4913      	ldr	r1, [pc, #76]	; (401d1c <xTaskRemoveFromEventList+0x74>)
  401cd0:	6808      	ldr	r0, [r1, #0]
  401cd2:	4302      	orrs	r2, r0
  401cd4:	600a      	str	r2, [r1, #0]
  401cd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401cda:	009a      	lsls	r2, r3, #2
  401cdc:	4629      	mov	r1, r5
  401cde:	4810      	ldr	r0, [pc, #64]	; (401d20 <xTaskRemoveFromEventList+0x78>)
  401ce0:	4410      	add	r0, r2
  401ce2:	4b10      	ldr	r3, [pc, #64]	; (401d24 <xTaskRemoveFromEventList+0x7c>)
  401ce4:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401ce6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401ce8:	4b0f      	ldr	r3, [pc, #60]	; (401d28 <xTaskRemoveFromEventList+0x80>)
  401cea:	681b      	ldr	r3, [r3, #0]
  401cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401cee:	429a      	cmp	r2, r3
  401cf0:	d90e      	bls.n	401d10 <xTaskRemoveFromEventList+0x68>
		xYieldPending = pdTRUE;
  401cf2:	2001      	movs	r0, #1
  401cf4:	4b0d      	ldr	r3, [pc, #52]	; (401d2c <xTaskRemoveFromEventList+0x84>)
  401cf6:	6018      	str	r0, [r3, #0]
  401cf8:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxUnblockedTCB );
  401cfa:	f640 4129 	movw	r1, #3113	; 0xc29
  401cfe:	480c      	ldr	r0, [pc, #48]	; (401d30 <xTaskRemoveFromEventList+0x88>)
  401d00:	4b0c      	ldr	r3, [pc, #48]	; (401d34 <xTaskRemoveFromEventList+0x8c>)
  401d02:	4798      	blx	r3
  401d04:	e7d4      	b.n	401cb0 <xTaskRemoveFromEventList+0x8>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401d06:	4629      	mov	r1, r5
  401d08:	480b      	ldr	r0, [pc, #44]	; (401d38 <xTaskRemoveFromEventList+0x90>)
  401d0a:	4b06      	ldr	r3, [pc, #24]	; (401d24 <xTaskRemoveFromEventList+0x7c>)
  401d0c:	4798      	blx	r3
  401d0e:	e7ea      	b.n	401ce6 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  401d10:	2000      	movs	r0, #0
}
  401d12:	bd38      	pop	{r3, r4, r5, pc}
  401d14:	004005c5 	.word	0x004005c5
  401d18:	200005a8 	.word	0x200005a8
  401d1c:	200005b0 	.word	0x200005b0
  401d20:	200004fc 	.word	0x200004fc
  401d24:	00400579 	.word	0x00400579
  401d28:	200004f0 	.word	0x200004f0
  401d2c:	2000062c 	.word	0x2000062c
  401d30:	00403328 	.word	0x00403328
  401d34:	00402f21 	.word	0x00402f21
  401d38:	200005e8 	.word	0x200005e8

00401d3c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401d3c:	4b03      	ldr	r3, [pc, #12]	; (401d4c <vTaskInternalSetTimeOutState+0x10>)
  401d3e:	681b      	ldr	r3, [r3, #0]
  401d40:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401d42:	4b03      	ldr	r3, [pc, #12]	; (401d50 <vTaskInternalSetTimeOutState+0x14>)
  401d44:	681b      	ldr	r3, [r3, #0]
  401d46:	6043      	str	r3, [r0, #4]
  401d48:	4770      	bx	lr
  401d4a:	bf00      	nop
  401d4c:	200005e4 	.word	0x200005e4
  401d50:	20000628 	.word	0x20000628

00401d54 <xTaskCheckForTimeOut>:
{
  401d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401d56:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
  401d58:	4605      	mov	r5, r0
  401d5a:	b1d0      	cbz	r0, 401d92 <xTaskCheckForTimeOut+0x3e>
	configASSERT( pxTicksToWait );
  401d5c:	b1fc      	cbz	r4, 401d9e <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
  401d5e:	4b18      	ldr	r3, [pc, #96]	; (401dc0 <xTaskCheckForTimeOut+0x6c>)
  401d60:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  401d62:	4b18      	ldr	r3, [pc, #96]	; (401dc4 <xTaskCheckForTimeOut+0x70>)
  401d64:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  401d66:	686a      	ldr	r2, [r5, #4]
  401d68:	1a88      	subs	r0, r1, r2
			if( *pxTicksToWait == portMAX_DELAY )
  401d6a:	6823      	ldr	r3, [r4, #0]
  401d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d70:	d022      	beq.n	401db8 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401d72:	682f      	ldr	r7, [r5, #0]
  401d74:	4e14      	ldr	r6, [pc, #80]	; (401dc8 <xTaskCheckForTimeOut+0x74>)
  401d76:	6836      	ldr	r6, [r6, #0]
  401d78:	42b7      	cmp	r7, r6
  401d7a:	d001      	beq.n	401d80 <xTaskCheckForTimeOut+0x2c>
  401d7c:	4291      	cmp	r1, r2
  401d7e:	d21d      	bcs.n	401dbc <xTaskCheckForTimeOut+0x68>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  401d80:	4298      	cmp	r0, r3
  401d82:	d312      	bcc.n	401daa <xTaskCheckForTimeOut+0x56>
			*pxTicksToWait = 0;
  401d84:	2300      	movs	r3, #0
  401d86:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
  401d88:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  401d8a:	4b10      	ldr	r3, [pc, #64]	; (401dcc <xTaskCheckForTimeOut+0x78>)
  401d8c:	4798      	blx	r3
}
  401d8e:	4620      	mov	r0, r4
  401d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( pxTimeOut );
  401d92:	f640 4194 	movw	r1, #3220	; 0xc94
  401d96:	480e      	ldr	r0, [pc, #56]	; (401dd0 <xTaskCheckForTimeOut+0x7c>)
  401d98:	4b0e      	ldr	r3, [pc, #56]	; (401dd4 <xTaskCheckForTimeOut+0x80>)
  401d9a:	4798      	blx	r3
  401d9c:	e7de      	b.n	401d5c <xTaskCheckForTimeOut+0x8>
	configASSERT( pxTicksToWait );
  401d9e:	f640 4195 	movw	r1, #3221	; 0xc95
  401da2:	480b      	ldr	r0, [pc, #44]	; (401dd0 <xTaskCheckForTimeOut+0x7c>)
  401da4:	4b0b      	ldr	r3, [pc, #44]	; (401dd4 <xTaskCheckForTimeOut+0x80>)
  401da6:	4798      	blx	r3
  401da8:	e7d9      	b.n	401d5e <xTaskCheckForTimeOut+0xa>
			*pxTicksToWait -= xElapsedTime;
  401daa:	1a1b      	subs	r3, r3, r0
  401dac:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  401dae:	4628      	mov	r0, r5
  401db0:	4b09      	ldr	r3, [pc, #36]	; (401dd8 <xTaskCheckForTimeOut+0x84>)
  401db2:	4798      	blx	r3
			xReturn = pdFALSE;
  401db4:	2400      	movs	r4, #0
  401db6:	e7e8      	b.n	401d8a <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
  401db8:	2400      	movs	r4, #0
  401dba:	e7e6      	b.n	401d8a <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
  401dbc:	2401      	movs	r4, #1
  401dbe:	e7e4      	b.n	401d8a <xTaskCheckForTimeOut+0x36>
  401dc0:	004006c5 	.word	0x004006c5
  401dc4:	20000628 	.word	0x20000628
  401dc8:	200005e4 	.word	0x200005e4
  401dcc:	0040070d 	.word	0x0040070d
  401dd0:	00403328 	.word	0x00403328
  401dd4:	00402f21 	.word	0x00402f21
  401dd8:	00401d3d 	.word	0x00401d3d

00401ddc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  401ddc:	2201      	movs	r2, #1
  401dde:	4b01      	ldr	r3, [pc, #4]	; (401de4 <vTaskMissedYield+0x8>)
  401de0:	601a      	str	r2, [r3, #0]
  401de2:	4770      	bx	lr
  401de4:	2000062c 	.word	0x2000062c

00401de8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
  401de8:	4b05      	ldr	r3, [pc, #20]	; (401e00 <xTaskGetSchedulerState+0x18>)
  401dea:	681b      	ldr	r3, [r3, #0]
  401dec:	b123      	cbz	r3, 401df8 <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401dee:	4b05      	ldr	r3, [pc, #20]	; (401e04 <xTaskGetSchedulerState+0x1c>)
  401df0:	681b      	ldr	r3, [r3, #0]
  401df2:	b91b      	cbnz	r3, 401dfc <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
  401df4:	2002      	movs	r0, #2
  401df6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  401df8:	2001      	movs	r0, #1
  401dfa:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
  401dfc:	2000      	movs	r0, #0
	}
  401dfe:	4770      	bx	lr
  401e00:	200005fc 	.word	0x200005fc
  401e04:	200005a8 	.word	0x200005a8

00401e08 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  401e08:	2800      	cmp	r0, #0
  401e0a:	d045      	beq.n	401e98 <xTaskPriorityDisinherit+0x90>
	{
  401e0c:	b538      	push	{r3, r4, r5, lr}
  401e0e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
  401e10:	4b23      	ldr	r3, [pc, #140]	; (401ea0 <xTaskPriorityDisinherit+0x98>)
  401e12:	681b      	ldr	r3, [r3, #0]
  401e14:	4298      	cmp	r0, r3
  401e16:	d004      	beq.n	401e22 <xTaskPriorityDisinherit+0x1a>
  401e18:	f640 71d1 	movw	r1, #4049	; 0xfd1
  401e1c:	4821      	ldr	r0, [pc, #132]	; (401ea4 <xTaskPriorityDisinherit+0x9c>)
  401e1e:	4b22      	ldr	r3, [pc, #136]	; (401ea8 <xTaskPriorityDisinherit+0xa0>)
  401e20:	4798      	blx	r3
			configASSERT( pxTCB->uxMutexesHeld );
  401e22:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401e24:	b14b      	cbz	r3, 401e3a <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
  401e26:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401e28:	3b01      	subs	r3, #1
  401e2a:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401e2c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401e2e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  401e30:	4291      	cmp	r1, r2
  401e32:	d033      	beq.n	401e9c <xTaskPriorityDisinherit+0x94>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401e34:	b13b      	cbz	r3, 401e46 <xTaskPriorityDisinherit+0x3e>
	BaseType_t xReturn = pdFALSE;
  401e36:	2000      	movs	r0, #0
	}
  401e38:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB->uxMutexesHeld );
  401e3a:	f640 71d2 	movw	r1, #4050	; 0xfd2
  401e3e:	4819      	ldr	r0, [pc, #100]	; (401ea4 <xTaskPriorityDisinherit+0x9c>)
  401e40:	4b19      	ldr	r3, [pc, #100]	; (401ea8 <xTaskPriorityDisinherit+0xa0>)
  401e42:	4798      	blx	r3
  401e44:	e7ef      	b.n	401e26 <xTaskPriorityDisinherit+0x1e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401e46:	1d25      	adds	r5, r4, #4
  401e48:	4628      	mov	r0, r5
  401e4a:	4b18      	ldr	r3, [pc, #96]	; (401eac <xTaskPriorityDisinherit+0xa4>)
  401e4c:	4798      	blx	r3
  401e4e:	b968      	cbnz	r0, 401e6c <xTaskPriorityDisinherit+0x64>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401e50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401e52:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401e56:	008a      	lsls	r2, r1, #2
  401e58:	4915      	ldr	r1, [pc, #84]	; (401eb0 <xTaskPriorityDisinherit+0xa8>)
  401e5a:	588a      	ldr	r2, [r1, r2]
  401e5c:	b932      	cbnz	r2, 401e6c <xTaskPriorityDisinherit+0x64>
  401e5e:	2201      	movs	r2, #1
  401e60:	409a      	lsls	r2, r3
  401e62:	4914      	ldr	r1, [pc, #80]	; (401eb4 <xTaskPriorityDisinherit+0xac>)
  401e64:	680b      	ldr	r3, [r1, #0]
  401e66:	ea23 0302 	bic.w	r3, r3, r2
  401e6a:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401e6c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401e6e:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401e70:	f1c3 0208 	rsb	r2, r3, #8
  401e74:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  401e76:	2401      	movs	r4, #1
  401e78:	fa04 f203 	lsl.w	r2, r4, r3
  401e7c:	490d      	ldr	r1, [pc, #52]	; (401eb4 <xTaskPriorityDisinherit+0xac>)
  401e7e:	6808      	ldr	r0, [r1, #0]
  401e80:	4302      	orrs	r2, r0
  401e82:	600a      	str	r2, [r1, #0]
  401e84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401e88:	009a      	lsls	r2, r3, #2
  401e8a:	4629      	mov	r1, r5
  401e8c:	4808      	ldr	r0, [pc, #32]	; (401eb0 <xTaskPriorityDisinherit+0xa8>)
  401e8e:	4410      	add	r0, r2
  401e90:	4b09      	ldr	r3, [pc, #36]	; (401eb8 <xTaskPriorityDisinherit+0xb0>)
  401e92:	4798      	blx	r3
					xReturn = pdTRUE;
  401e94:	4620      	mov	r0, r4
  401e96:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  401e98:	2000      	movs	r0, #0
  401e9a:	4770      	bx	lr
  401e9c:	2000      	movs	r0, #0
  401e9e:	bd38      	pop	{r3, r4, r5, pc}
  401ea0:	200004f0 	.word	0x200004f0
  401ea4:	00403328 	.word	0x00403328
  401ea8:	00402f21 	.word	0x00402f21
  401eac:	004005c5 	.word	0x004005c5
  401eb0:	200004fc 	.word	0x200004fc
  401eb4:	200005b0 	.word	0x200005b0
  401eb8:	00400579 	.word	0x00400579

00401ebc <vTaskNotifyGiveFromISR>:
	{
  401ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401ebe:	460e      	mov	r6, r1
		configASSERT( xTaskToNotify );
  401ec0:	4604      	mov	r4, r0
  401ec2:	b1c8      	cbz	r0, 401ef8 <vTaskNotifyGiveFromISR+0x3c>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401ec4:	4b27      	ldr	r3, [pc, #156]	; (401f64 <vTaskNotifyGiveFromISR+0xa8>)
  401ec6:	4798      	blx	r3
	__asm volatile
  401ec8:	f3ef 8511 	mrs	r5, BASEPRI
  401ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
  401ed0:	f383 8811 	msr	BASEPRI, r3
  401ed4:	f3bf 8f6f 	isb	sy
  401ed8:	f3bf 8f4f 	dsb	sy
			ucOriginalNotifyState = pxTCB->ucNotifyState;
  401edc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
  401ee0:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
  401ee2:	2202      	movs	r2, #2
  401ee4:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			( pxTCB->ulNotifiedValue )++;
  401ee8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  401eea:	3201      	adds	r2, #1
  401eec:	65e2      	str	r2, [r4, #92]	; 0x5c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
  401eee:	2b01      	cmp	r3, #1
  401ef0:	d008      	beq.n	401f04 <vTaskNotifyGiveFromISR+0x48>
	__asm volatile
  401ef2:	f385 8811 	msr	BASEPRI, r5
  401ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		configASSERT( xTaskToNotify );
  401ef8:	f241 3163 	movw	r1, #4963	; 0x1363
  401efc:	481a      	ldr	r0, [pc, #104]	; (401f68 <vTaskNotifyGiveFromISR+0xac>)
  401efe:	4b1b      	ldr	r3, [pc, #108]	; (401f6c <vTaskNotifyGiveFromISR+0xb0>)
  401f00:	4798      	blx	r3
  401f02:	e7df      	b.n	401ec4 <vTaskNotifyGiveFromISR+0x8>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
  401f04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  401f06:	b123      	cbz	r3, 401f12 <vTaskNotifyGiveFromISR+0x56>
  401f08:	f241 3189 	movw	r1, #5001	; 0x1389
  401f0c:	4816      	ldr	r0, [pc, #88]	; (401f68 <vTaskNotifyGiveFromISR+0xac>)
  401f0e:	4b17      	ldr	r3, [pc, #92]	; (401f6c <vTaskNotifyGiveFromISR+0xb0>)
  401f10:	4798      	blx	r3
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401f12:	4b17      	ldr	r3, [pc, #92]	; (401f70 <vTaskNotifyGiveFromISR+0xb4>)
  401f14:	681b      	ldr	r3, [r3, #0]
  401f16:	b9fb      	cbnz	r3, 401f58 <vTaskNotifyGiveFromISR+0x9c>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401f18:	1d27      	adds	r7, r4, #4
  401f1a:	4638      	mov	r0, r7
  401f1c:	4b15      	ldr	r3, [pc, #84]	; (401f74 <vTaskNotifyGiveFromISR+0xb8>)
  401f1e:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
  401f20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401f22:	2201      	movs	r2, #1
  401f24:	409a      	lsls	r2, r3
  401f26:	4914      	ldr	r1, [pc, #80]	; (401f78 <vTaskNotifyGiveFromISR+0xbc>)
  401f28:	6808      	ldr	r0, [r1, #0]
  401f2a:	4302      	orrs	r2, r0
  401f2c:	600a      	str	r2, [r1, #0]
  401f2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401f32:	009a      	lsls	r2, r3, #2
  401f34:	4639      	mov	r1, r7
  401f36:	4811      	ldr	r0, [pc, #68]	; (401f7c <vTaskNotifyGiveFromISR+0xc0>)
  401f38:	4410      	add	r0, r2
  401f3a:	4b11      	ldr	r3, [pc, #68]	; (401f80 <vTaskNotifyGiveFromISR+0xc4>)
  401f3c:	4798      	blx	r3
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
  401f3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401f40:	4b10      	ldr	r3, [pc, #64]	; (401f84 <vTaskNotifyGiveFromISR+0xc8>)
  401f42:	681b      	ldr	r3, [r3, #0]
  401f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401f46:	429a      	cmp	r2, r3
  401f48:	d9d3      	bls.n	401ef2 <vTaskNotifyGiveFromISR+0x36>
					if( pxHigherPriorityTaskWoken != NULL )
  401f4a:	b10e      	cbz	r6, 401f50 <vTaskNotifyGiveFromISR+0x94>
						*pxHigherPriorityTaskWoken = pdTRUE;
  401f4c:	2301      	movs	r3, #1
  401f4e:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
  401f50:	2201      	movs	r2, #1
  401f52:	4b0d      	ldr	r3, [pc, #52]	; (401f88 <vTaskNotifyGiveFromISR+0xcc>)
  401f54:	601a      	str	r2, [r3, #0]
  401f56:	e7cc      	b.n	401ef2 <vTaskNotifyGiveFromISR+0x36>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
  401f58:	f104 0118 	add.w	r1, r4, #24
  401f5c:	480b      	ldr	r0, [pc, #44]	; (401f8c <vTaskNotifyGiveFromISR+0xd0>)
  401f5e:	4b08      	ldr	r3, [pc, #32]	; (401f80 <vTaskNotifyGiveFromISR+0xc4>)
  401f60:	4798      	blx	r3
  401f62:	e7ec      	b.n	401f3e <vTaskNotifyGiveFromISR+0x82>
  401f64:	00400925 	.word	0x00400925
  401f68:	00403328 	.word	0x00403328
  401f6c:	00402f21 	.word	0x00402f21
  401f70:	200005a8 	.word	0x200005a8
  401f74:	004005c5 	.word	0x004005c5
  401f78:	200005b0 	.word	0x200005b0
  401f7c:	200004fc 	.word	0x200004fc
  401f80:	00400579 	.word	0x00400579
  401f84:	200004f0 	.word	0x200004f0
  401f88:	2000062c 	.word	0x2000062c
  401f8c:	200005e8 	.word	0x200005e8

00401f90 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401f90:	4b06      	ldr	r3, [pc, #24]	; (401fac <prvGetNextExpireTime+0x1c>)
  401f92:	681a      	ldr	r2, [r3, #0]
  401f94:	6813      	ldr	r3, [r2, #0]
  401f96:	b92b      	cbnz	r3, 401fa4 <prvGetNextExpireTime+0x14>
  401f98:	2301      	movs	r3, #1
  401f9a:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
  401f9c:	b923      	cbnz	r3, 401fa8 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401f9e:	68d3      	ldr	r3, [r2, #12]
  401fa0:	6818      	ldr	r0, [r3, #0]
  401fa2:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401fa4:	2300      	movs	r3, #0
  401fa6:	e7f8      	b.n	401f9a <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
  401fa8:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
  401faa:	4770      	bx	lr
  401fac:	20000630 	.word	0x20000630

00401fb0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  401fb0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401fb2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401fb4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  401fb6:	4291      	cmp	r1, r2
  401fb8:	d80c      	bhi.n	401fd4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401fba:	1ad2      	subs	r2, r2, r3
  401fbc:	6983      	ldr	r3, [r0, #24]
  401fbe:	429a      	cmp	r2, r3
  401fc0:	d301      	bcc.n	401fc6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401fc2:	2001      	movs	r0, #1
  401fc4:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401fc6:	1d01      	adds	r1, r0, #4
  401fc8:	4b09      	ldr	r3, [pc, #36]	; (401ff0 <prvInsertTimerInActiveList+0x40>)
  401fca:	6818      	ldr	r0, [r3, #0]
  401fcc:	4b09      	ldr	r3, [pc, #36]	; (401ff4 <prvInsertTimerInActiveList+0x44>)
  401fce:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401fd0:	2000      	movs	r0, #0
  401fd2:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401fd4:	429a      	cmp	r2, r3
  401fd6:	d201      	bcs.n	401fdc <prvInsertTimerInActiveList+0x2c>
  401fd8:	4299      	cmp	r1, r3
  401fda:	d206      	bcs.n	401fea <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401fdc:	1d01      	adds	r1, r0, #4
  401fde:	4b06      	ldr	r3, [pc, #24]	; (401ff8 <prvInsertTimerInActiveList+0x48>)
  401fe0:	6818      	ldr	r0, [r3, #0]
  401fe2:	4b04      	ldr	r3, [pc, #16]	; (401ff4 <prvInsertTimerInActiveList+0x44>)
  401fe4:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401fe6:	2000      	movs	r0, #0
  401fe8:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
  401fea:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
  401fec:	bd08      	pop	{r3, pc}
  401fee:	bf00      	nop
  401ff0:	20000634 	.word	0x20000634
  401ff4:	00400591 	.word	0x00400591
  401ff8:	20000630 	.word	0x20000630

00401ffc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401ffc:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401ffe:	4b10      	ldr	r3, [pc, #64]	; (402040 <prvCheckForValidListAndQueue+0x44>)
  402000:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402002:	4b10      	ldr	r3, [pc, #64]	; (402044 <prvCheckForValidListAndQueue+0x48>)
  402004:	681b      	ldr	r3, [r3, #0]
  402006:	b113      	cbz	r3, 40200e <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402008:	4b0f      	ldr	r3, [pc, #60]	; (402048 <prvCheckForValidListAndQueue+0x4c>)
  40200a:	4798      	blx	r3
  40200c:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  40200e:	4d0f      	ldr	r5, [pc, #60]	; (40204c <prvCheckForValidListAndQueue+0x50>)
  402010:	4628      	mov	r0, r5
  402012:	4e0f      	ldr	r6, [pc, #60]	; (402050 <prvCheckForValidListAndQueue+0x54>)
  402014:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402016:	4c0f      	ldr	r4, [pc, #60]	; (402054 <prvCheckForValidListAndQueue+0x58>)
  402018:	4620      	mov	r0, r4
  40201a:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  40201c:	4b0e      	ldr	r3, [pc, #56]	; (402058 <prvCheckForValidListAndQueue+0x5c>)
  40201e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402020:	4b0e      	ldr	r3, [pc, #56]	; (40205c <prvCheckForValidListAndQueue+0x60>)
  402022:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402024:	2200      	movs	r2, #0
  402026:	2110      	movs	r1, #16
  402028:	2005      	movs	r0, #5
  40202a:	4b0d      	ldr	r3, [pc, #52]	; (402060 <prvCheckForValidListAndQueue+0x64>)
  40202c:	4798      	blx	r3
  40202e:	4b05      	ldr	r3, [pc, #20]	; (402044 <prvCheckForValidListAndQueue+0x48>)
  402030:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  402032:	2800      	cmp	r0, #0
  402034:	d0e8      	beq.n	402008 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402036:	490b      	ldr	r1, [pc, #44]	; (402064 <prvCheckForValidListAndQueue+0x68>)
  402038:	4b0b      	ldr	r3, [pc, #44]	; (402068 <prvCheckForValidListAndQueue+0x6c>)
  40203a:	4798      	blx	r3
  40203c:	e7e4      	b.n	402008 <prvCheckForValidListAndQueue+0xc>
  40203e:	bf00      	nop
  402040:	004006c5 	.word	0x004006c5
  402044:	20000664 	.word	0x20000664
  402048:	0040070d 	.word	0x0040070d
  40204c:	20000638 	.word	0x20000638
  402050:	0040055d 	.word	0x0040055d
  402054:	2000064c 	.word	0x2000064c
  402058:	20000630 	.word	0x20000630
  40205c:	20000634 	.word	0x20000634
  402060:	00400ee5 	.word	0x00400ee5
  402064:	00403348 	.word	0x00403348
  402068:	004013c5 	.word	0x004013c5

0040206c <xTimerCreateTimerTask>:
{
  40206c:	b510      	push	{r4, lr}
  40206e:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
  402070:	4b0e      	ldr	r3, [pc, #56]	; (4020ac <xTimerCreateTimerTask+0x40>)
  402072:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402074:	4b0e      	ldr	r3, [pc, #56]	; (4020b0 <xTimerCreateTimerTask+0x44>)
  402076:	681b      	ldr	r3, [r3, #0]
  402078:	b17b      	cbz	r3, 40209a <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
  40207a:	4b0e      	ldr	r3, [pc, #56]	; (4020b4 <xTimerCreateTimerTask+0x48>)
  40207c:	9301      	str	r3, [sp, #4]
  40207e:	2307      	movs	r3, #7
  402080:	9300      	str	r3, [sp, #0]
  402082:	2300      	movs	r3, #0
  402084:	f44f 7282 	mov.w	r2, #260	; 0x104
  402088:	490b      	ldr	r1, [pc, #44]	; (4020b8 <xTimerCreateTimerTask+0x4c>)
  40208a:	480c      	ldr	r0, [pc, #48]	; (4020bc <xTimerCreateTimerTask+0x50>)
  40208c:	4c0c      	ldr	r4, [pc, #48]	; (4020c0 <xTimerCreateTimerTask+0x54>)
  40208e:	47a0      	blx	r4
  402090:	4604      	mov	r4, r0
	configASSERT( xReturn );
  402092:	b124      	cbz	r4, 40209e <xTimerCreateTimerTask+0x32>
}
  402094:	4620      	mov	r0, r4
  402096:	b002      	add	sp, #8
  402098:	bd10      	pop	{r4, pc}
BaseType_t xReturn = pdFAIL;
  40209a:	2400      	movs	r4, #0
  40209c:	e7f9      	b.n	402092 <xTimerCreateTimerTask+0x26>
	configASSERT( xReturn );
  40209e:	f240 1113 	movw	r1, #275	; 0x113
  4020a2:	4808      	ldr	r0, [pc, #32]	; (4020c4 <xTimerCreateTimerTask+0x58>)
  4020a4:	4b08      	ldr	r3, [pc, #32]	; (4020c8 <xTimerCreateTimerTask+0x5c>)
  4020a6:	4798      	blx	r3
	return xReturn;
  4020a8:	e7f4      	b.n	402094 <xTimerCreateTimerTask+0x28>
  4020aa:	bf00      	nop
  4020ac:	00401ffd 	.word	0x00401ffd
  4020b0:	20000664 	.word	0x20000664
  4020b4:	20000668 	.word	0x20000668
  4020b8:	0040336c 	.word	0x0040336c
  4020bc:	00402435 	.word	0x00402435
  4020c0:	00401795 	.word	0x00401795
  4020c4:	00403350 	.word	0x00403350
  4020c8:	00402f21 	.word	0x00402f21

004020cc <xTimerGenericCommand>:
{
  4020cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4020ce:	b085      	sub	sp, #20
  4020d0:	460c      	mov	r4, r1
  4020d2:	4616      	mov	r6, r2
  4020d4:	461f      	mov	r7, r3
	configASSERT( xTimer );
  4020d6:	4605      	mov	r5, r0
  4020d8:	b198      	cbz	r0, 402102 <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
  4020da:	4b15      	ldr	r3, [pc, #84]	; (402130 <xTimerGenericCommand+0x64>)
  4020dc:	6818      	ldr	r0, [r3, #0]
  4020de:	b328      	cbz	r0, 40212c <xTimerGenericCommand+0x60>
		xMessage.xMessageID = xCommandID;
  4020e0:	9400      	str	r4, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4020e2:	9601      	str	r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
  4020e4:	9502      	str	r5, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4020e6:	2c05      	cmp	r4, #5
  4020e8:	dc19      	bgt.n	40211e <xTimerGenericCommand+0x52>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4020ea:	4b12      	ldr	r3, [pc, #72]	; (402134 <xTimerGenericCommand+0x68>)
  4020ec:	4798      	blx	r3
  4020ee:	2802      	cmp	r0, #2
  4020f0:	d00d      	beq.n	40210e <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4020f2:	2300      	movs	r3, #0
  4020f4:	461a      	mov	r2, r3
  4020f6:	4669      	mov	r1, sp
  4020f8:	480d      	ldr	r0, [pc, #52]	; (402130 <xTimerGenericCommand+0x64>)
  4020fa:	6800      	ldr	r0, [r0, #0]
  4020fc:	4c0e      	ldr	r4, [pc, #56]	; (402138 <xTimerGenericCommand+0x6c>)
  4020fe:	47a0      	blx	r4
  402100:	e012      	b.n	402128 <xTimerGenericCommand+0x5c>
	configASSERT( xTimer );
  402102:	f44f 71c1 	mov.w	r1, #386	; 0x182
  402106:	480d      	ldr	r0, [pc, #52]	; (40213c <xTimerGenericCommand+0x70>)
  402108:	4b0d      	ldr	r3, [pc, #52]	; (402140 <xTimerGenericCommand+0x74>)
  40210a:	4798      	blx	r3
  40210c:	e7e5      	b.n	4020da <xTimerGenericCommand+0xe>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  40210e:	2300      	movs	r3, #0
  402110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402112:	4669      	mov	r1, sp
  402114:	4806      	ldr	r0, [pc, #24]	; (402130 <xTimerGenericCommand+0x64>)
  402116:	6800      	ldr	r0, [r0, #0]
  402118:	4c07      	ldr	r4, [pc, #28]	; (402138 <xTimerGenericCommand+0x6c>)
  40211a:	47a0      	blx	r4
  40211c:	e004      	b.n	402128 <xTimerGenericCommand+0x5c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40211e:	2300      	movs	r3, #0
  402120:	463a      	mov	r2, r7
  402122:	4669      	mov	r1, sp
  402124:	4c07      	ldr	r4, [pc, #28]	; (402144 <xTimerGenericCommand+0x78>)
  402126:	47a0      	blx	r4
}
  402128:	b005      	add	sp, #20
  40212a:	bdf0      	pop	{r4, r5, r6, r7, pc}
BaseType_t xReturn = pdFAIL;
  40212c:	2000      	movs	r0, #0
	return xReturn;
  40212e:	e7fb      	b.n	402128 <xTimerGenericCommand+0x5c>
  402130:	20000664 	.word	0x20000664
  402134:	00401de9 	.word	0x00401de9
  402138:	00400f39 	.word	0x00400f39
  40213c:	00403350 	.word	0x00403350
  402140:	00402f21 	.word	0x00402f21
  402144:	00401125 	.word	0x00401125

00402148 <prvSwitchTimerLists>:
{
  402148:	b570      	push	{r4, r5, r6, lr}
  40214a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40214c:	4b1a      	ldr	r3, [pc, #104]	; (4021b8 <prvSwitchTimerLists+0x70>)
  40214e:	681b      	ldr	r3, [r3, #0]
  402150:	681a      	ldr	r2, [r3, #0]
  402152:	b34a      	cbz	r2, 4021a8 <prvSwitchTimerLists+0x60>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402154:	68db      	ldr	r3, [r3, #12]
  402156:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  402158:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40215a:	1d25      	adds	r5, r4, #4
  40215c:	4628      	mov	r0, r5
  40215e:	4b17      	ldr	r3, [pc, #92]	; (4021bc <prvSwitchTimerLists+0x74>)
  402160:	4798      	blx	r3
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402162:	6a23      	ldr	r3, [r4, #32]
  402164:	4620      	mov	r0, r4
  402166:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  402168:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  40216c:	f013 0f04 	tst.w	r3, #4
  402170:	d0ec      	beq.n	40214c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402172:	69a3      	ldr	r3, [r4, #24]
  402174:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
  402176:	429e      	cmp	r6, r3
  402178:	d207      	bcs.n	40218a <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40217a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40217c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40217e:	4629      	mov	r1, r5
  402180:	4b0d      	ldr	r3, [pc, #52]	; (4021b8 <prvSwitchTimerLists+0x70>)
  402182:	6818      	ldr	r0, [r3, #0]
  402184:	4b0e      	ldr	r3, [pc, #56]	; (4021c0 <prvSwitchTimerLists+0x78>)
  402186:	4798      	blx	r3
  402188:	e7e0      	b.n	40214c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40218a:	2100      	movs	r1, #0
  40218c:	9100      	str	r1, [sp, #0]
  40218e:	460b      	mov	r3, r1
  402190:	4632      	mov	r2, r6
  402192:	4620      	mov	r0, r4
  402194:	4c0b      	ldr	r4, [pc, #44]	; (4021c4 <prvSwitchTimerLists+0x7c>)
  402196:	47a0      	blx	r4
				configASSERT( xResult );
  402198:	2800      	cmp	r0, #0
  40219a:	d1d7      	bne.n	40214c <prvSwitchTimerLists+0x4>
  40219c:	f44f 7161 	mov.w	r1, #900	; 0x384
  4021a0:	4809      	ldr	r0, [pc, #36]	; (4021c8 <prvSwitchTimerLists+0x80>)
  4021a2:	4b0a      	ldr	r3, [pc, #40]	; (4021cc <prvSwitchTimerLists+0x84>)
  4021a4:	4798      	blx	r3
  4021a6:	e7d1      	b.n	40214c <prvSwitchTimerLists+0x4>
	pxCurrentTimerList = pxOverflowTimerList;
  4021a8:	4a09      	ldr	r2, [pc, #36]	; (4021d0 <prvSwitchTimerLists+0x88>)
  4021aa:	6810      	ldr	r0, [r2, #0]
  4021ac:	4902      	ldr	r1, [pc, #8]	; (4021b8 <prvSwitchTimerLists+0x70>)
  4021ae:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  4021b0:	6013      	str	r3, [r2, #0]
}
  4021b2:	b002      	add	sp, #8
  4021b4:	bd70      	pop	{r4, r5, r6, pc}
  4021b6:	bf00      	nop
  4021b8:	20000630 	.word	0x20000630
  4021bc:	004005c5 	.word	0x004005c5
  4021c0:	00400591 	.word	0x00400591
  4021c4:	004020cd 	.word	0x004020cd
  4021c8:	00403350 	.word	0x00403350
  4021cc:	00402f21 	.word	0x00402f21
  4021d0:	20000634 	.word	0x20000634

004021d4 <prvSampleTimeNow>:
{
  4021d4:	b538      	push	{r3, r4, r5, lr}
  4021d6:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
  4021d8:	4b08      	ldr	r3, [pc, #32]	; (4021fc <prvSampleTimeNow+0x28>)
  4021da:	4798      	blx	r3
  4021dc:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
  4021de:	4b08      	ldr	r3, [pc, #32]	; (402200 <prvSampleTimeNow+0x2c>)
  4021e0:	681b      	ldr	r3, [r3, #0]
  4021e2:	4298      	cmp	r0, r3
  4021e4:	d305      	bcc.n	4021f2 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
  4021e6:	2300      	movs	r3, #0
  4021e8:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
  4021ea:	4b05      	ldr	r3, [pc, #20]	; (402200 <prvSampleTimeNow+0x2c>)
  4021ec:	601c      	str	r4, [r3, #0]
}
  4021ee:	4620      	mov	r0, r4
  4021f0:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
  4021f2:	4b04      	ldr	r3, [pc, #16]	; (402204 <prvSampleTimeNow+0x30>)
  4021f4:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  4021f6:	2301      	movs	r3, #1
  4021f8:	602b      	str	r3, [r5, #0]
  4021fa:	e7f6      	b.n	4021ea <prvSampleTimeNow+0x16>
  4021fc:	004018a9 	.word	0x004018a9
  402200:	20000660 	.word	0x20000660
  402204:	00402149 	.word	0x00402149

00402208 <prvProcessExpiredTimer>:
{
  402208:	b570      	push	{r4, r5, r6, lr}
  40220a:	b082      	sub	sp, #8
  40220c:	4605      	mov	r5, r0
  40220e:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  402210:	4b16      	ldr	r3, [pc, #88]	; (40226c <prvProcessExpiredTimer+0x64>)
  402212:	681b      	ldr	r3, [r3, #0]
  402214:	68db      	ldr	r3, [r3, #12]
  402216:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402218:	1d20      	adds	r0, r4, #4
  40221a:	4b15      	ldr	r3, [pc, #84]	; (402270 <prvProcessExpiredTimer+0x68>)
  40221c:	4798      	blx	r3
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  40221e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  402222:	f013 0f04 	tst.w	r3, #4
  402226:	d108      	bne.n	40223a <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
  402228:	f023 0301 	bic.w	r3, r3, #1
  40222c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402230:	6a23      	ldr	r3, [r4, #32]
  402232:	4620      	mov	r0, r4
  402234:	4798      	blx	r3
}
  402236:	b002      	add	sp, #8
  402238:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
  40223a:	69a1      	ldr	r1, [r4, #24]
  40223c:	462b      	mov	r3, r5
  40223e:	4632      	mov	r2, r6
  402240:	4429      	add	r1, r5
  402242:	4620      	mov	r0, r4
  402244:	4e0b      	ldr	r6, [pc, #44]	; (402274 <prvProcessExpiredTimer+0x6c>)
  402246:	47b0      	blx	r6
  402248:	2800      	cmp	r0, #0
  40224a:	d0f1      	beq.n	402230 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  40224c:	2100      	movs	r1, #0
  40224e:	9100      	str	r1, [sp, #0]
  402250:	460b      	mov	r3, r1
  402252:	462a      	mov	r2, r5
  402254:	4620      	mov	r0, r4
  402256:	4d08      	ldr	r5, [pc, #32]	; (402278 <prvProcessExpiredTimer+0x70>)
  402258:	47a8      	blx	r5
			configASSERT( xResult );
  40225a:	2800      	cmp	r0, #0
  40225c:	d1e8      	bne.n	402230 <prvProcessExpiredTimer+0x28>
  40225e:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
  402262:	4806      	ldr	r0, [pc, #24]	; (40227c <prvProcessExpiredTimer+0x74>)
  402264:	4b06      	ldr	r3, [pc, #24]	; (402280 <prvProcessExpiredTimer+0x78>)
  402266:	4798      	blx	r3
  402268:	e7e2      	b.n	402230 <prvProcessExpiredTimer+0x28>
  40226a:	bf00      	nop
  40226c:	20000630 	.word	0x20000630
  402270:	004005c5 	.word	0x004005c5
  402274:	00401fb1 	.word	0x00401fb1
  402278:	004020cd 	.word	0x004020cd
  40227c:	00403350 	.word	0x00403350
  402280:	00402f21 	.word	0x00402f21

00402284 <prvProcessTimerOrBlockTask>:
{
  402284:	b570      	push	{r4, r5, r6, lr}
  402286:	b082      	sub	sp, #8
  402288:	4606      	mov	r6, r0
  40228a:	460c      	mov	r4, r1
	vTaskSuspendAll();
  40228c:	4b17      	ldr	r3, [pc, #92]	; (4022ec <prvProcessTimerOrBlockTask+0x68>)
  40228e:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402290:	a801      	add	r0, sp, #4
  402292:	4b17      	ldr	r3, [pc, #92]	; (4022f0 <prvProcessTimerOrBlockTask+0x6c>)
  402294:	4798      	blx	r3
		if( xTimerListsWereSwitched == pdFALSE )
  402296:	9b01      	ldr	r3, [sp, #4]
  402298:	bb2b      	cbnz	r3, 4022e6 <prvProcessTimerOrBlockTask+0x62>
  40229a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  40229c:	b90c      	cbnz	r4, 4022a2 <prvProcessTimerOrBlockTask+0x1e>
  40229e:	42b0      	cmp	r0, r6
  4022a0:	d218      	bcs.n	4022d4 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
  4022a2:	b124      	cbz	r4, 4022ae <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4022a4:	4b13      	ldr	r3, [pc, #76]	; (4022f4 <prvProcessTimerOrBlockTask+0x70>)
  4022a6:	681b      	ldr	r3, [r3, #0]
  4022a8:	681b      	ldr	r3, [r3, #0]
  4022aa:	b9d3      	cbnz	r3, 4022e2 <prvProcessTimerOrBlockTask+0x5e>
  4022ac:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4022ae:	4622      	mov	r2, r4
  4022b0:	1b71      	subs	r1, r6, r5
  4022b2:	4b11      	ldr	r3, [pc, #68]	; (4022f8 <prvProcessTimerOrBlockTask+0x74>)
  4022b4:	6818      	ldr	r0, [r3, #0]
  4022b6:	4b11      	ldr	r3, [pc, #68]	; (4022fc <prvProcessTimerOrBlockTask+0x78>)
  4022b8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4022ba:	4b11      	ldr	r3, [pc, #68]	; (402300 <prvProcessTimerOrBlockTask+0x7c>)
  4022bc:	4798      	blx	r3
  4022be:	b938      	cbnz	r0, 4022d0 <prvProcessTimerOrBlockTask+0x4c>
					portYIELD_WITHIN_API();
  4022c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4022c4:	4b0f      	ldr	r3, [pc, #60]	; (402304 <prvProcessTimerOrBlockTask+0x80>)
  4022c6:	601a      	str	r2, [r3, #0]
  4022c8:	f3bf 8f4f 	dsb	sy
  4022cc:	f3bf 8f6f 	isb	sy
}
  4022d0:	b002      	add	sp, #8
  4022d2:	bd70      	pop	{r4, r5, r6, pc}
				( void ) xTaskResumeAll();
  4022d4:	4b0a      	ldr	r3, [pc, #40]	; (402300 <prvProcessTimerOrBlockTask+0x7c>)
  4022d6:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  4022d8:	4629      	mov	r1, r5
  4022da:	4630      	mov	r0, r6
  4022dc:	4b0a      	ldr	r3, [pc, #40]	; (402308 <prvProcessTimerOrBlockTask+0x84>)
  4022de:	4798      	blx	r3
  4022e0:	e7f6      	b.n	4022d0 <prvProcessTimerOrBlockTask+0x4c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4022e2:	2400      	movs	r4, #0
  4022e4:	e7e3      	b.n	4022ae <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
  4022e6:	4b06      	ldr	r3, [pc, #24]	; (402300 <prvProcessTimerOrBlockTask+0x7c>)
  4022e8:	4798      	blx	r3
}
  4022ea:	e7f1      	b.n	4022d0 <prvProcessTimerOrBlockTask+0x4c>
  4022ec:	00401899 	.word	0x00401899
  4022f0:	004021d5 	.word	0x004021d5
  4022f4:	20000634 	.word	0x20000634
  4022f8:	20000664 	.word	0x20000664
  4022fc:	004013ed 	.word	0x004013ed
  402300:	004019d9 	.word	0x004019d9
  402304:	e000ed04 	.word	0xe000ed04
  402308:	00402209 	.word	0x00402209

0040230c <prvProcessReceivedCommands>:
{
  40230c:	b530      	push	{r4, r5, lr}
  40230e:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402310:	e002      	b.n	402318 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402312:	9b04      	ldr	r3, [sp, #16]
  402314:	2b00      	cmp	r3, #0
  402316:	da0f      	bge.n	402338 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402318:	2200      	movs	r2, #0
  40231a:	a904      	add	r1, sp, #16
  40231c:	4b3c      	ldr	r3, [pc, #240]	; (402410 <prvProcessReceivedCommands+0x104>)
  40231e:	6818      	ldr	r0, [r3, #0]
  402320:	4b3c      	ldr	r3, [pc, #240]	; (402414 <prvProcessReceivedCommands+0x108>)
  402322:	4798      	blx	r3
  402324:	2800      	cmp	r0, #0
  402326:	d070      	beq.n	40240a <prvProcessReceivedCommands+0xfe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402328:	9b04      	ldr	r3, [sp, #16]
  40232a:	2b00      	cmp	r3, #0
  40232c:	daf1      	bge.n	402312 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  40232e:	9907      	ldr	r1, [sp, #28]
  402330:	9806      	ldr	r0, [sp, #24]
  402332:	9b05      	ldr	r3, [sp, #20]
  402334:	4798      	blx	r3
  402336:	e7ec      	b.n	402312 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402338:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  40233a:	6963      	ldr	r3, [r4, #20]
  40233c:	b113      	cbz	r3, 402344 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40233e:	1d20      	adds	r0, r4, #4
  402340:	4b35      	ldr	r3, [pc, #212]	; (402418 <prvProcessReceivedCommands+0x10c>)
  402342:	4798      	blx	r3
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402344:	a803      	add	r0, sp, #12
  402346:	4b35      	ldr	r3, [pc, #212]	; (40241c <prvProcessReceivedCommands+0x110>)
  402348:	4798      	blx	r3
  40234a:	4605      	mov	r5, r0
			switch( xMessage.xMessageID )
  40234c:	9b04      	ldr	r3, [sp, #16]
  40234e:	2b09      	cmp	r3, #9
  402350:	d8e2      	bhi.n	402318 <prvProcessReceivedCommands+0xc>
  402352:	e8df f003 	tbb	[pc, r3]
  402356:	0505      	.short	0x0505
  402358:	4c352e05 	.word	0x4c352e05
  40235c:	352e0505 	.word	0x352e0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  402360:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  402364:	f043 0301 	orr.w	r3, r3, #1
  402368:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  40236c:	9905      	ldr	r1, [sp, #20]
  40236e:	69a0      	ldr	r0, [r4, #24]
  402370:	460b      	mov	r3, r1
  402372:	462a      	mov	r2, r5
  402374:	4401      	add	r1, r0
  402376:	4620      	mov	r0, r4
  402378:	4d29      	ldr	r5, [pc, #164]	; (402420 <prvProcessReceivedCommands+0x114>)
  40237a:	47a8      	blx	r5
  40237c:	2800      	cmp	r0, #0
  40237e:	d0cb      	beq.n	402318 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402380:	6a23      	ldr	r3, [r4, #32]
  402382:	4620      	mov	r0, r4
  402384:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  402386:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  40238a:	f013 0f04 	tst.w	r3, #4
  40238e:	d0c3      	beq.n	402318 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402390:	69a2      	ldr	r2, [r4, #24]
  402392:	2100      	movs	r1, #0
  402394:	9100      	str	r1, [sp, #0]
  402396:	460b      	mov	r3, r1
  402398:	9805      	ldr	r0, [sp, #20]
  40239a:	4402      	add	r2, r0
  40239c:	4620      	mov	r0, r4
  40239e:	4c21      	ldr	r4, [pc, #132]	; (402424 <prvProcessReceivedCommands+0x118>)
  4023a0:	47a0      	blx	r4
							configASSERT( xResult );
  4023a2:	2800      	cmp	r0, #0
  4023a4:	d1b8      	bne.n	402318 <prvProcessReceivedCommands+0xc>
  4023a6:	f240 3113 	movw	r1, #787	; 0x313
  4023aa:	481f      	ldr	r0, [pc, #124]	; (402428 <prvProcessReceivedCommands+0x11c>)
  4023ac:	4b1f      	ldr	r3, [pc, #124]	; (40242c <prvProcessReceivedCommands+0x120>)
  4023ae:	4798      	blx	r3
  4023b0:	e7b2      	b.n	402318 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
  4023b2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  4023b6:	f023 0301 	bic.w	r3, r3, #1
  4023ba:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
					break;
  4023be:	e7ab      	b.n	402318 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  4023c0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  4023c4:	f043 0301 	orr.w	r3, r3, #1
  4023c8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4023cc:	9b05      	ldr	r3, [sp, #20]
  4023ce:	61a3      	str	r3, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4023d0:	b13b      	cbz	r3, 4023e2 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4023d2:	69a1      	ldr	r1, [r4, #24]
  4023d4:	462b      	mov	r3, r5
  4023d6:	462a      	mov	r2, r5
  4023d8:	4429      	add	r1, r5
  4023da:	4620      	mov	r0, r4
  4023dc:	4c10      	ldr	r4, [pc, #64]	; (402420 <prvProcessReceivedCommands+0x114>)
  4023de:	47a0      	blx	r4
					break;
  4023e0:	e79a      	b.n	402318 <prvProcessReceivedCommands+0xc>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4023e2:	f240 312b 	movw	r1, #811	; 0x32b
  4023e6:	4810      	ldr	r0, [pc, #64]	; (402428 <prvProcessReceivedCommands+0x11c>)
  4023e8:	4b10      	ldr	r3, [pc, #64]	; (40242c <prvProcessReceivedCommands+0x120>)
  4023ea:	4798      	blx	r3
  4023ec:	e7f1      	b.n	4023d2 <prvProcessReceivedCommands+0xc6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
  4023ee:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  4023f2:	f013 0f02 	tst.w	r3, #2
  4023f6:	d004      	beq.n	402402 <prvProcessReceivedCommands+0xf6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
  4023f8:	f023 0301 	bic.w	r3, r3, #1
  4023fc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  402400:	e78a      	b.n	402318 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
  402402:	4620      	mov	r0, r4
  402404:	4b0a      	ldr	r3, [pc, #40]	; (402430 <prvProcessReceivedCommands+0x124>)
  402406:	4798      	blx	r3
  402408:	e786      	b.n	402318 <prvProcessReceivedCommands+0xc>
}
  40240a:	b009      	add	sp, #36	; 0x24
  40240c:	bd30      	pop	{r4, r5, pc}
  40240e:	bf00      	nop
  402410:	20000664 	.word	0x20000664
  402414:	00401231 	.word	0x00401231
  402418:	004005c5 	.word	0x004005c5
  40241c:	004021d5 	.word	0x004021d5
  402420:	00401fb1 	.word	0x00401fb1
  402424:	004020cd 	.word	0x004020cd
  402428:	00403350 	.word	0x00403350
  40242c:	00402f21 	.word	0x00402f21
  402430:	00400abd 	.word	0x00400abd

00402434 <prvTimerTask>:
{
  402434:	b500      	push	{lr}
  402436:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  402438:	a801      	add	r0, sp, #4
  40243a:	4b04      	ldr	r3, [pc, #16]	; (40244c <prvTimerTask+0x18>)
  40243c:	4798      	blx	r3
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  40243e:	9901      	ldr	r1, [sp, #4]
  402440:	4b03      	ldr	r3, [pc, #12]	; (402450 <prvTimerTask+0x1c>)
  402442:	4798      	blx	r3
		prvProcessReceivedCommands();
  402444:	4b03      	ldr	r3, [pc, #12]	; (402454 <prvTimerTask+0x20>)
  402446:	4798      	blx	r3
  402448:	e7f6      	b.n	402438 <prvTimerTask+0x4>
  40244a:	bf00      	nop
  40244c:	00401f91 	.word	0x00401f91
  402450:	00402285 	.word	0x00402285
  402454:	0040230d 	.word	0x0040230d

00402458 <intitializeLEDDriver>:
#include "ledDriver.h"
#include "myDefines.h"


void intitializeLEDDriver(void)
{
  402458:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40245a:	2009      	movs	r0, #9
  40245c:	4c0e      	ldr	r4, [pc, #56]	; (402498 <intitializeLEDDriver+0x40>)
  40245e:	47a0      	blx	r4
  402460:	200a      	movs	r0, #10
  402462:	47a0      	blx	r4
  402464:	200b      	movs	r0, #11
  402466:	47a0      	blx	r4
  402468:	200c      	movs	r0, #12
  40246a:	47a0      	blx	r4
  40246c:	200d      	movs	r0, #13
  40246e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402470:	4b0a      	ldr	r3, [pc, #40]	; (40249c <intitializeLEDDriver+0x44>)
  402472:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
  402476:	611c      	str	r4, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402478:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40247c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  402480:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402482:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402486:	4a06      	ldr	r2, [pc, #24]	; (4024a0 <intitializeLEDDriver+0x48>)
  402488:	2102      	movs	r1, #2
  40248a:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40248c:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402490:	631c      	str	r4, [r3, #48]	; 0x30
  402492:	6318      	str	r0, [r3, #48]	; 0x30
  402494:	6311      	str	r1, [r2, #48]	; 0x30
  402496:	bd10      	pop	{r4, pc}
  402498:	00402b09 	.word	0x00402b09
  40249c:	400e1400 	.word	0x400e1400
  4024a0:	400e1600 	.word	0x400e1600

004024a4 <readLED>:
	1 = EXT_LED1
	2 = EXT_LED2
	3 = EXT_LED3
	*/
	//if the led number is 1, then that will be for the external led #1
	if (uiLedNum == 1)
  4024a4:	2801      	cmp	r0, #1
  4024a6:	d008      	beq.n	4024ba <readLED+0x16>
	{
		return ioport_get_pin_level(EXT_LED1);
	}
	//else if the led number is 2, then that will be for the external led #2
	else if (uiLedNum == 2)
  4024a8:	2802      	cmp	r0, #2
  4024aa:	d00b      	beq.n	4024c4 <readLED+0x20>
	{
		return ioport_get_pin_level(EXT_LED2);
	}
	//else if the led number is 3, then that will be for the external led #3 
	else if (uiLedNum == 3)
  4024ac:	2803      	cmp	r0, #3
  4024ae:	d00e      	beq.n	4024ce <readLED+0x2a>
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4024b0:	4b09      	ldr	r3, [pc, #36]	; (4024d8 <readLED+0x34>)
  4024b2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  4024b4:	f3c0 5080 	ubfx	r0, r0, #22, #1
	else
	{
		return ioport_get_pin_level(LED_0_PIN);
	}
	
}
  4024b8:	4770      	bx	lr
  4024ba:	4b07      	ldr	r3, [pc, #28]	; (4024d8 <readLED+0x34>)
  4024bc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  4024be:	f3c0 7000 	ubfx	r0, r0, #28, #1
		return ioport_get_pin_level(EXT_LED1);
  4024c2:	4770      	bx	lr
  4024c4:	4b04      	ldr	r3, [pc, #16]	; (4024d8 <readLED+0x34>)
  4024c6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  4024c8:	f3c0 4040 	ubfx	r0, r0, #17, #1
		return ioport_get_pin_level(EXT_LED2);
  4024cc:	4770      	bx	lr
  4024ce:	4b03      	ldr	r3, [pc, #12]	; (4024dc <readLED+0x38>)
  4024d0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  4024d2:	f3c0 0040 	ubfx	r0, r0, #1, #1
		return ioport_get_pin_level(EXT_LED3);
  4024d6:	4770      	bx	lr
  4024d8:	400e1400 	.word	0x400e1400
  4024dc:	400e1600 	.word	0x400e1600

004024e0 <setLED>:

uint8_t setLED(uint8_t uiLedNum, uint8_t uiLedValue)
{
  4024e0:	b508      	push	{r3, lr}
/*
Sets the LED to a specified value (ON/OFF)
*/
		//if the led number is 1, then set the pin level
		//to on for for the external led #1, and then return the readLED
		if (uiLedNum == 1)
  4024e2:	2801      	cmp	r0, #1
  4024e4:	d00c      	beq.n	402500 <setLED+0x20>
			ioport_set_pin_level(EXT_LED1, uiLedValue);
			return readLED(uiLedNum);			
		}
		//else if the led number is 2, then set the pin level
		//to on for for the external led #2, and then return the readLED
		else if (uiLedNum == 2)
  4024e6:	2802      	cmp	r0, #2
  4024e8:	d017      	beq.n	40251a <setLED+0x3a>
			ioport_set_pin_level(EXT_LED2, uiLedValue);
			return readLED(uiLedNum);			
		}
		//else if the led number is 3, then set the pin level
		//to on for for the external led #3, and then return the readLED
		else if (uiLedNum == 3)
  4024ea:	2803      	cmp	r0, #3
  4024ec:	d022      	beq.n	402534 <setLED+0x54>
	if (level) {
  4024ee:	2900      	cmp	r1, #0
  4024f0:	d02b      	beq.n	40254a <setLED+0x6a>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4024f2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4024f6:	4b17      	ldr	r3, [pc, #92]	; (402554 <setLED+0x74>)
  4024f8:	631a      	str	r2, [r3, #48]	; 0x30
		}
		//else set the on board led to on, then return the readLED
		else
		{
			ioport_set_pin_level(LED_0_PIN, uiLedValue);
			return readLED(uiLedNum);
  4024fa:	4b17      	ldr	r3, [pc, #92]	; (402558 <setLED+0x78>)
  4024fc:	4798      	blx	r3
		}
}
  4024fe:	bd08      	pop	{r3, pc}
	if (level) {
  402500:	b131      	cbz	r1, 402510 <setLED+0x30>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402506:	4b13      	ldr	r3, [pc, #76]	; (402554 <setLED+0x74>)
  402508:	631a      	str	r2, [r3, #48]	; 0x30
			return readLED(uiLedNum);			
  40250a:	4b13      	ldr	r3, [pc, #76]	; (402558 <setLED+0x78>)
  40250c:	4798      	blx	r3
  40250e:	bd08      	pop	{r3, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402514:	4b0f      	ldr	r3, [pc, #60]	; (402554 <setLED+0x74>)
  402516:	635a      	str	r2, [r3, #52]	; 0x34
  402518:	e7f7      	b.n	40250a <setLED+0x2a>
	if (level) {
  40251a:	b131      	cbz	r1, 40252a <setLED+0x4a>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40251c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  402520:	4b0c      	ldr	r3, [pc, #48]	; (402554 <setLED+0x74>)
  402522:	631a      	str	r2, [r3, #48]	; 0x30
			return readLED(uiLedNum);			
  402524:	4b0c      	ldr	r3, [pc, #48]	; (402558 <setLED+0x78>)
  402526:	4798      	blx	r3
  402528:	bd08      	pop	{r3, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40252a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40252e:	4b09      	ldr	r3, [pc, #36]	; (402554 <setLED+0x74>)
  402530:	635a      	str	r2, [r3, #52]	; 0x34
  402532:	e7f7      	b.n	402524 <setLED+0x44>
	if (level) {
  402534:	b129      	cbz	r1, 402542 <setLED+0x62>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402536:	2202      	movs	r2, #2
  402538:	4b08      	ldr	r3, [pc, #32]	; (40255c <setLED+0x7c>)
  40253a:	631a      	str	r2, [r3, #48]	; 0x30
			return readLED(uiLedNum);	
  40253c:	4b06      	ldr	r3, [pc, #24]	; (402558 <setLED+0x78>)
  40253e:	4798      	blx	r3
  402540:	bd08      	pop	{r3, pc}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402542:	2202      	movs	r2, #2
  402544:	4b05      	ldr	r3, [pc, #20]	; (40255c <setLED+0x7c>)
  402546:	635a      	str	r2, [r3, #52]	; 0x34
  402548:	e7f8      	b.n	40253c <setLED+0x5c>
  40254a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40254e:	4b01      	ldr	r3, [pc, #4]	; (402554 <setLED+0x74>)
  402550:	635a      	str	r2, [r3, #52]	; 0x34
  402552:	e7d2      	b.n	4024fa <setLED+0x1a>
  402554:	400e1400 	.word	0x400e1400
  402558:	004024a5 	.word	0x004024a5
  40255c:	400e1600 	.word	0x400e1600

00402560 <toggleLED>:

uint8_t toggleLED(uint8_t uiLedNum)
{
  402560:	b510      	push	{r4, lr}
  402562:	4604      	mov	r4, r0
/*
Toggles the LED
If the led is on, then turn it off
If the led is off, then turn it on
*/
	if (readLED(uiLedNum) == 1)
  402564:	4b06      	ldr	r3, [pc, #24]	; (402580 <toggleLED+0x20>)
  402566:	4798      	blx	r3
  402568:	2801      	cmp	r0, #1
  40256a:	d004      	beq.n	402576 <toggleLED+0x16>
	{
		return setLED(uiLedNum, 0);
		
	}
	else
		return setLED(uiLedNum, 1);
  40256c:	2101      	movs	r1, #1
  40256e:	4620      	mov	r0, r4
  402570:	4b04      	ldr	r3, [pc, #16]	; (402584 <toggleLED+0x24>)
  402572:	4798      	blx	r3
	
	
}
  402574:	bd10      	pop	{r4, pc}
		return setLED(uiLedNum, 0);
  402576:	2100      	movs	r1, #0
  402578:	4620      	mov	r0, r4
  40257a:	4b02      	ldr	r3, [pc, #8]	; (402584 <toggleLED+0x24>)
  40257c:	4798      	blx	r3
  40257e:	bd10      	pop	{r4, pc}
  402580:	004024a5 	.word	0x004024a5
  402584:	004024e1 	.word	0x004024e1

00402588 <button_handler>:

}

//This is the second part of lab 5 for a button handler for the isr
void button_handler(uint32_t id, uint32_t mask)
{
  402588:	b500      	push	{lr}
  40258a:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  40258c:	2300      	movs	r3, #0
  40258e:	9301      	str	r3, [sp, #4]

	if((PIN_PUSHBUTTON_1_ID == id) && (PIN_PUSHBUTTON_1_MASK == mask))
  402590:	2809      	cmp	r0, #9
  402592:	d015      	beq.n	4025c0 <button_handler+0x38>
	{
		// Set a global variable to signify which button (IE onboard in this case)
		currButton = SW0;
	}
	else if((PIN_PUSHBUTTON_2_ID == id) && (PIN_PUSHBUTTON_2_MASK == mask))
  402594:	280c      	cmp	r0, #12
  402596:	d019      	beq.n	4025cc <button_handler+0x44>
	{
		// Set a global variable to signify external switch 1
		currButton = EXT_SW1;
	}
	else if((PIN_PUSHBUTTON_3_ID == id) && (PIN_PUSHBUTTON_3_MASK == mask))
  402598:	280c      	cmp	r0, #12
  40259a:	d01e      	beq.n	4025da <button_handler+0x52>
	{
		// Set a global variable to signify external switch 2
		currButton = EXT_SW2;
	}
	// Then wake up the button Task to process.
	vTaskNotifyGiveFromISR(buttonHandle, &xHigherPriorityTaskWoken);
  40259c:	a901      	add	r1, sp, #4
  40259e:	4b12      	ldr	r3, [pc, #72]	; (4025e8 <button_handler+0x60>)
  4025a0:	6818      	ldr	r0, [r3, #0]
  4025a2:	4b12      	ldr	r3, [pc, #72]	; (4025ec <button_handler+0x64>)
  4025a4:	4798      	blx	r3
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
  4025a6:	9b01      	ldr	r3, [sp, #4]
  4025a8:	b13b      	cbz	r3, 4025ba <button_handler+0x32>
  4025aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4025ae:	4b10      	ldr	r3, [pc, #64]	; (4025f0 <button_handler+0x68>)
  4025b0:	601a      	str	r2, [r3, #0]
  4025b2:	f3bf 8f4f 	dsb	sy
  4025b6:	f3bf 8f6f 	isb	sy
  4025ba:	b003      	add	sp, #12
  4025bc:	f85d fb04 	ldr.w	pc, [sp], #4
	if((PIN_PUSHBUTTON_1_ID == id) && (PIN_PUSHBUTTON_1_MASK == mask))
  4025c0:	2904      	cmp	r1, #4
  4025c2:	d1e7      	bne.n	402594 <button_handler+0xc>
		currButton = SW0;
  4025c4:	461a      	mov	r2, r3
  4025c6:	4b0b      	ldr	r3, [pc, #44]	; (4025f4 <button_handler+0x6c>)
  4025c8:	601a      	str	r2, [r3, #0]
  4025ca:	e7e7      	b.n	40259c <button_handler+0x14>
	else if((PIN_PUSHBUTTON_2_ID == id) && (PIN_PUSHBUTTON_2_MASK == mask))
  4025cc:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
  4025d0:	d1e2      	bne.n	402598 <button_handler+0x10>
		currButton = EXT_SW1;
  4025d2:	227a      	movs	r2, #122	; 0x7a
  4025d4:	4b07      	ldr	r3, [pc, #28]	; (4025f4 <button_handler+0x6c>)
  4025d6:	601a      	str	r2, [r3, #0]
  4025d8:	e7e0      	b.n	40259c <button_handler+0x14>
	else if((PIN_PUSHBUTTON_3_ID == id) && (PIN_PUSHBUTTON_3_MASK == mask))
  4025da:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  4025de:	d1dd      	bne.n	40259c <button_handler+0x14>
		currButton = EXT_SW2;
  4025e0:	227e      	movs	r2, #126	; 0x7e
  4025e2:	4b04      	ldr	r3, [pc, #16]	; (4025f4 <button_handler+0x6c>)
  4025e4:	601a      	str	r2, [r3, #0]
  4025e6:	e7d9      	b.n	40259c <button_handler+0x14>
  4025e8:	20000674 	.word	0x20000674
  4025ec:	00401ebd 	.word	0x00401ebd
  4025f0:	e000ed04 	.word	0xe000ed04
  4025f4:	2000066c 	.word	0x2000066c

004025f8 <initializeButtonDriver>:
{
  4025f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025fc:	b083      	sub	sp, #12
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4025fe:	4c48      	ldr	r4, [pc, #288]	; (402720 <initializeButtonDriver+0x128>)
  402600:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
  402604:	6166      	str	r6, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402606:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40260a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  40260e:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402610:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402614:	2301      	movs	r3, #1
  402616:	4a43      	ldr	r2, [pc, #268]	; (402724 <initializeButtonDriver+0x12c>)
  402618:	6153      	str	r3, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40261a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		base->PIO_PUER = mask;
  40261e:	6666      	str	r6, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  402620:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402624:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  402626:	6226      	str	r6, [r4, #32]
		base->PIO_IFSCER = mask;
  402628:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40262c:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40262e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
  402632:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402634:	6f63      	ldr	r3, [r4, #116]	; 0x74
  402636:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
  40263a:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUER = mask;
  40263c:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40263e:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402642:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  402644:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  402646:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40264a:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40264c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  402650:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402652:	6f63      	ldr	r3, [r4, #116]	; 0x74
  402654:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  402658:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40265a:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40265e:	f8c4 60d4 	str.w	r6, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  402662:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		base->PIO_ESR = mask;
  402666:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40266a:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
	base->PIO_AIMER = mask;
  40266e:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
	pio_configure(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_TYPE, PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR);
  402672:	2379      	movs	r3, #121	; 0x79
  402674:	2204      	movs	r2, #4
  402676:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40267a:	482a      	ldr	r0, [pc, #168]	; (402724 <initializeButtonDriver+0x12c>)
  40267c:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 402730 <initializeButtonDriver+0x138>
  402680:	47d8      	blx	fp
	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  402682:	220a      	movs	r2, #10
  402684:	2104      	movs	r1, #4
  402686:	4827      	ldr	r0, [pc, #156]	; (402724 <initializeButtonDriver+0x12c>)
  402688:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 402734 <initializeButtonDriver+0x13c>
  40268c:	47d0      	blx	sl
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID, PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, button_handler);
  40268e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 402738 <initializeButtonDriver+0x140>
  402692:	f8cd 9000 	str.w	r9, [sp]
  402696:	2379      	movs	r3, #121	; 0x79
  402698:	2204      	movs	r2, #4
  40269a:	2109      	movs	r1, #9
  40269c:	4821      	ldr	r0, [pc, #132]	; (402724 <initializeButtonDriver+0x12c>)
  40269e:	4f22      	ldr	r7, [pc, #136]	; (402728 <initializeButtonDriver+0x130>)
  4026a0:	47b8      	blx	r7
	pio_handler_set_priority(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_IRQn, 5);
  4026a2:	2205      	movs	r2, #5
  4026a4:	2109      	movs	r1, #9
  4026a6:	481f      	ldr	r0, [pc, #124]	; (402724 <initializeButtonDriver+0x12c>)
  4026a8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 40273c <initializeButtonDriver+0x144>
  4026ac:	47c0      	blx	r8
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  4026ae:	2104      	movs	r1, #4
  4026b0:	481c      	ldr	r0, [pc, #112]	; (402724 <initializeButtonDriver+0x12c>)
  4026b2:	4b1e      	ldr	r3, [pc, #120]	; (40272c <initializeButtonDriver+0x134>)
  4026b4:	4798      	blx	r3
	pio_configure(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_TYPE, PIN_PUSHBUTTON_2_MASK, PIN_PUSHBUTTON_2_ATTR);
  4026b6:	2379      	movs	r3, #121	; 0x79
  4026b8:	4632      	mov	r2, r6
  4026ba:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4026be:	4620      	mov	r0, r4
  4026c0:	47d8      	blx	fp
	pio_set_debounce_filter(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK, 10);
  4026c2:	220a      	movs	r2, #10
  4026c4:	4631      	mov	r1, r6
  4026c6:	4620      	mov	r0, r4
  4026c8:	47d0      	blx	sl
	pio_handler_set(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_ID, PIN_PUSHBUTTON_2_MASK, PIN_PUSHBUTTON_2_ATTR, button_handler);
  4026ca:	f8cd 9000 	str.w	r9, [sp]
  4026ce:	2379      	movs	r3, #121	; 0x79
  4026d0:	4632      	mov	r2, r6
  4026d2:	210c      	movs	r1, #12
  4026d4:	4620      	mov	r0, r4
  4026d6:	47b8      	blx	r7
	pio_handler_set_priority(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_IRQn, 5);
  4026d8:	2205      	movs	r2, #5
  4026da:	210c      	movs	r1, #12
  4026dc:	4620      	mov	r0, r4
  4026de:	47c0      	blx	r8
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
  4026e0:	4631      	mov	r1, r6
  4026e2:	4620      	mov	r0, r4
  4026e4:	4b11      	ldr	r3, [pc, #68]	; (40272c <initializeButtonDriver+0x134>)
  4026e6:	4798      	blx	r3
	pio_configure(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_TYPE, PIN_PUSHBUTTON_3_MASK, PIN_PUSHBUTTON_3_ATTR);
  4026e8:	2379      	movs	r3, #121	; 0x79
  4026ea:	462a      	mov	r2, r5
  4026ec:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4026f0:	4620      	mov	r0, r4
  4026f2:	47d8      	blx	fp
	pio_set_debounce_filter(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK, 10);
  4026f4:	220a      	movs	r2, #10
  4026f6:	4629      	mov	r1, r5
  4026f8:	4620      	mov	r0, r4
  4026fa:	47d0      	blx	sl
	pio_handler_set(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_ID, PIN_PUSHBUTTON_3_MASK, PIN_PUSHBUTTON_3_ATTR, button_handler);
  4026fc:	f8cd 9000 	str.w	r9, [sp]
  402700:	2379      	movs	r3, #121	; 0x79
  402702:	462a      	mov	r2, r5
  402704:	210c      	movs	r1, #12
  402706:	4620      	mov	r0, r4
  402708:	47b8      	blx	r7
	pio_handler_set_priority(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_IRQn, 5);
  40270a:	2205      	movs	r2, #5
  40270c:	210c      	movs	r1, #12
  40270e:	4620      	mov	r0, r4
  402710:	47c0      	blx	r8
	pio_enable_interrupt(PIN_PUSHBUTTON_3_PIO, PIN_PUSHBUTTON_3_MASK);
  402712:	4629      	mov	r1, r5
  402714:	4620      	mov	r0, r4
  402716:	4b05      	ldr	r3, [pc, #20]	; (40272c <initializeButtonDriver+0x134>)
  402718:	4798      	blx	r3
}
  40271a:	b003      	add	sp, #12
  40271c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402720:	400e1400 	.word	0x400e1400
  402724:	400e0e00 	.word	0x400e0e00
  402728:	004003e5 	.word	0x004003e5
  40272c:	0040024b 	.word	0x0040024b
  402730:	004002d5 	.word	0x004002d5
  402734:	0040016f 	.word	0x0040016f
  402738:	00402589 	.word	0x00402589
  40273c:	004004b1 	.word	0x004004b1

00402740 <taskHeartBeat>:
//
//}
	
//this is the heartbeat task to have led 0 blink		
void taskHeartBeat (void * pvParamaters)		
{
  402740:	b508      	push	{r3, lr}
*/	

	//this is the heartbeat for LED 0 to happen once every second
	while (true)
	{
		toggleLED(LED0);
  402742:	2000      	movs	r0, #0
  402744:	4b03      	ldr	r3, [pc, #12]	; (402754 <taskHeartBeat+0x14>)
  402746:	4798      	blx	r3
		vTaskDelay(xDelay2);
  402748:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  40274c:	4b02      	ldr	r3, [pc, #8]	; (402758 <taskHeartBeat+0x18>)
  40274e:	4798      	blx	r3
  402750:	e7f7      	b.n	402742 <taskHeartBeat+0x2>
  402752:	bf00      	nop
  402754:	00402561 	.word	0x00402561
  402758:	00401af1 	.word	0x00401af1

0040275c <taskLED>:
		
}


void taskLED(void * pvParameters)
{
  40275c:	b538      	push	{r3, r4, r5, lr}
  40275e:	4605      	mov	r5, r0
	QueueHandle_t LEDParam = (QueueHandle_t) pvParameters;


	while(true)
	{
		xQueueReceive(LEDParam, &(currLED), portMAX_DELAY);
  402760:	4c05      	ldr	r4, [pc, #20]	; (402778 <taskLED+0x1c>)
  402762:	f04f 32ff 	mov.w	r2, #4294967295
  402766:	4621      	mov	r1, r4
  402768:	4628      	mov	r0, r5
  40276a:	4b04      	ldr	r3, [pc, #16]	; (40277c <taskLED+0x20>)
  40276c:	4798      	blx	r3
		toggleLED(currLED);
  40276e:	7820      	ldrb	r0, [r4, #0]
  402770:	4b03      	ldr	r3, [pc, #12]	; (402780 <taskLED+0x24>)
  402772:	4798      	blx	r3
  402774:	e7f4      	b.n	402760 <taskLED+0x4>
  402776:	bf00      	nop
  402778:	20000670 	.word	0x20000670
  40277c:	00401231 	.word	0x00401231
  402780:	00402561 	.word	0x00402561

00402784 <taskTX>:
		}
	}
}

void taskTX(void *pvParameters)
{
  402784:	b510      	push	{r4, lr}
  402786:	b08e      	sub	sp, #56	; 0x38
	struct rxStruct * controlParams = (struct rxStruct *) pvParameters;
	QueueHandle_t theRXQ = controlParams->theRXQ;
  402788:	6844      	ldr	r4, [r0, #4]
	
	while (true)
	{
		//will first wait until the rx queue is sent into tx for processing
		//receive the rx message for echo, and place it into a buffer
		xQueueReceive(theRXQ, &bufferString, portMAX_DELAY);
  40278a:	f04f 32ff 	mov.w	r2, #4294967295
  40278e:	a901      	add	r1, sp, #4
  402790:	4620      	mov	r0, r4
  402792:	4b04      	ldr	r3, [pc, #16]	; (4027a4 <taskTX+0x20>)
  402794:	4798      	blx	r3
		UARTPutStr(EDBG_UART, bufferString, sizeof(bufferString));
  402796:	2232      	movs	r2, #50	; 0x32
  402798:	a901      	add	r1, sp, #4
  40279a:	4803      	ldr	r0, [pc, #12]	; (4027a8 <taskTX+0x24>)
  40279c:	4b03      	ldr	r3, [pc, #12]	; (4027ac <taskTX+0x28>)
  40279e:	4798      	blx	r3
  4027a0:	e7f3      	b.n	40278a <taskTX+0x6>
  4027a2:	bf00      	nop
  4027a4:	00401231 	.word	0x00401231
  4027a8:	400e0600 	.word	0x400e0600
  4027ac:	004028e1 	.word	0x004028e1

004027b0 <taskRX>:
	}
	
}

void taskRX(void *pvParameters)
{
  4027b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4027b2:	b08f      	sub	sp, #60	; 0x3c
		struct rxStruct * controlParams = (struct rxStruct *) pvParameters;
		QueueHandle_t myRXQ = controlParams->theRXQ;
  4027b4:	6845      	ldr	r5, [r0, #4]
		QueueHandle_t myTXQ = controlParams->theTXQ;
  4027b6:	6806      	ldr	r6, [r0, #0]
		//QueueHandle_t theLEDQ = controlParams->theLEDQ;
		
		char rxBuffer = 0;
  4027b8:	2400      	movs	r4, #0
  4027ba:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
  4027be:	e02a      	b.n	402816 <taskRX+0x66>
		{
			stringBuffer[n] = (char) rxBuffer;
			//if the char is 1, then toggle led1 and send echo to tx task
			if (stringBuffer[n] == '1')
			{
				toggleLED(LED1);
  4027c0:	2001      	movs	r0, #1
  4027c2:	4b24      	ldr	r3, [pc, #144]	; (402854 <taskRX+0xa4>)
  4027c4:	4798      	blx	r3
				xQueueSendToBack(myTXQ, &stringBuffer, 0);
  4027c6:	2300      	movs	r3, #0
  4027c8:	461a      	mov	r2, r3
  4027ca:	a901      	add	r1, sp, #4
  4027cc:	4630      	mov	r0, r6
  4027ce:	4f22      	ldr	r7, [pc, #136]	; (402858 <taskRX+0xa8>)
  4027d0:	47b8      	blx	r7
  4027d2:	e01f      	b.n	402814 <taskRX+0x64>
				
			}
			//else if the char is 2, then toggle led2 and send echo to tx task
			else if (stringBuffer[n] == '2')
			{
				toggleLED(LED1);
  4027d4:	2001      	movs	r0, #1
  4027d6:	4b1f      	ldr	r3, [pc, #124]	; (402854 <taskRX+0xa4>)
  4027d8:	4798      	blx	r3
				xQueueSendToBack(myTXQ, &stringBuffer, 0);
  4027da:	2300      	movs	r3, #0
  4027dc:	461a      	mov	r2, r3
  4027de:	a901      	add	r1, sp, #4
  4027e0:	4630      	mov	r0, r6
  4027e2:	4f1d      	ldr	r7, [pc, #116]	; (402858 <taskRX+0xa8>)
  4027e4:	47b8      	blx	r7
  4027e6:	e015      	b.n	402814 <taskRX+0x64>
				
			}
			//else if the char is 3, then toggle led3 and send echo to tx task
			else if (stringBuffer[n] == '3')
			{
				toggleLED(LED1);
  4027e8:	2001      	movs	r0, #1
  4027ea:	4b1a      	ldr	r3, [pc, #104]	; (402854 <taskRX+0xa4>)
  4027ec:	4798      	blx	r3
				xQueueSendToBack(myTXQ, &stringBuffer, 0);
  4027ee:	2300      	movs	r3, #0
  4027f0:	461a      	mov	r2, r3
  4027f2:	a901      	add	r1, sp, #4
  4027f4:	4630      	mov	r0, r6
  4027f6:	4f18      	ldr	r7, [pc, #96]	; (402858 <taskRX+0xa8>)
  4027f8:	47b8      	blx	r7
  4027fa:	e00b      	b.n	402814 <taskRX+0x64>
							
			}
			//else if the char is u, then display "Chad" and send echo of char to tx task
			else if (stringBuffer[n] == 'u')
			{
				xQueueSendToBack(myTXQ, &stringBuffer, 0);
  4027fc:	2300      	movs	r3, #0
  4027fe:	461a      	mov	r2, r3
  402800:	a901      	add	r1, sp, #4
  402802:	4630      	mov	r0, r6
  402804:	4f14      	ldr	r7, [pc, #80]	; (402858 <taskRX+0xa8>)
  402806:	47b8      	blx	r7
				UARTPutStr(EDBG_UART, myName, 0);
  402808:	2200      	movs	r2, #0
  40280a:	4b14      	ldr	r3, [pc, #80]	; (40285c <taskRX+0xac>)
  40280c:	6819      	ldr	r1, [r3, #0]
  40280e:	4814      	ldr	r0, [pc, #80]	; (402860 <taskRX+0xb0>)
  402810:	4b14      	ldr	r3, [pc, #80]	; (402864 <taskRX+0xb4>)
  402812:	4798      	blx	r3
			else
			{
				xQueueSendToBack(myTXQ, &stringBuffer, 0);
			}
			//step further into the string
			n++;
  402814:	3401      	adds	r4, #1
		xQueueReceive(myRXQ, &rxBuffer, portMAX_DELAY);
  402816:	f04f 32ff 	mov.w	r2, #4294967295
  40281a:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40281e:	4628      	mov	r0, r5
  402820:	4b11      	ldr	r3, [pc, #68]	; (402868 <taskRX+0xb8>)
  402822:	4798      	blx	r3
		stringBuffer[0] = rxBuffer;
  402824:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  402828:	f88d 3004 	strb.w	r3, [sp, #4]
			stringBuffer[n] = (char) rxBuffer;
  40282c:	aa0e      	add	r2, sp, #56	; 0x38
  40282e:	4422      	add	r2, r4
  402830:	f802 3c34 	strb.w	r3, [r2, #-52]
			if (stringBuffer[n] == '1')
  402834:	2b31      	cmp	r3, #49	; 0x31
  402836:	d0c3      	beq.n	4027c0 <taskRX+0x10>
			else if (stringBuffer[n] == '2')
  402838:	2b32      	cmp	r3, #50	; 0x32
  40283a:	d0cb      	beq.n	4027d4 <taskRX+0x24>
			else if (stringBuffer[n] == '3')
  40283c:	2b33      	cmp	r3, #51	; 0x33
  40283e:	d0d3      	beq.n	4027e8 <taskRX+0x38>
			else if (stringBuffer[n] == 'u')
  402840:	2b75      	cmp	r3, #117	; 0x75
  402842:	d0db      	beq.n	4027fc <taskRX+0x4c>
				xQueueSendToBack(myTXQ, &stringBuffer, 0);
  402844:	2300      	movs	r3, #0
  402846:	461a      	mov	r2, r3
  402848:	a901      	add	r1, sp, #4
  40284a:	4630      	mov	r0, r6
  40284c:	4f02      	ldr	r7, [pc, #8]	; (402858 <taskRX+0xa8>)
  40284e:	47b8      	blx	r7
  402850:	e7e0      	b.n	402814 <taskRX+0x64>
  402852:	bf00      	nop
  402854:	00402561 	.word	0x00402561
  402858:	00400f39 	.word	0x00400f39
  40285c:	2000000c 	.word	0x2000000c
  402860:	400e0600 	.word	0x400e0600
  402864:	004028e1 	.word	0x004028e1
  402868:	00401231 	.word	0x00401231

0040286c <initUART>:
*/
extern QueueHandle_t theRXQ;


uint8_t initUART(Uart * p_Uart)
{
  40286c:	b510      	push	{r4, lr}
  40286e:	4604      	mov	r4, r0
		base->PIO_PUDR = mask;
  402870:	4b15      	ldr	r3, [pc, #84]	; (4028c8 <initUART+0x5c>)
  402872:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  402876:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402878:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40287c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40287e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  402880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  402884:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402886:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40288a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40288c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40288e:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  402892:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402894:	605a      	str	r2, [r3, #4]
  402896:	2007      	movs	r0, #7
  402898:	4b0c      	ldr	r3, [pc, #48]	; (4028cc <initUART+0x60>)
  40289a:	4798      	blx	r3
	ioport_disable_port(IOPORT_PIOA, PIO_PA9A_URXD0 | PIO_PA10A_UTXD0);
	sysclk_enable_peripheral_clock(ID_UART0);

	// Configure UART Control Registers
	// Reset and Disable RX and TX
	p_Uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
  40289c:	23ac      	movs	r3, #172	; 0xac
  40289e:	6023      	str	r3, [r4, #0]
	}
	
	if(retVal != 1)
	{
		// Set The Actual BAUD to Control Register
		p_Uart->UART_BRGR = cd;
  4028a0:	2334      	movs	r3, #52	; 0x34
  4028a2:	6223      	str	r3, [r4, #32]

		// Configure Mode
		p_Uart->UART_MR = UART_SERIAL_PARITY;
  4028a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4028a8:	6063      	str	r3, [r4, #4]
		
		// Disable PDC Channel
		p_Uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4028aa:	f240 2302 	movw	r3, #514	; 0x202
  4028ae:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
		
		// Enable RX and TX
		p_Uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4028b2:	2250      	movs	r2, #80	; 0x50
  4028b4:	6022      	str	r2, [r4, #0]
	}
	
	// Enable RX Interrupt
	p_Uart->UART_IER = UART_IER_RXRDY;
  4028b6:	2301      	movs	r3, #1
  4028b8:	60a3      	str	r3, [r4, #8]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4028ba:	4b05      	ldr	r3, [pc, #20]	; (4028d0 <initUART+0x64>)
  4028bc:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4028c0:	2280      	movs	r2, #128	; 0x80
  4028c2:	601a      	str	r2, [r3, #0]
	NVIC_SetPriority(UART0_IRQn, 5);
	NVIC_EnableIRQ(UART0_IRQn);
	
	return retVal;
}
  4028c4:	2000      	movs	r0, #0
  4028c6:	bd10      	pop	{r4, pc}
  4028c8:	400e0e00 	.word	0x400e0e00
  4028cc:	00402b09 	.word	0x00402b09
  4028d0:	e000e100 	.word	0xe000e100

004028d4 <UARTPutC>:

void UARTPutC(Uart * p_Uart, char data)
{
	// Wait for Transmitter to be Ready
	while((p_Uart->UART_SR & UART_SR_TXRDY) == 0);
  4028d4:	6943      	ldr	r3, [r0, #20]
  4028d6:	f013 0f02 	tst.w	r3, #2
  4028da:	d0fb      	beq.n	4028d4 <UARTPutC>
	p_Uart->UART_THR = data;
  4028dc:	61c1      	str	r1, [r0, #28]
  4028de:	4770      	bx	lr

004028e0 <UARTPutStr>:

}

void UARTPutStr(Uart * p_Uart, const char * data, uint8_t len)
{
  4028e0:	b538      	push	{r3, r4, r5, lr}
  4028e2:	4605      	mov	r5, r0
  4028e4:	460c      	mov	r4, r1
	//call the vUARTPutC();
	while (*data != '\0')
  4028e6:	e003      	b.n	4028f0 <UARTPutStr+0x10>
	{
		UARTPutC(p_Uart, *data);
  4028e8:	4628      	mov	r0, r5
  4028ea:	4b03      	ldr	r3, [pc, #12]	; (4028f8 <UARTPutStr+0x18>)
  4028ec:	4798      	blx	r3
		data++;
  4028ee:	3401      	adds	r4, #1
	while (*data != '\0')
  4028f0:	7821      	ldrb	r1, [r4, #0]
  4028f2:	2900      	cmp	r1, #0
  4028f4:	d1f8      	bne.n	4028e8 <UARTPutStr+0x8>
	}
	
}
  4028f6:	bd38      	pop	{r3, r4, r5, pc}
  4028f8:	004028d5 	.word	0x004028d5

004028fc <UART0_Handler>:

void UART0_Handler()
{
  4028fc:	b510      	push	{r4, lr}
  4028fe:	b082      	sub	sp, #8
	char data = '\0';
  402900:	2300      	movs	r3, #0
  402902:	f88d 3007 	strb.w	r3, [sp, #7]
	uint32_t uiStatus = EDBG_UART->UART_SR;
  402906:	4b0f      	ldr	r3, [pc, #60]	; (402944 <UART0_Handler+0x48>)
  402908:	695b      	ldr	r3, [r3, #20]
	BaseType_t xHigherPriorityTaskWoken;


	if(uiStatus & UART_SR_RXRDY)
  40290a:	f013 0f01 	tst.w	r3, #1
  40290e:	d101      	bne.n	402914 <UART0_Handler+0x18>
		// Send Queue message to task
		xQueueSendToBackFromISR(theRXQ, &data, &xHigherPriorityTaskWoken);
		
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
	}
  402910:	b002      	add	sp, #8
  402912:	bd10      	pop	{r4, pc}
		data = (char) EDBG_UART->UART_RHR;
  402914:	4b0b      	ldr	r3, [pc, #44]	; (402944 <UART0_Handler+0x48>)
  402916:	699b      	ldr	r3, [r3, #24]
  402918:	f88d 3007 	strb.w	r3, [sp, #7]
		xQueueSendToBackFromISR(theRXQ, &data, &xHigherPriorityTaskWoken);
  40291c:	2300      	movs	r3, #0
  40291e:	466a      	mov	r2, sp
  402920:	f10d 0107 	add.w	r1, sp, #7
  402924:	4808      	ldr	r0, [pc, #32]	; (402948 <UART0_Handler+0x4c>)
  402926:	6800      	ldr	r0, [r0, #0]
  402928:	4c08      	ldr	r4, [pc, #32]	; (40294c <UART0_Handler+0x50>)
  40292a:	47a0      	blx	r4
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
  40292c:	9b00      	ldr	r3, [sp, #0]
  40292e:	2b00      	cmp	r3, #0
  402930:	d0ee      	beq.n	402910 <UART0_Handler+0x14>
  402932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402936:	4b06      	ldr	r3, [pc, #24]	; (402950 <UART0_Handler+0x54>)
  402938:	601a      	str	r2, [r3, #0]
  40293a:	f3bf 8f4f 	dsb	sy
  40293e:	f3bf 8f6f 	isb	sy
  402942:	e7e5      	b.n	402910 <UART0_Handler+0x14>
  402944:	400e0600 	.word	0x400e0600
  402948:	200006d0 	.word	0x200006d0
  40294c:	00401125 	.word	0x00401125
  402950:	e000ed04 	.word	0xe000ed04

00402954 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402954:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402956:	480e      	ldr	r0, [pc, #56]	; (402990 <sysclk_init+0x3c>)
  402958:	4b0e      	ldr	r3, [pc, #56]	; (402994 <sysclk_init+0x40>)
  40295a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40295c:	213e      	movs	r1, #62	; 0x3e
  40295e:	2000      	movs	r0, #0
  402960:	4b0d      	ldr	r3, [pc, #52]	; (402998 <sysclk_init+0x44>)
  402962:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402964:	4b0d      	ldr	r3, [pc, #52]	; (40299c <sysclk_init+0x48>)
  402966:	4798      	blx	r3
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402968:	2800      	cmp	r0, #0
  40296a:	d0fb      	beq.n	402964 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40296c:	4b0c      	ldr	r3, [pc, #48]	; (4029a0 <sysclk_init+0x4c>)
  40296e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402970:	4a0c      	ldr	r2, [pc, #48]	; (4029a4 <sysclk_init+0x50>)
  402972:	4b0d      	ldr	r3, [pc, #52]	; (4029a8 <sysclk_init+0x54>)
  402974:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  402976:	4b0d      	ldr	r3, [pc, #52]	; (4029ac <sysclk_init+0x58>)
  402978:	4798      	blx	r3
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40297a:	2800      	cmp	r0, #0
  40297c:	d0fb      	beq.n	402976 <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40297e:	2010      	movs	r0, #16
  402980:	4b0b      	ldr	r3, [pc, #44]	; (4029b0 <sysclk_init+0x5c>)
  402982:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402984:	4b0b      	ldr	r3, [pc, #44]	; (4029b4 <sysclk_init+0x60>)
  402986:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402988:	480b      	ldr	r0, [pc, #44]	; (4029b8 <sysclk_init+0x64>)
  40298a:	4b02      	ldr	r3, [pc, #8]	; (402994 <sysclk_init+0x40>)
  40298c:	4798      	blx	r3
  40298e:	bd08      	pop	{r3, pc}
  402990:	07270e00 	.word	0x07270e00
  402994:	00402d1d 	.word	0x00402d1d
  402998:	00402a85 	.word	0x00402a85
  40299c:	00402ad9 	.word	0x00402ad9
  4029a0:	00402ae9 	.word	0x00402ae9
  4029a4:	200f3f01 	.word	0x200f3f01
  4029a8:	400e0400 	.word	0x400e0400
  4029ac:	00402af9 	.word	0x00402af9
  4029b0:	00402a31 	.word	0x00402a31
  4029b4:	00402c0d 	.word	0x00402c0d
  4029b8:	05b8d800 	.word	0x05b8d800

004029bc <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  4029bc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4029be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4029c2:	4b18      	ldr	r3, [pc, #96]	; (402a24 <board_init+0x68>)
  4029c4:	605a      	str	r2, [r3, #4]
  4029c6:	2009      	movs	r0, #9
  4029c8:	4c17      	ldr	r4, [pc, #92]	; (402a28 <board_init+0x6c>)
  4029ca:	47a0      	blx	r4
  4029cc:	200a      	movs	r0, #10
  4029ce:	47a0      	blx	r4
  4029d0:	200b      	movs	r0, #11
  4029d2:	47a0      	blx	r4
  4029d4:	200c      	movs	r0, #12
  4029d6:	47a0      	blx	r4
  4029d8:	200d      	movs	r0, #13
  4029da:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4029dc:	4b13      	ldr	r3, [pc, #76]	; (402a2c <board_init+0x70>)
  4029de:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4029e2:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4029e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4029e8:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4029ea:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4029ee:	2204      	movs	r2, #4
  4029f0:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4029f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4029f6:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4029f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4029fc:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4029fe:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  402a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  402a04:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402a06:	f021 0104 	bic.w	r1, r1, #4
  402a0a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402a0c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402a0e:	f021 0104 	bic.w	r1, r1, #4
  402a12:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  402a14:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402a18:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  402a1c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  402a20:	bd10      	pop	{r4, pc}
  402a22:	bf00      	nop
  402a24:	400e1850 	.word	0x400e1850
  402a28:	00402b09 	.word	0x00402b09
  402a2c:	400e1400 	.word	0x400e1400

00402a30 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402a30:	4a13      	ldr	r2, [pc, #76]	; (402a80 <pmc_switch_mck_to_pllack+0x50>)
  402a32:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402a38:	4318      	orrs	r0, r3
  402a3a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402a3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402a40:	4a0f      	ldr	r2, [pc, #60]	; (402a80 <pmc_switch_mck_to_pllack+0x50>)
  402a42:	6e92      	ldr	r2, [r2, #104]	; 0x68
  402a44:	f012 0f08 	tst.w	r2, #8
  402a48:	d102      	bne.n	402a50 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402a4a:	b1a3      	cbz	r3, 402a76 <pmc_switch_mck_to_pllack+0x46>
			--ul_timeout) {
  402a4c:	3b01      	subs	r3, #1
  402a4e:	e7f7      	b.n	402a40 <pmc_switch_mck_to_pllack+0x10>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402a50:	4a0b      	ldr	r2, [pc, #44]	; (402a80 <pmc_switch_mck_to_pllack+0x50>)
  402a52:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402a54:	f023 0303 	bic.w	r3, r3, #3
  402a58:	f043 0302 	orr.w	r3, r3, #2
  402a5c:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402a5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402a62:	4a07      	ldr	r2, [pc, #28]	; (402a80 <pmc_switch_mck_to_pllack+0x50>)
  402a64:	6e92      	ldr	r2, [r2, #104]	; 0x68
  402a66:	f012 0f08 	tst.w	r2, #8
  402a6a:	d102      	bne.n	402a72 <pmc_switch_mck_to_pllack+0x42>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402a6c:	b12b      	cbz	r3, 402a7a <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
  402a6e:	3b01      	subs	r3, #1
  402a70:	e7f7      	b.n	402a62 <pmc_switch_mck_to_pllack+0x32>
			return 1;
		}
	}

	return 0;
  402a72:	2000      	movs	r0, #0
  402a74:	4770      	bx	lr
			return 1;
  402a76:	2001      	movs	r0, #1
  402a78:	4770      	bx	lr
			return 1;
  402a7a:	2001      	movs	r0, #1
}
  402a7c:	4770      	bx	lr
  402a7e:	bf00      	nop
  402a80:	400e0400 	.word	0x400e0400

00402a84 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402a84:	b9d0      	cbnz	r0, 402abc <pmc_switch_mainck_to_xtal+0x38>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402a86:	4a11      	ldr	r2, [pc, #68]	; (402acc <pmc_switch_mainck_to_xtal+0x48>)
  402a88:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402a8a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402a8e:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402a92:	0209      	lsls	r1, r1, #8
  402a94:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402a96:	430b      	orrs	r3, r1
  402a98:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402a9c:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402aa0:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402aa2:	4b0a      	ldr	r3, [pc, #40]	; (402acc <pmc_switch_mainck_to_xtal+0x48>)
  402aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402aa6:	f013 0f01 	tst.w	r3, #1
  402aaa:	d0fa      	beq.n	402aa2 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402aac:	4a07      	ldr	r2, [pc, #28]	; (402acc <pmc_switch_mainck_to_xtal+0x48>)
  402aae:	6a13      	ldr	r3, [r2, #32]
  402ab0:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402ab8:	6213      	str	r3, [r2, #32]
  402aba:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402abc:	4903      	ldr	r1, [pc, #12]	; (402acc <pmc_switch_mainck_to_xtal+0x48>)
  402abe:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402ac0:	4a03      	ldr	r2, [pc, #12]	; (402ad0 <pmc_switch_mainck_to_xtal+0x4c>)
  402ac2:	401a      	ands	r2, r3
  402ac4:	4b03      	ldr	r3, [pc, #12]	; (402ad4 <pmc_switch_mainck_to_xtal+0x50>)
  402ac6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402ac8:	620b      	str	r3, [r1, #32]
  402aca:	4770      	bx	lr
  402acc:	400e0400 	.word	0x400e0400
  402ad0:	fec8fffc 	.word	0xfec8fffc
  402ad4:	01370002 	.word	0x01370002

00402ad8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402ad8:	4b02      	ldr	r3, [pc, #8]	; (402ae4 <pmc_osc_is_ready_mainck+0xc>)
  402ada:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402adc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402ae0:	4770      	bx	lr
  402ae2:	bf00      	nop
  402ae4:	400e0400 	.word	0x400e0400

00402ae8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402ae8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402aec:	4b01      	ldr	r3, [pc, #4]	; (402af4 <pmc_disable_pllack+0xc>)
  402aee:	629a      	str	r2, [r3, #40]	; 0x28
  402af0:	4770      	bx	lr
  402af2:	bf00      	nop
  402af4:	400e0400 	.word	0x400e0400

00402af8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402af8:	4b02      	ldr	r3, [pc, #8]	; (402b04 <pmc_is_locked_pllack+0xc>)
  402afa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402afc:	f000 0002 	and.w	r0, r0, #2
  402b00:	4770      	bx	lr
  402b02:	bf00      	nop
  402b04:	400e0400 	.word	0x400e0400

00402b08 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  402b08:	282f      	cmp	r0, #47	; 0x2f
  402b0a:	d81e      	bhi.n	402b4a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402b0c:	281f      	cmp	r0, #31
  402b0e:	d80c      	bhi.n	402b2a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402b10:	4b11      	ldr	r3, [pc, #68]	; (402b58 <pmc_enable_periph_clk+0x50>)
  402b12:	699a      	ldr	r2, [r3, #24]
  402b14:	2301      	movs	r3, #1
  402b16:	4083      	lsls	r3, r0
  402b18:	4393      	bics	r3, r2
  402b1a:	d018      	beq.n	402b4e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402b1c:	2301      	movs	r3, #1
  402b1e:	fa03 f000 	lsl.w	r0, r3, r0
  402b22:	4b0d      	ldr	r3, [pc, #52]	; (402b58 <pmc_enable_periph_clk+0x50>)
  402b24:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402b26:	2000      	movs	r0, #0
  402b28:	4770      	bx	lr
		ul_id -= 32;
  402b2a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402b2c:	4b0a      	ldr	r3, [pc, #40]	; (402b58 <pmc_enable_periph_clk+0x50>)
  402b2e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402b32:	2301      	movs	r3, #1
  402b34:	4083      	lsls	r3, r0
  402b36:	4393      	bics	r3, r2
  402b38:	d00b      	beq.n	402b52 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402b3a:	2301      	movs	r3, #1
  402b3c:	fa03 f000 	lsl.w	r0, r3, r0
  402b40:	4b05      	ldr	r3, [pc, #20]	; (402b58 <pmc_enable_periph_clk+0x50>)
  402b42:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  402b46:	2000      	movs	r0, #0
  402b48:	4770      	bx	lr
		return 1;
  402b4a:	2001      	movs	r0, #1
  402b4c:	4770      	bx	lr
	return 0;
  402b4e:	2000      	movs	r0, #0
  402b50:	4770      	bx	lr
  402b52:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  402b54:	4770      	bx	lr
  402b56:	bf00      	nop
  402b58:	400e0400 	.word	0x400e0400

00402b5c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402b5c:	e7fe      	b.n	402b5c <Dummy_Handler>
	...

00402b60 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402b60:	b500      	push	{lr}
  402b62:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  402b64:	4b1e      	ldr	r3, [pc, #120]	; (402be0 <Reset_Handler+0x80>)
  402b66:	4a1f      	ldr	r2, [pc, #124]	; (402be4 <Reset_Handler+0x84>)
  402b68:	429a      	cmp	r2, r3
  402b6a:	d009      	beq.n	402b80 <Reset_Handler+0x20>
  402b6c:	4b1c      	ldr	r3, [pc, #112]	; (402be0 <Reset_Handler+0x80>)
  402b6e:	4a1d      	ldr	r2, [pc, #116]	; (402be4 <Reset_Handler+0x84>)
  402b70:	e003      	b.n	402b7a <Reset_Handler+0x1a>
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  402b72:	6811      	ldr	r1, [r2, #0]
  402b74:	6019      	str	r1, [r3, #0]
  402b76:	3304      	adds	r3, #4
  402b78:	3204      	adds	r2, #4
		for (; pDest < &_erelocate;) {
  402b7a:	491b      	ldr	r1, [pc, #108]	; (402be8 <Reset_Handler+0x88>)
  402b7c:	428b      	cmp	r3, r1
  402b7e:	d3f8      	bcc.n	402b72 <Reset_Handler+0x12>
			*pDest++ = *pSrc++;
  402b80:	4b1a      	ldr	r3, [pc, #104]	; (402bec <Reset_Handler+0x8c>)
  402b82:	e002      	b.n	402b8a <Reset_Handler+0x2a>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
  402b84:	2200      	movs	r2, #0
  402b86:	601a      	str	r2, [r3, #0]
  402b88:	3304      	adds	r3, #4
	for (pDest = &_szero; pDest < &_ezero;) {
  402b8a:	4a19      	ldr	r2, [pc, #100]	; (402bf0 <Reset_Handler+0x90>)
  402b8c:	4293      	cmp	r3, r2
  402b8e:	d3f9      	bcc.n	402b84 <Reset_Handler+0x24>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402b90:	4a18      	ldr	r2, [pc, #96]	; (402bf4 <Reset_Handler+0x94>)
  402b92:	4b19      	ldr	r3, [pc, #100]	; (402bf8 <Reset_Handler+0x98>)
  402b94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402b98:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  402b9a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402b9e:	fab3 f383 	clz	r3, r3
  402ba2:	095b      	lsrs	r3, r3, #5
  402ba4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402ba6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  402ba8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402bac:	2200      	movs	r2, #0
  402bae:	4b13      	ldr	r3, [pc, #76]	; (402bfc <Reset_Handler+0x9c>)
  402bb0:	701a      	strb	r2, [r3, #0]
	return flags;
  402bb2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402bb4:	4a12      	ldr	r2, [pc, #72]	; (402c00 <Reset_Handler+0xa0>)
  402bb6:	6813      	ldr	r3, [r2, #0]
  402bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402bbc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  402bbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402bc2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402bc6:	b129      	cbz	r1, 402bd4 <Reset_Handler+0x74>
		cpu_irq_enable();
  402bc8:	2201      	movs	r2, #1
  402bca:	4b0c      	ldr	r3, [pc, #48]	; (402bfc <Reset_Handler+0x9c>)
  402bcc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  402bce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402bd2:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  402bd4:	4b0b      	ldr	r3, [pc, #44]	; (402c04 <Reset_Handler+0xa4>)
  402bd6:	4798      	blx	r3

	/* Branch to main function */
	main();
  402bd8:	4b0b      	ldr	r3, [pc, #44]	; (402c08 <Reset_Handler+0xa8>)
  402bda:	4798      	blx	r3
  402bdc:	e7fe      	b.n	402bdc <Reset_Handler+0x7c>
  402bde:	bf00      	nop
  402be0:	20000000 	.word	0x20000000
  402be4:	004035a4 	.word	0x004035a4
  402be8:	2000043c 	.word	0x2000043c
  402bec:	2000043c 	.word	0x2000043c
  402bf0:	20000708 	.word	0x20000708
  402bf4:	e000ed00 	.word	0xe000ed00
  402bf8:	00400000 	.word	0x00400000
  402bfc:	20000004 	.word	0x20000004
  402c00:	e000ed88 	.word	0xe000ed88
  402c04:	00402f75 	.word	0x00402f75
  402c08:	00402e15 	.word	0x00402e15

00402c0c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  402c0c:	4b3c      	ldr	r3, [pc, #240]	; (402d00 <SystemCoreClockUpdate+0xf4>)
  402c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c10:	f003 0303 	and.w	r3, r3, #3
  402c14:	2b01      	cmp	r3, #1
  402c16:	d020      	beq.n	402c5a <SystemCoreClockUpdate+0x4e>
  402c18:	b183      	cbz	r3, 402c3c <SystemCoreClockUpdate+0x30>
  402c1a:	2b02      	cmp	r3, #2
  402c1c:	d039      	beq.n	402c92 <SystemCoreClockUpdate+0x86>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  402c1e:	4b38      	ldr	r3, [pc, #224]	; (402d00 <SystemCoreClockUpdate+0xf4>)
  402c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c22:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402c26:	2b70      	cmp	r3, #112	; 0x70
  402c28:	d062      	beq.n	402cf0 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  402c2a:	4b35      	ldr	r3, [pc, #212]	; (402d00 <SystemCoreClockUpdate+0xf4>)
  402c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402c2e:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402c32:	4934      	ldr	r1, [pc, #208]	; (402d04 <SystemCoreClockUpdate+0xf8>)
  402c34:	680b      	ldr	r3, [r1, #0]
  402c36:	40d3      	lsrs	r3, r2
  402c38:	600b      	str	r3, [r1, #0]
  402c3a:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402c3c:	4b32      	ldr	r3, [pc, #200]	; (402d08 <SystemCoreClockUpdate+0xfc>)
  402c3e:	695b      	ldr	r3, [r3, #20]
  402c40:	f013 0f80 	tst.w	r3, #128	; 0x80
  402c44:	d004      	beq.n	402c50 <SystemCoreClockUpdate+0x44>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402c46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402c4a:	4b2e      	ldr	r3, [pc, #184]	; (402d04 <SystemCoreClockUpdate+0xf8>)
  402c4c:	601a      	str	r2, [r3, #0]
  402c4e:	e7e6      	b.n	402c1e <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402c50:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402c54:	4b2b      	ldr	r3, [pc, #172]	; (402d04 <SystemCoreClockUpdate+0xf8>)
  402c56:	601a      	str	r2, [r3, #0]
  402c58:	e7e1      	b.n	402c1e <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402c5a:	4b29      	ldr	r3, [pc, #164]	; (402d00 <SystemCoreClockUpdate+0xf4>)
  402c5c:	6a1b      	ldr	r3, [r3, #32]
  402c5e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402c62:	d003      	beq.n	402c6c <SystemCoreClockUpdate+0x60>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402c64:	4a29      	ldr	r2, [pc, #164]	; (402d0c <SystemCoreClockUpdate+0x100>)
  402c66:	4b27      	ldr	r3, [pc, #156]	; (402d04 <SystemCoreClockUpdate+0xf8>)
  402c68:	601a      	str	r2, [r3, #0]
  402c6a:	e7d8      	b.n	402c1e <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402c6c:	4a28      	ldr	r2, [pc, #160]	; (402d10 <SystemCoreClockUpdate+0x104>)
  402c6e:	4b25      	ldr	r3, [pc, #148]	; (402d04 <SystemCoreClockUpdate+0xf8>)
  402c70:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402c72:	4b23      	ldr	r3, [pc, #140]	; (402d00 <SystemCoreClockUpdate+0xf4>)
  402c74:	6a1b      	ldr	r3, [r3, #32]
  402c76:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402c7a:	2b10      	cmp	r3, #16
  402c7c:	d005      	beq.n	402c8a <SystemCoreClockUpdate+0x7e>
  402c7e:	2b20      	cmp	r3, #32
  402c80:	d1cd      	bne.n	402c1e <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  402c82:	4a22      	ldr	r2, [pc, #136]	; (402d0c <SystemCoreClockUpdate+0x100>)
  402c84:	4b1f      	ldr	r3, [pc, #124]	; (402d04 <SystemCoreClockUpdate+0xf8>)
  402c86:	601a      	str	r2, [r3, #0]
				break;
  402c88:	e7c9      	b.n	402c1e <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  402c8a:	4a22      	ldr	r2, [pc, #136]	; (402d14 <SystemCoreClockUpdate+0x108>)
  402c8c:	4b1d      	ldr	r3, [pc, #116]	; (402d04 <SystemCoreClockUpdate+0xf8>)
  402c8e:	601a      	str	r2, [r3, #0]
				break;
  402c90:	e7c5      	b.n	402c1e <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402c92:	4b1b      	ldr	r3, [pc, #108]	; (402d00 <SystemCoreClockUpdate+0xf4>)
  402c94:	6a1b      	ldr	r3, [r3, #32]
  402c96:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402c9a:	d016      	beq.n	402cca <SystemCoreClockUpdate+0xbe>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402c9c:	4a1b      	ldr	r2, [pc, #108]	; (402d0c <SystemCoreClockUpdate+0x100>)
  402c9e:	4b19      	ldr	r3, [pc, #100]	; (402d04 <SystemCoreClockUpdate+0xf8>)
  402ca0:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  402ca2:	4b17      	ldr	r3, [pc, #92]	; (402d00 <SystemCoreClockUpdate+0xf4>)
  402ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ca6:	f003 0303 	and.w	r3, r3, #3
  402caa:	2b02      	cmp	r3, #2
  402cac:	d1b7      	bne.n	402c1e <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402cae:	4814      	ldr	r0, [pc, #80]	; (402d00 <SystemCoreClockUpdate+0xf4>)
  402cb0:	6a82      	ldr	r2, [r0, #40]	; 0x28
  402cb2:	f3c2 420a 	ubfx	r2, r2, #16, #11
  402cb6:	4913      	ldr	r1, [pc, #76]	; (402d04 <SystemCoreClockUpdate+0xf8>)
  402cb8:	680b      	ldr	r3, [r1, #0]
  402cba:	fb02 3303 	mla	r3, r2, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402cbe:	6a82      	ldr	r2, [r0, #40]	; 0x28
  402cc0:	b2d2      	uxtb	r2, r2
  402cc2:	fbb3 f3f2 	udiv	r3, r3, r2
  402cc6:	600b      	str	r3, [r1, #0]
  402cc8:	e7a9      	b.n	402c1e <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402cca:	4a11      	ldr	r2, [pc, #68]	; (402d10 <SystemCoreClockUpdate+0x104>)
  402ccc:	4b0d      	ldr	r3, [pc, #52]	; (402d04 <SystemCoreClockUpdate+0xf8>)
  402cce:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402cd0:	4b0b      	ldr	r3, [pc, #44]	; (402d00 <SystemCoreClockUpdate+0xf4>)
  402cd2:	6a1b      	ldr	r3, [r3, #32]
  402cd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402cd8:	2b10      	cmp	r3, #16
  402cda:	d005      	beq.n	402ce8 <SystemCoreClockUpdate+0xdc>
  402cdc:	2b20      	cmp	r3, #32
  402cde:	d1e0      	bne.n	402ca2 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
  402ce0:	4a0a      	ldr	r2, [pc, #40]	; (402d0c <SystemCoreClockUpdate+0x100>)
  402ce2:	4b08      	ldr	r3, [pc, #32]	; (402d04 <SystemCoreClockUpdate+0xf8>)
  402ce4:	601a      	str	r2, [r3, #0]
				break;
  402ce6:	e7dc      	b.n	402ca2 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
  402ce8:	4a0a      	ldr	r2, [pc, #40]	; (402d14 <SystemCoreClockUpdate+0x108>)
  402cea:	4b06      	ldr	r3, [pc, #24]	; (402d04 <SystemCoreClockUpdate+0xf8>)
  402cec:	601a      	str	r2, [r3, #0]
				break;
  402cee:	e7d8      	b.n	402ca2 <SystemCoreClockUpdate+0x96>
		SystemCoreClock /= 3U;
  402cf0:	4a04      	ldr	r2, [pc, #16]	; (402d04 <SystemCoreClockUpdate+0xf8>)
  402cf2:	6813      	ldr	r3, [r2, #0]
  402cf4:	4908      	ldr	r1, [pc, #32]	; (402d18 <SystemCoreClockUpdate+0x10c>)
  402cf6:	fba1 1303 	umull	r1, r3, r1, r3
  402cfa:	085b      	lsrs	r3, r3, #1
  402cfc:	6013      	str	r3, [r2, #0]
  402cfe:	4770      	bx	lr
  402d00:	400e0400 	.word	0x400e0400
  402d04:	20000008 	.word	0x20000008
  402d08:	400e1810 	.word	0x400e1810
  402d0c:	00b71b00 	.word	0x00b71b00
  402d10:	003d0900 	.word	0x003d0900
  402d14:	007a1200 	.word	0x007a1200
  402d18:	aaaaaaab 	.word	0xaaaaaaab

00402d1c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402d1c:	4b14      	ldr	r3, [pc, #80]	; (402d70 <system_init_flash+0x54>)
  402d1e:	4298      	cmp	r0, r3
  402d20:	d90f      	bls.n	402d42 <system_init_flash+0x26>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  402d22:	4b14      	ldr	r3, [pc, #80]	; (402d74 <system_init_flash+0x58>)
  402d24:	4298      	cmp	r0, r3
  402d26:	d911      	bls.n	402d4c <system_init_flash+0x30>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  402d28:	4b13      	ldr	r3, [pc, #76]	; (402d78 <system_init_flash+0x5c>)
  402d2a:	4298      	cmp	r0, r3
  402d2c:	d912      	bls.n	402d54 <system_init_flash+0x38>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402d2e:	4b13      	ldr	r3, [pc, #76]	; (402d7c <system_init_flash+0x60>)
  402d30:	4298      	cmp	r0, r3
  402d32:	d913      	bls.n	402d5c <system_init_flash+0x40>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402d34:	4b12      	ldr	r3, [pc, #72]	; (402d80 <system_init_flash+0x64>)
  402d36:	4298      	cmp	r0, r3
  402d38:	d914      	bls.n	402d64 <system_init_flash+0x48>
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402d3a:	4a12      	ldr	r2, [pc, #72]	; (402d84 <system_init_flash+0x68>)
  402d3c:	4b12      	ldr	r3, [pc, #72]	; (402d88 <system_init_flash+0x6c>)
  402d3e:	601a      	str	r2, [r3, #0]
  402d40:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402d42:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402d46:	4b10      	ldr	r3, [pc, #64]	; (402d88 <system_init_flash+0x6c>)
  402d48:	601a      	str	r2, [r3, #0]
  402d4a:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402d4c:	4a0f      	ldr	r2, [pc, #60]	; (402d8c <system_init_flash+0x70>)
  402d4e:	4b0e      	ldr	r3, [pc, #56]	; (402d88 <system_init_flash+0x6c>)
  402d50:	601a      	str	r2, [r3, #0]
  402d52:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402d54:	4a0e      	ldr	r2, [pc, #56]	; (402d90 <system_init_flash+0x74>)
  402d56:	4b0c      	ldr	r3, [pc, #48]	; (402d88 <system_init_flash+0x6c>)
  402d58:	601a      	str	r2, [r3, #0]
  402d5a:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402d5c:	4a0d      	ldr	r2, [pc, #52]	; (402d94 <system_init_flash+0x78>)
  402d5e:	4b0a      	ldr	r3, [pc, #40]	; (402d88 <system_init_flash+0x6c>)
  402d60:	601a      	str	r2, [r3, #0]
  402d62:	4770      	bx	lr
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402d64:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402d68:	4b07      	ldr	r3, [pc, #28]	; (402d88 <system_init_flash+0x6c>)
  402d6a:	601a      	str	r2, [r3, #0]
  402d6c:	4770      	bx	lr
  402d6e:	bf00      	nop
  402d70:	01312cff 	.word	0x01312cff
  402d74:	026259ff 	.word	0x026259ff
  402d78:	039386ff 	.word	0x039386ff
  402d7c:	04c4b3ff 	.word	0x04c4b3ff
  402d80:	05f5e0ff 	.word	0x05f5e0ff
  402d84:	04000500 	.word	0x04000500
  402d88:	400e0a00 	.word	0x400e0a00
  402d8c:	04000100 	.word	0x04000100
  402d90:	04000200 	.word	0x04000200
  402d94:	04000300 	.word	0x04000300

00402d98 <prvInitialiseHeap>:
	while(true) {}
}


static void prvInitialiseHeap( )
{
  402d98:	b500      	push	{lr}
  402d9a:	b089      	sub	sp, #36	; 0x24
       uint32_t ulHeapSize;
       uint8_t *pucHeapStart, *pucHeapEnd;

       pucHeapStart = ( uint8_t * ) ( ( ( ( uint32_t ) &mainHEAP_START ) + 7 ) & ~0x07ul );
  402d9c:	4b10      	ldr	r3, [pc, #64]	; (402de0 <prvInitialiseHeap+0x48>)
  402d9e:	1dda      	adds	r2, r3, #7
  402da0:	f022 0207 	bic.w	r2, r2, #7
       pucHeapEnd = ( uint8_t * ) ( mainRAM_START + mainRAM_LENGTH );
       ulHeapSize = ( uint32_t ) ( ( uint32_t ) pucHeapEnd - ( uint32_t ) &mainHEAP_START );
  402da4:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
  402da8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
       ulHeapSize &= ~0x07ul;
  402dac:	f023 0307 	bic.w	r3, r3, #7
       ulHeapSize -= 1024;
  402db0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
       HeapRegion_t xHeapRegions[] = {
  402db4:	9200      	str	r2, [sp, #0]
  402db6:	9301      	str	r3, [sp, #4]
  402db8:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  402dbc:	9302      	str	r3, [sp, #8]
  402dbe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  402dc2:	9303      	str	r3, [sp, #12]
  402dc4:	f04f 42c6 	mov.w	r2, #1660944384	; 0x63000000
  402dc8:	9204      	str	r2, [sp, #16]
  402dca:	9305      	str	r3, [sp, #20]
  402dcc:	2300      	movs	r3, #0
  402dce:	9306      	str	r3, [sp, #24]
  402dd0:	9307      	str	r3, [sp, #28]
              { ( unsigned char *) SRAM_BASE_ADDRESS, mainEXTERNAL_SRAM_SIZE },
              { ( unsigned char *) SRAM_BASE_ADDRESS_2ND, mainEXTERNAL_SRAM_SIZE },
              { NULL, 0 }
       };

       vPortDefineHeapRegions( xHeapRegions );
  402dd2:	4668      	mov	r0, sp
  402dd4:	4b03      	ldr	r3, [pc, #12]	; (402de4 <prvInitialiseHeap+0x4c>)
  402dd6:	4798      	blx	r3
}
  402dd8:	b009      	add	sp, #36	; 0x24
  402dda:	f85d fb04 	ldr.w	pc, [sp], #4
  402dde:	bf00      	nop
  402de0:	20003708 	.word	0x20003708
  402de4:	00400b49 	.word	0x00400b49

00402de8 <prvMiscInitialisation>:
static void prvMiscInitialisation( void )
{
  402de8:	b510      	push	{r4, lr}
       /* Initialize the SAM system */
       sysclk_init();
  402dea:	4b06      	ldr	r3, [pc, #24]	; (402e04 <prvMiscInitialisation+0x1c>)
  402dec:	4798      	blx	r3
       board_init();
  402dee:	4b06      	ldr	r3, [pc, #24]	; (402e08 <prvMiscInitialisation+0x20>)
  402df0:	4798      	blx	r3
       prvInitialiseHeap();
  402df2:	4b06      	ldr	r3, [pc, #24]	; (402e0c <prvMiscInitialisation+0x24>)
  402df4:	4798      	blx	r3
       pmc_enable_periph_clk(ID_PIOA);
  402df6:	2009      	movs	r0, #9
  402df8:	4c05      	ldr	r4, [pc, #20]	; (402e10 <prvMiscInitialisation+0x28>)
  402dfa:	47a0      	blx	r4
       pmc_enable_periph_clk(ID_PIOB);
  402dfc:	200a      	movs	r0, #10
  402dfe:	47a0      	blx	r4
  402e00:	bd10      	pop	{r4, pc}
  402e02:	bf00      	nop
  402e04:	00402955 	.word	0x00402955
  402e08:	004029bd 	.word	0x004029bd
  402e0c:	00402d99 	.word	0x00402d99
  402e10:	00402b09 	.word	0x00402b09

00402e14 <main>:
{
  402e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402e18:	b082      	sub	sp, #8
	prvMiscInitialisation();
  402e1a:	4b28      	ldr	r3, [pc, #160]	; (402ebc <main+0xa8>)
  402e1c:	4798      	blx	r3
	intitializeLEDDriver();
  402e1e:	4b28      	ldr	r3, [pc, #160]	; (402ec0 <main+0xac>)
  402e20:	4798      	blx	r3
	initializeButtonDriver();
  402e22:	4b28      	ldr	r3, [pc, #160]	; (402ec4 <main+0xb0>)
  402e24:	4798      	blx	r3
	initUART(EDBG_UART);
  402e26:	4c28      	ldr	r4, [pc, #160]	; (402ec8 <main+0xb4>)
  402e28:	4620      	mov	r0, r4
  402e2a:	4b28      	ldr	r3, [pc, #160]	; (402ecc <main+0xb8>)
  402e2c:	4798      	blx	r3
	UARTPutStr(EDBG_UART, startText, 0);
  402e2e:	2200      	movs	r2, #0
  402e30:	4927      	ldr	r1, [pc, #156]	; (402ed0 <main+0xbc>)
  402e32:	4620      	mov	r0, r4
  402e34:	4b27      	ldr	r3, [pc, #156]	; (402ed4 <main+0xc0>)
  402e36:	4798      	blx	r3
	theTXQ = xQueueCreate(20, sizeof(char[50]));
  402e38:	2200      	movs	r2, #0
  402e3a:	2132      	movs	r1, #50	; 0x32
  402e3c:	2014      	movs	r0, #20
  402e3e:	4c26      	ldr	r4, [pc, #152]	; (402ed8 <main+0xc4>)
  402e40:	47a0      	blx	r4
  402e42:	4e26      	ldr	r6, [pc, #152]	; (402edc <main+0xc8>)
  402e44:	6030      	str	r0, [r6, #0]
	theRXQ = xQueueCreate(20, sizeof(char));
  402e46:	2200      	movs	r2, #0
  402e48:	2101      	movs	r1, #1
  402e4a:	2014      	movs	r0, #20
  402e4c:	47a0      	blx	r4
  402e4e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 402f1c <main+0x108>
  402e52:	f8c8 0000 	str.w	r0, [r8]
	theLEDQ = xQueueCreate(5, sizeof(int));
  402e56:	2200      	movs	r2, #0
  402e58:	2104      	movs	r1, #4
  402e5a:	2005      	movs	r0, #5
  402e5c:	47a0      	blx	r4
  402e5e:	4f20      	ldr	r7, [pc, #128]	; (402ee0 <main+0xcc>)
  402e60:	6038      	str	r0, [r7, #0]
	rxParams.theRXQ = theRXQ;
  402e62:	4d20      	ldr	r5, [pc, #128]	; (402ee4 <main+0xd0>)
  402e64:	f8d8 3000 	ldr.w	r3, [r8]
  402e68:	606b      	str	r3, [r5, #4]
	rxParams.theTXQ = theTXQ;
  402e6a:	6833      	ldr	r3, [r6, #0]
  402e6c:	602b      	str	r3, [r5, #0]
	xTaskCreate(taskHeartBeat, "LED0 Heart Beat", configMINIMAL_STACK_SIZE, (void *) 0, heartbeatPriority, NULL);
  402e6e:	2300      	movs	r3, #0
  402e70:	9301      	str	r3, [sp, #4]
  402e72:	2201      	movs	r2, #1
  402e74:	9200      	str	r2, [sp, #0]
  402e76:	2282      	movs	r2, #130	; 0x82
  402e78:	491b      	ldr	r1, [pc, #108]	; (402ee8 <main+0xd4>)
  402e7a:	481c      	ldr	r0, [pc, #112]	; (402eec <main+0xd8>)
  402e7c:	4c1c      	ldr	r4, [pc, #112]	; (402ef0 <main+0xdc>)
  402e7e:	47a0      	blx	r4
	xTaskCreate(taskTX, "The TX Task", configMINIMAL_STACK_SIZE, (void *) theTXQ, txTaskPriority, &txHandle);
  402e80:	6833      	ldr	r3, [r6, #0]
  402e82:	4a1c      	ldr	r2, [pc, #112]	; (402ef4 <main+0xe0>)
  402e84:	9201      	str	r2, [sp, #4]
  402e86:	2203      	movs	r2, #3
  402e88:	9200      	str	r2, [sp, #0]
  402e8a:	2282      	movs	r2, #130	; 0x82
  402e8c:	491a      	ldr	r1, [pc, #104]	; (402ef8 <main+0xe4>)
  402e8e:	481b      	ldr	r0, [pc, #108]	; (402efc <main+0xe8>)
  402e90:	47a0      	blx	r4
	xTaskCreate(taskRX, "The RX Task", configMINIMAL_STACK_SIZE, (void *) &rxParams, rxTaskPriority, &rxHandle);
  402e92:	4b1b      	ldr	r3, [pc, #108]	; (402f00 <main+0xec>)
  402e94:	9301      	str	r3, [sp, #4]
  402e96:	2304      	movs	r3, #4
  402e98:	9300      	str	r3, [sp, #0]
  402e9a:	462b      	mov	r3, r5
  402e9c:	2282      	movs	r2, #130	; 0x82
  402e9e:	4919      	ldr	r1, [pc, #100]	; (402f04 <main+0xf0>)
  402ea0:	4819      	ldr	r0, [pc, #100]	; (402f08 <main+0xf4>)
  402ea2:	47a0      	blx	r4
	xTaskCreate(taskLED, "The LED Task", configMINIMAL_STACK_SIZE, (void *) theLEDQ, ledTaskPriority, &ledHandle);
  402ea4:	683b      	ldr	r3, [r7, #0]
  402ea6:	4a19      	ldr	r2, [pc, #100]	; (402f0c <main+0xf8>)
  402ea8:	9201      	str	r2, [sp, #4]
  402eaa:	2202      	movs	r2, #2
  402eac:	9200      	str	r2, [sp, #0]
  402eae:	2282      	movs	r2, #130	; 0x82
  402eb0:	4917      	ldr	r1, [pc, #92]	; (402f10 <main+0xfc>)
  402eb2:	4818      	ldr	r0, [pc, #96]	; (402f14 <main+0x100>)
  402eb4:	47a0      	blx	r4
	vTaskStartScheduler();
  402eb6:	4b18      	ldr	r3, [pc, #96]	; (402f18 <main+0x104>)
  402eb8:	4798      	blx	r3
  402eba:	e7fe      	b.n	402eba <main+0xa6>
  402ebc:	00402de9 	.word	0x00402de9
  402ec0:	00402459 	.word	0x00402459
  402ec4:	004025f9 	.word	0x004025f9
  402ec8:	400e0600 	.word	0x400e0600
  402ecc:	0040286d 	.word	0x0040286d
  402ed0:	00403374 	.word	0x00403374
  402ed4:	004028e1 	.word	0x004028e1
  402ed8:	00400ee5 	.word	0x00400ee5
  402edc:	200006d8 	.word	0x200006d8
  402ee0:	200006d4 	.word	0x200006d4
  402ee4:	200006c8 	.word	0x200006c8
  402ee8:	00403384 	.word	0x00403384
  402eec:	00402741 	.word	0x00402741
  402ef0:	00401795 	.word	0x00401795
  402ef4:	20000680 	.word	0x20000680
  402ef8:	00403394 	.word	0x00403394
  402efc:	00402785 	.word	0x00402785
  402f00:	2000067c 	.word	0x2000067c
  402f04:	004033a0 	.word	0x004033a0
  402f08:	004027b1 	.word	0x004027b1
  402f0c:	20000678 	.word	0x20000678
  402f10:	004033ac 	.word	0x004033ac
  402f14:	0040275d 	.word	0x0040275d
  402f18:	00401809 	.word	0x00401809
  402f1c:	200006d0 	.word	0x200006d0

00402f20 <vAssertCalled>:
}

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
  402f20:	b082      	sub	sp, #8
       volatile uint32_t ulBlockVariable = 0UL;
  402f22:	2300      	movs	r3, #0
  402f24:	9301      	str	r3, [sp, #4]
	__asm volatile
  402f26:	f04f 0350 	mov.w	r3, #80	; 0x50
  402f2a:	f383 8811 	msr	BASEPRI, r3
  402f2e:	f3bf 8f6f 	isb	sy
  402f32:	f3bf 8f4f 	dsb	sy
  402f36:	e000      	b.n	402f3a <vAssertCalled+0x1a>
       this function to be exited. */
       taskDISABLE_INTERRUPTS();
       {
              while( ulBlockVariable == 0UL )
              {
                     __asm volatile( "NOP" );
  402f38:	bf00      	nop
              while( ulBlockVariable == 0UL )
  402f3a:	9b01      	ldr	r3, [sp, #4]
  402f3c:	2b00      	cmp	r3, #0
  402f3e:	d0fb      	beq.n	402f38 <vAssertCalled+0x18>
	__asm volatile
  402f40:	2300      	movs	r3, #0
  402f42:	f383 8811 	msr	BASEPRI, r3
              }
       }
       taskENABLE_INTERRUPTS();
}
  402f46:	b002      	add	sp, #8
  402f48:	4770      	bx	lr
	...

00402f4c <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
  402f4c:	b508      	push	{r3, lr}
       /* Called if a call to pvPortMalloc() fails because there is insufficient
       free memory available in the FreeRTOS heap.  pvPortMalloc() is called
       internally by FreeRTOS API functions that create tasks, queues, software
       timers, and semaphores.  The size of the FreeRTOS heap is set by the
       configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
       vAssertCalled( __FILE__, __LINE__ );
  402f4e:	21d1      	movs	r1, #209	; 0xd1
  402f50:	4801      	ldr	r0, [pc, #4]	; (402f58 <vApplicationMallocFailedHook+0xc>)
  402f52:	4b02      	ldr	r3, [pc, #8]	; (402f5c <vApplicationMallocFailedHook+0x10>)
  402f54:	4798      	blx	r3
  402f56:	bd08      	pop	{r3, pc}
  402f58:	0040356c 	.word	0x0040356c
  402f5c:	00402f21 	.word	0x00402f21

00402f60 <vApplicationStackOverflowHook>:
	__asm volatile
  402f60:	f04f 0350 	mov.w	r3, #80	; 0x50
  402f64:	f383 8811 	msr	BASEPRI, r3
  402f68:	f3bf 8f6f 	isb	sy
  402f6c:	f3bf 8f4f 	dsb	sy
  402f70:	e7fe      	b.n	402f70 <vApplicationStackOverflowHook+0x10>
	...

00402f74 <__libc_init_array>:
  402f74:	b570      	push	{r4, r5, r6, lr}
  402f76:	4e0f      	ldr	r6, [pc, #60]	; (402fb4 <__libc_init_array+0x40>)
  402f78:	4d0f      	ldr	r5, [pc, #60]	; (402fb8 <__libc_init_array+0x44>)
  402f7a:	1b76      	subs	r6, r6, r5
  402f7c:	10b6      	asrs	r6, r6, #2
  402f7e:	bf18      	it	ne
  402f80:	2400      	movne	r4, #0
  402f82:	d005      	beq.n	402f90 <__libc_init_array+0x1c>
  402f84:	3401      	adds	r4, #1
  402f86:	f855 3b04 	ldr.w	r3, [r5], #4
  402f8a:	4798      	blx	r3
  402f8c:	42a6      	cmp	r6, r4
  402f8e:	d1f9      	bne.n	402f84 <__libc_init_array+0x10>
  402f90:	4e0a      	ldr	r6, [pc, #40]	; (402fbc <__libc_init_array+0x48>)
  402f92:	4d0b      	ldr	r5, [pc, #44]	; (402fc0 <__libc_init_array+0x4c>)
  402f94:	1b76      	subs	r6, r6, r5
  402f96:	f000 faf3 	bl	403580 <_init>
  402f9a:	10b6      	asrs	r6, r6, #2
  402f9c:	bf18      	it	ne
  402f9e:	2400      	movne	r4, #0
  402fa0:	d006      	beq.n	402fb0 <__libc_init_array+0x3c>
  402fa2:	3401      	adds	r4, #1
  402fa4:	f855 3b04 	ldr.w	r3, [r5], #4
  402fa8:	4798      	blx	r3
  402faa:	42a6      	cmp	r6, r4
  402fac:	d1f9      	bne.n	402fa2 <__libc_init_array+0x2e>
  402fae:	bd70      	pop	{r4, r5, r6, pc}
  402fb0:	bd70      	pop	{r4, r5, r6, pc}
  402fb2:	bf00      	nop
  402fb4:	0040358c 	.word	0x0040358c
  402fb8:	0040358c 	.word	0x0040358c
  402fbc:	00403594 	.word	0x00403594
  402fc0:	0040358c 	.word	0x0040358c

00402fc4 <memcpy>:
  402fc4:	4684      	mov	ip, r0
  402fc6:	ea41 0300 	orr.w	r3, r1, r0
  402fca:	f013 0303 	ands.w	r3, r3, #3
  402fce:	d16d      	bne.n	4030ac <memcpy+0xe8>
  402fd0:	3a40      	subs	r2, #64	; 0x40
  402fd2:	d341      	bcc.n	403058 <memcpy+0x94>
  402fd4:	f851 3b04 	ldr.w	r3, [r1], #4
  402fd8:	f840 3b04 	str.w	r3, [r0], #4
  402fdc:	f851 3b04 	ldr.w	r3, [r1], #4
  402fe0:	f840 3b04 	str.w	r3, [r0], #4
  402fe4:	f851 3b04 	ldr.w	r3, [r1], #4
  402fe8:	f840 3b04 	str.w	r3, [r0], #4
  402fec:	f851 3b04 	ldr.w	r3, [r1], #4
  402ff0:	f840 3b04 	str.w	r3, [r0], #4
  402ff4:	f851 3b04 	ldr.w	r3, [r1], #4
  402ff8:	f840 3b04 	str.w	r3, [r0], #4
  402ffc:	f851 3b04 	ldr.w	r3, [r1], #4
  403000:	f840 3b04 	str.w	r3, [r0], #4
  403004:	f851 3b04 	ldr.w	r3, [r1], #4
  403008:	f840 3b04 	str.w	r3, [r0], #4
  40300c:	f851 3b04 	ldr.w	r3, [r1], #4
  403010:	f840 3b04 	str.w	r3, [r0], #4
  403014:	f851 3b04 	ldr.w	r3, [r1], #4
  403018:	f840 3b04 	str.w	r3, [r0], #4
  40301c:	f851 3b04 	ldr.w	r3, [r1], #4
  403020:	f840 3b04 	str.w	r3, [r0], #4
  403024:	f851 3b04 	ldr.w	r3, [r1], #4
  403028:	f840 3b04 	str.w	r3, [r0], #4
  40302c:	f851 3b04 	ldr.w	r3, [r1], #4
  403030:	f840 3b04 	str.w	r3, [r0], #4
  403034:	f851 3b04 	ldr.w	r3, [r1], #4
  403038:	f840 3b04 	str.w	r3, [r0], #4
  40303c:	f851 3b04 	ldr.w	r3, [r1], #4
  403040:	f840 3b04 	str.w	r3, [r0], #4
  403044:	f851 3b04 	ldr.w	r3, [r1], #4
  403048:	f840 3b04 	str.w	r3, [r0], #4
  40304c:	f851 3b04 	ldr.w	r3, [r1], #4
  403050:	f840 3b04 	str.w	r3, [r0], #4
  403054:	3a40      	subs	r2, #64	; 0x40
  403056:	d2bd      	bcs.n	402fd4 <memcpy+0x10>
  403058:	3230      	adds	r2, #48	; 0x30
  40305a:	d311      	bcc.n	403080 <memcpy+0xbc>
  40305c:	f851 3b04 	ldr.w	r3, [r1], #4
  403060:	f840 3b04 	str.w	r3, [r0], #4
  403064:	f851 3b04 	ldr.w	r3, [r1], #4
  403068:	f840 3b04 	str.w	r3, [r0], #4
  40306c:	f851 3b04 	ldr.w	r3, [r1], #4
  403070:	f840 3b04 	str.w	r3, [r0], #4
  403074:	f851 3b04 	ldr.w	r3, [r1], #4
  403078:	f840 3b04 	str.w	r3, [r0], #4
  40307c:	3a10      	subs	r2, #16
  40307e:	d2ed      	bcs.n	40305c <memcpy+0x98>
  403080:	320c      	adds	r2, #12
  403082:	d305      	bcc.n	403090 <memcpy+0xcc>
  403084:	f851 3b04 	ldr.w	r3, [r1], #4
  403088:	f840 3b04 	str.w	r3, [r0], #4
  40308c:	3a04      	subs	r2, #4
  40308e:	d2f9      	bcs.n	403084 <memcpy+0xc0>
  403090:	3204      	adds	r2, #4
  403092:	d008      	beq.n	4030a6 <memcpy+0xe2>
  403094:	07d2      	lsls	r2, r2, #31
  403096:	bf1c      	itt	ne
  403098:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40309c:	f800 3b01 	strbne.w	r3, [r0], #1
  4030a0:	d301      	bcc.n	4030a6 <memcpy+0xe2>
  4030a2:	880b      	ldrh	r3, [r1, #0]
  4030a4:	8003      	strh	r3, [r0, #0]
  4030a6:	4660      	mov	r0, ip
  4030a8:	4770      	bx	lr
  4030aa:	bf00      	nop
  4030ac:	2a08      	cmp	r2, #8
  4030ae:	d313      	bcc.n	4030d8 <memcpy+0x114>
  4030b0:	078b      	lsls	r3, r1, #30
  4030b2:	d08d      	beq.n	402fd0 <memcpy+0xc>
  4030b4:	f010 0303 	ands.w	r3, r0, #3
  4030b8:	d08a      	beq.n	402fd0 <memcpy+0xc>
  4030ba:	f1c3 0304 	rsb	r3, r3, #4
  4030be:	1ad2      	subs	r2, r2, r3
  4030c0:	07db      	lsls	r3, r3, #31
  4030c2:	bf1c      	itt	ne
  4030c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4030c8:	f800 3b01 	strbne.w	r3, [r0], #1
  4030cc:	d380      	bcc.n	402fd0 <memcpy+0xc>
  4030ce:	f831 3b02 	ldrh.w	r3, [r1], #2
  4030d2:	f820 3b02 	strh.w	r3, [r0], #2
  4030d6:	e77b      	b.n	402fd0 <memcpy+0xc>
  4030d8:	3a04      	subs	r2, #4
  4030da:	d3d9      	bcc.n	403090 <memcpy+0xcc>
  4030dc:	3a01      	subs	r2, #1
  4030de:	f811 3b01 	ldrb.w	r3, [r1], #1
  4030e2:	f800 3b01 	strb.w	r3, [r0], #1
  4030e6:	d2f9      	bcs.n	4030dc <memcpy+0x118>
  4030e8:	780b      	ldrb	r3, [r1, #0]
  4030ea:	7003      	strb	r3, [r0, #0]
  4030ec:	784b      	ldrb	r3, [r1, #1]
  4030ee:	7043      	strb	r3, [r0, #1]
  4030f0:	788b      	ldrb	r3, [r1, #2]
  4030f2:	7083      	strb	r3, [r0, #2]
  4030f4:	4660      	mov	r0, ip
  4030f6:	4770      	bx	lr

004030f8 <memset>:
  4030f8:	b470      	push	{r4, r5, r6}
  4030fa:	0786      	lsls	r6, r0, #30
  4030fc:	d046      	beq.n	40318c <memset+0x94>
  4030fe:	1e54      	subs	r4, r2, #1
  403100:	2a00      	cmp	r2, #0
  403102:	d041      	beq.n	403188 <memset+0x90>
  403104:	b2ca      	uxtb	r2, r1
  403106:	4603      	mov	r3, r0
  403108:	e002      	b.n	403110 <memset+0x18>
  40310a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40310e:	d33b      	bcc.n	403188 <memset+0x90>
  403110:	f803 2b01 	strb.w	r2, [r3], #1
  403114:	079d      	lsls	r5, r3, #30
  403116:	d1f8      	bne.n	40310a <memset+0x12>
  403118:	2c03      	cmp	r4, #3
  40311a:	d92e      	bls.n	40317a <memset+0x82>
  40311c:	b2cd      	uxtb	r5, r1
  40311e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403122:	2c0f      	cmp	r4, #15
  403124:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403128:	d919      	bls.n	40315e <memset+0x66>
  40312a:	f103 0210 	add.w	r2, r3, #16
  40312e:	4626      	mov	r6, r4
  403130:	3e10      	subs	r6, #16
  403132:	2e0f      	cmp	r6, #15
  403134:	f842 5c10 	str.w	r5, [r2, #-16]
  403138:	f842 5c0c 	str.w	r5, [r2, #-12]
  40313c:	f842 5c08 	str.w	r5, [r2, #-8]
  403140:	f842 5c04 	str.w	r5, [r2, #-4]
  403144:	f102 0210 	add.w	r2, r2, #16
  403148:	d8f2      	bhi.n	403130 <memset+0x38>
  40314a:	f1a4 0210 	sub.w	r2, r4, #16
  40314e:	f022 020f 	bic.w	r2, r2, #15
  403152:	f004 040f 	and.w	r4, r4, #15
  403156:	3210      	adds	r2, #16
  403158:	2c03      	cmp	r4, #3
  40315a:	4413      	add	r3, r2
  40315c:	d90d      	bls.n	40317a <memset+0x82>
  40315e:	461e      	mov	r6, r3
  403160:	4622      	mov	r2, r4
  403162:	3a04      	subs	r2, #4
  403164:	2a03      	cmp	r2, #3
  403166:	f846 5b04 	str.w	r5, [r6], #4
  40316a:	d8fa      	bhi.n	403162 <memset+0x6a>
  40316c:	1f22      	subs	r2, r4, #4
  40316e:	f022 0203 	bic.w	r2, r2, #3
  403172:	3204      	adds	r2, #4
  403174:	4413      	add	r3, r2
  403176:	f004 0403 	and.w	r4, r4, #3
  40317a:	b12c      	cbz	r4, 403188 <memset+0x90>
  40317c:	b2c9      	uxtb	r1, r1
  40317e:	441c      	add	r4, r3
  403180:	f803 1b01 	strb.w	r1, [r3], #1
  403184:	429c      	cmp	r4, r3
  403186:	d1fb      	bne.n	403180 <memset+0x88>
  403188:	bc70      	pop	{r4, r5, r6}
  40318a:	4770      	bx	lr
  40318c:	4614      	mov	r4, r2
  40318e:	4603      	mov	r3, r0
  403190:	e7c2      	b.n	403118 <memset+0x20>
  403192:	bf00      	nop

00403194 <register_fini>:
  403194:	4b02      	ldr	r3, [pc, #8]	; (4031a0 <register_fini+0xc>)
  403196:	b113      	cbz	r3, 40319e <register_fini+0xa>
  403198:	4802      	ldr	r0, [pc, #8]	; (4031a4 <register_fini+0x10>)
  40319a:	f000 b805 	b.w	4031a8 <atexit>
  40319e:	4770      	bx	lr
  4031a0:	00000000 	.word	0x00000000
  4031a4:	004031b5 	.word	0x004031b5

004031a8 <atexit>:
  4031a8:	2300      	movs	r3, #0
  4031aa:	4601      	mov	r1, r0
  4031ac:	461a      	mov	r2, r3
  4031ae:	4618      	mov	r0, r3
  4031b0:	f000 b81e 	b.w	4031f0 <__register_exitproc>

004031b4 <__libc_fini_array>:
  4031b4:	b538      	push	{r3, r4, r5, lr}
  4031b6:	4c0a      	ldr	r4, [pc, #40]	; (4031e0 <__libc_fini_array+0x2c>)
  4031b8:	4d0a      	ldr	r5, [pc, #40]	; (4031e4 <__libc_fini_array+0x30>)
  4031ba:	1b64      	subs	r4, r4, r5
  4031bc:	10a4      	asrs	r4, r4, #2
  4031be:	d00a      	beq.n	4031d6 <__libc_fini_array+0x22>
  4031c0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4031c4:	3b01      	subs	r3, #1
  4031c6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4031ca:	3c01      	subs	r4, #1
  4031cc:	f855 3904 	ldr.w	r3, [r5], #-4
  4031d0:	4798      	blx	r3
  4031d2:	2c00      	cmp	r4, #0
  4031d4:	d1f9      	bne.n	4031ca <__libc_fini_array+0x16>
  4031d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4031da:	f000 b9db 	b.w	403594 <_fini>
  4031de:	bf00      	nop
  4031e0:	004035a4 	.word	0x004035a4
  4031e4:	004035a0 	.word	0x004035a0

004031e8 <__retarget_lock_acquire_recursive>:
  4031e8:	4770      	bx	lr
  4031ea:	bf00      	nop

004031ec <__retarget_lock_release_recursive>:
  4031ec:	4770      	bx	lr
  4031ee:	bf00      	nop

004031f0 <__register_exitproc>:
  4031f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4031f4:	4d2c      	ldr	r5, [pc, #176]	; (4032a8 <__register_exitproc+0xb8>)
  4031f6:	4606      	mov	r6, r0
  4031f8:	6828      	ldr	r0, [r5, #0]
  4031fa:	4698      	mov	r8, r3
  4031fc:	460f      	mov	r7, r1
  4031fe:	4691      	mov	r9, r2
  403200:	f7ff fff2 	bl	4031e8 <__retarget_lock_acquire_recursive>
  403204:	4b29      	ldr	r3, [pc, #164]	; (4032ac <__register_exitproc+0xbc>)
  403206:	681c      	ldr	r4, [r3, #0]
  403208:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40320c:	2b00      	cmp	r3, #0
  40320e:	d03e      	beq.n	40328e <__register_exitproc+0x9e>
  403210:	685a      	ldr	r2, [r3, #4]
  403212:	2a1f      	cmp	r2, #31
  403214:	dc1c      	bgt.n	403250 <__register_exitproc+0x60>
  403216:	f102 0e01 	add.w	lr, r2, #1
  40321a:	b176      	cbz	r6, 40323a <__register_exitproc+0x4a>
  40321c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403220:	2401      	movs	r4, #1
  403222:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  403226:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40322a:	4094      	lsls	r4, r2
  40322c:	4320      	orrs	r0, r4
  40322e:	2e02      	cmp	r6, #2
  403230:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  403234:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403238:	d023      	beq.n	403282 <__register_exitproc+0x92>
  40323a:	3202      	adds	r2, #2
  40323c:	f8c3 e004 	str.w	lr, [r3, #4]
  403240:	6828      	ldr	r0, [r5, #0]
  403242:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  403246:	f7ff ffd1 	bl	4031ec <__retarget_lock_release_recursive>
  40324a:	2000      	movs	r0, #0
  40324c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403250:	4b17      	ldr	r3, [pc, #92]	; (4032b0 <__register_exitproc+0xc0>)
  403252:	b30b      	cbz	r3, 403298 <__register_exitproc+0xa8>
  403254:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403258:	f3af 8000 	nop.w
  40325c:	4603      	mov	r3, r0
  40325e:	b1d8      	cbz	r0, 403298 <__register_exitproc+0xa8>
  403260:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403264:	6002      	str	r2, [r0, #0]
  403266:	2100      	movs	r1, #0
  403268:	6041      	str	r1, [r0, #4]
  40326a:	460a      	mov	r2, r1
  40326c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403270:	f04f 0e01 	mov.w	lr, #1
  403274:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403278:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40327c:	2e00      	cmp	r6, #0
  40327e:	d0dc      	beq.n	40323a <__register_exitproc+0x4a>
  403280:	e7cc      	b.n	40321c <__register_exitproc+0x2c>
  403282:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  403286:	430c      	orrs	r4, r1
  403288:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40328c:	e7d5      	b.n	40323a <__register_exitproc+0x4a>
  40328e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  403292:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  403296:	e7bb      	b.n	403210 <__register_exitproc+0x20>
  403298:	6828      	ldr	r0, [r5, #0]
  40329a:	f7ff ffa7 	bl	4031ec <__retarget_lock_release_recursive>
  40329e:	f04f 30ff 	mov.w	r0, #4294967295
  4032a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4032a6:	bf00      	nop
  4032a8:	20000438 	.word	0x20000438
  4032ac:	0040357c 	.word	0x0040357c
  4032b0:	00000000 	.word	0x00000000
  4032b4:	732f2e2e 	.word	0x732f2e2e
  4032b8:	462f6372 	.word	0x462f6372
  4032bc:	52656572 	.word	0x52656572
  4032c0:	2f534f54 	.word	0x2f534f54
  4032c4:	74726f70 	.word	0x74726f70
  4032c8:	656c6261 	.word	0x656c6261
  4032cc:	4343472f 	.word	0x4343472f
  4032d0:	4d52412f 	.word	0x4d52412f
  4032d4:	344d435f 	.word	0x344d435f
  4032d8:	6f702f46 	.word	0x6f702f46
  4032dc:	632e7472 	.word	0x632e7472
  4032e0:	00000000 	.word	0x00000000
  4032e4:	732f2e2e 	.word	0x732f2e2e
  4032e8:	462f6372 	.word	0x462f6372
  4032ec:	52656572 	.word	0x52656572
  4032f0:	2f534f54 	.word	0x2f534f54
  4032f4:	74726f70 	.word	0x74726f70
  4032f8:	656c6261 	.word	0x656c6261
  4032fc:	6d654d2f 	.word	0x6d654d2f
  403300:	676e614d 	.word	0x676e614d
  403304:	6165682f 	.word	0x6165682f
  403308:	2e355f70 	.word	0x2e355f70
  40330c:	00000063 	.word	0x00000063
  403310:	732f2e2e 	.word	0x732f2e2e
  403314:	462f6372 	.word	0x462f6372
  403318:	52656572 	.word	0x52656572
  40331c:	2f534f54 	.word	0x2f534f54
  403320:	75657571 	.word	0x75657571
  403324:	00632e65 	.word	0x00632e65
  403328:	732f2e2e 	.word	0x732f2e2e
  40332c:	462f6372 	.word	0x462f6372
  403330:	52656572 	.word	0x52656572
  403334:	2f534f54 	.word	0x2f534f54
  403338:	6b736174 	.word	0x6b736174
  40333c:	00632e73 	.word	0x00632e73
  403340:	454c4449 	.word	0x454c4449
  403344:	00000000 	.word	0x00000000
  403348:	51726d54 	.word	0x51726d54
  40334c:	00000000 	.word	0x00000000
  403350:	732f2e2e 	.word	0x732f2e2e
  403354:	462f6372 	.word	0x462f6372
  403358:	52656572 	.word	0x52656572
  40335c:	2f534f54 	.word	0x2f534f54
  403360:	656d6974 	.word	0x656d6974
  403364:	632e7372 	.word	0x632e7372
  403368:	00000000 	.word	0x00000000
  40336c:	20726d54 	.word	0x20726d54
  403370:	00637653 	.word	0x00637653
  403374:	73696854 	.word	0x73696854
  403378:	20736920 	.word	0x20736920
  40337c:	3562614c 	.word	0x3562614c
  403380:	00000a0d 	.word	0x00000a0d
  403384:	3044454c 	.word	0x3044454c
  403388:	61654820 	.word	0x61654820
  40338c:	42207472 	.word	0x42207472
  403390:	00746165 	.word	0x00746165
  403394:	20656854 	.word	0x20656854
  403398:	54205854 	.word	0x54205854
  40339c:	006b7361 	.word	0x006b7361
  4033a0:	20656854 	.word	0x20656854
  4033a4:	54205852 	.word	0x54205852
  4033a8:	006b7361 	.word	0x006b7361
  4033ac:	20656854 	.word	0x20656854
  4033b0:	2044454c 	.word	0x2044454c
  4033b4:	6b736154 	.word	0x6b736154
  4033b8:	00000000 	.word	0x00000000
  4033bc:	64616843 	.word	0x64616843
  4033c0:	00000a0d 	.word	0x00000a0d
  4033c4:	2044454c 	.word	0x2044454c
  4033c8:	53492033 	.word	0x53492033
  4033cc:	574f4e20 	.word	0x574f4e20
  4033d0:	4f4c4220 	.word	0x4f4c4220
  4033d4:	4e494b43 	.word	0x4e494b43
  4033d8:	000a0d47 	.word	0x000a0d47
  4033dc:	2044454c 	.word	0x2044454c
  4033e0:	53492032 	.word	0x53492032
  4033e4:	574f4e20 	.word	0x574f4e20
  4033e8:	4f4c4220 	.word	0x4f4c4220
  4033ec:	4e494b43 	.word	0x4e494b43
  4033f0:	000a0d47 	.word	0x000a0d47
  4033f4:	2044454c 	.word	0x2044454c
  4033f8:	53492031 	.word	0x53492031
  4033fc:	574f4e20 	.word	0x574f4e20
  403400:	4f4c4220 	.word	0x4f4c4220
  403404:	4e494b43 	.word	0x4e494b43
  403408:	000a0d47 	.word	0x000a0d47
  40340c:	2044454c 	.word	0x2044454c
  403410:	53492033 	.word	0x53492033
  403414:	574f4e20 	.word	0x574f4e20
  403418:	41545320 	.word	0x41545320
  40341c:	4e495452 	.word	0x4e495452
  403420:	000a0d47 	.word	0x000a0d47
  403424:	2044454c 	.word	0x2044454c
  403428:	53492032 	.word	0x53492032
  40342c:	574f4e20 	.word	0x574f4e20
  403430:	41545320 	.word	0x41545320
  403434:	4e495452 	.word	0x4e495452
  403438:	000a0d47 	.word	0x000a0d47
  40343c:	2044454c 	.word	0x2044454c
  403440:	53492031 	.word	0x53492031
  403444:	574f4e20 	.word	0x574f4e20
  403448:	41545320 	.word	0x41545320
  40344c:	4e495452 	.word	0x4e495452
  403450:	000a0d47 	.word	0x000a0d47
  403454:	6e69614d 	.word	0x6e69614d
  403458:	6e6f4320 	.word	0x6e6f4320
  40345c:	6c6f7274 	.word	0x6c6f7274
  403460:	20736920 	.word	0x20736920
  403464:	20776f6e 	.word	0x20776f6e
  403468:	636f6c62 	.word	0x636f6c62
  40346c:	676e696b 	.word	0x676e696b
  403470:	000a0d2e 	.word	0x000a0d2e
  403474:	6e69614d 	.word	0x6e69614d
  403478:	6e6f4320 	.word	0x6e6f4320
  40347c:	6c6f7274 	.word	0x6c6f7274
  403480:	20736920 	.word	0x20736920
  403484:	20776f6e 	.word	0x20776f6e
  403488:	72617473 	.word	0x72617473
  40348c:	676e6974 	.word	0x676e6974
  403490:	000a0d2e 	.word	0x000a0d2e
  403494:	2044454c 	.word	0x2044454c
  403498:	53492033 	.word	0x53492033
  40349c:	574f4e20 	.word	0x574f4e20
  4034a0:	54434120 	.word	0x54434120
  4034a4:	0d455649 	.word	0x0d455649
  4034a8:	0000000a 	.word	0x0000000a
  4034ac:	2044454c 	.word	0x2044454c
  4034b0:	53492032 	.word	0x53492032
  4034b4:	574f4e20 	.word	0x574f4e20
  4034b8:	54434120 	.word	0x54434120
  4034bc:	0d455649 	.word	0x0d455649
  4034c0:	0000000a 	.word	0x0000000a
  4034c4:	2044454c 	.word	0x2044454c
  4034c8:	53492031 	.word	0x53492031
  4034cc:	574f4e20 	.word	0x574f4e20
  4034d0:	54434120 	.word	0x54434120
  4034d4:	0d455649 	.word	0x0d455649
  4034d8:	0000000a 	.word	0x0000000a
  4034dc:	75657571 	.word	0x75657571
  4034e0:	454c2065 	.word	0x454c2065
  4034e4:	69203344 	.word	0x69203344
  4034e8:	6572636e 	.word	0x6572636e
  4034ec:	0d657361 	.word	0x0d657361
  4034f0:	0000000a 	.word	0x0000000a
  4034f4:	75657571 	.word	0x75657571
  4034f8:	454c2065 	.word	0x454c2065
  4034fc:	69203244 	.word	0x69203244
  403500:	6572636e 	.word	0x6572636e
  403504:	0d657361 	.word	0x0d657361
  403508:	0000000a 	.word	0x0000000a
  40350c:	75657571 	.word	0x75657571
  403510:	454c2065 	.word	0x454c2065
  403514:	69203144 	.word	0x69203144
  403518:	6572636e 	.word	0x6572636e
  40351c:	0d657361 	.word	0x0d657361
  403520:	0000000a 	.word	0x0000000a
  403524:	75657571 	.word	0x75657571
  403528:	454c2065 	.word	0x454c2065
  40352c:	64203344 	.word	0x64203344
  403530:	65726365 	.word	0x65726365
  403534:	0d657361 	.word	0x0d657361
  403538:	0000000a 	.word	0x0000000a
  40353c:	75657571 	.word	0x75657571
  403540:	454c2065 	.word	0x454c2065
  403544:	64203244 	.word	0x64203244
  403548:	65726365 	.word	0x65726365
  40354c:	0d657361 	.word	0x0d657361
  403550:	0000000a 	.word	0x0000000a
  403554:	75657571 	.word	0x75657571
  403558:	454c2065 	.word	0x454c2065
  40355c:	64203144 	.word	0x64203144
  403560:	65726365 	.word	0x65726365
  403564:	0d657361 	.word	0x0d657361
  403568:	0000000a 	.word	0x0000000a
  40356c:	732f2e2e 	.word	0x732f2e2e
  403570:	6d2f6372 	.word	0x6d2f6372
  403574:	2e6e6961 	.word	0x2e6e6961
  403578:	00000063 	.word	0x00000063

0040357c <_global_impure_ptr>:
  40357c:	20000010                                ... 

00403580 <_init>:
  403580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403582:	bf00      	nop
  403584:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403586:	bc08      	pop	{r3}
  403588:	469e      	mov	lr, r3
  40358a:	4770      	bx	lr

0040358c <__init_array_start>:
  40358c:	00403195 	.word	0x00403195

00403590 <__frame_dummy_init_array_entry>:
  403590:	0040011d                                ..@.

00403594 <_fini>:
  403594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403596:	bf00      	nop
  403598:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40359a:	bc08      	pop	{r3}
  40359c:	469e      	mov	lr, r3
  40359e:	4770      	bx	lr

004035a0 <__fini_array_start>:
  4035a0:	004000f9 	.word	0x004000f9
