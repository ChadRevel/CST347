
Lab01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027e4  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  004027e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001f0  2000043c  00402c20  0002043c  2**2
                  ALLOC
  3 .stack        00003004  2000062c  00402e10  0002043c  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002046a  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001131a  00000000  00000000  000204c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000282a  00000000  00000000  000317dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005e61  00000000  00000000  00034007  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000748  00000000  00000000  00039e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000950  00000000  00000000  0003a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000171aa  00000000  00000000  0003af00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000087bf  00000000  00000000  000520aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00069992  00000000  00000000  0005a869  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000013d8  00000000  00000000  000c41fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	30 36 00 20 71 20 40 00 6d 20 40 00 6d 20 40 00     06. q @.m @.m @.
  400010:	6d 20 40 00 6d 20 40 00 6d 20 40 00 00 00 00 00     m @.m @.m @.....
	...
  40002c:	a1 02 40 00 6d 20 40 00 00 00 00 00 41 03 40 00     ..@.m @.....A.@.
  40003c:	a5 03 40 00 6d 20 40 00 6d 20 40 00 6d 20 40 00     ..@.m @.m @.m @.
  40004c:	6d 20 40 00 6d 20 40 00 6d 20 40 00 6d 20 40 00     m @.m @.m @.m @.
  40005c:	6d 20 40 00 6d 20 40 00 6d 20 40 00 6d 20 40 00     m @.m @.m @.m @.
  40006c:	6d 20 40 00 6d 20 40 00 6d 20 40 00 6d 20 40 00     m @.m @.m @.m @.
  40007c:	6d 20 40 00 6d 20 40 00 6d 20 40 00 6d 20 40 00     m @.m @.m @.m @.
  40008c:	6d 20 40 00 6d 20 40 00 6d 20 40 00 6d 20 40 00     m @.m @.m @.m @.
  40009c:	6d 20 40 00 6d 20 40 00 6d 20 40 00 6d 20 40 00     m @.m @.m @.m @.
  4000ac:	6d 20 40 00 6d 20 40 00 6d 20 40 00 6d 20 40 00     m @.m @.m @.m @.
  4000bc:	6d 20 40 00 6d 20 40 00 6d 20 40 00 6d 20 40 00     m @.m @.m @.m @.
  4000cc:	6d 20 40 00 6d 20 40 00 6d 20 40 00 6d 20 40 00     m @.m @.m @.m @.
  4000dc:	6d 20 40 00 6d 20 40 00 6d 20 40 00 6d 20 40 00     m @.m @.m @.m @.
  4000ec:	6d 20 40 00 6d 20 40 00 6d 20 40 00                 m @.m @.m @.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	2000043c 	.word	0x2000043c
  400114:	00000000 	.word	0x00000000
  400118:	004027e4 	.word	0x004027e4

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	004027e4 	.word	0x004027e4
  400158:	20000440 	.word	0x20000440
  40015c:	004027e4 	.word	0x004027e4
  400160:	00000000 	.word	0x00000000

00400164 <vListInitialise>:
  400164:	f100 0308 	add.w	r3, r0, #8
  400168:	6043      	str	r3, [r0, #4]
  40016a:	f04f 32ff 	mov.w	r2, #4294967295
  40016e:	6082      	str	r2, [r0, #8]
  400170:	60c3      	str	r3, [r0, #12]
  400172:	6103      	str	r3, [r0, #16]
  400174:	2300      	movs	r3, #0
  400176:	6003      	str	r3, [r0, #0]
  400178:	4770      	bx	lr

0040017a <vListInitialiseItem>:
  40017a:	2300      	movs	r3, #0
  40017c:	6103      	str	r3, [r0, #16]
  40017e:	4770      	bx	lr

00400180 <vListInsertEnd>:
  400180:	6843      	ldr	r3, [r0, #4]
  400182:	604b      	str	r3, [r1, #4]
  400184:	689a      	ldr	r2, [r3, #8]
  400186:	608a      	str	r2, [r1, #8]
  400188:	689a      	ldr	r2, [r3, #8]
  40018a:	6051      	str	r1, [r2, #4]
  40018c:	6099      	str	r1, [r3, #8]
  40018e:	6108      	str	r0, [r1, #16]
  400190:	6803      	ldr	r3, [r0, #0]
  400192:	3301      	adds	r3, #1
  400194:	6003      	str	r3, [r0, #0]
  400196:	4770      	bx	lr

00400198 <vListInsert>:
  400198:	b430      	push	{r4, r5}
  40019a:	680d      	ldr	r5, [r1, #0]
  40019c:	f1b5 3fff 	cmp.w	r5, #4294967295
  4001a0:	d002      	beq.n	4001a8 <vListInsert+0x10>
  4001a2:	f100 0208 	add.w	r2, r0, #8
  4001a6:	e002      	b.n	4001ae <vListInsert+0x16>
  4001a8:	6902      	ldr	r2, [r0, #16]
  4001aa:	e004      	b.n	4001b6 <vListInsert+0x1e>
  4001ac:	461a      	mov	r2, r3
  4001ae:	6853      	ldr	r3, [r2, #4]
  4001b0:	681c      	ldr	r4, [r3, #0]
  4001b2:	42a5      	cmp	r5, r4
  4001b4:	d2fa      	bcs.n	4001ac <vListInsert+0x14>
  4001b6:	6853      	ldr	r3, [r2, #4]
  4001b8:	604b      	str	r3, [r1, #4]
  4001ba:	6099      	str	r1, [r3, #8]
  4001bc:	608a      	str	r2, [r1, #8]
  4001be:	6051      	str	r1, [r2, #4]
  4001c0:	6108      	str	r0, [r1, #16]
  4001c2:	6803      	ldr	r3, [r0, #0]
  4001c4:	3301      	adds	r3, #1
  4001c6:	6003      	str	r3, [r0, #0]
  4001c8:	bc30      	pop	{r4, r5}
  4001ca:	4770      	bx	lr

004001cc <uxListRemove>:
  4001cc:	6903      	ldr	r3, [r0, #16]
  4001ce:	6842      	ldr	r2, [r0, #4]
  4001d0:	6881      	ldr	r1, [r0, #8]
  4001d2:	6091      	str	r1, [r2, #8]
  4001d4:	6882      	ldr	r2, [r0, #8]
  4001d6:	6841      	ldr	r1, [r0, #4]
  4001d8:	6051      	str	r1, [r2, #4]
  4001da:	685a      	ldr	r2, [r3, #4]
  4001dc:	4290      	cmp	r0, r2
  4001de:	bf04      	itt	eq
  4001e0:	6882      	ldreq	r2, [r0, #8]
  4001e2:	605a      	streq	r2, [r3, #4]
  4001e4:	2200      	movs	r2, #0
  4001e6:	6102      	str	r2, [r0, #16]
  4001e8:	681a      	ldr	r2, [r3, #0]
  4001ea:	3a01      	subs	r2, #1
  4001ec:	601a      	str	r2, [r3, #0]
  4001ee:	6818      	ldr	r0, [r3, #0]
  4001f0:	4770      	bx	lr
	...

004001f4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
  4001f4:	4808      	ldr	r0, [pc, #32]	; (400218 <prvPortStartFirstTask+0x24>)
  4001f6:	6800      	ldr	r0, [r0, #0]
  4001f8:	6800      	ldr	r0, [r0, #0]
  4001fa:	f380 8808 	msr	MSP, r0
  4001fe:	f04f 0000 	mov.w	r0, #0
  400202:	f380 8814 	msr	CONTROL, r0
  400206:	b662      	cpsie	i
  400208:	b661      	cpsie	f
  40020a:	f3bf 8f4f 	dsb	sy
  40020e:	f3bf 8f6f 	isb	sy
  400212:	df00      	svc	0
  400214:	bf00      	nop
  400216:	0000      	.short	0x0000
  400218:	e000ed08 	.word	0xe000ed08

0040021c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40021c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40022c <vPortEnableVFP+0x10>
  400220:	6801      	ldr	r1, [r0, #0]
  400222:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400226:	6001      	str	r1, [r0, #0]
  400228:	4770      	bx	lr
  40022a:	0000      	.short	0x0000
  40022c:	e000ed88 	.word	0xe000ed88

00400230 <prvTaskExitError>:
{
  400230:	b500      	push	{lr}
  400232:	b083      	sub	sp, #12
volatile uint32_t ulDummy = 0;
  400234:	2300      	movs	r3, #0
  400236:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
  400238:	4b0b      	ldr	r3, [pc, #44]	; (400268 <prvTaskExitError+0x38>)
  40023a:	681b      	ldr	r3, [r3, #0]
  40023c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400240:	d003      	beq.n	40024a <prvTaskExitError+0x1a>
  400242:	21e3      	movs	r1, #227	; 0xe3
  400244:	4809      	ldr	r0, [pc, #36]	; (40026c <prvTaskExitError+0x3c>)
  400246:	4b0a      	ldr	r3, [pc, #40]	; (400270 <prvTaskExitError+0x40>)
  400248:	4798      	blx	r3

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40024a:	f04f 0350 	mov.w	r3, #80	; 0x50
  40024e:	f383 8811 	msr	BASEPRI, r3
  400252:	f3bf 8f6f 	isb	sy
  400256:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
  40025a:	9b01      	ldr	r3, [sp, #4]
  40025c:	2b00      	cmp	r3, #0
  40025e:	d0fc      	beq.n	40025a <prvTaskExitError+0x2a>
}
  400260:	b003      	add	sp, #12
  400262:	f85d fb04 	ldr.w	pc, [sp], #4
  400266:	bf00      	nop
  400268:	20000000 	.word	0x20000000
  40026c:	004026dc 	.word	0x004026dc
  400270:	00402349 	.word	0x00402349

00400274 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400278:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  40027c:	f021 0101 	bic.w	r1, r1, #1
  400280:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400284:	4b05      	ldr	r3, [pc, #20]	; (40029c <pxPortInitialiseStack+0x28>)
  400286:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40028a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  40028e:	f06f 0302 	mvn.w	r3, #2
  400292:	f840 3c24 	str.w	r3, [r0, #-36]
}
  400296:	3844      	subs	r0, #68	; 0x44
  400298:	4770      	bx	lr
  40029a:	bf00      	nop
  40029c:	00400231 	.word	0x00400231

004002a0 <SVC_Handler>:
	__asm volatile (
  4002a0:	4b07      	ldr	r3, [pc, #28]	; (4002c0 <pxCurrentTCBConst2>)
  4002a2:	6819      	ldr	r1, [r3, #0]
  4002a4:	6808      	ldr	r0, [r1, #0]
  4002a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4002aa:	f380 8809 	msr	PSP, r0
  4002ae:	f3bf 8f6f 	isb	sy
  4002b2:	f04f 0000 	mov.w	r0, #0
  4002b6:	f380 8811 	msr	BASEPRI, r0
  4002ba:	4770      	bx	lr
  4002bc:	f3af 8000 	nop.w

004002c0 <pxCurrentTCBConst2>:
  4002c0:	20000478 	.word	0x20000478

004002c4 <vPortEnterCritical>:
{
  4002c4:	b508      	push	{r3, lr}
  4002c6:	f04f 0350 	mov.w	r3, #80	; 0x50
  4002ca:	f383 8811 	msr	BASEPRI, r3
  4002ce:	f3bf 8f6f 	isb	sy
  4002d2:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
  4002d6:	4a09      	ldr	r2, [pc, #36]	; (4002fc <vPortEnterCritical+0x38>)
  4002d8:	6813      	ldr	r3, [r2, #0]
  4002da:	3301      	adds	r3, #1
  4002dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4002de:	2b01      	cmp	r3, #1
  4002e0:	d000      	beq.n	4002e4 <vPortEnterCritical+0x20>
  4002e2:	bd08      	pop	{r3, pc}
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4002e4:	4b06      	ldr	r3, [pc, #24]	; (400300 <vPortEnterCritical+0x3c>)
  4002e6:	681b      	ldr	r3, [r3, #0]
  4002e8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4002ec:	d0f9      	beq.n	4002e2 <vPortEnterCritical+0x1e>
  4002ee:	f240 119f 	movw	r1, #415	; 0x19f
  4002f2:	4804      	ldr	r0, [pc, #16]	; (400304 <vPortEnterCritical+0x40>)
  4002f4:	4b04      	ldr	r3, [pc, #16]	; (400308 <vPortEnterCritical+0x44>)
  4002f6:	4798      	blx	r3
}
  4002f8:	e7f3      	b.n	4002e2 <vPortEnterCritical+0x1e>
  4002fa:	bf00      	nop
  4002fc:	20000000 	.word	0x20000000
  400300:	e000ed04 	.word	0xe000ed04
  400304:	004026dc 	.word	0x004026dc
  400308:	00402349 	.word	0x00402349

0040030c <vPortExitCritical>:
{
  40030c:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
  40030e:	4b08      	ldr	r3, [pc, #32]	; (400330 <vPortExitCritical+0x24>)
  400310:	681b      	ldr	r3, [r3, #0]
  400312:	b13b      	cbz	r3, 400324 <vPortExitCritical+0x18>
	uxCriticalNesting--;
  400314:	4a06      	ldr	r2, [pc, #24]	; (400330 <vPortExitCritical+0x24>)
  400316:	6813      	ldr	r3, [r2, #0]
  400318:	3b01      	subs	r3, #1
  40031a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40031c:	b90b      	cbnz	r3, 400322 <vPortExitCritical+0x16>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  40031e:	f383 8811 	msr	BASEPRI, r3
  400322:	bd08      	pop	{r3, pc}
	configASSERT( uxCriticalNesting );
  400324:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
  400328:	4802      	ldr	r0, [pc, #8]	; (400334 <vPortExitCritical+0x28>)
  40032a:	4b03      	ldr	r3, [pc, #12]	; (400338 <vPortExitCritical+0x2c>)
  40032c:	4798      	blx	r3
  40032e:	e7f1      	b.n	400314 <vPortExitCritical+0x8>
  400330:	20000000 	.word	0x20000000
  400334:	004026dc 	.word	0x004026dc
  400338:	00402349 	.word	0x00402349
  40033c:	00000000 	.word	0x00000000

00400340 <PendSV_Handler>:
	__asm volatile
  400340:	f3ef 8009 	mrs	r0, PSP
  400344:	f3bf 8f6f 	isb	sy
  400348:	4b15      	ldr	r3, [pc, #84]	; (4003a0 <pxCurrentTCBConst>)
  40034a:	681a      	ldr	r2, [r3, #0]
  40034c:	f01e 0f10 	tst.w	lr, #16
  400350:	bf08      	it	eq
  400352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40035a:	6010      	str	r0, [r2, #0]
  40035c:	e92d 0009 	stmdb	sp!, {r0, r3}
  400360:	f04f 0050 	mov.w	r0, #80	; 0x50
  400364:	f380 8811 	msr	BASEPRI, r0
  400368:	f3bf 8f4f 	dsb	sy
  40036c:	f3bf 8f6f 	isb	sy
  400370:	f001 f970 	bl	401654 <vTaskSwitchContext>
  400374:	f04f 0000 	mov.w	r0, #0
  400378:	f380 8811 	msr	BASEPRI, r0
  40037c:	bc09      	pop	{r0, r3}
  40037e:	6819      	ldr	r1, [r3, #0]
  400380:	6808      	ldr	r0, [r1, #0]
  400382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400386:	f01e 0f10 	tst.w	lr, #16
  40038a:	bf08      	it	eq
  40038c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400390:	f380 8809 	msr	PSP, r0
  400394:	f3bf 8f6f 	isb	sy
  400398:	4770      	bx	lr
  40039a:	bf00      	nop
  40039c:	f3af 8000 	nop.w

004003a0 <pxCurrentTCBConst>:
  4003a0:	20000478 	.word	0x20000478

004003a4 <SysTick_Handler>:
{
  4003a4:	b508      	push	{r3, lr}
	__asm volatile
  4003a6:	f04f 0350 	mov.w	r3, #80	; 0x50
  4003aa:	f383 8811 	msr	BASEPRI, r3
  4003ae:	f3bf 8f6f 	isb	sy
  4003b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
  4003b6:	4b05      	ldr	r3, [pc, #20]	; (4003cc <SysTick_Handler+0x28>)
  4003b8:	4798      	blx	r3
  4003ba:	b118      	cbz	r0, 4003c4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4003bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4003c0:	4b03      	ldr	r3, [pc, #12]	; (4003d0 <SysTick_Handler+0x2c>)
  4003c2:	601a      	str	r2, [r3, #0]
	__asm volatile
  4003c4:	2300      	movs	r3, #0
  4003c6:	f383 8811 	msr	BASEPRI, r3
  4003ca:	bd08      	pop	{r3, pc}
  4003cc:	004013a5 	.word	0x004013a5
  4003d0:	e000ed04 	.word	0xe000ed04

004003d4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  4003d4:	4a08      	ldr	r2, [pc, #32]	; (4003f8 <vPortSetupTimerInterrupt+0x24>)
  4003d6:	2300      	movs	r3, #0
  4003d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  4003da:	4908      	ldr	r1, [pc, #32]	; (4003fc <vPortSetupTimerInterrupt+0x28>)
  4003dc:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4003de:	4b08      	ldr	r3, [pc, #32]	; (400400 <vPortSetupTimerInterrupt+0x2c>)
  4003e0:	681b      	ldr	r3, [r3, #0]
  4003e2:	4908      	ldr	r1, [pc, #32]	; (400404 <vPortSetupTimerInterrupt+0x30>)
  4003e4:	fba1 1303 	umull	r1, r3, r1, r3
  4003e8:	099b      	lsrs	r3, r3, #6
  4003ea:	3b01      	subs	r3, #1
  4003ec:	4906      	ldr	r1, [pc, #24]	; (400408 <vPortSetupTimerInterrupt+0x34>)
  4003ee:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4003f0:	2307      	movs	r3, #7
  4003f2:	6013      	str	r3, [r2, #0]
  4003f4:	4770      	bx	lr
  4003f6:	bf00      	nop
  4003f8:	e000e010 	.word	0xe000e010
  4003fc:	e000e018 	.word	0xe000e018
  400400:	20000008 	.word	0x20000008
  400404:	10624dd3 	.word	0x10624dd3
  400408:	e000e014 	.word	0xe000e014

0040040c <xPortStartScheduler>:
{
  40040c:	b510      	push	{r4, lr}
  40040e:	b082      	sub	sp, #8
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  400410:	4b36      	ldr	r3, [pc, #216]	; (4004ec <xPortStartScheduler+0xe0>)
  400412:	681a      	ldr	r2, [r3, #0]
  400414:	4b36      	ldr	r3, [pc, #216]	; (4004f0 <xPortStartScheduler+0xe4>)
  400416:	429a      	cmp	r2, r3
  400418:	d01e      	beq.n	400458 <xPortStartScheduler+0x4c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  40041a:	4b34      	ldr	r3, [pc, #208]	; (4004ec <xPortStartScheduler+0xe0>)
  40041c:	681a      	ldr	r2, [r3, #0]
  40041e:	4b35      	ldr	r3, [pc, #212]	; (4004f4 <xPortStartScheduler+0xe8>)
  400420:	429a      	cmp	r2, r3
  400422:	d01f      	beq.n	400464 <xPortStartScheduler+0x58>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400424:	4b34      	ldr	r3, [pc, #208]	; (4004f8 <xPortStartScheduler+0xec>)
  400426:	781a      	ldrb	r2, [r3, #0]
  400428:	b2d2      	uxtb	r2, r2
  40042a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40042c:	22ff      	movs	r2, #255	; 0xff
  40042e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400430:	781b      	ldrb	r3, [r3, #0]
  400432:	b2db      	uxtb	r3, r3
  400434:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400438:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40043c:	f003 0350 	and.w	r3, r3, #80	; 0x50
  400440:	4a2e      	ldr	r2, [pc, #184]	; (4004fc <xPortStartScheduler+0xf0>)
  400442:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400444:	2207      	movs	r2, #7
  400446:	4b2e      	ldr	r3, [pc, #184]	; (400500 <xPortStartScheduler+0xf4>)
  400448:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40044a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40044e:	f013 0f80 	tst.w	r3, #128	; 0x80
  400452:	d01e      	beq.n	400492 <xPortStartScheduler+0x86>
  400454:	2206      	movs	r2, #6
  400456:	e00c      	b.n	400472 <xPortStartScheduler+0x66>
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
  400458:	f44f 7194 	mov.w	r1, #296	; 0x128
  40045c:	4829      	ldr	r0, [pc, #164]	; (400504 <xPortStartScheduler+0xf8>)
  40045e:	4b2a      	ldr	r3, [pc, #168]	; (400508 <xPortStartScheduler+0xfc>)
  400460:	4798      	blx	r3
  400462:	e7da      	b.n	40041a <xPortStartScheduler+0xe>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
  400464:	f240 1129 	movw	r1, #297	; 0x129
  400468:	4826      	ldr	r0, [pc, #152]	; (400504 <xPortStartScheduler+0xf8>)
  40046a:	4b27      	ldr	r3, [pc, #156]	; (400508 <xPortStartScheduler+0xfc>)
  40046c:	4798      	blx	r3
  40046e:	e7d9      	b.n	400424 <xPortStartScheduler+0x18>
  400470:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400472:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400476:	005b      	lsls	r3, r3, #1
  400478:	b2db      	uxtb	r3, r3
  40047a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40047e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400482:	1e51      	subs	r1, r2, #1
  400484:	f013 0f80 	tst.w	r3, #128	; 0x80
  400488:	d1f2      	bne.n	400470 <xPortStartScheduler+0x64>
  40048a:	4b1d      	ldr	r3, [pc, #116]	; (400500 <xPortStartScheduler+0xf4>)
  40048c:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
  40048e:	2a03      	cmp	r2, #3
  400490:	d004      	beq.n	40049c <xPortStartScheduler+0x90>
  400492:	f44f 71ad 	mov.w	r1, #346	; 0x15a
  400496:	481b      	ldr	r0, [pc, #108]	; (400504 <xPortStartScheduler+0xf8>)
  400498:	4b1b      	ldr	r3, [pc, #108]	; (400508 <xPortStartScheduler+0xfc>)
  40049a:	4798      	blx	r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40049c:	4a18      	ldr	r2, [pc, #96]	; (400500 <xPortStartScheduler+0xf4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  40049e:	6813      	ldr	r3, [r2, #0]
  4004a0:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4004a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4004a6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4004a8:	9b01      	ldr	r3, [sp, #4]
  4004aa:	b2db      	uxtb	r3, r3
  4004ac:	4a12      	ldr	r2, [pc, #72]	; (4004f8 <xPortStartScheduler+0xec>)
  4004ae:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4004b0:	4b16      	ldr	r3, [pc, #88]	; (40050c <xPortStartScheduler+0x100>)
  4004b2:	681a      	ldr	r2, [r3, #0]
  4004b4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
  4004b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4004ba:	681a      	ldr	r2, [r3, #0]
  4004bc:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
  4004c0:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4004c2:	4b13      	ldr	r3, [pc, #76]	; (400510 <xPortStartScheduler+0x104>)
  4004c4:	4798      	blx	r3
	uxCriticalNesting = 0;
  4004c6:	2400      	movs	r4, #0
  4004c8:	4b12      	ldr	r3, [pc, #72]	; (400514 <xPortStartScheduler+0x108>)
  4004ca:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  4004cc:	4b12      	ldr	r3, [pc, #72]	; (400518 <xPortStartScheduler+0x10c>)
  4004ce:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4004d0:	4a12      	ldr	r2, [pc, #72]	; (40051c <xPortStartScheduler+0x110>)
  4004d2:	6813      	ldr	r3, [r2, #0]
  4004d4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4004d8:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4004da:	4b11      	ldr	r3, [pc, #68]	; (400520 <xPortStartScheduler+0x114>)
  4004dc:	4798      	blx	r3
	vTaskSwitchContext();
  4004de:	4b11      	ldr	r3, [pc, #68]	; (400524 <xPortStartScheduler+0x118>)
  4004e0:	4798      	blx	r3
	prvTaskExitError();
  4004e2:	4b11      	ldr	r3, [pc, #68]	; (400528 <xPortStartScheduler+0x11c>)
  4004e4:	4798      	blx	r3
}
  4004e6:	4620      	mov	r0, r4
  4004e8:	b002      	add	sp, #8
  4004ea:	bd10      	pop	{r4, pc}
  4004ec:	e000ed00 	.word	0xe000ed00
  4004f0:	410fc271 	.word	0x410fc271
  4004f4:	410fc270 	.word	0x410fc270
  4004f8:	e000e400 	.word	0xe000e400
  4004fc:	20000458 	.word	0x20000458
  400500:	2000045c 	.word	0x2000045c
  400504:	004026dc 	.word	0x004026dc
  400508:	00402349 	.word	0x00402349
  40050c:	e000ed20 	.word	0xe000ed20
  400510:	004003d5 	.word	0x004003d5
  400514:	20000000 	.word	0x20000000
  400518:	0040021d 	.word	0x0040021d
  40051c:	e000ef34 	.word	0xe000ef34
  400520:	004001f5 	.word	0x004001f5
  400524:	00401655 	.word	0x00401655
  400528:	00400231 	.word	0x00400231

0040052c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
  40052c:	b508      	push	{r3, lr}
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
  40052e:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400532:	2b0f      	cmp	r3, #15
  400534:	d906      	bls.n	400544 <vPortValidateInterruptPriority+0x18>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400536:	4a0e      	ldr	r2, [pc, #56]	; (400570 <vPortValidateInterruptPriority+0x44>)
  400538:	5c9b      	ldrb	r3, [r3, r2]
  40053a:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40053c:	4a0d      	ldr	r2, [pc, #52]	; (400574 <vPortValidateInterruptPriority+0x48>)
  40053e:	7812      	ldrb	r2, [r2, #0]
  400540:	429a      	cmp	r2, r3
  400542:	d808      	bhi.n	400556 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400544:	4b0c      	ldr	r3, [pc, #48]	; (400578 <vPortValidateInterruptPriority+0x4c>)
  400546:	681b      	ldr	r3, [r3, #0]
  400548:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40054c:	4a0b      	ldr	r2, [pc, #44]	; (40057c <vPortValidateInterruptPriority+0x50>)
  40054e:	6812      	ldr	r2, [r2, #0]
  400550:	4293      	cmp	r3, r2
  400552:	d806      	bhi.n	400562 <vPortValidateInterruptPriority+0x36>
  400554:	bd08      	pop	{r3, pc}
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400556:	f240 21f2 	movw	r1, #754	; 0x2f2
  40055a:	4809      	ldr	r0, [pc, #36]	; (400580 <vPortValidateInterruptPriority+0x54>)
  40055c:	4b09      	ldr	r3, [pc, #36]	; (400584 <vPortValidateInterruptPriority+0x58>)
  40055e:	4798      	blx	r3
  400560:	e7f0      	b.n	400544 <vPortValidateInterruptPriority+0x18>
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400562:	f240 3102 	movw	r1, #770	; 0x302
  400566:	4806      	ldr	r0, [pc, #24]	; (400580 <vPortValidateInterruptPriority+0x54>)
  400568:	4b06      	ldr	r3, [pc, #24]	; (400584 <vPortValidateInterruptPriority+0x58>)
  40056a:	4798      	blx	r3
	}
  40056c:	e7f2      	b.n	400554 <vPortValidateInterruptPriority+0x28>
  40056e:	bf00      	nop
  400570:	e000e3f0 	.word	0xe000e3f0
  400574:	20000458 	.word	0x20000458
  400578:	e000ed0c 	.word	0xe000ed0c
  40057c:	2000045c 	.word	0x2000045c
  400580:	004026dc 	.word	0x004026dc
  400584:	00402349 	.word	0x00402349

00400588 <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
  400588:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  40058a:	4a13      	ldr	r2, [pc, #76]	; (4005d8 <prvInsertBlockIntoFreeList+0x50>)
  40058c:	e000      	b.n	400590 <prvInsertBlockIntoFreeList+0x8>
  40058e:	461a      	mov	r2, r3
  400590:	6813      	ldr	r3, [r2, #0]
  400592:	4283      	cmp	r3, r0
  400594:	d3fb      	bcc.n	40058e <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
  400596:	6851      	ldr	r1, [r2, #4]
  400598:	1854      	adds	r4, r2, r1
  40059a:	42a0      	cmp	r0, r4
  40059c:	d00a      	beq.n	4005b4 <prvInsertBlockIntoFreeList+0x2c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
  40059e:	6841      	ldr	r1, [r0, #4]
  4005a0:	1844      	adds	r4, r0, r1
  4005a2:	42a3      	cmp	r3, r4
  4005a4:	d00b      	beq.n	4005be <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
  4005a6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  4005a8:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  4005aa:	bf18      	it	ne
  4005ac:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
  4005ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  4005b2:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  4005b4:	6840      	ldr	r0, [r0, #4]
  4005b6:	4401      	add	r1, r0
  4005b8:	6051      	str	r1, [r2, #4]
  4005ba:	4610      	mov	r0, r2
  4005bc:	e7ef      	b.n	40059e <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
  4005be:	4c07      	ldr	r4, [pc, #28]	; (4005dc <prvInsertBlockIntoFreeList+0x54>)
  4005c0:	6824      	ldr	r4, [r4, #0]
  4005c2:	42a3      	cmp	r3, r4
  4005c4:	d006      	beq.n	4005d4 <prvInsertBlockIntoFreeList+0x4c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4005c6:	685b      	ldr	r3, [r3, #4]
  4005c8:	4419      	add	r1, r3
  4005ca:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4005cc:	6813      	ldr	r3, [r2, #0]
  4005ce:	681b      	ldr	r3, [r3, #0]
  4005d0:	6003      	str	r3, [r0, #0]
  4005d2:	e7e9      	b.n	4005a8 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  4005d4:	6003      	str	r3, [r0, #0]
  4005d6:	e7e7      	b.n	4005a8 <prvInsertBlockIntoFreeList+0x20>
  4005d8:	20000470 	.word	0x20000470
  4005dc:	20000460 	.word	0x20000460

004005e0 <pvPortMalloc>:
{
  4005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4005e2:	4604      	mov	r4, r0
	configASSERT( pxEnd );
  4005e4:	4b2b      	ldr	r3, [pc, #172]	; (400694 <pvPortMalloc+0xb4>)
  4005e6:	681b      	ldr	r3, [r3, #0]
  4005e8:	b1c3      	cbz	r3, 40061c <pvPortMalloc+0x3c>
	vTaskSuspendAll();
  4005ea:	4b2b      	ldr	r3, [pc, #172]	; (400698 <pvPortMalloc+0xb8>)
  4005ec:	4798      	blx	r3
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
  4005ee:	4b2b      	ldr	r3, [pc, #172]	; (40069c <pvPortMalloc+0xbc>)
  4005f0:	681d      	ldr	r5, [r3, #0]
  4005f2:	4225      	tst	r5, r4
  4005f4:	d144      	bne.n	400680 <pvPortMalloc+0xa0>
			if( xWantedSize > 0 )
  4005f6:	2c00      	cmp	r4, #0
  4005f8:	d045      	beq.n	400686 <pvPortMalloc+0xa6>
				xWantedSize += xHeapStructSize;
  4005fa:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
  4005fe:	f012 0f07 	tst.w	r2, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400602:	bf1c      	itt	ne
  400604:	f022 0207 	bicne.w	r2, r2, #7
  400608:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
  40060a:	2a00      	cmp	r2, #0
  40060c:	d038      	beq.n	400680 <pvPortMalloc+0xa0>
  40060e:	4b24      	ldr	r3, [pc, #144]	; (4006a0 <pvPortMalloc+0xc0>)
  400610:	681e      	ldr	r6, [r3, #0]
  400612:	42b2      	cmp	r2, r6
  400614:	d834      	bhi.n	400680 <pvPortMalloc+0xa0>
				pxBlock = xStart.pxNextFreeBlock;
  400616:	4923      	ldr	r1, [pc, #140]	; (4006a4 <pvPortMalloc+0xc4>)
  400618:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40061a:	e006      	b.n	40062a <pvPortMalloc+0x4a>
	configASSERT( pxEnd );
  40061c:	218b      	movs	r1, #139	; 0x8b
  40061e:	4822      	ldr	r0, [pc, #136]	; (4006a8 <pvPortMalloc+0xc8>)
  400620:	4b22      	ldr	r3, [pc, #136]	; (4006ac <pvPortMalloc+0xcc>)
  400622:	4798      	blx	r3
  400624:	e7e1      	b.n	4005ea <pvPortMalloc+0xa>
  400626:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
  400628:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  40062a:	6863      	ldr	r3, [r4, #4]
  40062c:	429a      	cmp	r2, r3
  40062e:	d902      	bls.n	400636 <pvPortMalloc+0x56>
  400630:	6823      	ldr	r3, [r4, #0]
  400632:	2b00      	cmp	r3, #0
  400634:	d1f7      	bne.n	400626 <pvPortMalloc+0x46>
				if( pxBlock != pxEnd )
  400636:	4b17      	ldr	r3, [pc, #92]	; (400694 <pvPortMalloc+0xb4>)
  400638:	681b      	ldr	r3, [r3, #0]
  40063a:	429c      	cmp	r4, r3
  40063c:	d020      	beq.n	400680 <pvPortMalloc+0xa0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
  40063e:	680f      	ldr	r7, [r1, #0]
  400640:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  400642:	6823      	ldr	r3, [r4, #0]
  400644:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  400646:	6863      	ldr	r3, [r4, #4]
  400648:	1a9b      	subs	r3, r3, r2
  40064a:	2b10      	cmp	r3, #16
  40064c:	d812      	bhi.n	400674 <pvPortMalloc+0x94>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
  40064e:	6862      	ldr	r2, [r4, #4]
  400650:	1ab6      	subs	r6, r6, r2
  400652:	4913      	ldr	r1, [pc, #76]	; (4006a0 <pvPortMalloc+0xc0>)
  400654:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
  400656:	4916      	ldr	r1, [pc, #88]	; (4006b0 <pvPortMalloc+0xd0>)
  400658:	6809      	ldr	r1, [r1, #0]
  40065a:	428e      	cmp	r6, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
  40065c:	bf3c      	itt	cc
  40065e:	4914      	ldrcc	r1, [pc, #80]	; (4006b0 <pvPortMalloc+0xd0>)
  400660:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
  400662:	4315      	orrs	r5, r2
  400664:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
  400666:	2300      	movs	r3, #0
  400668:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
  40066a:	4b12      	ldr	r3, [pc, #72]	; (4006b4 <pvPortMalloc+0xd4>)
  40066c:	4798      	blx	r3
		if( pvReturn == NULL )
  40066e:	b167      	cbz	r7, 40068a <pvPortMalloc+0xaa>
}
  400670:	4638      	mov	r0, r7
  400672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
  400674:	18a0      	adds	r0, r4, r2
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  400676:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
  400678:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  40067a:	4b0f      	ldr	r3, [pc, #60]	; (4006b8 <pvPortMalloc+0xd8>)
  40067c:	4798      	blx	r3
  40067e:	e7e6      	b.n	40064e <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
  400680:	4b0c      	ldr	r3, [pc, #48]	; (4006b4 <pvPortMalloc+0xd4>)
  400682:	4798      	blx	r3
  400684:	e001      	b.n	40068a <pvPortMalloc+0xaa>
  400686:	4b0b      	ldr	r3, [pc, #44]	; (4006b4 <pvPortMalloc+0xd4>)
  400688:	4798      	blx	r3
			vApplicationMallocFailedHook();
  40068a:	4b0c      	ldr	r3, [pc, #48]	; (4006bc <pvPortMalloc+0xdc>)
  40068c:	4798      	blx	r3
  40068e:	2700      	movs	r7, #0
	return pvReturn;
  400690:	e7ee      	b.n	400670 <pvPortMalloc+0x90>
  400692:	bf00      	nop
  400694:	20000460 	.word	0x20000460
  400698:	00401389 	.word	0x00401389
  40069c:	20000464 	.word	0x20000464
  4006a0:	20000468 	.word	0x20000468
  4006a4:	20000470 	.word	0x20000470
  4006a8:	0040270c 	.word	0x0040270c
  4006ac:	00402349 	.word	0x00402349
  4006b0:	2000046c 	.word	0x2000046c
  4006b4:	004014e1 	.word	0x004014e1
  4006b8:	00400589 	.word	0x00400589
  4006bc:	00402375 	.word	0x00402375

004006c0 <vPortFree>:
	if( pv != NULL )
  4006c0:	2800      	cmp	r0, #0
  4006c2:	d040      	beq.n	400746 <vPortFree+0x86>
{
  4006c4:	b510      	push	{r4, lr}
  4006c6:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  4006c8:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4006cc:	4b1e      	ldr	r3, [pc, #120]	; (400748 <vPortFree+0x88>)
  4006ce:	681b      	ldr	r3, [r3, #0]
  4006d0:	421a      	tst	r2, r3
  4006d2:	d011      	beq.n	4006f8 <vPortFree+0x38>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
  4006d4:	f850 3c08 	ldr.w	r3, [r0, #-8]
  4006d8:	b1f3      	cbz	r3, 400718 <vPortFree+0x58>
  4006da:	f44f 7190 	mov.w	r1, #288	; 0x120
  4006de:	481b      	ldr	r0, [pc, #108]	; (40074c <vPortFree+0x8c>)
  4006e0:	4b1b      	ldr	r3, [pc, #108]	; (400750 <vPortFree+0x90>)
  4006e2:	4798      	blx	r3
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
  4006e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4006e8:	4a17      	ldr	r2, [pc, #92]	; (400748 <vPortFree+0x88>)
  4006ea:	6812      	ldr	r2, [r2, #0]
  4006ec:	4213      	tst	r3, r2
  4006ee:	d002      	beq.n	4006f6 <vPortFree+0x36>
			if( pxLink->pxNextFreeBlock == NULL )
  4006f0:	f854 1c08 	ldr.w	r1, [r4, #-8]
  4006f4:	b1a1      	cbz	r1, 400720 <vPortFree+0x60>
  4006f6:	bd10      	pop	{r4, pc}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
  4006f8:	f240 111f 	movw	r1, #287	; 0x11f
  4006fc:	4813      	ldr	r0, [pc, #76]	; (40074c <vPortFree+0x8c>)
  4006fe:	4b14      	ldr	r3, [pc, #80]	; (400750 <vPortFree+0x90>)
  400700:	4798      	blx	r3
		configASSERT( pxLink->pxNextFreeBlock == NULL );
  400702:	f854 3c08 	ldr.w	r3, [r4, #-8]
  400706:	2b00      	cmp	r3, #0
  400708:	d1e7      	bne.n	4006da <vPortFree+0x1a>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
  40070a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40070e:	4a0e      	ldr	r2, [pc, #56]	; (400748 <vPortFree+0x88>)
  400710:	6812      	ldr	r2, [r2, #0]
  400712:	4213      	tst	r3, r2
  400714:	d0ef      	beq.n	4006f6 <vPortFree+0x36>
  400716:	e003      	b.n	400720 <vPortFree+0x60>
  400718:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40071c:	4a0a      	ldr	r2, [pc, #40]	; (400748 <vPortFree+0x88>)
  40071e:	6812      	ldr	r2, [r2, #0]
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
  400720:	ea23 0302 	bic.w	r3, r3, r2
  400724:	f844 3c04 	str.w	r3, [r4, #-4]
				vTaskSuspendAll();
  400728:	4b0a      	ldr	r3, [pc, #40]	; (400754 <vPortFree+0x94>)
  40072a:	4798      	blx	r3
					xFreeBytesRemaining += pxLink->xBlockSize;
  40072c:	4a0a      	ldr	r2, [pc, #40]	; (400758 <vPortFree+0x98>)
  40072e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  400732:	6811      	ldr	r1, [r2, #0]
  400734:	440b      	add	r3, r1
  400736:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
  400738:	f1a4 0008 	sub.w	r0, r4, #8
  40073c:	4b07      	ldr	r3, [pc, #28]	; (40075c <vPortFree+0x9c>)
  40073e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400740:	4b07      	ldr	r3, [pc, #28]	; (400760 <vPortFree+0xa0>)
  400742:	4798      	blx	r3
}
  400744:	bd10      	pop	{r4, pc}
  400746:	4770      	bx	lr
  400748:	20000464 	.word	0x20000464
  40074c:	0040270c 	.word	0x0040270c
  400750:	00402349 	.word	0x00402349
  400754:	00401389 	.word	0x00401389
  400758:	20000468 	.word	0x20000468
  40075c:	00400589 	.word	0x00400589
  400760:	004014e1 	.word	0x004014e1

00400764 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
  400764:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400768:	4605      	mov	r5, r0
BaseType_t xDefinedRegions = 0;
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
  40076a:	4b35      	ldr	r3, [pc, #212]	; (400840 <vPortDefineHeapRegions+0xdc>)
  40076c:	681b      	ldr	r3, [r3, #0]
  40076e:	b123      	cbz	r3, 40077a <vPortDefineHeapRegions+0x16>
  400770:	f240 1193 	movw	r1, #403	; 0x193
  400774:	4833      	ldr	r0, [pc, #204]	; (400844 <vPortDefineHeapRegions+0xe0>)
  400776:	4b34      	ldr	r3, [pc, #208]	; (400848 <vPortDefineHeapRegions+0xe4>)
  400778:	4798      	blx	r3

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );

	while( pxHeapRegion->xSizeInBytes > 0 )
  40077a:	f8d5 b004 	ldr.w	fp, [r5, #4]
  40077e:	f1bb 0f00 	cmp.w	fp, #0
  400782:	d052      	beq.n	40082a <vPortDefineHeapRegions+0xc6>
  400784:	3508      	adds	r5, #8
  400786:	2600      	movs	r6, #0
  400788:	46b0      	mov	r8, r6
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
  40078a:	4f2d      	ldr	r7, [pc, #180]	; (400840 <vPortDefineHeapRegions+0xdc>)

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
  40078c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 400844 <vPortDefineHeapRegions+0xe0>
  400790:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 400848 <vPortDefineHeapRegions+0xe4>
  400794:	e01d      	b.n	4007d2 <vPortDefineHeapRegions+0x6e>
			configASSERT( pxEnd != NULL );
  400796:	683b      	ldr	r3, [r7, #0]
  400798:	b373      	cbz	r3, 4007f8 <vPortDefineHeapRegions+0x94>
			configASSERT( xAddress > ( size_t ) pxEnd );
  40079a:	683b      	ldr	r3, [r7, #0]
  40079c:	42a3      	cmp	r3, r4
  40079e:	d230      	bcs.n	400802 <vPortDefineHeapRegions+0x9e>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
  4007a0:	6839      	ldr	r1, [r7, #0]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
  4007a2:	eb0b 0304 	add.w	r3, fp, r4
		xAddress -= xHeapStructSize;
  4007a6:	3b08      	subs	r3, #8
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
  4007a8:	f023 0307 	bic.w	r3, r3, #7
		pxEnd = ( BlockLink_t * ) xAddress;
  4007ac:	603b      	str	r3, [r7, #0]
		pxEnd->xBlockSize = 0;
  4007ae:	2200      	movs	r2, #0
  4007b0:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
  4007b2:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
  4007b4:	4622      	mov	r2, r4
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
  4007b6:	1b18      	subs	r0, r3, r4
  4007b8:	6060      	str	r0, [r4, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
  4007ba:	6023      	str	r3, [r4, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
  4007bc:	b101      	cbz	r1, 4007c0 <vPortDefineHeapRegions+0x5c>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
  4007be:	600c      	str	r4, [r1, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
  4007c0:	6853      	ldr	r3, [r2, #4]
  4007c2:	4498      	add	r8, r3

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
  4007c4:	3601      	adds	r6, #1
  4007c6:	3508      	adds	r5, #8
	while( pxHeapRegion->xSizeInBytes > 0 )
  4007c8:	f855 bc04 	ldr.w	fp, [r5, #-4]
  4007cc:	f1bb 0f00 	cmp.w	fp, #0
  4007d0:	d01c      	beq.n	40080c <vPortDefineHeapRegions+0xa8>
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
  4007d2:	f855 4c08 	ldr.w	r4, [r5, #-8]
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  4007d6:	f014 0f07 	tst.w	r4, #7
  4007da:	d006      	beq.n	4007ea <vPortDefineHeapRegions+0x86>
			xAddress += ( portBYTE_ALIGNMENT - 1 );
  4007dc:	1de2      	adds	r2, r4, #7
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
  4007de:	f022 0207 	bic.w	r2, r2, #7
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
  4007e2:	44a3      	add	fp, r4
  4007e4:	ebab 0b02 	sub.w	fp, fp, r2
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
  4007e8:	4614      	mov	r4, r2
		if( xDefinedRegions == 0 )
  4007ea:	2e00      	cmp	r6, #0
  4007ec:	d1d3      	bne.n	400796 <vPortDefineHeapRegions+0x32>
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
  4007ee:	4b17      	ldr	r3, [pc, #92]	; (40084c <vPortDefineHeapRegions+0xe8>)
  4007f0:	601c      	str	r4, [r3, #0]
			xStart.xBlockSize = ( size_t ) 0;
  4007f2:	2200      	movs	r2, #0
  4007f4:	605a      	str	r2, [r3, #4]
  4007f6:	e7d3      	b.n	4007a0 <vPortDefineHeapRegions+0x3c>
			configASSERT( pxEnd != NULL );
  4007f8:	f44f 71da 	mov.w	r1, #436	; 0x1b4
  4007fc:	4650      	mov	r0, sl
  4007fe:	47c8      	blx	r9
  400800:	e7cb      	b.n	40079a <vPortDefineHeapRegions+0x36>
			configASSERT( xAddress > ( size_t ) pxEnd );
  400802:	f240 11b7 	movw	r1, #439	; 0x1b7
  400806:	4650      	mov	r0, sl
  400808:	47c8      	blx	r9
  40080a:	e7c9      	b.n	4007a0 <vPortDefineHeapRegions+0x3c>
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
  40080c:	4b10      	ldr	r3, [pc, #64]	; (400850 <vPortDefineHeapRegions+0xec>)
  40080e:	f8c3 8000 	str.w	r8, [r3]
	xFreeBytesRemaining = xTotalHeapSize;
  400812:	4b10      	ldr	r3, [pc, #64]	; (400854 <vPortDefineHeapRegions+0xf0>)
  400814:	f8c3 8000 	str.w	r8, [r3]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
  400818:	f1b8 0f00 	cmp.w	r8, #0
  40081c:	d00a      	beq.n	400834 <vPortDefineHeapRegions+0xd0>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
  40081e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400822:	4b0d      	ldr	r3, [pc, #52]	; (400858 <vPortDefineHeapRegions+0xf4>)
  400824:	601a      	str	r2, [r3, #0]
}
  400826:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
  40082a:	2300      	movs	r3, #0
  40082c:	4a08      	ldr	r2, [pc, #32]	; (400850 <vPortDefineHeapRegions+0xec>)
  40082e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
  400830:	4a08      	ldr	r2, [pc, #32]	; (400854 <vPortDefineHeapRegions+0xf0>)
  400832:	6013      	str	r3, [r2, #0]
	configASSERT( xTotalHeapSize );
  400834:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  400838:	4802      	ldr	r0, [pc, #8]	; (400844 <vPortDefineHeapRegions+0xe0>)
  40083a:	4b03      	ldr	r3, [pc, #12]	; (400848 <vPortDefineHeapRegions+0xe4>)
  40083c:	4798      	blx	r3
  40083e:	e7ee      	b.n	40081e <vPortDefineHeapRegions+0xba>
  400840:	20000460 	.word	0x20000460
  400844:	0040270c 	.word	0x0040270c
  400848:	00402349 	.word	0x00402349
  40084c:	20000470 	.word	0x20000470
  400850:	2000046c 	.word	0x2000046c
  400854:	20000468 	.word	0x20000468
  400858:	20000464 	.word	0x20000464

0040085c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
  40085c:	b510      	push	{r4, lr}
  40085e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  400860:	4b04      	ldr	r3, [pc, #16]	; (400874 <prvIsQueueEmpty+0x18>)
  400862:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  400864:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  400866:	4b04      	ldr	r3, [pc, #16]	; (400878 <prvIsQueueEmpty+0x1c>)
  400868:	4798      	blx	r3

	return xReturn;
}
  40086a:	fab4 f084 	clz	r0, r4
  40086e:	0940      	lsrs	r0, r0, #5
  400870:	bd10      	pop	{r4, pc}
  400872:	bf00      	nop
  400874:	004002c5 	.word	0x004002c5
  400878:	0040030d 	.word	0x0040030d

0040087c <prvCopyDataToQueue>:
{
  40087c:	b570      	push	{r4, r5, r6, lr}
  40087e:	4604      	mov	r4, r0
  400880:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400882:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400884:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400886:	b95a      	cbnz	r2, 4008a0 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400888:	6803      	ldr	r3, [r0, #0]
BaseType_t xReturn = pdFALSE;
  40088a:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40088c:	b113      	cbz	r3, 400894 <prvCopyDataToQueue+0x18>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  40088e:	3501      	adds	r5, #1
  400890:	63a5      	str	r5, [r4, #56]	; 0x38
}
  400892:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
  400894:	68a0      	ldr	r0, [r4, #8]
  400896:	4b17      	ldr	r3, [pc, #92]	; (4008f4 <prvCopyDataToQueue+0x78>)
  400898:	4798      	blx	r3
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
  40089a:	2300      	movs	r3, #0
  40089c:	60a3      	str	r3, [r4, #8]
  40089e:	e7f6      	b.n	40088e <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
  4008a0:	b96e      	cbnz	r6, 4008be <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  4008a2:	6840      	ldr	r0, [r0, #4]
  4008a4:	4b14      	ldr	r3, [pc, #80]	; (4008f8 <prvCopyDataToQueue+0x7c>)
  4008a6:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  4008a8:	6863      	ldr	r3, [r4, #4]
  4008aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4008ac:	4413      	add	r3, r2
  4008ae:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4008b0:	68a2      	ldr	r2, [r4, #8]
  4008b2:	4293      	cmp	r3, r2
  4008b4:	d319      	bcc.n	4008ea <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4008b6:	6823      	ldr	r3, [r4, #0]
  4008b8:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
  4008ba:	2000      	movs	r0, #0
  4008bc:	e7e7      	b.n	40088e <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
  4008be:	68c0      	ldr	r0, [r0, #12]
  4008c0:	4b0d      	ldr	r3, [pc, #52]	; (4008f8 <prvCopyDataToQueue+0x7c>)
  4008c2:	4798      	blx	r3
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
  4008c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4008c6:	4252      	negs	r2, r2
  4008c8:	68e3      	ldr	r3, [r4, #12]
  4008ca:	4413      	add	r3, r2
  4008cc:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4008ce:	6821      	ldr	r1, [r4, #0]
  4008d0:	428b      	cmp	r3, r1
  4008d2:	d202      	bcs.n	4008da <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
  4008d4:	68a3      	ldr	r3, [r4, #8]
  4008d6:	441a      	add	r2, r3
  4008d8:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4008da:	2e02      	cmp	r6, #2
  4008dc:	d001      	beq.n	4008e2 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
  4008de:	2000      	movs	r0, #0
  4008e0:	e7d5      	b.n	40088e <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  4008e2:	b125      	cbz	r5, 4008ee <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
  4008e4:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  4008e6:	2000      	movs	r0, #0
  4008e8:	e7d1      	b.n	40088e <prvCopyDataToQueue+0x12>
  4008ea:	2000      	movs	r0, #0
  4008ec:	e7cf      	b.n	40088e <prvCopyDataToQueue+0x12>
  4008ee:	2000      	movs	r0, #0
  4008f0:	e7cd      	b.n	40088e <prvCopyDataToQueue+0x12>
  4008f2:	bf00      	nop
  4008f4:	00401905 	.word	0x00401905
  4008f8:	004023ed 	.word	0x004023ed

004008fc <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4008fc:	b570      	push	{r4, r5, r6, lr}
  4008fe:	b082      	sub	sp, #8
  400900:	9001      	str	r0, [sp, #4]
  400902:	460e      	mov	r6, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400904:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400906:	b15c      	cbz	r4, 400920 <prvNotifyQueueSetContainer+0x24>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400908:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40090a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40090c:	429a      	cmp	r2, r3
  40090e:	d20d      	bcs.n	40092c <prvNotifyQueueSetContainer+0x30>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400910:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400912:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400914:	429a      	cmp	r2, r3
  400916:	d30f      	bcc.n	400938 <prvNotifyQueueSetContainer+0x3c>
	BaseType_t xReturn = pdFALSE;
  400918:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40091a:	4630      	mov	r0, r6
  40091c:	b002      	add	sp, #8
  40091e:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxQueueSetContainer );
  400920:	f640 3145 	movw	r1, #2885	; 0xb45
  400924:	4812      	ldr	r0, [pc, #72]	; (400970 <prvNotifyQueueSetContainer+0x74>)
  400926:	4b13      	ldr	r3, [pc, #76]	; (400974 <prvNotifyQueueSetContainer+0x78>)
  400928:	4798      	blx	r3
  40092a:	e7ed      	b.n	400908 <prvNotifyQueueSetContainer+0xc>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40092c:	f640 3146 	movw	r1, #2886	; 0xb46
  400930:	480f      	ldr	r0, [pc, #60]	; (400970 <prvNotifyQueueSetContainer+0x74>)
  400932:	4b10      	ldr	r3, [pc, #64]	; (400974 <prvNotifyQueueSetContainer+0x78>)
  400934:	4798      	blx	r3
  400936:	e7eb      	b.n	400910 <prvNotifyQueueSetContainer+0x14>
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  400938:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  40093c:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40093e:	4632      	mov	r2, r6
  400940:	a901      	add	r1, sp, #4
  400942:	4620      	mov	r0, r4
  400944:	4b0c      	ldr	r3, [pc, #48]	; (400978 <prvNotifyQueueSetContainer+0x7c>)
  400946:	4798      	blx	r3
  400948:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
  40094a:	f1b5 3fff 	cmp.w	r5, #4294967295
  40094e:	d004      	beq.n	40095a <prvNotifyQueueSetContainer+0x5e>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  400950:	3501      	adds	r5, #1
  400952:	b26d      	sxtb	r5, r5
  400954:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  400958:	e7df      	b.n	40091a <prvNotifyQueueSetContainer+0x1e>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  40095a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40095c:	2b00      	cmp	r3, #0
  40095e:	d0dc      	beq.n	40091a <prvNotifyQueueSetContainer+0x1e>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400960:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400964:	4b05      	ldr	r3, [pc, #20]	; (40097c <prvNotifyQueueSetContainer+0x80>)
  400966:	4798      	blx	r3
  400968:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  40096a:	bf18      	it	ne
  40096c:	2601      	movne	r6, #1
  40096e:	e7d4      	b.n	40091a <prvNotifyQueueSetContainer+0x1e>
  400970:	00402738 	.word	0x00402738
  400974:	00402349 	.word	0x00402349
  400978:	0040087d 	.word	0x0040087d
  40097c:	004017ad 	.word	0x004017ad

00400980 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400980:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400982:	b172      	cbz	r2, 4009a2 <prvCopyDataFromQueue+0x22>
{
  400984:	b510      	push	{r4, lr}
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
  400986:	68c3      	ldr	r3, [r0, #12]
  400988:	4413      	add	r3, r2
  40098a:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40098c:	6884      	ldr	r4, [r0, #8]
  40098e:	42a3      	cmp	r3, r4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
  400990:	bf24      	itt	cs
  400992:	6803      	ldrcs	r3, [r0, #0]
  400994:	60c3      	strcs	r3, [r0, #12]
  400996:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
  400998:	68c1      	ldr	r1, [r0, #12]
  40099a:	4620      	mov	r0, r4
  40099c:	4b01      	ldr	r3, [pc, #4]	; (4009a4 <prvCopyDataFromQueue+0x24>)
  40099e:	4798      	blx	r3
  4009a0:	bd10      	pop	{r4, pc}
  4009a2:	4770      	bx	lr
  4009a4:	004023ed 	.word	0x004023ed

004009a8 <prvUnlockQueue>:
{
  4009a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009ac:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  4009ae:	4b23      	ldr	r3, [pc, #140]	; (400a3c <prvUnlockQueue+0x94>)
  4009b0:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
  4009b2:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  4009b6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  4009b8:	2c00      	cmp	r4, #0
  4009ba:	dd19      	ble.n	4009f0 <prvUnlockQueue+0x48>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  4009bc:	4e20      	ldr	r6, [pc, #128]	; (400a40 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
  4009be:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400a4c <prvUnlockQueue+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009c2:	4f20      	ldr	r7, [pc, #128]	; (400a44 <prvUnlockQueue+0x9c>)
  4009c4:	e008      	b.n	4009d8 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4009c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  4009c8:	b193      	cbz	r3, 4009f0 <prvUnlockQueue+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009ca:	f105 0024 	add.w	r0, r5, #36	; 0x24
  4009ce:	47b8      	blx	r7
  4009d0:	b960      	cbnz	r0, 4009ec <prvUnlockQueue+0x44>
  4009d2:	3c01      	subs	r4, #1
  4009d4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  4009d6:	b15c      	cbz	r4, 4009f0 <prvUnlockQueue+0x48>
				if( pxQueue->pxQueueSetContainer != NULL )
  4009d8:	6cab      	ldr	r3, [r5, #72]	; 0x48
  4009da:	2b00      	cmp	r3, #0
  4009dc:	d0f3      	beq.n	4009c6 <prvUnlockQueue+0x1e>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  4009de:	2100      	movs	r1, #0
  4009e0:	4628      	mov	r0, r5
  4009e2:	47b0      	blx	r6
  4009e4:	2800      	cmp	r0, #0
  4009e6:	d0f4      	beq.n	4009d2 <prvUnlockQueue+0x2a>
						vTaskMissedYield();
  4009e8:	47c0      	blx	r8
  4009ea:	e7f2      	b.n	4009d2 <prvUnlockQueue+0x2a>
							vTaskMissedYield();
  4009ec:	47c0      	blx	r8
  4009ee:	e7f0      	b.n	4009d2 <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
  4009f0:	23ff      	movs	r3, #255	; 0xff
  4009f2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
  4009f6:	4b14      	ldr	r3, [pc, #80]	; (400a48 <prvUnlockQueue+0xa0>)
  4009f8:	4798      	blx	r3
	taskENTER_CRITICAL();
  4009fa:	4b10      	ldr	r3, [pc, #64]	; (400a3c <prvUnlockQueue+0x94>)
  4009fc:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
  4009fe:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  400a02:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  400a04:	2c00      	cmp	r4, #0
  400a06:	dd12      	ble.n	400a2e <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a08:	692b      	ldr	r3, [r5, #16]
  400a0a:	b183      	cbz	r3, 400a2e <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a0c:	f105 0710 	add.w	r7, r5, #16
  400a10:	4e0c      	ldr	r6, [pc, #48]	; (400a44 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  400a12:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400a4c <prvUnlockQueue+0xa4>
  400a16:	e004      	b.n	400a22 <prvUnlockQueue+0x7a>
  400a18:	3c01      	subs	r4, #1
  400a1a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  400a1c:	b13c      	cbz	r4, 400a2e <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a1e:	692b      	ldr	r3, [r5, #16]
  400a20:	b12b      	cbz	r3, 400a2e <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a22:	4638      	mov	r0, r7
  400a24:	47b0      	blx	r6
  400a26:	2800      	cmp	r0, #0
  400a28:	d0f6      	beq.n	400a18 <prvUnlockQueue+0x70>
					vTaskMissedYield();
  400a2a:	47c0      	blx	r8
  400a2c:	e7f4      	b.n	400a18 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
  400a2e:	23ff      	movs	r3, #255	; 0xff
  400a30:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
  400a34:	4b04      	ldr	r3, [pc, #16]	; (400a48 <prvUnlockQueue+0xa0>)
  400a36:	4798      	blx	r3
  400a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a3c:	004002c5 	.word	0x004002c5
  400a40:	004008fd 	.word	0x004008fd
  400a44:	004017ad 	.word	0x004017ad
  400a48:	0040030d 	.word	0x0040030d
  400a4c:	004018d9 	.word	0x004018d9

00400a50 <xQueueGenericReset>:
{
  400a50:	b538      	push	{r3, r4, r5, lr}
  400a52:	460d      	mov	r5, r1
	configASSERT( pxQueue );
  400a54:	4604      	mov	r4, r0
  400a56:	b1d0      	cbz	r0, 400a8e <xQueueGenericReset+0x3e>
	taskENTER_CRITICAL();
  400a58:	4b1b      	ldr	r3, [pc, #108]	; (400ac8 <xQueueGenericReset+0x78>)
  400a5a:	4798      	blx	r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400a5c:	6822      	ldr	r2, [r4, #0]
  400a5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400a60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400a62:	fb03 f301 	mul.w	r3, r3, r1
  400a66:	18d0      	adds	r0, r2, r3
  400a68:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400a6a:	2000      	movs	r0, #0
  400a6c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400a6e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400a70:	1a5b      	subs	r3, r3, r1
  400a72:	4413      	add	r3, r2
  400a74:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  400a76:	23ff      	movs	r3, #255	; 0xff
  400a78:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  400a7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  400a80:	b9d5      	cbnz	r5, 400ab8 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a82:	6923      	ldr	r3, [r4, #16]
  400a84:	b94b      	cbnz	r3, 400a9a <xQueueGenericReset+0x4a>
	taskEXIT_CRITICAL();
  400a86:	4b11      	ldr	r3, [pc, #68]	; (400acc <xQueueGenericReset+0x7c>)
  400a88:	4798      	blx	r3
}
  400a8a:	2001      	movs	r0, #1
  400a8c:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
  400a8e:	f240 1103 	movw	r1, #259	; 0x103
  400a92:	480f      	ldr	r0, [pc, #60]	; (400ad0 <xQueueGenericReset+0x80>)
  400a94:	4b0f      	ldr	r3, [pc, #60]	; (400ad4 <xQueueGenericReset+0x84>)
  400a96:	4798      	blx	r3
  400a98:	e7de      	b.n	400a58 <xQueueGenericReset+0x8>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a9a:	f104 0010 	add.w	r0, r4, #16
  400a9e:	4b0e      	ldr	r3, [pc, #56]	; (400ad8 <xQueueGenericReset+0x88>)
  400aa0:	4798      	blx	r3
  400aa2:	2800      	cmp	r0, #0
  400aa4:	d0ef      	beq.n	400a86 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
  400aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400aaa:	4b0c      	ldr	r3, [pc, #48]	; (400adc <xQueueGenericReset+0x8c>)
  400aac:	601a      	str	r2, [r3, #0]
  400aae:	f3bf 8f4f 	dsb	sy
  400ab2:	f3bf 8f6f 	isb	sy
  400ab6:	e7e6      	b.n	400a86 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400ab8:	f104 0010 	add.w	r0, r4, #16
  400abc:	4d08      	ldr	r5, [pc, #32]	; (400ae0 <xQueueGenericReset+0x90>)
  400abe:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400ac0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ac4:	47a8      	blx	r5
  400ac6:	e7de      	b.n	400a86 <xQueueGenericReset+0x36>
  400ac8:	004002c5 	.word	0x004002c5
  400acc:	0040030d 	.word	0x0040030d
  400ad0:	00402738 	.word	0x00402738
  400ad4:	00402349 	.word	0x00402349
  400ad8:	004017ad 	.word	0x004017ad
  400adc:	e000ed04 	.word	0xe000ed04
  400ae0:	00400165 	.word	0x00400165

00400ae4 <xQueueGenericCreate>:
	{
  400ae4:	b570      	push	{r4, r5, r6, lr}
  400ae6:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400ae8:	4606      	mov	r6, r0
  400aea:	b1a0      	cbz	r0, 400b16 <xQueueGenericCreate+0x32>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400aec:	fb05 f006 	mul.w	r0, r5, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
  400af0:	304c      	adds	r0, #76	; 0x4c
  400af2:	4b0d      	ldr	r3, [pc, #52]	; (400b28 <xQueueGenericCreate+0x44>)
  400af4:	4798      	blx	r3
		if( pxNewQueue != NULL )
  400af6:	4604      	mov	r4, r0
  400af8:	b158      	cbz	r0, 400b12 <xQueueGenericCreate+0x2e>
	if( uxItemSize == ( UBaseType_t ) 0 )
  400afa:	b195      	cbz	r5, 400b22 <xQueueGenericCreate+0x3e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
  400afc:	f100 034c 	add.w	r3, r0, #76	; 0x4c
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  400b00:	6003      	str	r3, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
  400b02:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  400b04:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400b06:	2101      	movs	r1, #1
  400b08:	4620      	mov	r0, r4
  400b0a:	4b08      	ldr	r3, [pc, #32]	; (400b2c <xQueueGenericCreate+0x48>)
  400b0c:	4798      	blx	r3
		pxNewQueue->pxQueueSetContainer = NULL;
  400b0e:	2300      	movs	r3, #0
  400b10:	64a3      	str	r3, [r4, #72]	; 0x48
	}
  400b12:	4620      	mov	r0, r4
  400b14:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400b16:	f44f 71bb 	mov.w	r1, #374	; 0x176
  400b1a:	4805      	ldr	r0, [pc, #20]	; (400b30 <xQueueGenericCreate+0x4c>)
  400b1c:	4b05      	ldr	r3, [pc, #20]	; (400b34 <xQueueGenericCreate+0x50>)
  400b1e:	4798      	blx	r3
  400b20:	e7e4      	b.n	400aec <xQueueGenericCreate+0x8>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400b22:	6020      	str	r0, [r4, #0]
  400b24:	e7ed      	b.n	400b02 <xQueueGenericCreate+0x1e>
  400b26:	bf00      	nop
  400b28:	004005e1 	.word	0x004005e1
  400b2c:	00400a51 	.word	0x00400a51
  400b30:	00402738 	.word	0x00402738
  400b34:	00402349 	.word	0x00402349

00400b38 <xQueueGenericSend>:
{
  400b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b3c:	b085      	sub	sp, #20
  400b3e:	4689      	mov	r9, r1
  400b40:	9201      	str	r2, [sp, #4]
  400b42:	461e      	mov	r6, r3
	configASSERT( pxQueue );
  400b44:	4604      	mov	r4, r0
  400b46:	b1a8      	cbz	r0, 400b74 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400b48:	f1b9 0f00 	cmp.w	r9, #0
  400b4c:	d018      	beq.n	400b80 <xQueueGenericSend+0x48>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400b4e:	2e02      	cmp	r6, #2
  400b50:	d01f      	beq.n	400b92 <xQueueGenericSend+0x5a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400b52:	4b67      	ldr	r3, [pc, #412]	; (400cf0 <xQueueGenericSend+0x1b8>)
  400b54:	4798      	blx	r3
  400b56:	b930      	cbnz	r0, 400b66 <xQueueGenericSend+0x2e>
  400b58:	9b01      	ldr	r3, [sp, #4]
  400b5a:	b123      	cbz	r3, 400b66 <xQueueGenericSend+0x2e>
  400b5c:	f240 21f6 	movw	r1, #758	; 0x2f6
  400b60:	4864      	ldr	r0, [pc, #400]	; (400cf4 <xQueueGenericSend+0x1bc>)
  400b62:	4b65      	ldr	r3, [pc, #404]	; (400cf8 <xQueueGenericSend+0x1c0>)
  400b64:	4798      	blx	r3
{
  400b66:	f04f 0a00 	mov.w	sl, #0
		taskENTER_CRITICAL();
  400b6a:	4d64      	ldr	r5, [pc, #400]	; (400cfc <xQueueGenericSend+0x1c4>)
					vTaskInternalSetTimeOutState( &xTimeOut );
  400b6c:	4f64      	ldr	r7, [pc, #400]	; (400d00 <xQueueGenericSend+0x1c8>)
					portYIELD_WITHIN_API();
  400b6e:	f8df 819c 	ldr.w	r8, [pc, #412]	; 400d0c <xQueueGenericSend+0x1d4>
  400b72:	e05f      	b.n	400c34 <xQueueGenericSend+0xfc>
	configASSERT( pxQueue );
  400b74:	f240 21f1 	movw	r1, #753	; 0x2f1
  400b78:	485e      	ldr	r0, [pc, #376]	; (400cf4 <xQueueGenericSend+0x1bc>)
  400b7a:	4b5f      	ldr	r3, [pc, #380]	; (400cf8 <xQueueGenericSend+0x1c0>)
  400b7c:	4798      	blx	r3
  400b7e:	e7e3      	b.n	400b48 <xQueueGenericSend+0x10>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400b80:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400b82:	2b00      	cmp	r3, #0
  400b84:	d0e3      	beq.n	400b4e <xQueueGenericSend+0x16>
  400b86:	f240 21f2 	movw	r1, #754	; 0x2f2
  400b8a:	485a      	ldr	r0, [pc, #360]	; (400cf4 <xQueueGenericSend+0x1bc>)
  400b8c:	4b5a      	ldr	r3, [pc, #360]	; (400cf8 <xQueueGenericSend+0x1c0>)
  400b8e:	4798      	blx	r3
  400b90:	e7dd      	b.n	400b4e <xQueueGenericSend+0x16>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400b92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400b94:	2b01      	cmp	r3, #1
  400b96:	d0dc      	beq.n	400b52 <xQueueGenericSend+0x1a>
  400b98:	f240 21f3 	movw	r1, #755	; 0x2f3
  400b9c:	4855      	ldr	r0, [pc, #340]	; (400cf4 <xQueueGenericSend+0x1bc>)
  400b9e:	4b56      	ldr	r3, [pc, #344]	; (400cf8 <xQueueGenericSend+0x1c0>)
  400ba0:	4798      	blx	r3
  400ba2:	e7d6      	b.n	400b52 <xQueueGenericSend+0x1a>
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  400ba4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400ba6:	4632      	mov	r2, r6
  400ba8:	4649      	mov	r1, r9
  400baa:	4620      	mov	r0, r4
  400bac:	4b55      	ldr	r3, [pc, #340]	; (400d04 <xQueueGenericSend+0x1cc>)
  400bae:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  400bb0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400bb2:	b1ab      	cbz	r3, 400be0 <xQueueGenericSend+0xa8>
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400bb4:	2e02      	cmp	r6, #2
  400bb6:	f000 8097 	beq.w	400ce8 <xQueueGenericSend+0x1b0>
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  400bba:	4631      	mov	r1, r6
  400bbc:	4620      	mov	r0, r4
  400bbe:	4b52      	ldr	r3, [pc, #328]	; (400d08 <xQueueGenericSend+0x1d0>)
  400bc0:	4798      	blx	r3
  400bc2:	b138      	cbz	r0, 400bd4 <xQueueGenericSend+0x9c>
							queueYIELD_IF_USING_PREEMPTION();
  400bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400bc8:	4b50      	ldr	r3, [pc, #320]	; (400d0c <xQueueGenericSend+0x1d4>)
  400bca:	601a      	str	r2, [r3, #0]
  400bcc:	f3bf 8f4f 	dsb	sy
  400bd0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  400bd4:	4b4e      	ldr	r3, [pc, #312]	; (400d10 <xQueueGenericSend+0x1d8>)
  400bd6:	4798      	blx	r3
				return pdPASS;
  400bd8:	2001      	movs	r0, #1
}
  400bda:	b005      	add	sp, #20
  400bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400be2:	b953      	cbnz	r3, 400bfa <xQueueGenericSend+0xc2>
						else if( xYieldRequired != pdFALSE )
  400be4:	2800      	cmp	r0, #0
  400be6:	d0f5      	beq.n	400bd4 <xQueueGenericSend+0x9c>
							queueYIELD_IF_USING_PREEMPTION();
  400be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400bec:	4b47      	ldr	r3, [pc, #284]	; (400d0c <xQueueGenericSend+0x1d4>)
  400bee:	601a      	str	r2, [r3, #0]
  400bf0:	f3bf 8f4f 	dsb	sy
  400bf4:	f3bf 8f6f 	isb	sy
  400bf8:	e7ec      	b.n	400bd4 <xQueueGenericSend+0x9c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400bfa:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400bfe:	4b45      	ldr	r3, [pc, #276]	; (400d14 <xQueueGenericSend+0x1dc>)
  400c00:	4798      	blx	r3
  400c02:	2800      	cmp	r0, #0
  400c04:	d0e6      	beq.n	400bd4 <xQueueGenericSend+0x9c>
								queueYIELD_IF_USING_PREEMPTION();
  400c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c0a:	4b40      	ldr	r3, [pc, #256]	; (400d0c <xQueueGenericSend+0x1d4>)
  400c0c:	601a      	str	r2, [r3, #0]
  400c0e:	f3bf 8f4f 	dsb	sy
  400c12:	f3bf 8f6f 	isb	sy
  400c16:	e7dd      	b.n	400bd4 <xQueueGenericSend+0x9c>
					taskEXIT_CRITICAL();
  400c18:	4b3d      	ldr	r3, [pc, #244]	; (400d10 <xQueueGenericSend+0x1d8>)
  400c1a:	4798      	blx	r3
					return errQUEUE_FULL;
  400c1c:	2000      	movs	r0, #0
  400c1e:	e7dc      	b.n	400bda <xQueueGenericSend+0xa2>
					vTaskInternalSetTimeOutState( &xTimeOut );
  400c20:	a802      	add	r0, sp, #8
  400c22:	47b8      	blx	r7
  400c24:	e013      	b.n	400c4e <xQueueGenericSend+0x116>
				prvUnlockQueue( pxQueue );
  400c26:	4620      	mov	r0, r4
  400c28:	4b3b      	ldr	r3, [pc, #236]	; (400d18 <xQueueGenericSend+0x1e0>)
  400c2a:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400c2c:	4b3b      	ldr	r3, [pc, #236]	; (400d1c <xQueueGenericSend+0x1e4>)
  400c2e:	4798      	blx	r3
  400c30:	f04f 0a01 	mov.w	sl, #1
		taskENTER_CRITICAL();
  400c34:	47a8      	blx	r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400c36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400c38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400c3a:	429a      	cmp	r2, r3
  400c3c:	d3b2      	bcc.n	400ba4 <xQueueGenericSend+0x6c>
  400c3e:	2e02      	cmp	r6, #2
  400c40:	d048      	beq.n	400cd4 <xQueueGenericSend+0x19c>
				if( xTicksToWait == ( TickType_t ) 0 )
  400c42:	9b01      	ldr	r3, [sp, #4]
  400c44:	2b00      	cmp	r3, #0
  400c46:	d0e7      	beq.n	400c18 <xQueueGenericSend+0xe0>
				else if( xEntryTimeSet == pdFALSE )
  400c48:	f1ba 0f00 	cmp.w	sl, #0
  400c4c:	d0e8      	beq.n	400c20 <xQueueGenericSend+0xe8>
		taskEXIT_CRITICAL();
  400c4e:	4b30      	ldr	r3, [pc, #192]	; (400d10 <xQueueGenericSend+0x1d8>)
  400c50:	4798      	blx	r3
		vTaskSuspendAll();
  400c52:	4b33      	ldr	r3, [pc, #204]	; (400d20 <xQueueGenericSend+0x1e8>)
  400c54:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400c56:	47a8      	blx	r5
  400c58:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400c5c:	b25b      	sxtb	r3, r3
  400c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c62:	bf04      	itt	eq
  400c64:	2300      	moveq	r3, #0
  400c66:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  400c6a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400c6e:	b25b      	sxtb	r3, r3
  400c70:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c74:	bf04      	itt	eq
  400c76:	2300      	moveq	r3, #0
  400c78:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  400c7c:	4b24      	ldr	r3, [pc, #144]	; (400d10 <xQueueGenericSend+0x1d8>)
  400c7e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400c80:	a901      	add	r1, sp, #4
  400c82:	a802      	add	r0, sp, #8
  400c84:	4b27      	ldr	r3, [pc, #156]	; (400d24 <xQueueGenericSend+0x1ec>)
  400c86:	4798      	blx	r3
  400c88:	b9e8      	cbnz	r0, 400cc6 <xQueueGenericSend+0x18e>
	taskENTER_CRITICAL();
  400c8a:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400c8c:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400c90:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  400c94:	4b1e      	ldr	r3, [pc, #120]	; (400d10 <xQueueGenericSend+0x1d8>)
  400c96:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400c98:	45d3      	cmp	fp, sl
  400c9a:	d1c4      	bne.n	400c26 <xQueueGenericSend+0xee>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400c9c:	9901      	ldr	r1, [sp, #4]
  400c9e:	f104 0010 	add.w	r0, r4, #16
  400ca2:	4b21      	ldr	r3, [pc, #132]	; (400d28 <xQueueGenericSend+0x1f0>)
  400ca4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400ca6:	4620      	mov	r0, r4
  400ca8:	4b1b      	ldr	r3, [pc, #108]	; (400d18 <xQueueGenericSend+0x1e0>)
  400caa:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400cac:	4b1b      	ldr	r3, [pc, #108]	; (400d1c <xQueueGenericSend+0x1e4>)
  400cae:	4798      	blx	r3
  400cb0:	2800      	cmp	r0, #0
  400cb2:	d1bd      	bne.n	400c30 <xQueueGenericSend+0xf8>
					portYIELD_WITHIN_API();
  400cb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400cb8:	f8c8 3000 	str.w	r3, [r8]
  400cbc:	f3bf 8f4f 	dsb	sy
  400cc0:	f3bf 8f6f 	isb	sy
  400cc4:	e7b4      	b.n	400c30 <xQueueGenericSend+0xf8>
			prvUnlockQueue( pxQueue );
  400cc6:	4620      	mov	r0, r4
  400cc8:	4b13      	ldr	r3, [pc, #76]	; (400d18 <xQueueGenericSend+0x1e0>)
  400cca:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400ccc:	4b13      	ldr	r3, [pc, #76]	; (400d1c <xQueueGenericSend+0x1e4>)
  400cce:	4798      	blx	r3
			return errQUEUE_FULL;
  400cd0:	2000      	movs	r0, #0
  400cd2:	e782      	b.n	400bda <xQueueGenericSend+0xa2>
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
  400cd4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400cd6:	2202      	movs	r2, #2
  400cd8:	4649      	mov	r1, r9
  400cda:	4620      	mov	r0, r4
  400cdc:	4b09      	ldr	r3, [pc, #36]	; (400d04 <xQueueGenericSend+0x1cc>)
  400cde:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  400ce0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ce2:	2b00      	cmp	r3, #0
  400ce4:	f43f af7c 	beq.w	400be0 <xQueueGenericSend+0xa8>
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
  400ce8:	2d00      	cmp	r5, #0
  400cea:	f43f af66 	beq.w	400bba <xQueueGenericSend+0x82>
  400cee:	e771      	b.n	400bd4 <xQueueGenericSend+0x9c>
  400cf0:	004018e5 	.word	0x004018e5
  400cf4:	00402738 	.word	0x00402738
  400cf8:	00402349 	.word	0x00402349
  400cfc:	004002c5 	.word	0x004002c5
  400d00:	00401841 	.word	0x00401841
  400d04:	0040087d 	.word	0x0040087d
  400d08:	004008fd 	.word	0x004008fd
  400d0c:	e000ed04 	.word	0xe000ed04
  400d10:	0040030d 	.word	0x0040030d
  400d14:	004017ad 	.word	0x004017ad
  400d18:	004009a9 	.word	0x004009a9
  400d1c:	004014e1 	.word	0x004014e1
  400d20:	00401389 	.word	0x00401389
  400d24:	00401859 	.word	0x00401859
  400d28:	00401725 	.word	0x00401725

00400d2c <xQueueGenericSendFromISR>:
{
  400d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400d30:	460f      	mov	r7, r1
  400d32:	4691      	mov	r9, r2
  400d34:	461e      	mov	r6, r3
	configASSERT( pxQueue );
  400d36:	4604      	mov	r4, r0
  400d38:	b1c8      	cbz	r0, 400d6e <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400d3a:	b1f7      	cbz	r7, 400d7a <xQueueGenericSendFromISR+0x4e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400d3c:	2e02      	cmp	r6, #2
  400d3e:	d025      	beq.n	400d8c <xQueueGenericSendFromISR+0x60>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400d40:	4b32      	ldr	r3, [pc, #200]	; (400e0c <xQueueGenericSendFromISR+0xe0>)
  400d42:	4798      	blx	r3
	__asm volatile
  400d44:	f3ef 8811 	mrs	r8, BASEPRI
  400d48:	f04f 0350 	mov.w	r3, #80	; 0x50
  400d4c:	f383 8811 	msr	BASEPRI, r3
  400d50:	f3bf 8f6f 	isb	sy
  400d54:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400d58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400d5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d5c:	429a      	cmp	r2, r3
  400d5e:	d31e      	bcc.n	400d9e <xQueueGenericSendFromISR+0x72>
  400d60:	2e02      	cmp	r6, #2
  400d62:	d01c      	beq.n	400d9e <xQueueGenericSendFromISR+0x72>
			xReturn = errQUEUE_FULL;
  400d64:	2000      	movs	r0, #0
	__asm volatile
  400d66:	f388 8811 	msr	BASEPRI, r8
}
  400d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( pxQueue );
  400d6e:	f240 31c3 	movw	r1, #963	; 0x3c3
  400d72:	4827      	ldr	r0, [pc, #156]	; (400e10 <xQueueGenericSendFromISR+0xe4>)
  400d74:	4b27      	ldr	r3, [pc, #156]	; (400e14 <xQueueGenericSendFromISR+0xe8>)
  400d76:	4798      	blx	r3
  400d78:	e7df      	b.n	400d3a <xQueueGenericSendFromISR+0xe>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400d7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400d7c:	2b00      	cmp	r3, #0
  400d7e:	d0dd      	beq.n	400d3c <xQueueGenericSendFromISR+0x10>
  400d80:	f44f 7171 	mov.w	r1, #964	; 0x3c4
  400d84:	4822      	ldr	r0, [pc, #136]	; (400e10 <xQueueGenericSendFromISR+0xe4>)
  400d86:	4b23      	ldr	r3, [pc, #140]	; (400e14 <xQueueGenericSendFromISR+0xe8>)
  400d88:	4798      	blx	r3
  400d8a:	e7d7      	b.n	400d3c <xQueueGenericSendFromISR+0x10>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400d8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d8e:	2b01      	cmp	r3, #1
  400d90:	d0d6      	beq.n	400d40 <xQueueGenericSendFromISR+0x14>
  400d92:	f240 31c5 	movw	r1, #965	; 0x3c5
  400d96:	481e      	ldr	r0, [pc, #120]	; (400e10 <xQueueGenericSendFromISR+0xe4>)
  400d98:	4b1e      	ldr	r3, [pc, #120]	; (400e14 <xQueueGenericSendFromISR+0xe8>)
  400d9a:	4798      	blx	r3
  400d9c:	e7d0      	b.n	400d40 <xQueueGenericSendFromISR+0x14>
			const int8_t cTxLock = pxQueue->cTxLock;
  400d9e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  400da2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400da4:	4632      	mov	r2, r6
  400da6:	4639      	mov	r1, r7
  400da8:	4620      	mov	r0, r4
  400daa:	4b1b      	ldr	r3, [pc, #108]	; (400e18 <xQueueGenericSendFromISR+0xec>)
  400dac:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
  400dae:	f1b5 3fff 	cmp.w	r5, #4294967295
  400db2:	d005      	beq.n	400dc0 <xQueueGenericSendFromISR+0x94>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  400db4:	3501      	adds	r5, #1
  400db6:	b26d      	sxtb	r5, r5
  400db8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			xReturn = pdPASS;
  400dbc:	2001      	movs	r0, #1
  400dbe:	e7d2      	b.n	400d66 <xQueueGenericSendFromISR+0x3a>
					if( pxQueue->pxQueueSetContainer != NULL )
  400dc0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400dc2:	b15b      	cbz	r3, 400ddc <xQueueGenericSendFromISR+0xb0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  400dc4:	4631      	mov	r1, r6
  400dc6:	4620      	mov	r0, r4
  400dc8:	4b14      	ldr	r3, [pc, #80]	; (400e1c <xQueueGenericSendFromISR+0xf0>)
  400dca:	4798      	blx	r3
  400dcc:	b1b0      	cbz	r0, 400dfc <xQueueGenericSendFromISR+0xd0>
							if( pxHigherPriorityTaskWoken != NULL )
  400dce:	f1b9 0f00 	cmp.w	r9, #0
  400dd2:	d015      	beq.n	400e00 <xQueueGenericSendFromISR+0xd4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  400dd4:	2001      	movs	r0, #1
  400dd6:	f8c9 0000 	str.w	r0, [r9]
  400dda:	e7c4      	b.n	400d66 <xQueueGenericSendFromISR+0x3a>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400ddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400dde:	b90b      	cbnz	r3, 400de4 <xQueueGenericSendFromISR+0xb8>
			xReturn = pdPASS;
  400de0:	2001      	movs	r0, #1
  400de2:	e7c0      	b.n	400d66 <xQueueGenericSendFromISR+0x3a>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400de4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400de8:	4b0d      	ldr	r3, [pc, #52]	; (400e20 <xQueueGenericSendFromISR+0xf4>)
  400dea:	4798      	blx	r3
  400dec:	b150      	cbz	r0, 400e04 <xQueueGenericSendFromISR+0xd8>
								if( pxHigherPriorityTaskWoken != NULL )
  400dee:	f1b9 0f00 	cmp.w	r9, #0
  400df2:	d009      	beq.n	400e08 <xQueueGenericSendFromISR+0xdc>
									*pxHigherPriorityTaskWoken = pdTRUE;
  400df4:	2001      	movs	r0, #1
  400df6:	f8c9 0000 	str.w	r0, [r9]
  400dfa:	e7b4      	b.n	400d66 <xQueueGenericSendFromISR+0x3a>
			xReturn = pdPASS;
  400dfc:	2001      	movs	r0, #1
  400dfe:	e7b2      	b.n	400d66 <xQueueGenericSendFromISR+0x3a>
  400e00:	2001      	movs	r0, #1
  400e02:	e7b0      	b.n	400d66 <xQueueGenericSendFromISR+0x3a>
  400e04:	2001      	movs	r0, #1
  400e06:	e7ae      	b.n	400d66 <xQueueGenericSendFromISR+0x3a>
  400e08:	2001      	movs	r0, #1
  400e0a:	e7ac      	b.n	400d66 <xQueueGenericSendFromISR+0x3a>
  400e0c:	0040052d 	.word	0x0040052d
  400e10:	00402738 	.word	0x00402738
  400e14:	00402349 	.word	0x00402349
  400e18:	0040087d 	.word	0x0040087d
  400e1c:	004008fd 	.word	0x004008fd
  400e20:	004017ad 	.word	0x004017ad

00400e24 <xQueueReceive>:
{
  400e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400e28:	b084      	sub	sp, #16
  400e2a:	4688      	mov	r8, r1
  400e2c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
  400e2e:	4604      	mov	r4, r0
  400e30:	b198      	cbz	r0, 400e5a <xQueueReceive+0x36>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e32:	f1b8 0f00 	cmp.w	r8, #0
  400e36:	d016      	beq.n	400e66 <xQueueReceive+0x42>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400e38:	4b4d      	ldr	r3, [pc, #308]	; (400f70 <xQueueReceive+0x14c>)
  400e3a:	4798      	blx	r3
  400e3c:	b930      	cbnz	r0, 400e4c <xQueueReceive+0x28>
  400e3e:	9b01      	ldr	r3, [sp, #4]
  400e40:	b123      	cbz	r3, 400e4c <xQueueReceive+0x28>
  400e42:	f240 5109 	movw	r1, #1289	; 0x509
  400e46:	484b      	ldr	r0, [pc, #300]	; (400f74 <xQueueReceive+0x150>)
  400e48:	4b4b      	ldr	r3, [pc, #300]	; (400f78 <xQueueReceive+0x154>)
  400e4a:	4798      	blx	r3
{
  400e4c:	f04f 0a00 	mov.w	sl, #0
		taskENTER_CRITICAL();
  400e50:	4d4a      	ldr	r5, [pc, #296]	; (400f7c <xQueueReceive+0x158>)
					vTaskInternalSetTimeOutState( &xTimeOut );
  400e52:	4e4b      	ldr	r6, [pc, #300]	; (400f80 <xQueueReceive+0x15c>)
					portYIELD_WITHIN_API();
  400e54:	f8df 9138 	ldr.w	r9, [pc, #312]	; 400f90 <xQueueReceive+0x16c>
  400e58:	e044      	b.n	400ee4 <xQueueReceive+0xc0>
	configASSERT( ( pxQueue ) );
  400e5a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
  400e5e:	4845      	ldr	r0, [pc, #276]	; (400f74 <xQueueReceive+0x150>)
  400e60:	4b45      	ldr	r3, [pc, #276]	; (400f78 <xQueueReceive+0x154>)
  400e62:	4798      	blx	r3
  400e64:	e7e5      	b.n	400e32 <xQueueReceive+0xe>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400e68:	2b00      	cmp	r3, #0
  400e6a:	d0e5      	beq.n	400e38 <xQueueReceive+0x14>
  400e6c:	f240 5104 	movw	r1, #1284	; 0x504
  400e70:	4840      	ldr	r0, [pc, #256]	; (400f74 <xQueueReceive+0x150>)
  400e72:	4b41      	ldr	r3, [pc, #260]	; (400f78 <xQueueReceive+0x154>)
  400e74:	4798      	blx	r3
  400e76:	e7df      	b.n	400e38 <xQueueReceive+0x14>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400e78:	4641      	mov	r1, r8
  400e7a:	4620      	mov	r0, r4
  400e7c:	4b41      	ldr	r3, [pc, #260]	; (400f84 <xQueueReceive+0x160>)
  400e7e:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  400e80:	1e7b      	subs	r3, r7, #1
  400e82:	63a3      	str	r3, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400e84:	6923      	ldr	r3, [r4, #16]
  400e86:	b92b      	cbnz	r3, 400e94 <xQueueReceive+0x70>
				taskEXIT_CRITICAL();
  400e88:	4b3f      	ldr	r3, [pc, #252]	; (400f88 <xQueueReceive+0x164>)
  400e8a:	4798      	blx	r3
				return pdPASS;
  400e8c:	2001      	movs	r0, #1
}
  400e8e:	b004      	add	sp, #16
  400e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400e94:	f104 0010 	add.w	r0, r4, #16
  400e98:	4b3c      	ldr	r3, [pc, #240]	; (400f8c <xQueueReceive+0x168>)
  400e9a:	4798      	blx	r3
  400e9c:	2800      	cmp	r0, #0
  400e9e:	d0f3      	beq.n	400e88 <xQueueReceive+0x64>
						queueYIELD_IF_USING_PREEMPTION();
  400ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400ea4:	4b3a      	ldr	r3, [pc, #232]	; (400f90 <xQueueReceive+0x16c>)
  400ea6:	601a      	str	r2, [r3, #0]
  400ea8:	f3bf 8f4f 	dsb	sy
  400eac:	f3bf 8f6f 	isb	sy
  400eb0:	e7ea      	b.n	400e88 <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
  400eb2:	4b35      	ldr	r3, [pc, #212]	; (400f88 <xQueueReceive+0x164>)
  400eb4:	4798      	blx	r3
					return errQUEUE_EMPTY;
  400eb6:	2000      	movs	r0, #0
  400eb8:	e7e9      	b.n	400e8e <xQueueReceive+0x6a>
					vTaskInternalSetTimeOutState( &xTimeOut );
  400eba:	a802      	add	r0, sp, #8
  400ebc:	47b0      	blx	r6
  400ebe:	e01b      	b.n	400ef8 <xQueueReceive+0xd4>
				prvUnlockQueue( pxQueue );
  400ec0:	4620      	mov	r0, r4
  400ec2:	4b34      	ldr	r3, [pc, #208]	; (400f94 <xQueueReceive+0x170>)
  400ec4:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400ec6:	4b34      	ldr	r3, [pc, #208]	; (400f98 <xQueueReceive+0x174>)
  400ec8:	4798      	blx	r3
  400eca:	e009      	b.n	400ee0 <xQueueReceive+0xbc>
			prvUnlockQueue( pxQueue );
  400ecc:	4620      	mov	r0, r4
  400ece:	4b31      	ldr	r3, [pc, #196]	; (400f94 <xQueueReceive+0x170>)
  400ed0:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400ed2:	4b31      	ldr	r3, [pc, #196]	; (400f98 <xQueueReceive+0x174>)
  400ed4:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400ed6:	4620      	mov	r0, r4
  400ed8:	4b30      	ldr	r3, [pc, #192]	; (400f9c <xQueueReceive+0x178>)
  400eda:	4798      	blx	r3
  400edc:	2800      	cmp	r0, #0
  400ede:	d144      	bne.n	400f6a <xQueueReceive+0x146>
  400ee0:	f04f 0a01 	mov.w	sl, #1
		taskENTER_CRITICAL();
  400ee4:	47a8      	blx	r5
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  400ee6:	6ba7      	ldr	r7, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  400ee8:	2f00      	cmp	r7, #0
  400eea:	d1c5      	bne.n	400e78 <xQueueReceive+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
  400eec:	9b01      	ldr	r3, [sp, #4]
  400eee:	2b00      	cmp	r3, #0
  400ef0:	d0df      	beq.n	400eb2 <xQueueReceive+0x8e>
				else if( xEntryTimeSet == pdFALSE )
  400ef2:	f1ba 0f00 	cmp.w	sl, #0
  400ef6:	d0e0      	beq.n	400eba <xQueueReceive+0x96>
		taskEXIT_CRITICAL();
  400ef8:	4b23      	ldr	r3, [pc, #140]	; (400f88 <xQueueReceive+0x164>)
  400efa:	4798      	blx	r3
		vTaskSuspendAll();
  400efc:	4b28      	ldr	r3, [pc, #160]	; (400fa0 <xQueueReceive+0x17c>)
  400efe:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400f00:	47a8      	blx	r5
  400f02:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400f06:	b25b      	sxtb	r3, r3
  400f08:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f0c:	bf04      	itt	eq
  400f0e:	2300      	moveq	r3, #0
  400f10:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  400f14:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  400f18:	b25b      	sxtb	r3, r3
  400f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f1e:	bf04      	itt	eq
  400f20:	2300      	moveq	r3, #0
  400f22:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  400f26:	4b18      	ldr	r3, [pc, #96]	; (400f88 <xQueueReceive+0x164>)
  400f28:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400f2a:	a901      	add	r1, sp, #4
  400f2c:	a802      	add	r0, sp, #8
  400f2e:	4b1d      	ldr	r3, [pc, #116]	; (400fa4 <xQueueReceive+0x180>)
  400f30:	4798      	blx	r3
  400f32:	2800      	cmp	r0, #0
  400f34:	d1ca      	bne.n	400ecc <xQueueReceive+0xa8>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400f36:	4620      	mov	r0, r4
  400f38:	4b18      	ldr	r3, [pc, #96]	; (400f9c <xQueueReceive+0x178>)
  400f3a:	4798      	blx	r3
  400f3c:	2800      	cmp	r0, #0
  400f3e:	d0bf      	beq.n	400ec0 <xQueueReceive+0x9c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400f40:	9901      	ldr	r1, [sp, #4]
  400f42:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400f46:	4b18      	ldr	r3, [pc, #96]	; (400fa8 <xQueueReceive+0x184>)
  400f48:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400f4a:	4620      	mov	r0, r4
  400f4c:	4b11      	ldr	r3, [pc, #68]	; (400f94 <xQueueReceive+0x170>)
  400f4e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400f50:	4b11      	ldr	r3, [pc, #68]	; (400f98 <xQueueReceive+0x174>)
  400f52:	4798      	blx	r3
  400f54:	2800      	cmp	r0, #0
  400f56:	d1c3      	bne.n	400ee0 <xQueueReceive+0xbc>
					portYIELD_WITHIN_API();
  400f58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400f5c:	f8c9 3000 	str.w	r3, [r9]
  400f60:	f3bf 8f4f 	dsb	sy
  400f64:	f3bf 8f6f 	isb	sy
  400f68:	e7ba      	b.n	400ee0 <xQueueReceive+0xbc>
				return errQUEUE_EMPTY;
  400f6a:	2000      	movs	r0, #0
  400f6c:	e78f      	b.n	400e8e <xQueueReceive+0x6a>
  400f6e:	bf00      	nop
  400f70:	004018e5 	.word	0x004018e5
  400f74:	00402738 	.word	0x00402738
  400f78:	00402349 	.word	0x00402349
  400f7c:	004002c5 	.word	0x004002c5
  400f80:	00401841 	.word	0x00401841
  400f84:	00400981 	.word	0x00400981
  400f88:	0040030d 	.word	0x0040030d
  400f8c:	004017ad 	.word	0x004017ad
  400f90:	e000ed04 	.word	0xe000ed04
  400f94:	004009a9 	.word	0x004009a9
  400f98:	004014e1 	.word	0x004014e1
  400f9c:	0040085d 	.word	0x0040085d
  400fa0:	00401389 	.word	0x00401389
  400fa4:	00401859 	.word	0x00401859
  400fa8:	00401725 	.word	0x00401725

00400fac <vQueueAddToRegistry>:
	{
  400fac:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  400fae:	4b0b      	ldr	r3, [pc, #44]	; (400fdc <vQueueAddToRegistry+0x30>)
  400fb0:	681b      	ldr	r3, [r3, #0]
  400fb2:	b153      	cbz	r3, 400fca <vQueueAddToRegistry+0x1e>
  400fb4:	2301      	movs	r3, #1
  400fb6:	4c09      	ldr	r4, [pc, #36]	; (400fdc <vQueueAddToRegistry+0x30>)
  400fb8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  400fbc:	b132      	cbz	r2, 400fcc <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  400fbe:	3301      	adds	r3, #1
  400fc0:	2b08      	cmp	r3, #8
  400fc2:	d1f9      	bne.n	400fb8 <vQueueAddToRegistry+0xc>
	}
  400fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
  400fc8:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  400fca:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  400fcc:	4a03      	ldr	r2, [pc, #12]	; (400fdc <vQueueAddToRegistry+0x30>)
  400fce:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  400fd2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  400fd6:	6058      	str	r0, [r3, #4]
				break;
  400fd8:	e7f4      	b.n	400fc4 <vQueueAddToRegistry+0x18>
  400fda:	bf00      	nop
  400fdc:	200005c8 	.word	0x200005c8

00400fe0 <vQueueWaitForMessageRestricted>:
	{
  400fe0:	b570      	push	{r4, r5, r6, lr}
  400fe2:	4604      	mov	r4, r0
  400fe4:	460d      	mov	r5, r1
  400fe6:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  400fe8:	4b11      	ldr	r3, [pc, #68]	; (401030 <vQueueWaitForMessageRestricted+0x50>)
  400fea:	4798      	blx	r3
  400fec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  400ff0:	b25b      	sxtb	r3, r3
  400ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ff6:	bf04      	itt	eq
  400ff8:	2300      	moveq	r3, #0
  400ffa:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
  400ffe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401002:	b25b      	sxtb	r3, r3
  401004:	f1b3 3fff 	cmp.w	r3, #4294967295
  401008:	bf04      	itt	eq
  40100a:	2300      	moveq	r3, #0
  40100c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
  401010:	4b08      	ldr	r3, [pc, #32]	; (401034 <vQueueWaitForMessageRestricted+0x54>)
  401012:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401014:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401016:	b11b      	cbz	r3, 401020 <vQueueWaitForMessageRestricted+0x40>
		prvUnlockQueue( pxQueue );
  401018:	4620      	mov	r0, r4
  40101a:	4b07      	ldr	r3, [pc, #28]	; (401038 <vQueueWaitForMessageRestricted+0x58>)
  40101c:	4798      	blx	r3
  40101e:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401020:	4632      	mov	r2, r6
  401022:	4629      	mov	r1, r5
  401024:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401028:	4b04      	ldr	r3, [pc, #16]	; (40103c <vQueueWaitForMessageRestricted+0x5c>)
  40102a:	4798      	blx	r3
  40102c:	e7f4      	b.n	401018 <vQueueWaitForMessageRestricted+0x38>
  40102e:	bf00      	nop
  401030:	004002c5 	.word	0x004002c5
  401034:	0040030d 	.word	0x0040030d
  401038:	004009a9 	.word	0x004009a9
  40103c:	00401765 	.word	0x00401765

00401040 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401040:	4a06      	ldr	r2, [pc, #24]	; (40105c <prvIdleTask+0x1c>)
			{
				taskYIELD();
  401042:	4807      	ldr	r0, [pc, #28]	; (401060 <prvIdleTask+0x20>)
  401044:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401048:	6813      	ldr	r3, [r2, #0]
  40104a:	2b01      	cmp	r3, #1
  40104c:	d9fc      	bls.n	401048 <prvIdleTask+0x8>
				taskYIELD();
  40104e:	6001      	str	r1, [r0, #0]
  401050:	f3bf 8f4f 	dsb	sy
  401054:	f3bf 8f6f 	isb	sy
  401058:	e7f6      	b.n	401048 <prvIdleTask+0x8>
  40105a:	bf00      	nop
  40105c:	20000484 	.word	0x20000484
  401060:	e000ed04 	.word	0xe000ed04

00401064 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401064:	4b08      	ldr	r3, [pc, #32]	; (401088 <prvResetNextTaskUnblockTime+0x24>)
  401066:	681b      	ldr	r3, [r3, #0]
  401068:	681b      	ldr	r3, [r3, #0]
  40106a:	b13b      	cbz	r3, 40107c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  40106c:	4b06      	ldr	r3, [pc, #24]	; (401088 <prvResetNextTaskUnblockTime+0x24>)
  40106e:	681b      	ldr	r3, [r3, #0]
  401070:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  401072:	68db      	ldr	r3, [r3, #12]
  401074:	685a      	ldr	r2, [r3, #4]
  401076:	4b05      	ldr	r3, [pc, #20]	; (40108c <prvResetNextTaskUnblockTime+0x28>)
  401078:	601a      	str	r2, [r3, #0]
  40107a:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  40107c:	f04f 32ff 	mov.w	r2, #4294967295
  401080:	4b02      	ldr	r3, [pc, #8]	; (40108c <prvResetNextTaskUnblockTime+0x28>)
  401082:	601a      	str	r2, [r3, #0]
  401084:	4770      	bx	lr
  401086:	bf00      	nop
  401088:	2000047c 	.word	0x2000047c
  40108c:	20000564 	.word	0x20000564

00401090 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  401090:	b538      	push	{r3, r4, r5, lr}
  401092:	4604      	mov	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  401094:	4b16      	ldr	r3, [pc, #88]	; (4010f0 <prvAddCurrentTaskToDelayedList+0x60>)
  401096:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401098:	4b16      	ldr	r3, [pc, #88]	; (4010f4 <prvAddCurrentTaskToDelayedList+0x64>)
  40109a:	6818      	ldr	r0, [r3, #0]
  40109c:	3004      	adds	r0, #4
  40109e:	4b16      	ldr	r3, [pc, #88]	; (4010f8 <prvAddCurrentTaskToDelayedList+0x68>)
  4010a0:	4798      	blx	r3
  4010a2:	b948      	cbnz	r0, 4010b8 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
  4010a4:	4b13      	ldr	r3, [pc, #76]	; (4010f4 <prvAddCurrentTaskToDelayedList+0x64>)
  4010a6:	681a      	ldr	r2, [r3, #0]
  4010a8:	4914      	ldr	r1, [pc, #80]	; (4010fc <prvAddCurrentTaskToDelayedList+0x6c>)
  4010aa:	680b      	ldr	r3, [r1, #0]
  4010ac:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4010ae:	2201      	movs	r2, #1
  4010b0:	4082      	lsls	r2, r0
  4010b2:	ea23 0302 	bic.w	r3, r3, r2
  4010b6:	600b      	str	r3, [r1, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
  4010b8:	442c      	add	r4, r5

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  4010ba:	4b0e      	ldr	r3, [pc, #56]	; (4010f4 <prvAddCurrentTaskToDelayedList+0x64>)
  4010bc:	681b      	ldr	r3, [r3, #0]
  4010be:	605c      	str	r4, [r3, #4]

		if( xTimeToWake < xConstTickCount )
  4010c0:	42a5      	cmp	r5, r4
  4010c2:	d80d      	bhi.n	4010e0 <prvAddCurrentTaskToDelayedList+0x50>
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  4010c4:	4b0e      	ldr	r3, [pc, #56]	; (401100 <prvAddCurrentTaskToDelayedList+0x70>)
  4010c6:	6818      	ldr	r0, [r3, #0]
  4010c8:	4b0a      	ldr	r3, [pc, #40]	; (4010f4 <prvAddCurrentTaskToDelayedList+0x64>)
  4010ca:	6819      	ldr	r1, [r3, #0]
  4010cc:	3104      	adds	r1, #4
  4010ce:	4b0d      	ldr	r3, [pc, #52]	; (401104 <prvAddCurrentTaskToDelayedList+0x74>)
  4010d0:	4798      	blx	r3

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
  4010d2:	4b0d      	ldr	r3, [pc, #52]	; (401108 <prvAddCurrentTaskToDelayedList+0x78>)
  4010d4:	681b      	ldr	r3, [r3, #0]
  4010d6:	429c      	cmp	r4, r3
			{
				xNextTaskUnblockTime = xTimeToWake;
  4010d8:	bf3c      	itt	cc
  4010da:	4b0b      	ldrcc	r3, [pc, #44]	; (401108 <prvAddCurrentTaskToDelayedList+0x78>)
  4010dc:	601c      	strcc	r4, [r3, #0]
  4010de:	bd38      	pop	{r3, r4, r5, pc}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  4010e0:	4b0a      	ldr	r3, [pc, #40]	; (40110c <prvAddCurrentTaskToDelayedList+0x7c>)
  4010e2:	6818      	ldr	r0, [r3, #0]
  4010e4:	4b03      	ldr	r3, [pc, #12]	; (4010f4 <prvAddCurrentTaskToDelayedList+0x64>)
  4010e6:	6819      	ldr	r1, [r3, #0]
  4010e8:	3104      	adds	r1, #4
  4010ea:	4b06      	ldr	r3, [pc, #24]	; (401104 <prvAddCurrentTaskToDelayedList+0x74>)
  4010ec:	4798      	blx	r3
  4010ee:	bd38      	pop	{r3, r4, r5, pc}
  4010f0:	20000584 	.word	0x20000584
  4010f4:	20000478 	.word	0x20000478
  4010f8:	004001cd 	.word	0x004001cd
  4010fc:	20000534 	.word	0x20000534
  401100:	2000047c 	.word	0x2000047c
  401104:	00400199 	.word	0x00400199
  401108:	20000564 	.word	0x20000564
  40110c:	20000480 	.word	0x20000480

00401110 <xTaskCreate>:
	{
  401110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401114:	b083      	sub	sp, #12
  401116:	4683      	mov	fp, r0
  401118:	460d      	mov	r5, r1
  40111a:	9301      	str	r3, [sp, #4]
  40111c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
  401120:	0097      	lsls	r7, r2, #2
  401122:	4638      	mov	r0, r7
  401124:	4b5f      	ldr	r3, [pc, #380]	; (4012a4 <xTaskCreate+0x194>)
  401126:	4798      	blx	r3
			if( pxStack != NULL )
  401128:	2800      	cmp	r0, #0
  40112a:	f000 8092 	beq.w	401252 <xTaskCreate+0x142>
  40112e:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
  401130:	2064      	movs	r0, #100	; 0x64
  401132:	4b5c      	ldr	r3, [pc, #368]	; (4012a4 <xTaskCreate+0x194>)
  401134:	4798      	blx	r3
				if( pxNewTCB != NULL )
  401136:	4604      	mov	r4, r0
  401138:	2800      	cmp	r0, #0
  40113a:	f000 8087 	beq.w	40124c <xTaskCreate+0x13c>
					pxNewTCB->pxStack = pxStack;
  40113e:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  401140:	463a      	mov	r2, r7
  401142:	21a5      	movs	r1, #165	; 0xa5
  401144:	4630      	mov	r0, r6
  401146:	4b58      	ldr	r3, [pc, #352]	; (4012a8 <xTaskCreate+0x198>)
  401148:	4798      	blx	r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
  40114a:	3f04      	subs	r7, #4
  40114c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40114e:	441f      	add	r7, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
  401150:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
  401154:	2d00      	cmp	r5, #0
  401156:	d07f      	beq.n	401258 <xTaskCreate+0x148>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  401158:	782b      	ldrb	r3, [r5, #0]
  40115a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
  40115e:	782b      	ldrb	r3, [r5, #0]
  401160:	b163      	cbz	r3, 40117c <xTaskCreate+0x6c>
  401162:	462b      	mov	r3, r5
  401164:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401168:	f105 0113 	add.w	r1, r5, #19
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  40116c:	7858      	ldrb	r0, [r3, #1]
  40116e:	f802 0f01 	strb.w	r0, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
  401172:	f813 0f01 	ldrb.w	r0, [r3, #1]!
  401176:	b108      	cbz	r0, 40117c <xTaskCreate+0x6c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401178:	428b      	cmp	r3, r1
  40117a:	d1f7      	bne.n	40116c <xTaskCreate+0x5c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  40117c:	2300      	movs	r3, #0
  40117e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  401182:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401184:	2d07      	cmp	r5, #7
  401186:	bf28      	it	cs
  401188:	2507      	movcs	r5, #7
	pxNewTCB->uxPriority = uxPriority;
  40118a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
  40118c:	64a5      	str	r5, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
  40118e:	2600      	movs	r6, #0
  401190:	64e6      	str	r6, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  401192:	f104 0804 	add.w	r8, r4, #4
  401196:	4640      	mov	r0, r8
  401198:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4012f4 <xTaskCreate+0x1e4>
  40119c:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  40119e:	f104 0018 	add.w	r0, r4, #24
  4011a2:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  4011a4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4011a6:	f1c5 0508 	rsb	r5, r5, #8
  4011aa:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  4011ac:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
  4011ae:	6526      	str	r6, [r4, #80]	; 0x50
  4011b0:	6566      	str	r6, [r4, #84]	; 0x54
  4011b2:	65a6      	str	r6, [r4, #88]	; 0x58
		pxNewTCB->ulNotifiedValue = 0;
  4011b4:	65e6      	str	r6, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  4011b6:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4011ba:	9a01      	ldr	r2, [sp, #4]
  4011bc:	4659      	mov	r1, fp
  4011be:	4638      	mov	r0, r7
  4011c0:	4b3a      	ldr	r3, [pc, #232]	; (4012ac <xTaskCreate+0x19c>)
  4011c2:	4798      	blx	r3
  4011c4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
  4011c6:	f1ba 0f00 	cmp.w	sl, #0
  4011ca:	d001      	beq.n	4011d0 <xTaskCreate+0xc0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4011cc:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
  4011d0:	4b37      	ldr	r3, [pc, #220]	; (4012b0 <xTaskCreate+0x1a0>)
  4011d2:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
  4011d4:	4a37      	ldr	r2, [pc, #220]	; (4012b4 <xTaskCreate+0x1a4>)
  4011d6:	6813      	ldr	r3, [r2, #0]
  4011d8:	3301      	adds	r3, #1
  4011da:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  4011dc:	4b36      	ldr	r3, [pc, #216]	; (4012b8 <xTaskCreate+0x1a8>)
  4011de:	681b      	ldr	r3, [r3, #0]
  4011e0:	2b00      	cmp	r3, #0
  4011e2:	d03d      	beq.n	401260 <xTaskCreate+0x150>
			if( xSchedulerRunning == pdFALSE )
  4011e4:	4b35      	ldr	r3, [pc, #212]	; (4012bc <xTaskCreate+0x1ac>)
  4011e6:	681b      	ldr	r3, [r3, #0]
  4011e8:	b93b      	cbnz	r3, 4011fa <xTaskCreate+0xea>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  4011ea:	4b33      	ldr	r3, [pc, #204]	; (4012b8 <xTaskCreate+0x1a8>)
  4011ec:	681b      	ldr	r3, [r3, #0]
  4011ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4011f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4011f2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
  4011f4:	bf9c      	itt	ls
  4011f6:	4b30      	ldrls	r3, [pc, #192]	; (4012b8 <xTaskCreate+0x1a8>)
  4011f8:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
  4011fa:	4a31      	ldr	r2, [pc, #196]	; (4012c0 <xTaskCreate+0x1b0>)
  4011fc:	6813      	ldr	r3, [r2, #0]
  4011fe:	3301      	adds	r3, #1
  401200:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
  401202:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401204:	4a2f      	ldr	r2, [pc, #188]	; (4012c4 <xTaskCreate+0x1b4>)
  401206:	6811      	ldr	r1, [r2, #0]
  401208:	2301      	movs	r3, #1
  40120a:	4083      	lsls	r3, r0
  40120c:	430b      	orrs	r3, r1
  40120e:	6013      	str	r3, [r2, #0]
  401210:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401214:	4641      	mov	r1, r8
  401216:	4b2c      	ldr	r3, [pc, #176]	; (4012c8 <xTaskCreate+0x1b8>)
  401218:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40121c:	4b2b      	ldr	r3, [pc, #172]	; (4012cc <xTaskCreate+0x1bc>)
  40121e:	4798      	blx	r3
	taskEXIT_CRITICAL();
  401220:	4b2b      	ldr	r3, [pc, #172]	; (4012d0 <xTaskCreate+0x1c0>)
  401222:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
  401224:	4b25      	ldr	r3, [pc, #148]	; (4012bc <xTaskCreate+0x1ac>)
  401226:	681b      	ldr	r3, [r3, #0]
  401228:	2b00      	cmp	r3, #0
  40122a:	d035      	beq.n	401298 <xTaskCreate+0x188>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  40122c:	4b22      	ldr	r3, [pc, #136]	; (4012b8 <xTaskCreate+0x1a8>)
  40122e:	681b      	ldr	r3, [r3, #0]
  401230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401232:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401234:	429a      	cmp	r2, r3
  401236:	d233      	bcs.n	4012a0 <xTaskCreate+0x190>
			taskYIELD_IF_USING_PREEMPTION();
  401238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40123c:	4b25      	ldr	r3, [pc, #148]	; (4012d4 <xTaskCreate+0x1c4>)
  40123e:	601a      	str	r2, [r3, #0]
  401240:	f3bf 8f4f 	dsb	sy
  401244:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401248:	2001      	movs	r0, #1
  40124a:	e026      	b.n	40129a <xTaskCreate+0x18a>
					vPortFree( pxStack );
  40124c:	4630      	mov	r0, r6
  40124e:	4b22      	ldr	r3, [pc, #136]	; (4012d8 <xTaskCreate+0x1c8>)
  401250:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401252:	f04f 30ff 	mov.w	r0, #4294967295
  401256:	e020      	b.n	40129a <xTaskCreate+0x18a>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
  401258:	2300      	movs	r3, #0
  40125a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  40125e:	e790      	b.n	401182 <xTaskCreate+0x72>
			pxCurrentTCB = pxNewTCB;
  401260:	4b15      	ldr	r3, [pc, #84]	; (4012b8 <xTaskCreate+0x1a8>)
  401262:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401264:	6813      	ldr	r3, [r2, #0]
  401266:	2b01      	cmp	r3, #1
  401268:	d1c7      	bne.n	4011fa <xTaskCreate+0xea>
  40126a:	4d17      	ldr	r5, [pc, #92]	; (4012c8 <xTaskCreate+0x1b8>)
  40126c:	f105 07a0 	add.w	r7, r5, #160	; 0xa0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401270:	4e1a      	ldr	r6, [pc, #104]	; (4012dc <xTaskCreate+0x1cc>)
  401272:	4628      	mov	r0, r5
  401274:	47b0      	blx	r6
  401276:	3514      	adds	r5, #20
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  401278:	42af      	cmp	r7, r5
  40127a:	d1fa      	bne.n	401272 <xTaskCreate+0x162>
	vListInitialise( &xDelayedTaskList1 );
  40127c:	4f18      	ldr	r7, [pc, #96]	; (4012e0 <xTaskCreate+0x1d0>)
  40127e:	4638      	mov	r0, r7
  401280:	4d16      	ldr	r5, [pc, #88]	; (4012dc <xTaskCreate+0x1cc>)
  401282:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401284:	4e17      	ldr	r6, [pc, #92]	; (4012e4 <xTaskCreate+0x1d4>)
  401286:	4630      	mov	r0, r6
  401288:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  40128a:	4817      	ldr	r0, [pc, #92]	; (4012e8 <xTaskCreate+0x1d8>)
  40128c:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  40128e:	4b17      	ldr	r3, [pc, #92]	; (4012ec <xTaskCreate+0x1dc>)
  401290:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401292:	4b17      	ldr	r3, [pc, #92]	; (4012f0 <xTaskCreate+0x1e0>)
  401294:	601e      	str	r6, [r3, #0]
  401296:	e7b0      	b.n	4011fa <xTaskCreate+0xea>
			xReturn = pdPASS;
  401298:	2001      	movs	r0, #1
	}
  40129a:	b003      	add	sp, #12
  40129c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  4012a0:	2001      	movs	r0, #1
		return xReturn;
  4012a2:	e7fa      	b.n	40129a <xTaskCreate+0x18a>
  4012a4:	004005e1 	.word	0x004005e1
  4012a8:	00402521 	.word	0x00402521
  4012ac:	00400275 	.word	0x00400275
  4012b0:	004002c5 	.word	0x004002c5
  4012b4:	20000524 	.word	0x20000524
  4012b8:	20000478 	.word	0x20000478
  4012bc:	20000580 	.word	0x20000580
  4012c0:	20000530 	.word	0x20000530
  4012c4:	20000534 	.word	0x20000534
  4012c8:	20000484 	.word	0x20000484
  4012cc:	00400181 	.word	0x00400181
  4012d0:	0040030d 	.word	0x0040030d
  4012d4:	e000ed04 	.word	0xe000ed04
  4012d8:	004006c1 	.word	0x004006c1
  4012dc:	00400165 	.word	0x00400165
  4012e0:	20000538 	.word	0x20000538
  4012e4:	2000054c 	.word	0x2000054c
  4012e8:	2000056c 	.word	0x2000056c
  4012ec:	2000047c 	.word	0x2000047c
  4012f0:	20000480 	.word	0x20000480
  4012f4:	0040017b 	.word	0x0040017b

004012f8 <vTaskStartScheduler>:
{
  4012f8:	b510      	push	{r4, lr}
  4012fa:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
  4012fc:	4b17      	ldr	r3, [pc, #92]	; (40135c <vTaskStartScheduler+0x64>)
  4012fe:	9301      	str	r3, [sp, #4]
  401300:	2300      	movs	r3, #0
  401302:	9300      	str	r3, [sp, #0]
  401304:	2282      	movs	r2, #130	; 0x82
  401306:	4916      	ldr	r1, [pc, #88]	; (401360 <vTaskStartScheduler+0x68>)
  401308:	4816      	ldr	r0, [pc, #88]	; (401364 <vTaskStartScheduler+0x6c>)
  40130a:	4c17      	ldr	r4, [pc, #92]	; (401368 <vTaskStartScheduler+0x70>)
  40130c:	47a0      	blx	r4
		if( xReturn == pdPASS )
  40130e:	2801      	cmp	r0, #1
  401310:	d004      	beq.n	40131c <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  401312:	f1b0 3fff 	cmp.w	r0, #4294967295
  401316:	d01a      	beq.n	40134e <vTaskStartScheduler+0x56>
}
  401318:	b002      	add	sp, #8
  40131a:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  40131c:	4b13      	ldr	r3, [pc, #76]	; (40136c <vTaskStartScheduler+0x74>)
  40131e:	4798      	blx	r3
	if( xReturn == pdPASS )
  401320:	2801      	cmp	r0, #1
  401322:	d1f6      	bne.n	401312 <vTaskStartScheduler+0x1a>
	__asm volatile
  401324:	f04f 0350 	mov.w	r3, #80	; 0x50
  401328:	f383 8811 	msr	BASEPRI, r3
  40132c:	f3bf 8f6f 	isb	sy
  401330:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
  401334:	f04f 32ff 	mov.w	r2, #4294967295
  401338:	4b0d      	ldr	r3, [pc, #52]	; (401370 <vTaskStartScheduler+0x78>)
  40133a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40133c:	2201      	movs	r2, #1
  40133e:	4b0d      	ldr	r3, [pc, #52]	; (401374 <vTaskStartScheduler+0x7c>)
  401340:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
  401342:	2200      	movs	r2, #0
  401344:	4b0c      	ldr	r3, [pc, #48]	; (401378 <vTaskStartScheduler+0x80>)
  401346:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  401348:	4b0c      	ldr	r3, [pc, #48]	; (40137c <vTaskStartScheduler+0x84>)
  40134a:	4798      	blx	r3
  40134c:	e7e4      	b.n	401318 <vTaskStartScheduler+0x20>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  40134e:	f44f 6102 	mov.w	r1, #2080	; 0x820
  401352:	480b      	ldr	r0, [pc, #44]	; (401380 <vTaskStartScheduler+0x88>)
  401354:	4b0b      	ldr	r3, [pc, #44]	; (401384 <vTaskStartScheduler+0x8c>)
  401356:	4798      	blx	r3
}
  401358:	e7de      	b.n	401318 <vTaskStartScheduler+0x20>
  40135a:	bf00      	nop
  40135c:	20000560 	.word	0x20000560
  401360:	00402750 	.word	0x00402750
  401364:	00401041 	.word	0x00401041
  401368:	00401111 	.word	0x00401111
  40136c:	00401a79 	.word	0x00401a79
  401370:	20000564 	.word	0x20000564
  401374:	20000580 	.word	0x20000580
  401378:	20000584 	.word	0x20000584
  40137c:	0040040d 	.word	0x0040040d
  401380:	00402758 	.word	0x00402758
  401384:	00402349 	.word	0x00402349

00401388 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401388:	4a02      	ldr	r2, [pc, #8]	; (401394 <vTaskSuspendAll+0xc>)
  40138a:	6813      	ldr	r3, [r2, #0]
  40138c:	3301      	adds	r3, #1
  40138e:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
  401390:	4770      	bx	lr
  401392:	bf00      	nop
  401394:	2000052c 	.word	0x2000052c

00401398 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401398:	4b01      	ldr	r3, [pc, #4]	; (4013a0 <xTaskGetTickCount+0x8>)
  40139a:	6818      	ldr	r0, [r3, #0]
}
  40139c:	4770      	bx	lr
  40139e:	bf00      	nop
  4013a0:	20000584 	.word	0x20000584

004013a4 <xTaskIncrementTick>:
{
  4013a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4013a8:	4b3d      	ldr	r3, [pc, #244]	; (4014a0 <xTaskIncrementTick+0xfc>)
  4013aa:	681b      	ldr	r3, [r3, #0]
  4013ac:	2b00      	cmp	r3, #0
  4013ae:	d170      	bne.n	401492 <xTaskIncrementTick+0xee>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  4013b0:	4b3c      	ldr	r3, [pc, #240]	; (4014a4 <xTaskIncrementTick+0x100>)
  4013b2:	681a      	ldr	r2, [r3, #0]
  4013b4:	f102 0801 	add.w	r8, r2, #1
		xTickCount = xConstTickCount;
  4013b8:	f8c3 8000 	str.w	r8, [r3]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  4013bc:	f1b8 0f00 	cmp.w	r8, #0
  4013c0:	d10f      	bne.n	4013e2 <xTaskIncrementTick+0x3e>
			taskSWITCH_DELAYED_LISTS();
  4013c2:	4b39      	ldr	r3, [pc, #228]	; (4014a8 <xTaskIncrementTick+0x104>)
  4013c4:	681b      	ldr	r3, [r3, #0]
  4013c6:	681b      	ldr	r3, [r3, #0]
  4013c8:	bb1b      	cbnz	r3, 401412 <xTaskIncrementTick+0x6e>
  4013ca:	4a37      	ldr	r2, [pc, #220]	; (4014a8 <xTaskIncrementTick+0x104>)
  4013cc:	6811      	ldr	r1, [r2, #0]
  4013ce:	4b37      	ldr	r3, [pc, #220]	; (4014ac <xTaskIncrementTick+0x108>)
  4013d0:	6818      	ldr	r0, [r3, #0]
  4013d2:	6010      	str	r0, [r2, #0]
  4013d4:	6019      	str	r1, [r3, #0]
  4013d6:	4a36      	ldr	r2, [pc, #216]	; (4014b0 <xTaskIncrementTick+0x10c>)
  4013d8:	6813      	ldr	r3, [r2, #0]
  4013da:	3301      	adds	r3, #1
  4013dc:	6013      	str	r3, [r2, #0]
  4013de:	4b35      	ldr	r3, [pc, #212]	; (4014b4 <xTaskIncrementTick+0x110>)
  4013e0:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
  4013e2:	4b35      	ldr	r3, [pc, #212]	; (4014b8 <xTaskIncrementTick+0x114>)
  4013e4:	681b      	ldr	r3, [r3, #0]
  4013e6:	4598      	cmp	r8, r3
  4013e8:	d219      	bcs.n	40141e <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
  4013ea:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4013ec:	4b33      	ldr	r3, [pc, #204]	; (4014bc <xTaskIncrementTick+0x118>)
  4013ee:	681b      	ldr	r3, [r3, #0]
  4013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4013f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4013f6:	009b      	lsls	r3, r3, #2
  4013f8:	4a31      	ldr	r2, [pc, #196]	; (4014c0 <xTaskIncrementTick+0x11c>)
  4013fa:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
  4013fc:	2b02      	cmp	r3, #2
  4013fe:	bf28      	it	cs
  401400:	2501      	movcs	r5, #1
		if( xYieldPending != pdFALSE )
  401402:	4b30      	ldr	r3, [pc, #192]	; (4014c4 <xTaskIncrementTick+0x120>)
  401404:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401406:	2b00      	cmp	r3, #0
}
  401408:	bf0c      	ite	eq
  40140a:	4628      	moveq	r0, r5
  40140c:	2001      	movne	r0, #1
  40140e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			taskSWITCH_DELAYED_LISTS();
  401412:	f640 217f 	movw	r1, #2687	; 0xa7f
  401416:	482c      	ldr	r0, [pc, #176]	; (4014c8 <xTaskIncrementTick+0x124>)
  401418:	4b2c      	ldr	r3, [pc, #176]	; (4014cc <xTaskIncrementTick+0x128>)
  40141a:	4798      	blx	r3
  40141c:	e7d5      	b.n	4013ca <xTaskIncrementTick+0x26>
  40141e:	2500      	movs	r5, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401420:	4f21      	ldr	r7, [pc, #132]	; (4014a8 <xTaskIncrementTick+0x104>)
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401422:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 4014d8 <xTaskIncrementTick+0x134>
					prvAddTaskToReadyList( pxTCB );
  401426:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 4014dc <xTaskIncrementTick+0x138>
  40142a:	e021      	b.n	401470 <xTaskIncrementTick+0xcc>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40142c:	f04f 32ff 	mov.w	r2, #4294967295
  401430:	4b21      	ldr	r3, [pc, #132]	; (4014b8 <xTaskIncrementTick+0x114>)
  401432:	601a      	str	r2, [r3, #0]
					break;
  401434:	e7da      	b.n	4013ec <xTaskIncrementTick+0x48>
						xNextTaskUnblockTime = xItemValue;
  401436:	4a20      	ldr	r2, [pc, #128]	; (4014b8 <xTaskIncrementTick+0x114>)
  401438:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
  40143a:	e7d7      	b.n	4013ec <xTaskIncrementTick+0x48>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40143c:	f104 0018 	add.w	r0, r4, #24
  401440:	47d0      	blx	sl
					prvAddTaskToReadyList( pxTCB );
  401442:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401444:	f8d9 2000 	ldr.w	r2, [r9]
  401448:	2301      	movs	r3, #1
  40144a:	4083      	lsls	r3, r0
  40144c:	4313      	orrs	r3, r2
  40144e:	f8c9 3000 	str.w	r3, [r9]
  401452:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401456:	4631      	mov	r1, r6
  401458:	4b19      	ldr	r3, [pc, #100]	; (4014c0 <xTaskIncrementTick+0x11c>)
  40145a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40145e:	4b1c      	ldr	r3, [pc, #112]	; (4014d0 <xTaskIncrementTick+0x12c>)
  401460:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401462:	4b16      	ldr	r3, [pc, #88]	; (4014bc <xTaskIncrementTick+0x118>)
  401464:	681b      	ldr	r3, [r3, #0]
  401466:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
  40146a:	429a      	cmp	r2, r3
  40146c:	bf28      	it	cs
  40146e:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401470:	683b      	ldr	r3, [r7, #0]
  401472:	681b      	ldr	r3, [r3, #0]
  401474:	2b00      	cmp	r3, #0
  401476:	d0d9      	beq.n	40142c <xTaskIncrementTick+0x88>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401478:	683b      	ldr	r3, [r7, #0]
  40147a:	68db      	ldr	r3, [r3, #12]
  40147c:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  40147e:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
  401480:	4598      	cmp	r8, r3
  401482:	d3d8      	bcc.n	401436 <xTaskIncrementTick+0x92>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401484:	1d26      	adds	r6, r4, #4
  401486:	4630      	mov	r0, r6
  401488:	47d0      	blx	sl
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40148a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  40148c:	2b00      	cmp	r3, #0
  40148e:	d1d5      	bne.n	40143c <xTaskIncrementTick+0x98>
  401490:	e7d7      	b.n	401442 <xTaskIncrementTick+0x9e>
		++uxPendedTicks;
  401492:	4a10      	ldr	r2, [pc, #64]	; (4014d4 <xTaskIncrementTick+0x130>)
  401494:	6813      	ldr	r3, [r2, #0]
  401496:	3301      	adds	r3, #1
  401498:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
  40149a:	2500      	movs	r5, #0
  40149c:	e7b1      	b.n	401402 <xTaskIncrementTick+0x5e>
  40149e:	bf00      	nop
  4014a0:	2000052c 	.word	0x2000052c
  4014a4:	20000584 	.word	0x20000584
  4014a8:	2000047c 	.word	0x2000047c
  4014ac:	20000480 	.word	0x20000480
  4014b0:	20000568 	.word	0x20000568
  4014b4:	00401065 	.word	0x00401065
  4014b8:	20000564 	.word	0x20000564
  4014bc:	20000478 	.word	0x20000478
  4014c0:	20000484 	.word	0x20000484
  4014c4:	20000588 	.word	0x20000588
  4014c8:	00402758 	.word	0x00402758
  4014cc:	00402349 	.word	0x00402349
  4014d0:	00400181 	.word	0x00400181
  4014d4:	20000528 	.word	0x20000528
  4014d8:	004001cd 	.word	0x004001cd
  4014dc:	20000534 	.word	0x20000534

004014e0 <xTaskResumeAll>:
{
  4014e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
  4014e4:	4b34      	ldr	r3, [pc, #208]	; (4015b8 <xTaskResumeAll+0xd8>)
  4014e6:	681b      	ldr	r3, [r3, #0]
  4014e8:	2b00      	cmp	r3, #0
  4014ea:	d033      	beq.n	401554 <xTaskResumeAll+0x74>
	taskENTER_CRITICAL();
  4014ec:	4b33      	ldr	r3, [pc, #204]	; (4015bc <xTaskResumeAll+0xdc>)
  4014ee:	4798      	blx	r3
		--uxSchedulerSuspended;
  4014f0:	4b31      	ldr	r3, [pc, #196]	; (4015b8 <xTaskResumeAll+0xd8>)
  4014f2:	681a      	ldr	r2, [r3, #0]
  4014f4:	3a01      	subs	r2, #1
  4014f6:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4014f8:	681b      	ldr	r3, [r3, #0]
  4014fa:	2b00      	cmp	r3, #0
  4014fc:	d153      	bne.n	4015a6 <xTaskResumeAll+0xc6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4014fe:	4b30      	ldr	r3, [pc, #192]	; (4015c0 <xTaskResumeAll+0xe0>)
  401500:	681b      	ldr	r3, [r3, #0]
  401502:	2b00      	cmp	r3, #0
  401504:	d02c      	beq.n	401560 <xTaskResumeAll+0x80>
  401506:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401508:	4e2e      	ldr	r6, [pc, #184]	; (4015c4 <xTaskResumeAll+0xe4>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40150a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 4015f8 <xTaskResumeAll+0x118>
					prvAddTaskToReadyList( pxTCB );
  40150e:	4f2e      	ldr	r7, [pc, #184]	; (4015c8 <xTaskResumeAll+0xe8>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401510:	6833      	ldr	r3, [r6, #0]
  401512:	b33b      	cbz	r3, 401564 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401514:	68f3      	ldr	r3, [r6, #12]
  401516:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401518:	f104 0018 	add.w	r0, r4, #24
  40151c:	47c0      	blx	r8
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  40151e:	1d25      	adds	r5, r4, #4
  401520:	4628      	mov	r0, r5
  401522:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  401524:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401526:	683a      	ldr	r2, [r7, #0]
  401528:	2301      	movs	r3, #1
  40152a:	4083      	lsls	r3, r0
  40152c:	4313      	orrs	r3, r2
  40152e:	603b      	str	r3, [r7, #0]
  401530:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401534:	4629      	mov	r1, r5
  401536:	4b25      	ldr	r3, [pc, #148]	; (4015cc <xTaskResumeAll+0xec>)
  401538:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40153c:	4b24      	ldr	r3, [pc, #144]	; (4015d0 <xTaskResumeAll+0xf0>)
  40153e:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401540:	4b24      	ldr	r3, [pc, #144]	; (4015d4 <xTaskResumeAll+0xf4>)
  401542:	681b      	ldr	r3, [r3, #0]
  401544:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401548:	429a      	cmp	r2, r3
  40154a:	d3e1      	bcc.n	401510 <xTaskResumeAll+0x30>
						xYieldPending = pdTRUE;
  40154c:	2201      	movs	r2, #1
  40154e:	4b22      	ldr	r3, [pc, #136]	; (4015d8 <xTaskResumeAll+0xf8>)
  401550:	601a      	str	r2, [r3, #0]
  401552:	e7dd      	b.n	401510 <xTaskResumeAll+0x30>
	configASSERT( uxSchedulerSuspended );
  401554:	f640 0185 	movw	r1, #2181	; 0x885
  401558:	4820      	ldr	r0, [pc, #128]	; (4015dc <xTaskResumeAll+0xfc>)
  40155a:	4b21      	ldr	r3, [pc, #132]	; (4015e0 <xTaskResumeAll+0x100>)
  40155c:	4798      	blx	r3
  40155e:	e7c5      	b.n	4014ec <xTaskResumeAll+0xc>
BaseType_t xAlreadyYielded = pdFALSE;
  401560:	2400      	movs	r4, #0
  401562:	e021      	b.n	4015a8 <xTaskResumeAll+0xc8>
				if( pxTCB != NULL )
  401564:	b10c      	cbz	r4, 40156a <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
  401566:	4b1f      	ldr	r3, [pc, #124]	; (4015e4 <xTaskResumeAll+0x104>)
  401568:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  40156a:	4b1f      	ldr	r3, [pc, #124]	; (4015e8 <xTaskResumeAll+0x108>)
  40156c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  40156e:	b16c      	cbz	r4, 40158c <xTaskResumeAll+0xac>
							if( xTaskIncrementTick() != pdFALSE )
  401570:	4d1e      	ldr	r5, [pc, #120]	; (4015ec <xTaskResumeAll+0x10c>)
								xYieldPending = pdTRUE;
  401572:	4f19      	ldr	r7, [pc, #100]	; (4015d8 <xTaskResumeAll+0xf8>)
  401574:	2601      	movs	r6, #1
  401576:	e001      	b.n	40157c <xTaskResumeAll+0x9c>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  401578:	3c01      	subs	r4, #1
  40157a:	d004      	beq.n	401586 <xTaskResumeAll+0xa6>
							if( xTaskIncrementTick() != pdFALSE )
  40157c:	47a8      	blx	r5
  40157e:	2800      	cmp	r0, #0
  401580:	d0fa      	beq.n	401578 <xTaskResumeAll+0x98>
								xYieldPending = pdTRUE;
  401582:	603e      	str	r6, [r7, #0]
  401584:	e7f8      	b.n	401578 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
  401586:	2200      	movs	r2, #0
  401588:	4b17      	ldr	r3, [pc, #92]	; (4015e8 <xTaskResumeAll+0x108>)
  40158a:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
  40158c:	4b12      	ldr	r3, [pc, #72]	; (4015d8 <xTaskResumeAll+0xf8>)
  40158e:	681b      	ldr	r3, [r3, #0]
  401590:	b17b      	cbz	r3, 4015b2 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
  401592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401596:	4b16      	ldr	r3, [pc, #88]	; (4015f0 <xTaskResumeAll+0x110>)
  401598:	601a      	str	r2, [r3, #0]
  40159a:	f3bf 8f4f 	dsb	sy
  40159e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4015a2:	2401      	movs	r4, #1
  4015a4:	e000      	b.n	4015a8 <xTaskResumeAll+0xc8>
BaseType_t xAlreadyYielded = pdFALSE;
  4015a6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4015a8:	4b12      	ldr	r3, [pc, #72]	; (4015f4 <xTaskResumeAll+0x114>)
  4015aa:	4798      	blx	r3
}
  4015ac:	4620      	mov	r0, r4
  4015ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
  4015b2:	2400      	movs	r4, #0
  4015b4:	e7f8      	b.n	4015a8 <xTaskResumeAll+0xc8>
  4015b6:	bf00      	nop
  4015b8:	2000052c 	.word	0x2000052c
  4015bc:	004002c5 	.word	0x004002c5
  4015c0:	20000524 	.word	0x20000524
  4015c4:	2000056c 	.word	0x2000056c
  4015c8:	20000534 	.word	0x20000534
  4015cc:	20000484 	.word	0x20000484
  4015d0:	00400181 	.word	0x00400181
  4015d4:	20000478 	.word	0x20000478
  4015d8:	20000588 	.word	0x20000588
  4015dc:	00402758 	.word	0x00402758
  4015e0:	00402349 	.word	0x00402349
  4015e4:	00401065 	.word	0x00401065
  4015e8:	20000528 	.word	0x20000528
  4015ec:	004013a5 	.word	0x004013a5
  4015f0:	e000ed04 	.word	0xe000ed04
  4015f4:	0040030d 	.word	0x0040030d
  4015f8:	004001cd 	.word	0x004001cd

004015fc <vTaskDelay>:
	{
  4015fc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4015fe:	b160      	cbz	r0, 40161a <vTaskDelay+0x1e>
  401600:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  401602:	4b0d      	ldr	r3, [pc, #52]	; (401638 <vTaskDelay+0x3c>)
  401604:	681b      	ldr	r3, [r3, #0]
  401606:	b98b      	cbnz	r3, 40162c <vTaskDelay+0x30>
			vTaskSuspendAll();
  401608:	4b0c      	ldr	r3, [pc, #48]	; (40163c <vTaskDelay+0x40>)
  40160a:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  40160c:	2100      	movs	r1, #0
  40160e:	4620      	mov	r0, r4
  401610:	4b0b      	ldr	r3, [pc, #44]	; (401640 <vTaskDelay+0x44>)
  401612:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  401614:	4b0b      	ldr	r3, [pc, #44]	; (401644 <vTaskDelay+0x48>)
  401616:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  401618:	b938      	cbnz	r0, 40162a <vTaskDelay+0x2e>
			portYIELD_WITHIN_API();
  40161a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40161e:	4b0a      	ldr	r3, [pc, #40]	; (401648 <vTaskDelay+0x4c>)
  401620:	601a      	str	r2, [r3, #0]
  401622:	f3bf 8f4f 	dsb	sy
  401626:	f3bf 8f6f 	isb	sy
  40162a:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
  40162c:	f240 513c 	movw	r1, #1340	; 0x53c
  401630:	4806      	ldr	r0, [pc, #24]	; (40164c <vTaskDelay+0x50>)
  401632:	4b07      	ldr	r3, [pc, #28]	; (401650 <vTaskDelay+0x54>)
  401634:	4798      	blx	r3
  401636:	e7e7      	b.n	401608 <vTaskDelay+0xc>
  401638:	2000052c 	.word	0x2000052c
  40163c:	00401389 	.word	0x00401389
  401640:	00401091 	.word	0x00401091
  401644:	004014e1 	.word	0x004014e1
  401648:	e000ed04 	.word	0xe000ed04
  40164c:	00402758 	.word	0x00402758
  401650:	00402349 	.word	0x00402349

00401654 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401654:	4b2b      	ldr	r3, [pc, #172]	; (401704 <vTaskSwitchContext+0xb0>)
  401656:	681b      	ldr	r3, [r3, #0]
  401658:	2b00      	cmp	r3, #0
  40165a:	d134      	bne.n	4016c6 <vTaskSwitchContext+0x72>
{
  40165c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40165e:	2200      	movs	r2, #0
  401660:	4b29      	ldr	r3, [pc, #164]	; (401708 <vTaskSwitchContext+0xb4>)
  401662:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  401664:	4b29      	ldr	r3, [pc, #164]	; (40170c <vTaskSwitchContext+0xb8>)
  401666:	681b      	ldr	r3, [r3, #0]
  401668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40166a:	681a      	ldr	r2, [r3, #0]
  40166c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401670:	d02d      	beq.n	4016ce <vTaskSwitchContext+0x7a>
  401672:	4b26      	ldr	r3, [pc, #152]	; (40170c <vTaskSwitchContext+0xb8>)
  401674:	6818      	ldr	r0, [r3, #0]
  401676:	6819      	ldr	r1, [r3, #0]
  401678:	3134      	adds	r1, #52	; 0x34
  40167a:	4b25      	ldr	r3, [pc, #148]	; (401710 <vTaskSwitchContext+0xbc>)
  40167c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  40167e:	4b25      	ldr	r3, [pc, #148]	; (401714 <vTaskSwitchContext+0xc0>)
  401680:	681c      	ldr	r4, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  401682:	fab4 f484 	clz	r4, r4
  401686:	b2e4      	uxtb	r4, r4
  401688:	f1c4 041f 	rsb	r4, r4, #31
  40168c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  401690:	009b      	lsls	r3, r3, #2
  401692:	4a21      	ldr	r2, [pc, #132]	; (401718 <vTaskSwitchContext+0xc4>)
  401694:	58d3      	ldr	r3, [r2, r3]
  401696:	b33b      	cbz	r3, 4016e8 <vTaskSwitchContext+0x94>
  401698:	4b1f      	ldr	r3, [pc, #124]	; (401718 <vTaskSwitchContext+0xc4>)
  40169a:	00a2      	lsls	r2, r4, #2
  40169c:	1911      	adds	r1, r2, r4
  40169e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  4016a2:	6848      	ldr	r0, [r1, #4]
  4016a4:	6840      	ldr	r0, [r0, #4]
  4016a6:	6048      	str	r0, [r1, #4]
  4016a8:	4422      	add	r2, r4
  4016aa:	460b      	mov	r3, r1
  4016ac:	3308      	adds	r3, #8
  4016ae:	4298      	cmp	r0, r3
  4016b0:	d020      	beq.n	4016f4 <vTaskSwitchContext+0xa0>
  4016b2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4016b6:	4b18      	ldr	r3, [pc, #96]	; (401718 <vTaskSwitchContext+0xc4>)
  4016b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  4016bc:	6863      	ldr	r3, [r4, #4]
  4016be:	68da      	ldr	r2, [r3, #12]
  4016c0:	4b12      	ldr	r3, [pc, #72]	; (40170c <vTaskSwitchContext+0xb8>)
  4016c2:	601a      	str	r2, [r3, #0]
  4016c4:	bd10      	pop	{r4, pc}
		xYieldPending = pdTRUE;
  4016c6:	2201      	movs	r2, #1
  4016c8:	4b0f      	ldr	r3, [pc, #60]	; (401708 <vTaskSwitchContext+0xb4>)
  4016ca:	601a      	str	r2, [r3, #0]
  4016cc:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4016ce:	685a      	ldr	r2, [r3, #4]
  4016d0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4016d4:	d1cd      	bne.n	401672 <vTaskSwitchContext+0x1e>
  4016d6:	689a      	ldr	r2, [r3, #8]
  4016d8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4016dc:	d1c9      	bne.n	401672 <vTaskSwitchContext+0x1e>
  4016de:	68db      	ldr	r3, [r3, #12]
  4016e0:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4016e4:	d1c5      	bne.n	401672 <vTaskSwitchContext+0x1e>
  4016e6:	e7ca      	b.n	40167e <vTaskSwitchContext+0x2a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4016e8:	f640 31b7 	movw	r1, #2999	; 0xbb7
  4016ec:	480b      	ldr	r0, [pc, #44]	; (40171c <vTaskSwitchContext+0xc8>)
  4016ee:	4b0c      	ldr	r3, [pc, #48]	; (401720 <vTaskSwitchContext+0xcc>)
  4016f0:	4798      	blx	r3
  4016f2:	e7d1      	b.n	401698 <vTaskSwitchContext+0x44>
  4016f4:	6841      	ldr	r1, [r0, #4]
  4016f6:	4613      	mov	r3, r2
  4016f8:	4a07      	ldr	r2, [pc, #28]	; (401718 <vTaskSwitchContext+0xc4>)
  4016fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4016fe:	6059      	str	r1, [r3, #4]
  401700:	e7d7      	b.n	4016b2 <vTaskSwitchContext+0x5e>
  401702:	bf00      	nop
  401704:	2000052c 	.word	0x2000052c
  401708:	20000588 	.word	0x20000588
  40170c:	20000478 	.word	0x20000478
  401710:	00402389 	.word	0x00402389
  401714:	20000534 	.word	0x20000534
  401718:	20000484 	.word	0x20000484
  40171c:	00402758 	.word	0x00402758
  401720:	00402349 	.word	0x00402349

00401724 <vTaskPlaceOnEventList>:
{
  401724:	b538      	push	{r3, r4, r5, lr}
  401726:	460c      	mov	r4, r1
	configASSERT( pxEventList );
  401728:	4605      	mov	r5, r0
  40172a:	b150      	cbz	r0, 401742 <vTaskPlaceOnEventList+0x1e>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40172c:	4b08      	ldr	r3, [pc, #32]	; (401750 <vTaskPlaceOnEventList+0x2c>)
  40172e:	6819      	ldr	r1, [r3, #0]
  401730:	3118      	adds	r1, #24
  401732:	4628      	mov	r0, r5
  401734:	4b07      	ldr	r3, [pc, #28]	; (401754 <vTaskPlaceOnEventList+0x30>)
  401736:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  401738:	2101      	movs	r1, #1
  40173a:	4620      	mov	r0, r4
  40173c:	4b06      	ldr	r3, [pc, #24]	; (401758 <vTaskPlaceOnEventList+0x34>)
  40173e:	4798      	blx	r3
  401740:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxEventList );
  401742:	f640 31ce 	movw	r1, #3022	; 0xbce
  401746:	4805      	ldr	r0, [pc, #20]	; (40175c <vTaskPlaceOnEventList+0x38>)
  401748:	4b05      	ldr	r3, [pc, #20]	; (401760 <vTaskPlaceOnEventList+0x3c>)
  40174a:	4798      	blx	r3
  40174c:	e7ee      	b.n	40172c <vTaskPlaceOnEventList+0x8>
  40174e:	bf00      	nop
  401750:	20000478 	.word	0x20000478
  401754:	00400199 	.word	0x00400199
  401758:	00401091 	.word	0x00401091
  40175c:	00402758 	.word	0x00402758
  401760:	00402349 	.word	0x00402349

00401764 <vTaskPlaceOnEventListRestricted>:
	{
  401764:	b570      	push	{r4, r5, r6, lr}
  401766:	460d      	mov	r5, r1
  401768:	4614      	mov	r4, r2
		configASSERT( pxEventList );
  40176a:	4606      	mov	r6, r0
  40176c:	b170      	cbz	r0, 40178c <vTaskPlaceOnEventListRestricted+0x28>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40176e:	4b0a      	ldr	r3, [pc, #40]	; (401798 <vTaskPlaceOnEventListRestricted+0x34>)
  401770:	6819      	ldr	r1, [r3, #0]
  401772:	3118      	adds	r1, #24
  401774:	4630      	mov	r0, r6
  401776:	4b09      	ldr	r3, [pc, #36]	; (40179c <vTaskPlaceOnEventListRestricted+0x38>)
  401778:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
  40177a:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  40177c:	4621      	mov	r1, r4
  40177e:	bf0c      	ite	eq
  401780:	4628      	moveq	r0, r5
  401782:	f04f 30ff 	movne.w	r0, #4294967295
  401786:	4b06      	ldr	r3, [pc, #24]	; (4017a0 <vTaskPlaceOnEventListRestricted+0x3c>)
  401788:	4798      	blx	r3
  40178a:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
  40178c:	f640 31f9 	movw	r1, #3065	; 0xbf9
  401790:	4804      	ldr	r0, [pc, #16]	; (4017a4 <vTaskPlaceOnEventListRestricted+0x40>)
  401792:	4b05      	ldr	r3, [pc, #20]	; (4017a8 <vTaskPlaceOnEventListRestricted+0x44>)
  401794:	4798      	blx	r3
  401796:	e7ea      	b.n	40176e <vTaskPlaceOnEventListRestricted+0xa>
  401798:	20000478 	.word	0x20000478
  40179c:	00400181 	.word	0x00400181
  4017a0:	00401091 	.word	0x00401091
  4017a4:	00402758 	.word	0x00402758
  4017a8:	00402349 	.word	0x00402349

004017ac <xTaskRemoveFromEventList>:
{
  4017ac:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  4017ae:	68c3      	ldr	r3, [r0, #12]
  4017b0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4017b2:	b32c      	cbz	r4, 401800 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4017b4:	f104 0518 	add.w	r5, r4, #24
  4017b8:	4628      	mov	r0, r5
  4017ba:	4b17      	ldr	r3, [pc, #92]	; (401818 <xTaskRemoveFromEventList+0x6c>)
  4017bc:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4017be:	4b17      	ldr	r3, [pc, #92]	; (40181c <xTaskRemoveFromEventList+0x70>)
  4017c0:	681b      	ldr	r3, [r3, #0]
  4017c2:	bb1b      	cbnz	r3, 40180c <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  4017c4:	1d25      	adds	r5, r4, #4
  4017c6:	4628      	mov	r0, r5
  4017c8:	4b13      	ldr	r3, [pc, #76]	; (401818 <xTaskRemoveFromEventList+0x6c>)
  4017ca:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4017cc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4017ce:	4a14      	ldr	r2, [pc, #80]	; (401820 <xTaskRemoveFromEventList+0x74>)
  4017d0:	6811      	ldr	r1, [r2, #0]
  4017d2:	2301      	movs	r3, #1
  4017d4:	4083      	lsls	r3, r0
  4017d6:	430b      	orrs	r3, r1
  4017d8:	6013      	str	r3, [r2, #0]
  4017da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4017de:	4629      	mov	r1, r5
  4017e0:	4b10      	ldr	r3, [pc, #64]	; (401824 <xTaskRemoveFromEventList+0x78>)
  4017e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4017e6:	4b10      	ldr	r3, [pc, #64]	; (401828 <xTaskRemoveFromEventList+0x7c>)
  4017e8:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4017ea:	4b10      	ldr	r3, [pc, #64]	; (40182c <xTaskRemoveFromEventList+0x80>)
  4017ec:	681b      	ldr	r3, [r3, #0]
  4017ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4017f2:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
  4017f4:	bf83      	ittte	hi
  4017f6:	2001      	movhi	r0, #1
  4017f8:	4b0d      	ldrhi	r3, [pc, #52]	; (401830 <xTaskRemoveFromEventList+0x84>)
  4017fa:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
  4017fc:	2000      	movls	r0, #0
}
  4017fe:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxUnblockedTCB );
  401800:	f640 4129 	movw	r1, #3113	; 0xc29
  401804:	480b      	ldr	r0, [pc, #44]	; (401834 <xTaskRemoveFromEventList+0x88>)
  401806:	4b0c      	ldr	r3, [pc, #48]	; (401838 <xTaskRemoveFromEventList+0x8c>)
  401808:	4798      	blx	r3
  40180a:	e7d3      	b.n	4017b4 <xTaskRemoveFromEventList+0x8>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40180c:	4629      	mov	r1, r5
  40180e:	480b      	ldr	r0, [pc, #44]	; (40183c <xTaskRemoveFromEventList+0x90>)
  401810:	4b05      	ldr	r3, [pc, #20]	; (401828 <xTaskRemoveFromEventList+0x7c>)
  401812:	4798      	blx	r3
  401814:	e7e9      	b.n	4017ea <xTaskRemoveFromEventList+0x3e>
  401816:	bf00      	nop
  401818:	004001cd 	.word	0x004001cd
  40181c:	2000052c 	.word	0x2000052c
  401820:	20000534 	.word	0x20000534
  401824:	20000484 	.word	0x20000484
  401828:	00400181 	.word	0x00400181
  40182c:	20000478 	.word	0x20000478
  401830:	20000588 	.word	0x20000588
  401834:	00402758 	.word	0x00402758
  401838:	00402349 	.word	0x00402349
  40183c:	2000056c 	.word	0x2000056c

00401840 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401840:	4b03      	ldr	r3, [pc, #12]	; (401850 <vTaskInternalSetTimeOutState+0x10>)
  401842:	681b      	ldr	r3, [r3, #0]
  401844:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401846:	4b03      	ldr	r3, [pc, #12]	; (401854 <vTaskInternalSetTimeOutState+0x14>)
  401848:	681b      	ldr	r3, [r3, #0]
  40184a:	6043      	str	r3, [r0, #4]
  40184c:	4770      	bx	lr
  40184e:	bf00      	nop
  401850:	20000568 	.word	0x20000568
  401854:	20000584 	.word	0x20000584

00401858 <xTaskCheckForTimeOut>:
{
  401858:	b538      	push	{r3, r4, r5, lr}
  40185a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
  40185c:	4605      	mov	r5, r0
  40185e:	b1b8      	cbz	r0, 401890 <xTaskCheckForTimeOut+0x38>
	configASSERT( pxTicksToWait );
  401860:	b1e4      	cbz	r4, 40189c <xTaskCheckForTimeOut+0x44>
	taskENTER_CRITICAL();
  401862:	4b16      	ldr	r3, [pc, #88]	; (4018bc <xTaskCheckForTimeOut+0x64>)
  401864:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  401866:	4b16      	ldr	r3, [pc, #88]	; (4018c0 <xTaskCheckForTimeOut+0x68>)
  401868:	681b      	ldr	r3, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  40186a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40186c:	4915      	ldr	r1, [pc, #84]	; (4018c4 <xTaskCheckForTimeOut+0x6c>)
  40186e:	6809      	ldr	r1, [r1, #0]
  401870:	6828      	ldr	r0, [r5, #0]
  401872:	4288      	cmp	r0, r1
  401874:	d001      	beq.n	40187a <xTaskCheckForTimeOut+0x22>
  401876:	4293      	cmp	r3, r2
  401878:	d21d      	bcs.n	4018b6 <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  40187a:	1a9b      	subs	r3, r3, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  40187c:	6822      	ldr	r2, [r4, #0]
  40187e:	4293      	cmp	r3, r2
  401880:	d312      	bcc.n	4018a8 <xTaskCheckForTimeOut+0x50>
			*pxTicksToWait = 0;
  401882:	2300      	movs	r3, #0
  401884:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
  401886:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  401888:	4b0f      	ldr	r3, [pc, #60]	; (4018c8 <xTaskCheckForTimeOut+0x70>)
  40188a:	4798      	blx	r3
}
  40188c:	4620      	mov	r0, r4
  40188e:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxTimeOut );
  401890:	f640 4194 	movw	r1, #3220	; 0xc94
  401894:	480d      	ldr	r0, [pc, #52]	; (4018cc <xTaskCheckForTimeOut+0x74>)
  401896:	4b0e      	ldr	r3, [pc, #56]	; (4018d0 <xTaskCheckForTimeOut+0x78>)
  401898:	4798      	blx	r3
  40189a:	e7e1      	b.n	401860 <xTaskCheckForTimeOut+0x8>
	configASSERT( pxTicksToWait );
  40189c:	f640 4195 	movw	r1, #3221	; 0xc95
  4018a0:	480a      	ldr	r0, [pc, #40]	; (4018cc <xTaskCheckForTimeOut+0x74>)
  4018a2:	4b0b      	ldr	r3, [pc, #44]	; (4018d0 <xTaskCheckForTimeOut+0x78>)
  4018a4:	4798      	blx	r3
  4018a6:	e7dc      	b.n	401862 <xTaskCheckForTimeOut+0xa>
			*pxTicksToWait -= xElapsedTime;
  4018a8:	1ad3      	subs	r3, r2, r3
  4018aa:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  4018ac:	4628      	mov	r0, r5
  4018ae:	4b09      	ldr	r3, [pc, #36]	; (4018d4 <xTaskCheckForTimeOut+0x7c>)
  4018b0:	4798      	blx	r3
			xReturn = pdFALSE;
  4018b2:	2400      	movs	r4, #0
  4018b4:	e7e8      	b.n	401888 <xTaskCheckForTimeOut+0x30>
			xReturn = pdTRUE;
  4018b6:	2401      	movs	r4, #1
  4018b8:	e7e6      	b.n	401888 <xTaskCheckForTimeOut+0x30>
  4018ba:	bf00      	nop
  4018bc:	004002c5 	.word	0x004002c5
  4018c0:	20000584 	.word	0x20000584
  4018c4:	20000568 	.word	0x20000568
  4018c8:	0040030d 	.word	0x0040030d
  4018cc:	00402758 	.word	0x00402758
  4018d0:	00402349 	.word	0x00402349
  4018d4:	00401841 	.word	0x00401841

004018d8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4018d8:	2201      	movs	r2, #1
  4018da:	4b01      	ldr	r3, [pc, #4]	; (4018e0 <vTaskMissedYield+0x8>)
  4018dc:	601a      	str	r2, [r3, #0]
  4018de:	4770      	bx	lr
  4018e0:	20000588 	.word	0x20000588

004018e4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
  4018e4:	4b05      	ldr	r3, [pc, #20]	; (4018fc <xTaskGetSchedulerState+0x18>)
  4018e6:	681b      	ldr	r3, [r3, #0]
  4018e8:	b133      	cbz	r3, 4018f8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4018ea:	4b05      	ldr	r3, [pc, #20]	; (401900 <xTaskGetSchedulerState+0x1c>)
  4018ec:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
  4018ee:	2b00      	cmp	r3, #0
  4018f0:	bf0c      	ite	eq
  4018f2:	2002      	moveq	r0, #2
  4018f4:	2000      	movne	r0, #0
  4018f6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4018f8:	2001      	movs	r0, #1
	}
  4018fa:	4770      	bx	lr
  4018fc:	20000580 	.word	0x20000580
  401900:	2000052c 	.word	0x2000052c

00401904 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  401904:	2800      	cmp	r0, #0
  401906:	d046      	beq.n	401996 <xTaskPriorityDisinherit+0x92>
	{
  401908:	b538      	push	{r3, r4, r5, lr}
  40190a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
  40190c:	4b24      	ldr	r3, [pc, #144]	; (4019a0 <xTaskPriorityDisinherit+0x9c>)
  40190e:	681b      	ldr	r3, [r3, #0]
  401910:	4298      	cmp	r0, r3
  401912:	d004      	beq.n	40191e <xTaskPriorityDisinherit+0x1a>
  401914:	f640 71d1 	movw	r1, #4049	; 0xfd1
  401918:	4822      	ldr	r0, [pc, #136]	; (4019a4 <xTaskPriorityDisinherit+0xa0>)
  40191a:	4b23      	ldr	r3, [pc, #140]	; (4019a8 <xTaskPriorityDisinherit+0xa4>)
  40191c:	4798      	blx	r3
			configASSERT( pxTCB->uxMutexesHeld );
  40191e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401920:	b14b      	cbz	r3, 401936 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
  401922:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  401924:	3b01      	subs	r3, #1
  401926:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401928:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  40192a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  40192c:	4291      	cmp	r1, r2
  40192e:	d034      	beq.n	40199a <xTaskPriorityDisinherit+0x96>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401930:	b13b      	cbz	r3, 401942 <xTaskPriorityDisinherit+0x3e>
	BaseType_t xReturn = pdFALSE;
  401932:	2000      	movs	r0, #0
	}
  401934:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB->uxMutexesHeld );
  401936:	f640 71d2 	movw	r1, #4050	; 0xfd2
  40193a:	481a      	ldr	r0, [pc, #104]	; (4019a4 <xTaskPriorityDisinherit+0xa0>)
  40193c:	4b1a      	ldr	r3, [pc, #104]	; (4019a8 <xTaskPriorityDisinherit+0xa4>)
  40193e:	4798      	blx	r3
  401940:	e7ef      	b.n	401922 <xTaskPriorityDisinherit+0x1e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401942:	1d25      	adds	r5, r4, #4
  401944:	4628      	mov	r0, r5
  401946:	4b19      	ldr	r3, [pc, #100]	; (4019ac <xTaskPriorityDisinherit+0xa8>)
  401948:	4798      	blx	r3
  40194a:	b970      	cbnz	r0, 40196a <xTaskPriorityDisinherit+0x66>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40194c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40194e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  401952:	009b      	lsls	r3, r3, #2
  401954:	4916      	ldr	r1, [pc, #88]	; (4019b0 <xTaskPriorityDisinherit+0xac>)
  401956:	58cb      	ldr	r3, [r1, r3]
  401958:	b93b      	cbnz	r3, 40196a <xTaskPriorityDisinherit+0x66>
  40195a:	4816      	ldr	r0, [pc, #88]	; (4019b4 <xTaskPriorityDisinherit+0xb0>)
  40195c:	6803      	ldr	r3, [r0, #0]
  40195e:	2101      	movs	r1, #1
  401960:	fa01 f202 	lsl.w	r2, r1, r2
  401964:	ea23 0202 	bic.w	r2, r3, r2
  401968:	6002      	str	r2, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  40196a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  40196c:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40196e:	f1c0 0308 	rsb	r3, r0, #8
  401972:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  401974:	4a0f      	ldr	r2, [pc, #60]	; (4019b4 <xTaskPriorityDisinherit+0xb0>)
  401976:	6811      	ldr	r1, [r2, #0]
  401978:	2401      	movs	r4, #1
  40197a:	fa04 f300 	lsl.w	r3, r4, r0
  40197e:	430b      	orrs	r3, r1
  401980:	6013      	str	r3, [r2, #0]
  401982:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401986:	4629      	mov	r1, r5
  401988:	4b09      	ldr	r3, [pc, #36]	; (4019b0 <xTaskPriorityDisinherit+0xac>)
  40198a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40198e:	4b0a      	ldr	r3, [pc, #40]	; (4019b8 <xTaskPriorityDisinherit+0xb4>)
  401990:	4798      	blx	r3
					xReturn = pdTRUE;
  401992:	4620      	mov	r0, r4
  401994:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  401996:	2000      	movs	r0, #0
  401998:	4770      	bx	lr
  40199a:	2000      	movs	r0, #0
  40199c:	bd38      	pop	{r3, r4, r5, pc}
  40199e:	bf00      	nop
  4019a0:	20000478 	.word	0x20000478
  4019a4:	00402758 	.word	0x00402758
  4019a8:	00402349 	.word	0x00402349
  4019ac:	004001cd 	.word	0x004001cd
  4019b0:	20000484 	.word	0x20000484
  4019b4:	20000534 	.word	0x20000534
  4019b8:	00400181 	.word	0x00400181

004019bc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  4019bc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4019be:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4019c0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  4019c2:	4291      	cmp	r1, r2
  4019c4:	d80c      	bhi.n	4019e0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4019c6:	1ad2      	subs	r2, r2, r3
  4019c8:	6983      	ldr	r3, [r0, #24]
  4019ca:	429a      	cmp	r2, r3
  4019cc:	d301      	bcc.n	4019d2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4019ce:	2001      	movs	r0, #1
  4019d0:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4019d2:	1d01      	adds	r1, r0, #4
  4019d4:	4b09      	ldr	r3, [pc, #36]	; (4019fc <prvInsertTimerInActiveList+0x40>)
  4019d6:	6818      	ldr	r0, [r3, #0]
  4019d8:	4b09      	ldr	r3, [pc, #36]	; (401a00 <prvInsertTimerInActiveList+0x44>)
  4019da:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4019dc:	2000      	movs	r0, #0
  4019de:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4019e0:	429a      	cmp	r2, r3
  4019e2:	d201      	bcs.n	4019e8 <prvInsertTimerInActiveList+0x2c>
  4019e4:	4299      	cmp	r1, r3
  4019e6:	d206      	bcs.n	4019f6 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4019e8:	1d01      	adds	r1, r0, #4
  4019ea:	4b06      	ldr	r3, [pc, #24]	; (401a04 <prvInsertTimerInActiveList+0x48>)
  4019ec:	6818      	ldr	r0, [r3, #0]
  4019ee:	4b04      	ldr	r3, [pc, #16]	; (401a00 <prvInsertTimerInActiveList+0x44>)
  4019f0:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4019f2:	2000      	movs	r0, #0
  4019f4:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
  4019f6:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
  4019f8:	bd08      	pop	{r3, pc}
  4019fa:	bf00      	nop
  4019fc:	20000590 	.word	0x20000590
  401a00:	00400199 	.word	0x00400199
  401a04:	2000058c 	.word	0x2000058c

00401a08 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401a08:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401a0a:	4b10      	ldr	r3, [pc, #64]	; (401a4c <prvCheckForValidListAndQueue+0x44>)
  401a0c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401a0e:	4b10      	ldr	r3, [pc, #64]	; (401a50 <prvCheckForValidListAndQueue+0x48>)
  401a10:	681b      	ldr	r3, [r3, #0]
  401a12:	b113      	cbz	r3, 401a1a <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401a14:	4b0f      	ldr	r3, [pc, #60]	; (401a54 <prvCheckForValidListAndQueue+0x4c>)
  401a16:	4798      	blx	r3
  401a18:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  401a1a:	4d0f      	ldr	r5, [pc, #60]	; (401a58 <prvCheckForValidListAndQueue+0x50>)
  401a1c:	4628      	mov	r0, r5
  401a1e:	4e0f      	ldr	r6, [pc, #60]	; (401a5c <prvCheckForValidListAndQueue+0x54>)
  401a20:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401a22:	4c0f      	ldr	r4, [pc, #60]	; (401a60 <prvCheckForValidListAndQueue+0x58>)
  401a24:	4620      	mov	r0, r4
  401a26:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401a28:	4b0e      	ldr	r3, [pc, #56]	; (401a64 <prvCheckForValidListAndQueue+0x5c>)
  401a2a:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401a2c:	4b0e      	ldr	r3, [pc, #56]	; (401a68 <prvCheckForValidListAndQueue+0x60>)
  401a2e:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401a30:	2200      	movs	r2, #0
  401a32:	2110      	movs	r1, #16
  401a34:	2005      	movs	r0, #5
  401a36:	4b0d      	ldr	r3, [pc, #52]	; (401a6c <prvCheckForValidListAndQueue+0x64>)
  401a38:	4798      	blx	r3
  401a3a:	4b05      	ldr	r3, [pc, #20]	; (401a50 <prvCheckForValidListAndQueue+0x48>)
  401a3c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  401a3e:	2800      	cmp	r0, #0
  401a40:	d0e8      	beq.n	401a14 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401a42:	490b      	ldr	r1, [pc, #44]	; (401a70 <prvCheckForValidListAndQueue+0x68>)
  401a44:	4b0b      	ldr	r3, [pc, #44]	; (401a74 <prvCheckForValidListAndQueue+0x6c>)
  401a46:	4798      	blx	r3
  401a48:	e7e4      	b.n	401a14 <prvCheckForValidListAndQueue+0xc>
  401a4a:	bf00      	nop
  401a4c:	004002c5 	.word	0x004002c5
  401a50:	200005c0 	.word	0x200005c0
  401a54:	0040030d 	.word	0x0040030d
  401a58:	20000594 	.word	0x20000594
  401a5c:	00400165 	.word	0x00400165
  401a60:	200005a8 	.word	0x200005a8
  401a64:	2000058c 	.word	0x2000058c
  401a68:	20000590 	.word	0x20000590
  401a6c:	00400ae5 	.word	0x00400ae5
  401a70:	00402770 	.word	0x00402770
  401a74:	00400fad 	.word	0x00400fad

00401a78 <xTimerCreateTimerTask>:
{
  401a78:	b510      	push	{r4, lr}
  401a7a:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
  401a7c:	4b0d      	ldr	r3, [pc, #52]	; (401ab4 <xTimerCreateTimerTask+0x3c>)
  401a7e:	4798      	blx	r3
	if( xTimerQueue != NULL )
  401a80:	4b0d      	ldr	r3, [pc, #52]	; (401ab8 <xTimerCreateTimerTask+0x40>)
  401a82:	681b      	ldr	r3, [r3, #0]
  401a84:	b17b      	cbz	r3, 401aa6 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
  401a86:	4b0d      	ldr	r3, [pc, #52]	; (401abc <xTimerCreateTimerTask+0x44>)
  401a88:	9301      	str	r3, [sp, #4]
  401a8a:	2307      	movs	r3, #7
  401a8c:	9300      	str	r3, [sp, #0]
  401a8e:	2300      	movs	r3, #0
  401a90:	f44f 7282 	mov.w	r2, #260	; 0x104
  401a94:	490a      	ldr	r1, [pc, #40]	; (401ac0 <xTimerCreateTimerTask+0x48>)
  401a96:	480b      	ldr	r0, [pc, #44]	; (401ac4 <xTimerCreateTimerTask+0x4c>)
  401a98:	4c0b      	ldr	r4, [pc, #44]	; (401ac8 <xTimerCreateTimerTask+0x50>)
  401a9a:	47a0      	blx	r4
	configASSERT( xReturn );
  401a9c:	4603      	mov	r3, r0
  401a9e:	b110      	cbz	r0, 401aa6 <xTimerCreateTimerTask+0x2e>
}
  401aa0:	4618      	mov	r0, r3
  401aa2:	b002      	add	sp, #8
  401aa4:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
  401aa6:	f240 1113 	movw	r1, #275	; 0x113
  401aaa:	4808      	ldr	r0, [pc, #32]	; (401acc <xTimerCreateTimerTask+0x54>)
  401aac:	4b08      	ldr	r3, [pc, #32]	; (401ad0 <xTimerCreateTimerTask+0x58>)
  401aae:	4798      	blx	r3
  401ab0:	2300      	movs	r3, #0
	return xReturn;
  401ab2:	e7f5      	b.n	401aa0 <xTimerCreateTimerTask+0x28>
  401ab4:	00401a09 	.word	0x00401a09
  401ab8:	200005c0 	.word	0x200005c0
  401abc:	200005c4 	.word	0x200005c4
  401ac0:	00402778 	.word	0x00402778
  401ac4:	00401c01 	.word	0x00401c01
  401ac8:	00401111 	.word	0x00401111
  401acc:	00402780 	.word	0x00402780
  401ad0:	00402349 	.word	0x00402349

00401ad4 <xTimerGenericCommand>:
{
  401ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
  401ad6:	b085      	sub	sp, #20
  401ad8:	460c      	mov	r4, r1
  401ada:	4616      	mov	r6, r2
  401adc:	461f      	mov	r7, r3
	configASSERT( xTimer );
  401ade:	4605      	mov	r5, r0
  401ae0:	b1b0      	cbz	r0, 401b10 <xTimerGenericCommand+0x3c>
	if( xTimerQueue != NULL )
  401ae2:	4b12      	ldr	r3, [pc, #72]	; (401b2c <xTimerGenericCommand+0x58>)
  401ae4:	6818      	ldr	r0, [r3, #0]
  401ae6:	b1f8      	cbz	r0, 401b28 <xTimerGenericCommand+0x54>
		xMessage.xMessageID = xCommandID;
  401ae8:	9400      	str	r4, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  401aea:	9601      	str	r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
  401aec:	9502      	str	r5, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  401aee:	2c05      	cmp	r4, #5
  401af0:	dc14      	bgt.n	401b1c <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401af2:	4b0f      	ldr	r3, [pc, #60]	; (401b30 <xTimerGenericCommand+0x5c>)
  401af4:	4798      	blx	r3
  401af6:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  401af8:	f04f 0300 	mov.w	r3, #0
  401afc:	bf0c      	ite	eq
  401afe:	9a0a      	ldreq	r2, [sp, #40]	; 0x28
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401b00:	461a      	movne	r2, r3
  401b02:	4669      	mov	r1, sp
  401b04:	4809      	ldr	r0, [pc, #36]	; (401b2c <xTimerGenericCommand+0x58>)
  401b06:	6800      	ldr	r0, [r0, #0]
  401b08:	4c0a      	ldr	r4, [pc, #40]	; (401b34 <xTimerGenericCommand+0x60>)
  401b0a:	47a0      	blx	r4
}
  401b0c:	b005      	add	sp, #20
  401b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( xTimer );
  401b10:	f44f 71c1 	mov.w	r1, #386	; 0x182
  401b14:	4808      	ldr	r0, [pc, #32]	; (401b38 <xTimerGenericCommand+0x64>)
  401b16:	4b09      	ldr	r3, [pc, #36]	; (401b3c <xTimerGenericCommand+0x68>)
  401b18:	4798      	blx	r3
  401b1a:	e7e2      	b.n	401ae2 <xTimerGenericCommand+0xe>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401b1c:	2300      	movs	r3, #0
  401b1e:	463a      	mov	r2, r7
  401b20:	4669      	mov	r1, sp
  401b22:	4c07      	ldr	r4, [pc, #28]	; (401b40 <xTimerGenericCommand+0x6c>)
  401b24:	47a0      	blx	r4
  401b26:	e7f1      	b.n	401b0c <xTimerGenericCommand+0x38>
BaseType_t xReturn = pdFAIL;
  401b28:	2000      	movs	r0, #0
	return xReturn;
  401b2a:	e7ef      	b.n	401b0c <xTimerGenericCommand+0x38>
  401b2c:	200005c0 	.word	0x200005c0
  401b30:	004018e5 	.word	0x004018e5
  401b34:	00400b39 	.word	0x00400b39
  401b38:	00402780 	.word	0x00402780
  401b3c:	00402349 	.word	0x00402349
  401b40:	00400d2d 	.word	0x00400d2d

00401b44 <prvSampleTimeNow>:
{
  401b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401b48:	b082      	sub	sp, #8
  401b4a:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  401b4c:	4b23      	ldr	r3, [pc, #140]	; (401bdc <prvSampleTimeNow+0x98>)
  401b4e:	4798      	blx	r3
  401b50:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  401b52:	4b23      	ldr	r3, [pc, #140]	; (401be0 <prvSampleTimeNow+0x9c>)
  401b54:	681b      	ldr	r3, [r3, #0]
  401b56:	4298      	cmp	r0, r3
  401b58:	d316      	bcc.n	401b88 <prvSampleTimeNow+0x44>
		*pxTimerListsWereSwitched = pdFALSE;
  401b5a:	2300      	movs	r3, #0
  401b5c:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  401b60:	4b1f      	ldr	r3, [pc, #124]	; (401be0 <prvSampleTimeNow+0x9c>)
  401b62:	601f      	str	r7, [r3, #0]
}
  401b64:	4638      	mov	r0, r7
  401b66:	b002      	add	sp, #8
  401b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401b6c:	2100      	movs	r1, #0
  401b6e:	9100      	str	r1, [sp, #0]
  401b70:	460b      	mov	r3, r1
  401b72:	4652      	mov	r2, sl
  401b74:	4620      	mov	r0, r4
  401b76:	4c1b      	ldr	r4, [pc, #108]	; (401be4 <prvSampleTimeNow+0xa0>)
  401b78:	47a0      	blx	r4
				configASSERT( xResult );
  401b7a:	b938      	cbnz	r0, 401b8c <prvSampleTimeNow+0x48>
  401b7c:	f44f 7161 	mov.w	r1, #900	; 0x384
  401b80:	4819      	ldr	r0, [pc, #100]	; (401be8 <prvSampleTimeNow+0xa4>)
  401b82:	4b1a      	ldr	r3, [pc, #104]	; (401bec <prvSampleTimeNow+0xa8>)
  401b84:	4798      	blx	r3
  401b86:	e001      	b.n	401b8c <prvSampleTimeNow+0x48>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401b88:	4d19      	ldr	r5, [pc, #100]	; (401bf0 <prvSampleTimeNow+0xac>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401b8a:	4e1a      	ldr	r6, [pc, #104]	; (401bf4 <prvSampleTimeNow+0xb0>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401b8c:	682b      	ldr	r3, [r5, #0]
  401b8e:	681a      	ldr	r2, [r3, #0]
  401b90:	b1d2      	cbz	r2, 401bc8 <prvSampleTimeNow+0x84>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401b92:	68db      	ldr	r3, [r3, #12]
  401b94:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401b98:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401b9a:	f104 0904 	add.w	r9, r4, #4
  401b9e:	4648      	mov	r0, r9
  401ba0:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401ba2:	6a23      	ldr	r3, [r4, #32]
  401ba4:	4620      	mov	r0, r4
  401ba6:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401ba8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  401bac:	f013 0f04 	tst.w	r3, #4
  401bb0:	d0ec      	beq.n	401b8c <prvSampleTimeNow+0x48>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  401bb2:	69a3      	ldr	r3, [r4, #24]
  401bb4:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  401bb6:	459a      	cmp	sl, r3
  401bb8:	d2d8      	bcs.n	401b6c <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  401bba:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401bbc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401bbe:	4649      	mov	r1, r9
  401bc0:	6828      	ldr	r0, [r5, #0]
  401bc2:	4b0d      	ldr	r3, [pc, #52]	; (401bf8 <prvSampleTimeNow+0xb4>)
  401bc4:	4798      	blx	r3
  401bc6:	e7e1      	b.n	401b8c <prvSampleTimeNow+0x48>
	pxCurrentTimerList = pxOverflowTimerList;
  401bc8:	4a0c      	ldr	r2, [pc, #48]	; (401bfc <prvSampleTimeNow+0xb8>)
  401bca:	6810      	ldr	r0, [r2, #0]
  401bcc:	4908      	ldr	r1, [pc, #32]	; (401bf0 <prvSampleTimeNow+0xac>)
  401bce:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  401bd0:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  401bd2:	2301      	movs	r3, #1
  401bd4:	f8c8 3000 	str.w	r3, [r8]
  401bd8:	e7c2      	b.n	401b60 <prvSampleTimeNow+0x1c>
  401bda:	bf00      	nop
  401bdc:	00401399 	.word	0x00401399
  401be0:	200005bc 	.word	0x200005bc
  401be4:	00401ad5 	.word	0x00401ad5
  401be8:	00402780 	.word	0x00402780
  401bec:	00402349 	.word	0x00402349
  401bf0:	2000058c 	.word	0x2000058c
  401bf4:	004001cd 	.word	0x004001cd
  401bf8:	00400199 	.word	0x00400199
  401bfc:	20000590 	.word	0x20000590

00401c00 <prvTimerTask>:
{
  401c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c04:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401c06:	4e75      	ldr	r6, [pc, #468]	; (401ddc <prvTimerTask+0x1dc>)
			( void ) xTaskResumeAll();
  401c08:	4f75      	ldr	r7, [pc, #468]	; (401de0 <prvTimerTask+0x1e0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401c0a:	4d76      	ldr	r5, [pc, #472]	; (401de4 <prvTimerTask+0x1e4>)
					portYIELD_WITHIN_API();
  401c0c:	f8df 9200 	ldr.w	r9, [pc, #512]	; 401e10 <prvTimerTask+0x210>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401c10:	f8df 8200 	ldr.w	r8, [pc, #512]	; 401e14 <prvTimerTask+0x214>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401c14:	6833      	ldr	r3, [r6, #0]
  401c16:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  401c18:	b31a      	cbz	r2, 401c62 <prvTimerTask+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401c1a:	68db      	ldr	r3, [r3, #12]
  401c1c:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
  401c20:	4b71      	ldr	r3, [pc, #452]	; (401de8 <prvTimerTask+0x1e8>)
  401c22:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401c24:	a804      	add	r0, sp, #16
  401c26:	4b71      	ldr	r3, [pc, #452]	; (401dec <prvTimerTask+0x1ec>)
  401c28:	4798      	blx	r3
  401c2a:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401c2c:	9a04      	ldr	r2, [sp, #16]
  401c2e:	2a00      	cmp	r2, #0
  401c30:	d152      	bne.n	401cd8 <prvTimerTask+0xd8>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401c32:	4550      	cmp	r0, sl
  401c34:	d326      	bcc.n	401c84 <prvTimerTask+0x84>
				( void ) xTaskResumeAll();
  401c36:	47b8      	blx	r7
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  401c38:	6833      	ldr	r3, [r6, #0]
  401c3a:	68db      	ldr	r3, [r3, #12]
  401c3c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401c40:	f10b 0004 	add.w	r0, fp, #4
  401c44:	47c0      	blx	r8
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401c46:	f89b 3024 	ldrb.w	r3, [fp, #36]	; 0x24
  401c4a:	f013 0f04 	tst.w	r3, #4
  401c4e:	d12a      	bne.n	401ca6 <prvTimerTask+0xa6>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
  401c50:	f023 0301 	bic.w	r3, r3, #1
  401c54:	f88b 3024 	strb.w	r3, [fp, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401c58:	f8db 3020 	ldr.w	r3, [fp, #32]
  401c5c:	4658      	mov	r0, fp
  401c5e:	4798      	blx	r3
  401c60:	e01f      	b.n	401ca2 <prvTimerTask+0xa2>
	vTaskSuspendAll();
  401c62:	4b61      	ldr	r3, [pc, #388]	; (401de8 <prvTimerTask+0x1e8>)
  401c64:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401c66:	a804      	add	r0, sp, #16
  401c68:	4b60      	ldr	r3, [pc, #384]	; (401dec <prvTimerTask+0x1ec>)
  401c6a:	4798      	blx	r3
  401c6c:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401c6e:	9b04      	ldr	r3, [sp, #16]
  401c70:	2b00      	cmp	r3, #0
  401c72:	d131      	bne.n	401cd8 <prvTimerTask+0xd8>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  401c74:	4b5e      	ldr	r3, [pc, #376]	; (401df0 <prvTimerTask+0x1f0>)
  401c76:	681b      	ldr	r3, [r3, #0]
  401c78:	681a      	ldr	r2, [r3, #0]
  401c7a:	fab2 f282 	clz	r2, r2
  401c7e:	0952      	lsrs	r2, r2, #5
		xNextExpireTime = ( TickType_t ) 0U;
  401c80:	f04f 0a00 	mov.w	sl, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401c84:	ebaa 0104 	sub.w	r1, sl, r4
  401c88:	6828      	ldr	r0, [r5, #0]
  401c8a:	4b5a      	ldr	r3, [pc, #360]	; (401df4 <prvTimerTask+0x1f4>)
  401c8c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401c8e:	47b8      	blx	r7
  401c90:	b938      	cbnz	r0, 401ca2 <prvTimerTask+0xa2>
					portYIELD_WITHIN_API();
  401c92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401c96:	f8c9 3000 	str.w	r3, [r9]
  401c9a:	f3bf 8f4f 	dsb	sy
  401c9e:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401ca2:	4c55      	ldr	r4, [pc, #340]	; (401df8 <prvTimerTask+0x1f8>)
  401ca4:	e021      	b.n	401cea <prvTimerTask+0xea>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
  401ca6:	f8db 1018 	ldr.w	r1, [fp, #24]
  401caa:	4653      	mov	r3, sl
  401cac:	4622      	mov	r2, r4
  401cae:	4451      	add	r1, sl
  401cb0:	4658      	mov	r0, fp
  401cb2:	4c52      	ldr	r4, [pc, #328]	; (401dfc <prvTimerTask+0x1fc>)
  401cb4:	47a0      	blx	r4
  401cb6:	2800      	cmp	r0, #0
  401cb8:	d0ce      	beq.n	401c58 <prvTimerTask+0x58>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401cba:	2100      	movs	r1, #0
  401cbc:	9100      	str	r1, [sp, #0]
  401cbe:	460b      	mov	r3, r1
  401cc0:	4652      	mov	r2, sl
  401cc2:	4658      	mov	r0, fp
  401cc4:	4c4e      	ldr	r4, [pc, #312]	; (401e00 <prvTimerTask+0x200>)
  401cc6:	47a0      	blx	r4
			configASSERT( xResult );
  401cc8:	2800      	cmp	r0, #0
  401cca:	d1c5      	bne.n	401c58 <prvTimerTask+0x58>
  401ccc:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
  401cd0:	484c      	ldr	r0, [pc, #304]	; (401e04 <prvTimerTask+0x204>)
  401cd2:	4b4d      	ldr	r3, [pc, #308]	; (401e08 <prvTimerTask+0x208>)
  401cd4:	4798      	blx	r3
  401cd6:	e7bf      	b.n	401c58 <prvTimerTask+0x58>
			( void ) xTaskResumeAll();
  401cd8:	47b8      	blx	r7
  401cda:	e7e2      	b.n	401ca2 <prvTimerTask+0xa2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  401cdc:	9907      	ldr	r1, [sp, #28]
  401cde:	9806      	ldr	r0, [sp, #24]
  401ce0:	9b05      	ldr	r3, [sp, #20]
  401ce2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  401ce4:	9b04      	ldr	r3, [sp, #16]
  401ce6:	2b00      	cmp	r3, #0
  401ce8:	da08      	bge.n	401cfc <prvTimerTask+0xfc>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401cea:	2200      	movs	r2, #0
  401cec:	a904      	add	r1, sp, #16
  401cee:	6828      	ldr	r0, [r5, #0]
  401cf0:	47a0      	blx	r4
  401cf2:	2800      	cmp	r0, #0
  401cf4:	d08e      	beq.n	401c14 <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  401cf6:	9b04      	ldr	r3, [sp, #16]
  401cf8:	2b00      	cmp	r3, #0
  401cfa:	dbef      	blt.n	401cdc <prvTimerTask+0xdc>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  401cfc:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  401d00:	f8da 3014 	ldr.w	r3, [sl, #20]
  401d04:	b113      	cbz	r3, 401d0c <prvTimerTask+0x10c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401d06:	f10a 0004 	add.w	r0, sl, #4
  401d0a:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401d0c:	a803      	add	r0, sp, #12
  401d0e:	4b37      	ldr	r3, [pc, #220]	; (401dec <prvTimerTask+0x1ec>)
  401d10:	4798      	blx	r3
  401d12:	4683      	mov	fp, r0
			switch( xMessage.xMessageID )
  401d14:	9b04      	ldr	r3, [sp, #16]
  401d16:	2b09      	cmp	r3, #9
  401d18:	d8e7      	bhi.n	401cea <prvTimerTask+0xea>
  401d1a:	e8df f003 	tbb	[pc, r3]
  401d1e:	0505      	.short	0x0505
  401d20:	51383105 	.word	0x51383105
  401d24:	38310505 	.word	0x38310505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  401d28:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401d2c:	f043 0301 	orr.w	r3, r3, #1
  401d30:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  401d34:	9905      	ldr	r1, [sp, #20]
  401d36:	f8da 0018 	ldr.w	r0, [sl, #24]
  401d3a:	460b      	mov	r3, r1
  401d3c:	465a      	mov	r2, fp
  401d3e:	4401      	add	r1, r0
  401d40:	4650      	mov	r0, sl
  401d42:	4c2e      	ldr	r4, [pc, #184]	; (401dfc <prvTimerTask+0x1fc>)
  401d44:	47a0      	blx	r4
  401d46:	2800      	cmp	r0, #0
  401d48:	d0ab      	beq.n	401ca2 <prvTimerTask+0xa2>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401d4a:	f8da 3020 	ldr.w	r3, [sl, #32]
  401d4e:	4650      	mov	r0, sl
  401d50:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
  401d52:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401d56:	f013 0f04 	tst.w	r3, #4
  401d5a:	d0a2      	beq.n	401ca2 <prvTimerTask+0xa2>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  401d5c:	f8da 2018 	ldr.w	r2, [sl, #24]
  401d60:	2100      	movs	r1, #0
  401d62:	9100      	str	r1, [sp, #0]
  401d64:	460b      	mov	r3, r1
  401d66:	9805      	ldr	r0, [sp, #20]
  401d68:	4402      	add	r2, r0
  401d6a:	4650      	mov	r0, sl
  401d6c:	4c24      	ldr	r4, [pc, #144]	; (401e00 <prvTimerTask+0x200>)
  401d6e:	47a0      	blx	r4
							configASSERT( xResult );
  401d70:	2800      	cmp	r0, #0
  401d72:	d196      	bne.n	401ca2 <prvTimerTask+0xa2>
  401d74:	f240 3113 	movw	r1, #787	; 0x313
  401d78:	4822      	ldr	r0, [pc, #136]	; (401e04 <prvTimerTask+0x204>)
  401d7a:	4b23      	ldr	r3, [pc, #140]	; (401e08 <prvTimerTask+0x208>)
  401d7c:	4798      	blx	r3
  401d7e:	e790      	b.n	401ca2 <prvTimerTask+0xa2>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
  401d80:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401d84:	f023 0301 	bic.w	r3, r3, #1
  401d88:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
  401d8c:	e789      	b.n	401ca2 <prvTimerTask+0xa2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
  401d8e:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401d92:	f043 0301 	orr.w	r3, r3, #1
  401d96:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  401d9a:	9b05      	ldr	r3, [sp, #20]
  401d9c:	f8ca 3018 	str.w	r3, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401da0:	b143      	cbz	r3, 401db4 <prvTimerTask+0x1b4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  401da2:	f8da 1018 	ldr.w	r1, [sl, #24]
  401da6:	465b      	mov	r3, fp
  401da8:	465a      	mov	r2, fp
  401daa:	4459      	add	r1, fp
  401dac:	4650      	mov	r0, sl
  401dae:	4c13      	ldr	r4, [pc, #76]	; (401dfc <prvTimerTask+0x1fc>)
  401db0:	47a0      	blx	r4
  401db2:	e776      	b.n	401ca2 <prvTimerTask+0xa2>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401db4:	f240 312b 	movw	r1, #811	; 0x32b
  401db8:	4812      	ldr	r0, [pc, #72]	; (401e04 <prvTimerTask+0x204>)
  401dba:	4b13      	ldr	r3, [pc, #76]	; (401e08 <prvTimerTask+0x208>)
  401dbc:	4798      	blx	r3
  401dbe:	e7f0      	b.n	401da2 <prvTimerTask+0x1a2>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
  401dc0:	f89a 3024 	ldrb.w	r3, [sl, #36]	; 0x24
  401dc4:	f013 0f02 	tst.w	r3, #2
  401dc8:	d004      	beq.n	401dd4 <prvTimerTask+0x1d4>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
  401dca:	f023 0301 	bic.w	r3, r3, #1
  401dce:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
  401dd2:	e766      	b.n	401ca2 <prvTimerTask+0xa2>
							vPortFree( pxTimer );
  401dd4:	4650      	mov	r0, sl
  401dd6:	4b0d      	ldr	r3, [pc, #52]	; (401e0c <prvTimerTask+0x20c>)
  401dd8:	4798      	blx	r3
  401dda:	e762      	b.n	401ca2 <prvTimerTask+0xa2>
  401ddc:	2000058c 	.word	0x2000058c
  401de0:	004014e1 	.word	0x004014e1
  401de4:	200005c0 	.word	0x200005c0
  401de8:	00401389 	.word	0x00401389
  401dec:	00401b45 	.word	0x00401b45
  401df0:	20000590 	.word	0x20000590
  401df4:	00400fe1 	.word	0x00400fe1
  401df8:	00400e25 	.word	0x00400e25
  401dfc:	004019bd 	.word	0x004019bd
  401e00:	00401ad5 	.word	0x00401ad5
  401e04:	00402780 	.word	0x00402780
  401e08:	00402349 	.word	0x00402349
  401e0c:	004006c1 	.word	0x004006c1
  401e10:	e000ed04 	.word	0xe000ed04
  401e14:	004001cd 	.word	0x004001cd

00401e18 <myButtonTask>:
#include "mytasks.h"
#include "task.h"


void myButtonTask(void * pvParamaters)
{
  401e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401e1a:	4d0b      	ldr	r5, [pc, #44]	; (401e48 <myButtonTask+0x30>)
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401e1c:	4c0b      	ldr	r4, [pc, #44]	; (401e4c <myButtonTask+0x34>)
		if (ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE)
		{

			/* Yes, so turn LED on. */
			ioport_set_pin_level(LED_0_PIN, LED_0_ACTIVE);
			vTaskDelay( xDelay );
  401e1e:	4f0c      	ldr	r7, [pc, #48]	; (401e50 <myButtonTask+0x38>)
  401e20:	e009      	b.n	401e36 <myButtonTask+0x1e>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401e22:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  401e26:	6366      	str	r6, [r4, #52]	; 0x34
  401e28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  401e2c:	47b8      	blx	r7
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401e2e:	6326      	str	r6, [r4, #48]	; 0x30
			ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
			vTaskDelay( xDelay );	
  401e30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  401e34:	47b8      	blx	r7
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  401e36:	6beb      	ldr	r3, [r5, #60]	; 0x3c
		if (ioport_get_pin_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE)
  401e38:	f013 0f04 	tst.w	r3, #4
  401e3c:	d0f1      	beq.n	401e22 <myButtonTask+0xa>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401e3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  401e42:	6323      	str	r3, [r4, #48]	; 0x30
  401e44:	e7f7      	b.n	401e36 <myButtonTask+0x1e>
  401e46:	bf00      	nop
  401e48:	400e0e00 	.word	0x400e0e00
  401e4c:	400e1400 	.word	0x400e1400
  401e50:	004015fd 	.word	0x004015fd

00401e54 <sysclk_init>:
  401e54:	b510      	push	{r4, lr}
  401e56:	480e      	ldr	r0, [pc, #56]	; (401e90 <sysclk_init+0x3c>)
  401e58:	4b0e      	ldr	r3, [pc, #56]	; (401e94 <sysclk_init+0x40>)
  401e5a:	4798      	blx	r3
  401e5c:	213e      	movs	r1, #62	; 0x3e
  401e5e:	2000      	movs	r0, #0
  401e60:	4b0d      	ldr	r3, [pc, #52]	; (401e98 <sysclk_init+0x44>)
  401e62:	4798      	blx	r3
  401e64:	4c0d      	ldr	r4, [pc, #52]	; (401e9c <sysclk_init+0x48>)
  401e66:	47a0      	blx	r4
  401e68:	2800      	cmp	r0, #0
  401e6a:	d0fc      	beq.n	401e66 <sysclk_init+0x12>
  401e6c:	4b0c      	ldr	r3, [pc, #48]	; (401ea0 <sysclk_init+0x4c>)
  401e6e:	4798      	blx	r3
  401e70:	4a0c      	ldr	r2, [pc, #48]	; (401ea4 <sysclk_init+0x50>)
  401e72:	4b0d      	ldr	r3, [pc, #52]	; (401ea8 <sysclk_init+0x54>)
  401e74:	629a      	str	r2, [r3, #40]	; 0x28
  401e76:	4c0d      	ldr	r4, [pc, #52]	; (401eac <sysclk_init+0x58>)
  401e78:	47a0      	blx	r4
  401e7a:	2800      	cmp	r0, #0
  401e7c:	d0fc      	beq.n	401e78 <sysclk_init+0x24>
  401e7e:	2010      	movs	r0, #16
  401e80:	4b0b      	ldr	r3, [pc, #44]	; (401eb0 <sysclk_init+0x5c>)
  401e82:	4798      	blx	r3
  401e84:	4b0b      	ldr	r3, [pc, #44]	; (401eb4 <sysclk_init+0x60>)
  401e86:	4798      	blx	r3
  401e88:	480b      	ldr	r0, [pc, #44]	; (401eb8 <sysclk_init+0x64>)
  401e8a:	4b02      	ldr	r3, [pc, #8]	; (401e94 <sysclk_init+0x40>)
  401e8c:	4798      	blx	r3
  401e8e:	bd10      	pop	{r4, pc}
  401e90:	07270e00 	.word	0x07270e00
  401e94:	00402245 	.word	0x00402245
  401e98:	00401f95 	.word	0x00401f95
  401e9c:	00401fe9 	.word	0x00401fe9
  401ea0:	00401ff9 	.word	0x00401ff9
  401ea4:	200f3f01 	.word	0x200f3f01
  401ea8:	400e0400 	.word	0x400e0400
  401eac:	00402009 	.word	0x00402009
  401eb0:	00401f31 	.word	0x00401f31
  401eb4:	00402139 	.word	0x00402139
  401eb8:	05b8d800 	.word	0x05b8d800

00401ebc <board_init>:
  401ebc:	b510      	push	{r4, lr}
  401ebe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401ec2:	4b18      	ldr	r3, [pc, #96]	; (401f24 <board_init+0x68>)
  401ec4:	605a      	str	r2, [r3, #4]
  401ec6:	2009      	movs	r0, #9
  401ec8:	4c17      	ldr	r4, [pc, #92]	; (401f28 <board_init+0x6c>)
  401eca:	47a0      	blx	r4
  401ecc:	200a      	movs	r0, #10
  401ece:	47a0      	blx	r4
  401ed0:	200b      	movs	r0, #11
  401ed2:	47a0      	blx	r4
  401ed4:	200c      	movs	r0, #12
  401ed6:	47a0      	blx	r4
  401ed8:	200d      	movs	r0, #13
  401eda:	47a0      	blx	r4
  401edc:	4b13      	ldr	r3, [pc, #76]	; (401f2c <board_init+0x70>)
  401ede:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401ee2:	611a      	str	r2, [r3, #16]
  401ee4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401ee8:	631a      	str	r2, [r3, #48]	; 0x30
  401eea:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  401eee:	2204      	movs	r2, #4
  401ef0:	615a      	str	r2, [r3, #20]
  401ef2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  401ef6:	665a      	str	r2, [r3, #100]	; 0x64
  401ef8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  401efc:	655a      	str	r2, [r3, #84]	; 0x54
  401efe:	621a      	str	r2, [r3, #32]
  401f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  401f04:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401f06:	f021 0104 	bic.w	r1, r1, #4
  401f0a:	6719      	str	r1, [r3, #112]	; 0x70
  401f0c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401f0e:	f021 0104 	bic.w	r1, r1, #4
  401f12:	6759      	str	r1, [r3, #116]	; 0x74
  401f14:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  401f18:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401f1c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  401f20:	bd10      	pop	{r4, pc}
  401f22:	bf00      	nop
  401f24:	400e1850 	.word	0x400e1850
  401f28:	00402019 	.word	0x00402019
  401f2c:	400e1400 	.word	0x400e1400

00401f30 <pmc_switch_mck_to_pllack>:
  401f30:	4a17      	ldr	r2, [pc, #92]	; (401f90 <pmc_switch_mck_to_pllack+0x60>)
  401f32:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401f38:	4318      	orrs	r0, r3
  401f3a:	6310      	str	r0, [r2, #48]	; 0x30
  401f3c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401f3e:	f013 0f08 	tst.w	r3, #8
  401f42:	d10a      	bne.n	401f5a <pmc_switch_mck_to_pllack+0x2a>
  401f44:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401f48:	4911      	ldr	r1, [pc, #68]	; (401f90 <pmc_switch_mck_to_pllack+0x60>)
  401f4a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401f4c:	f012 0f08 	tst.w	r2, #8
  401f50:	d103      	bne.n	401f5a <pmc_switch_mck_to_pllack+0x2a>
  401f52:	3b01      	subs	r3, #1
  401f54:	d1f9      	bne.n	401f4a <pmc_switch_mck_to_pllack+0x1a>
  401f56:	2001      	movs	r0, #1
  401f58:	4770      	bx	lr
  401f5a:	4a0d      	ldr	r2, [pc, #52]	; (401f90 <pmc_switch_mck_to_pllack+0x60>)
  401f5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f5e:	f023 0303 	bic.w	r3, r3, #3
  401f62:	f043 0302 	orr.w	r3, r3, #2
  401f66:	6313      	str	r3, [r2, #48]	; 0x30
  401f68:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401f6a:	f013 0f08 	tst.w	r3, #8
  401f6e:	d10a      	bne.n	401f86 <pmc_switch_mck_to_pllack+0x56>
  401f70:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401f74:	4906      	ldr	r1, [pc, #24]	; (401f90 <pmc_switch_mck_to_pllack+0x60>)
  401f76:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401f78:	f012 0f08 	tst.w	r2, #8
  401f7c:	d105      	bne.n	401f8a <pmc_switch_mck_to_pllack+0x5a>
  401f7e:	3b01      	subs	r3, #1
  401f80:	d1f9      	bne.n	401f76 <pmc_switch_mck_to_pllack+0x46>
  401f82:	2001      	movs	r0, #1
  401f84:	4770      	bx	lr
  401f86:	2000      	movs	r0, #0
  401f88:	4770      	bx	lr
  401f8a:	2000      	movs	r0, #0
  401f8c:	4770      	bx	lr
  401f8e:	bf00      	nop
  401f90:	400e0400 	.word	0x400e0400

00401f94 <pmc_switch_mainck_to_xtal>:
  401f94:	b9c8      	cbnz	r0, 401fca <pmc_switch_mainck_to_xtal+0x36>
  401f96:	4a11      	ldr	r2, [pc, #68]	; (401fdc <pmc_switch_mainck_to_xtal+0x48>)
  401f98:	6a13      	ldr	r3, [r2, #32]
  401f9a:	0209      	lsls	r1, r1, #8
  401f9c:	b289      	uxth	r1, r1
  401f9e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401fa2:	f023 0303 	bic.w	r3, r3, #3
  401fa6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401faa:	f043 0301 	orr.w	r3, r3, #1
  401fae:	430b      	orrs	r3, r1
  401fb0:	6213      	str	r3, [r2, #32]
  401fb2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401fb4:	f013 0f01 	tst.w	r3, #1
  401fb8:	d0fb      	beq.n	401fb2 <pmc_switch_mainck_to_xtal+0x1e>
  401fba:	4a08      	ldr	r2, [pc, #32]	; (401fdc <pmc_switch_mainck_to_xtal+0x48>)
  401fbc:	6a13      	ldr	r3, [r2, #32]
  401fbe:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401fc6:	6213      	str	r3, [r2, #32]
  401fc8:	4770      	bx	lr
  401fca:	4904      	ldr	r1, [pc, #16]	; (401fdc <pmc_switch_mainck_to_xtal+0x48>)
  401fcc:	6a0b      	ldr	r3, [r1, #32]
  401fce:	4a04      	ldr	r2, [pc, #16]	; (401fe0 <pmc_switch_mainck_to_xtal+0x4c>)
  401fd0:	401a      	ands	r2, r3
  401fd2:	4b04      	ldr	r3, [pc, #16]	; (401fe4 <pmc_switch_mainck_to_xtal+0x50>)
  401fd4:	4313      	orrs	r3, r2
  401fd6:	620b      	str	r3, [r1, #32]
  401fd8:	4770      	bx	lr
  401fda:	bf00      	nop
  401fdc:	400e0400 	.word	0x400e0400
  401fe0:	fec8fffc 	.word	0xfec8fffc
  401fe4:	01370002 	.word	0x01370002

00401fe8 <pmc_osc_is_ready_mainck>:
  401fe8:	4b02      	ldr	r3, [pc, #8]	; (401ff4 <pmc_osc_is_ready_mainck+0xc>)
  401fea:	6e98      	ldr	r0, [r3, #104]	; 0x68
  401fec:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401ff0:	4770      	bx	lr
  401ff2:	bf00      	nop
  401ff4:	400e0400 	.word	0x400e0400

00401ff8 <pmc_disable_pllack>:
  401ff8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401ffc:	4b01      	ldr	r3, [pc, #4]	; (402004 <pmc_disable_pllack+0xc>)
  401ffe:	629a      	str	r2, [r3, #40]	; 0x28
  402000:	4770      	bx	lr
  402002:	bf00      	nop
  402004:	400e0400 	.word	0x400e0400

00402008 <pmc_is_locked_pllack>:
  402008:	4b02      	ldr	r3, [pc, #8]	; (402014 <pmc_is_locked_pllack+0xc>)
  40200a:	6e98      	ldr	r0, [r3, #104]	; 0x68
  40200c:	f000 0002 	and.w	r0, r0, #2
  402010:	4770      	bx	lr
  402012:	bf00      	nop
  402014:	400e0400 	.word	0x400e0400

00402018 <pmc_enable_periph_clk>:
  402018:	282f      	cmp	r0, #47	; 0x2f
  40201a:	d81e      	bhi.n	40205a <pmc_enable_periph_clk+0x42>
  40201c:	281f      	cmp	r0, #31
  40201e:	d80c      	bhi.n	40203a <pmc_enable_periph_clk+0x22>
  402020:	4b11      	ldr	r3, [pc, #68]	; (402068 <pmc_enable_periph_clk+0x50>)
  402022:	699a      	ldr	r2, [r3, #24]
  402024:	2301      	movs	r3, #1
  402026:	4083      	lsls	r3, r0
  402028:	4393      	bics	r3, r2
  40202a:	d018      	beq.n	40205e <pmc_enable_periph_clk+0x46>
  40202c:	2301      	movs	r3, #1
  40202e:	fa03 f000 	lsl.w	r0, r3, r0
  402032:	4b0d      	ldr	r3, [pc, #52]	; (402068 <pmc_enable_periph_clk+0x50>)
  402034:	6118      	str	r0, [r3, #16]
  402036:	2000      	movs	r0, #0
  402038:	4770      	bx	lr
  40203a:	3820      	subs	r0, #32
  40203c:	4b0a      	ldr	r3, [pc, #40]	; (402068 <pmc_enable_periph_clk+0x50>)
  40203e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402042:	2301      	movs	r3, #1
  402044:	4083      	lsls	r3, r0
  402046:	4393      	bics	r3, r2
  402048:	d00b      	beq.n	402062 <pmc_enable_periph_clk+0x4a>
  40204a:	2301      	movs	r3, #1
  40204c:	fa03 f000 	lsl.w	r0, r3, r0
  402050:	4b05      	ldr	r3, [pc, #20]	; (402068 <pmc_enable_periph_clk+0x50>)
  402052:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
  402056:	2000      	movs	r0, #0
  402058:	4770      	bx	lr
  40205a:	2001      	movs	r0, #1
  40205c:	4770      	bx	lr
  40205e:	2000      	movs	r0, #0
  402060:	4770      	bx	lr
  402062:	2000      	movs	r0, #0
  402064:	4770      	bx	lr
  402066:	bf00      	nop
  402068:	400e0400 	.word	0x400e0400

0040206c <Dummy_Handler>:
  40206c:	e7fe      	b.n	40206c <Dummy_Handler>
	...

00402070 <Reset_Handler>:
  402070:	b500      	push	{lr}
  402072:	b083      	sub	sp, #12
  402074:	4b25      	ldr	r3, [pc, #148]	; (40210c <Reset_Handler+0x9c>)
  402076:	4a26      	ldr	r2, [pc, #152]	; (402110 <Reset_Handler+0xa0>)
  402078:	429a      	cmp	r2, r3
  40207a:	d010      	beq.n	40209e <Reset_Handler+0x2e>
  40207c:	4b25      	ldr	r3, [pc, #148]	; (402114 <Reset_Handler+0xa4>)
  40207e:	4a23      	ldr	r2, [pc, #140]	; (40210c <Reset_Handler+0x9c>)
  402080:	429a      	cmp	r2, r3
  402082:	d20c      	bcs.n	40209e <Reset_Handler+0x2e>
  402084:	3b01      	subs	r3, #1
  402086:	1a9b      	subs	r3, r3, r2
  402088:	f023 0303 	bic.w	r3, r3, #3
  40208c:	3304      	adds	r3, #4
  40208e:	4413      	add	r3, r2
  402090:	491f      	ldr	r1, [pc, #124]	; (402110 <Reset_Handler+0xa0>)
  402092:	f851 0b04 	ldr.w	r0, [r1], #4
  402096:	f842 0b04 	str.w	r0, [r2], #4
  40209a:	429a      	cmp	r2, r3
  40209c:	d1f9      	bne.n	402092 <Reset_Handler+0x22>
  40209e:	4b1e      	ldr	r3, [pc, #120]	; (402118 <Reset_Handler+0xa8>)
  4020a0:	4a1e      	ldr	r2, [pc, #120]	; (40211c <Reset_Handler+0xac>)
  4020a2:	429a      	cmp	r2, r3
  4020a4:	d20a      	bcs.n	4020bc <Reset_Handler+0x4c>
  4020a6:	3b01      	subs	r3, #1
  4020a8:	1a9b      	subs	r3, r3, r2
  4020aa:	f023 0303 	bic.w	r3, r3, #3
  4020ae:	3304      	adds	r3, #4
  4020b0:	4413      	add	r3, r2
  4020b2:	2100      	movs	r1, #0
  4020b4:	f842 1b04 	str.w	r1, [r2], #4
  4020b8:	4293      	cmp	r3, r2
  4020ba:	d1fb      	bne.n	4020b4 <Reset_Handler+0x44>
  4020bc:	4a18      	ldr	r2, [pc, #96]	; (402120 <Reset_Handler+0xb0>)
  4020be:	4b19      	ldr	r3, [pc, #100]	; (402124 <Reset_Handler+0xb4>)
  4020c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4020c4:	6093      	str	r3, [r2, #8]
  4020c6:	f3ef 8310 	mrs	r3, PRIMASK
  4020ca:	fab3 f383 	clz	r3, r3
  4020ce:	095b      	lsrs	r3, r3, #5
  4020d0:	9301      	str	r3, [sp, #4]
  4020d2:	b672      	cpsid	i
  4020d4:	f3bf 8f5f 	dmb	sy
  4020d8:	2200      	movs	r2, #0
  4020da:	4b13      	ldr	r3, [pc, #76]	; (402128 <Reset_Handler+0xb8>)
  4020dc:	701a      	strb	r2, [r3, #0]
  4020de:	9901      	ldr	r1, [sp, #4]
  4020e0:	4a12      	ldr	r2, [pc, #72]	; (40212c <Reset_Handler+0xbc>)
  4020e2:	6813      	ldr	r3, [r2, #0]
  4020e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4020e8:	6013      	str	r3, [r2, #0]
  4020ea:	f3bf 8f4f 	dsb	sy
  4020ee:	f3bf 8f6f 	isb	sy
  4020f2:	b129      	cbz	r1, 402100 <Reset_Handler+0x90>
  4020f4:	2201      	movs	r2, #1
  4020f6:	4b0c      	ldr	r3, [pc, #48]	; (402128 <Reset_Handler+0xb8>)
  4020f8:	701a      	strb	r2, [r3, #0]
  4020fa:	f3bf 8f5f 	dmb	sy
  4020fe:	b662      	cpsie	i
  402100:	4b0b      	ldr	r3, [pc, #44]	; (402130 <Reset_Handler+0xc0>)
  402102:	4798      	blx	r3
  402104:	4b0b      	ldr	r3, [pc, #44]	; (402134 <Reset_Handler+0xc4>)
  402106:	4798      	blx	r3
  402108:	e7fe      	b.n	402108 <Reset_Handler+0x98>
  40210a:	bf00      	nop
  40210c:	20000000 	.word	0x20000000
  402110:	004027e4 	.word	0x004027e4
  402114:	2000043c 	.word	0x2000043c
  402118:	2000062c 	.word	0x2000062c
  40211c:	2000043c 	.word	0x2000043c
  402120:	e000ed00 	.word	0xe000ed00
  402124:	00400000 	.word	0x00400000
  402128:	20000004 	.word	0x20000004
  40212c:	e000ed88 	.word	0xe000ed88
  402130:	0040239d 	.word	0x0040239d
  402134:	004022b9 	.word	0x004022b9

00402138 <SystemCoreClockUpdate>:
  402138:	4b3b      	ldr	r3, [pc, #236]	; (402228 <SystemCoreClockUpdate+0xf0>)
  40213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40213c:	f003 0303 	and.w	r3, r3, #3
  402140:	2b01      	cmp	r3, #1
  402142:	d01d      	beq.n	402180 <SystemCoreClockUpdate+0x48>
  402144:	b183      	cbz	r3, 402168 <SystemCoreClockUpdate+0x30>
  402146:	2b02      	cmp	r3, #2
  402148:	d036      	beq.n	4021b8 <SystemCoreClockUpdate+0x80>
  40214a:	4b37      	ldr	r3, [pc, #220]	; (402228 <SystemCoreClockUpdate+0xf0>)
  40214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40214e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402152:	2b70      	cmp	r3, #112	; 0x70
  402154:	d05f      	beq.n	402216 <SystemCoreClockUpdate+0xde>
  402156:	4b34      	ldr	r3, [pc, #208]	; (402228 <SystemCoreClockUpdate+0xf0>)
  402158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40215a:	4934      	ldr	r1, [pc, #208]	; (40222c <SystemCoreClockUpdate+0xf4>)
  40215c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402160:	680b      	ldr	r3, [r1, #0]
  402162:	40d3      	lsrs	r3, r2
  402164:	600b      	str	r3, [r1, #0]
  402166:	4770      	bx	lr
  402168:	4b31      	ldr	r3, [pc, #196]	; (402230 <SystemCoreClockUpdate+0xf8>)
  40216a:	695b      	ldr	r3, [r3, #20]
  40216c:	f013 0f80 	tst.w	r3, #128	; 0x80
  402170:	bf14      	ite	ne
  402172:	f44f 4200 	movne.w	r2, #32768	; 0x8000
  402176:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40217a:	4b2c      	ldr	r3, [pc, #176]	; (40222c <SystemCoreClockUpdate+0xf4>)
  40217c:	601a      	str	r2, [r3, #0]
  40217e:	e7e4      	b.n	40214a <SystemCoreClockUpdate+0x12>
  402180:	4b29      	ldr	r3, [pc, #164]	; (402228 <SystemCoreClockUpdate+0xf0>)
  402182:	6a1b      	ldr	r3, [r3, #32]
  402184:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402188:	d003      	beq.n	402192 <SystemCoreClockUpdate+0x5a>
  40218a:	4a2a      	ldr	r2, [pc, #168]	; (402234 <SystemCoreClockUpdate+0xfc>)
  40218c:	4b27      	ldr	r3, [pc, #156]	; (40222c <SystemCoreClockUpdate+0xf4>)
  40218e:	601a      	str	r2, [r3, #0]
  402190:	e7db      	b.n	40214a <SystemCoreClockUpdate+0x12>
  402192:	4a29      	ldr	r2, [pc, #164]	; (402238 <SystemCoreClockUpdate+0x100>)
  402194:	4b25      	ldr	r3, [pc, #148]	; (40222c <SystemCoreClockUpdate+0xf4>)
  402196:	601a      	str	r2, [r3, #0]
  402198:	4b23      	ldr	r3, [pc, #140]	; (402228 <SystemCoreClockUpdate+0xf0>)
  40219a:	6a1b      	ldr	r3, [r3, #32]
  40219c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4021a0:	2b10      	cmp	r3, #16
  4021a2:	d005      	beq.n	4021b0 <SystemCoreClockUpdate+0x78>
  4021a4:	2b20      	cmp	r3, #32
  4021a6:	d1d0      	bne.n	40214a <SystemCoreClockUpdate+0x12>
  4021a8:	4a22      	ldr	r2, [pc, #136]	; (402234 <SystemCoreClockUpdate+0xfc>)
  4021aa:	4b20      	ldr	r3, [pc, #128]	; (40222c <SystemCoreClockUpdate+0xf4>)
  4021ac:	601a      	str	r2, [r3, #0]
  4021ae:	e7cc      	b.n	40214a <SystemCoreClockUpdate+0x12>
  4021b0:	4a22      	ldr	r2, [pc, #136]	; (40223c <SystemCoreClockUpdate+0x104>)
  4021b2:	4b1e      	ldr	r3, [pc, #120]	; (40222c <SystemCoreClockUpdate+0xf4>)
  4021b4:	601a      	str	r2, [r3, #0]
  4021b6:	e7c8      	b.n	40214a <SystemCoreClockUpdate+0x12>
  4021b8:	4b1b      	ldr	r3, [pc, #108]	; (402228 <SystemCoreClockUpdate+0xf0>)
  4021ba:	6a1b      	ldr	r3, [r3, #32]
  4021bc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4021c0:	d016      	beq.n	4021f0 <SystemCoreClockUpdate+0xb8>
  4021c2:	4a1c      	ldr	r2, [pc, #112]	; (402234 <SystemCoreClockUpdate+0xfc>)
  4021c4:	4b19      	ldr	r3, [pc, #100]	; (40222c <SystemCoreClockUpdate+0xf4>)
  4021c6:	601a      	str	r2, [r3, #0]
  4021c8:	4b17      	ldr	r3, [pc, #92]	; (402228 <SystemCoreClockUpdate+0xf0>)
  4021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4021cc:	f003 0303 	and.w	r3, r3, #3
  4021d0:	2b02      	cmp	r3, #2
  4021d2:	d1ba      	bne.n	40214a <SystemCoreClockUpdate+0x12>
  4021d4:	4a14      	ldr	r2, [pc, #80]	; (402228 <SystemCoreClockUpdate+0xf0>)
  4021d6:	6a91      	ldr	r1, [r2, #40]	; 0x28
  4021d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4021da:	4814      	ldr	r0, [pc, #80]	; (40222c <SystemCoreClockUpdate+0xf4>)
  4021dc:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4021e0:	6803      	ldr	r3, [r0, #0]
  4021e2:	fb01 3303 	mla	r3, r1, r3, r3
  4021e6:	b2d2      	uxtb	r2, r2
  4021e8:	fbb3 f3f2 	udiv	r3, r3, r2
  4021ec:	6003      	str	r3, [r0, #0]
  4021ee:	e7ac      	b.n	40214a <SystemCoreClockUpdate+0x12>
  4021f0:	4a11      	ldr	r2, [pc, #68]	; (402238 <SystemCoreClockUpdate+0x100>)
  4021f2:	4b0e      	ldr	r3, [pc, #56]	; (40222c <SystemCoreClockUpdate+0xf4>)
  4021f4:	601a      	str	r2, [r3, #0]
  4021f6:	4b0c      	ldr	r3, [pc, #48]	; (402228 <SystemCoreClockUpdate+0xf0>)
  4021f8:	6a1b      	ldr	r3, [r3, #32]
  4021fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4021fe:	2b10      	cmp	r3, #16
  402200:	d005      	beq.n	40220e <SystemCoreClockUpdate+0xd6>
  402202:	2b20      	cmp	r3, #32
  402204:	d1e0      	bne.n	4021c8 <SystemCoreClockUpdate+0x90>
  402206:	4a0b      	ldr	r2, [pc, #44]	; (402234 <SystemCoreClockUpdate+0xfc>)
  402208:	4b08      	ldr	r3, [pc, #32]	; (40222c <SystemCoreClockUpdate+0xf4>)
  40220a:	601a      	str	r2, [r3, #0]
  40220c:	e7dc      	b.n	4021c8 <SystemCoreClockUpdate+0x90>
  40220e:	4a0b      	ldr	r2, [pc, #44]	; (40223c <SystemCoreClockUpdate+0x104>)
  402210:	4b06      	ldr	r3, [pc, #24]	; (40222c <SystemCoreClockUpdate+0xf4>)
  402212:	601a      	str	r2, [r3, #0]
  402214:	e7d8      	b.n	4021c8 <SystemCoreClockUpdate+0x90>
  402216:	4a05      	ldr	r2, [pc, #20]	; (40222c <SystemCoreClockUpdate+0xf4>)
  402218:	6813      	ldr	r3, [r2, #0]
  40221a:	4909      	ldr	r1, [pc, #36]	; (402240 <SystemCoreClockUpdate+0x108>)
  40221c:	fba1 1303 	umull	r1, r3, r1, r3
  402220:	085b      	lsrs	r3, r3, #1
  402222:	6013      	str	r3, [r2, #0]
  402224:	4770      	bx	lr
  402226:	bf00      	nop
  402228:	400e0400 	.word	0x400e0400
  40222c:	20000008 	.word	0x20000008
  402230:	400e1810 	.word	0x400e1810
  402234:	00b71b00 	.word	0x00b71b00
  402238:	003d0900 	.word	0x003d0900
  40223c:	007a1200 	.word	0x007a1200
  402240:	aaaaaaab 	.word	0xaaaaaaab

00402244 <system_init_flash>:
  402244:	4b12      	ldr	r3, [pc, #72]	; (402290 <system_init_flash+0x4c>)
  402246:	4298      	cmp	r0, r3
  402248:	d911      	bls.n	40226e <system_init_flash+0x2a>
  40224a:	4b12      	ldr	r3, [pc, #72]	; (402294 <system_init_flash+0x50>)
  40224c:	4298      	cmp	r0, r3
  40224e:	d913      	bls.n	402278 <system_init_flash+0x34>
  402250:	4b11      	ldr	r3, [pc, #68]	; (402298 <system_init_flash+0x54>)
  402252:	4298      	cmp	r0, r3
  402254:	d914      	bls.n	402280 <system_init_flash+0x3c>
  402256:	4b11      	ldr	r3, [pc, #68]	; (40229c <system_init_flash+0x58>)
  402258:	4298      	cmp	r0, r3
  40225a:	d915      	bls.n	402288 <system_init_flash+0x44>
  40225c:	4b10      	ldr	r3, [pc, #64]	; (4022a0 <system_init_flash+0x5c>)
  40225e:	4298      	cmp	r0, r3
  402260:	bf94      	ite	ls
  402262:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
  402266:	4a0f      	ldrhi	r2, [pc, #60]	; (4022a4 <system_init_flash+0x60>)
  402268:	4b0f      	ldr	r3, [pc, #60]	; (4022a8 <system_init_flash+0x64>)
  40226a:	601a      	str	r2, [r3, #0]
  40226c:	4770      	bx	lr
  40226e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402272:	4b0d      	ldr	r3, [pc, #52]	; (4022a8 <system_init_flash+0x64>)
  402274:	601a      	str	r2, [r3, #0]
  402276:	4770      	bx	lr
  402278:	4a0c      	ldr	r2, [pc, #48]	; (4022ac <system_init_flash+0x68>)
  40227a:	4b0b      	ldr	r3, [pc, #44]	; (4022a8 <system_init_flash+0x64>)
  40227c:	601a      	str	r2, [r3, #0]
  40227e:	4770      	bx	lr
  402280:	4a0b      	ldr	r2, [pc, #44]	; (4022b0 <system_init_flash+0x6c>)
  402282:	4b09      	ldr	r3, [pc, #36]	; (4022a8 <system_init_flash+0x64>)
  402284:	601a      	str	r2, [r3, #0]
  402286:	4770      	bx	lr
  402288:	4a0a      	ldr	r2, [pc, #40]	; (4022b4 <system_init_flash+0x70>)
  40228a:	4b07      	ldr	r3, [pc, #28]	; (4022a8 <system_init_flash+0x64>)
  40228c:	601a      	str	r2, [r3, #0]
  40228e:	4770      	bx	lr
  402290:	01312cff 	.word	0x01312cff
  402294:	026259ff 	.word	0x026259ff
  402298:	039386ff 	.word	0x039386ff
  40229c:	04c4b3ff 	.word	0x04c4b3ff
  4022a0:	05f5e0ff 	.word	0x05f5e0ff
  4022a4:	04000500 	.word	0x04000500
  4022a8:	400e0a00 	.word	0x400e0a00
  4022ac:	04000100 	.word	0x04000100
  4022b0:	04000200 	.word	0x04000200
  4022b4:	04000300 	.word	0x04000300

004022b8 <main>:
// Used to place the heap
extern char _estack;


int main (void)
{
  4022b8:	b500      	push	{lr}
  4022ba:	b08b      	sub	sp, #44	; 0x2c
       vPortDefineHeapRegions( xHeapRegions );
}
static void prvMiscInitialisation( void )
{
       /* Initialize the SAM system */
       sysclk_init();
  4022bc:	4b19      	ldr	r3, [pc, #100]	; (402324 <main+0x6c>)
  4022be:	4798      	blx	r3
       board_init();
  4022c0:	4b19      	ldr	r3, [pc, #100]	; (402328 <main+0x70>)
  4022c2:	4798      	blx	r3
       pucHeapStart = ( uint8_t * ) ( ( ( ( uint32_t ) &mainHEAP_START ) + 7 ) & ~0x07ul );
  4022c4:	4a19      	ldr	r2, [pc, #100]	; (40232c <main+0x74>)
       ulHeapSize = ( uint32_t ) ( ( uint32_t ) pucHeapEnd - ( uint32_t ) &mainHEAP_START );
  4022c6:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
  4022ca:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
       ulHeapSize &= ~0x07ul;
  4022ce:	f023 0307 	bic.w	r3, r3, #7
       pucHeapStart = ( uint8_t * ) ( ( ( ( uint32_t ) &mainHEAP_START ) + 7 ) & ~0x07ul );
  4022d2:	3207      	adds	r2, #7
  4022d4:	f022 0207 	bic.w	r2, r2, #7
       HeapRegion_t xHeapRegions[] = {
  4022d8:	9202      	str	r2, [sp, #8]
       ulHeapSize -= 1024;
  4022da:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
       HeapRegion_t xHeapRegions[] = {
  4022de:	9303      	str	r3, [sp, #12]
  4022e0:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  4022e4:	9304      	str	r3, [sp, #16]
  4022e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4022ea:	9305      	str	r3, [sp, #20]
  4022ec:	f04f 42c6 	mov.w	r2, #1660944384	; 0x63000000
  4022f0:	9206      	str	r2, [sp, #24]
  4022f2:	9307      	str	r3, [sp, #28]
  4022f4:	2400      	movs	r4, #0
  4022f6:	9408      	str	r4, [sp, #32]
  4022f8:	9409      	str	r4, [sp, #36]	; 0x24
       vPortDefineHeapRegions( xHeapRegions );
  4022fa:	a802      	add	r0, sp, #8
  4022fc:	4b0c      	ldr	r3, [pc, #48]	; (402330 <main+0x78>)
  4022fe:	4798      	blx	r3
       prvInitialiseHeap();
       pmc_enable_periph_clk(ID_PIOA);
  402300:	2009      	movs	r0, #9
  402302:	4d0c      	ldr	r5, [pc, #48]	; (402334 <main+0x7c>)
  402304:	47a8      	blx	r5
       pmc_enable_periph_clk(ID_PIOB);
  402306:	200a      	movs	r0, #10
  402308:	47a8      	blx	r5
	xTaskCreate(myButtonTask,                       // Function Called by task
  40230a:	9401      	str	r4, [sp, #4]
  40230c:	2301      	movs	r3, #1
  40230e:	9300      	str	r3, [sp, #0]
  402310:	4623      	mov	r3, r4
  402312:	2282      	movs	r2, #130	; 0x82
  402314:	4908      	ldr	r1, [pc, #32]	; (402338 <main+0x80>)
  402316:	4809      	ldr	r0, [pc, #36]	; (40233c <main+0x84>)
  402318:	4c09      	ldr	r4, [pc, #36]	; (402340 <main+0x88>)
  40231a:	47a0      	blx	r4
	vTaskStartScheduler();
  40231c:	4b09      	ldr	r3, [pc, #36]	; (402344 <main+0x8c>)
  40231e:	4798      	blx	r3
  402320:	e7fe      	b.n	402320 <main+0x68>
  402322:	bf00      	nop
  402324:	00401e55 	.word	0x00401e55
  402328:	00401ebd 	.word	0x00401ebd
  40232c:	20003630 	.word	0x20003630
  402330:	00400765 	.word	0x00400765
  402334:	00402019 	.word	0x00402019
  402338:	0040279c 	.word	0x0040279c
  40233c:	00401e19 	.word	0x00401e19
  402340:	00401111 	.word	0x00401111
  402344:	004012f9 	.word	0x004012f9

00402348 <vAssertCalled>:
}

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
  402348:	b082      	sub	sp, #8
       volatile uint32_t ulBlockVariable = 0UL;
  40234a:	2300      	movs	r3, #0
  40234c:	9301      	str	r3, [sp, #4]
	__asm volatile
  40234e:	f04f 0350 	mov.w	r3, #80	; 0x50
  402352:	f383 8811 	msr	BASEPRI, r3
  402356:	f3bf 8f6f 	isb	sy
  40235a:	f3bf 8f4f 	dsb	sy

       /* Setting ulBlockVariable to a non-zero value in the debugger will allow
       this function to be exited. */
       taskDISABLE_INTERRUPTS();
       {
              while( ulBlockVariable == 0UL )
  40235e:	9b01      	ldr	r3, [sp, #4]
  402360:	b91b      	cbnz	r3, 40236a <vAssertCalled+0x22>
              {
                     __asm volatile( "NOP" );
  402362:	bf00      	nop
              while( ulBlockVariable == 0UL )
  402364:	9b01      	ldr	r3, [sp, #4]
  402366:	2b00      	cmp	r3, #0
  402368:	d0fb      	beq.n	402362 <vAssertCalled+0x1a>
	__asm volatile
  40236a:	2300      	movs	r3, #0
  40236c:	f383 8811 	msr	BASEPRI, r3
              }
       }
       taskENABLE_INTERRUPTS();
}
  402370:	b002      	add	sp, #8
  402372:	4770      	bx	lr

00402374 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
  402374:	b508      	push	{r3, lr}
       /* Called if a call to pvPortMalloc() fails because there is insufficient
       free memory available in the FreeRTOS heap.  pvPortMalloc() is called
       internally by FreeRTOS API functions that create tasks, queues, software
       timers, and semaphores.  The size of the FreeRTOS heap is set by the
       configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
       vAssertCalled( __FILE__, __LINE__ );
  402376:	216a      	movs	r1, #106	; 0x6a
  402378:	4801      	ldr	r0, [pc, #4]	; (402380 <vApplicationMallocFailedHook+0xc>)
  40237a:	4b02      	ldr	r3, [pc, #8]	; (402384 <vApplicationMallocFailedHook+0x10>)
  40237c:	4798      	blx	r3
  40237e:	bd08      	pop	{r3, pc}
  402380:	004027ac 	.word	0x004027ac
  402384:	00402349 	.word	0x00402349

00402388 <vApplicationStackOverflowHook>:
	__asm volatile
  402388:	f04f 0350 	mov.w	r3, #80	; 0x50
  40238c:	f383 8811 	msr	BASEPRI, r3
  402390:	f3bf 8f6f 	isb	sy
  402394:	f3bf 8f4f 	dsb	sy
  402398:	e7fe      	b.n	402398 <vApplicationStackOverflowHook+0x10>
	...

0040239c <__libc_init_array>:
  40239c:	b570      	push	{r4, r5, r6, lr}
  40239e:	4e0f      	ldr	r6, [pc, #60]	; (4023dc <__libc_init_array+0x40>)
  4023a0:	4d0f      	ldr	r5, [pc, #60]	; (4023e0 <__libc_init_array+0x44>)
  4023a2:	1b76      	subs	r6, r6, r5
  4023a4:	10b6      	asrs	r6, r6, #2
  4023a6:	bf18      	it	ne
  4023a8:	2400      	movne	r4, #0
  4023aa:	d005      	beq.n	4023b8 <__libc_init_array+0x1c>
  4023ac:	3401      	adds	r4, #1
  4023ae:	f855 3b04 	ldr.w	r3, [r5], #4
  4023b2:	4798      	blx	r3
  4023b4:	42a6      	cmp	r6, r4
  4023b6:	d1f9      	bne.n	4023ac <__libc_init_array+0x10>
  4023b8:	4e0a      	ldr	r6, [pc, #40]	; (4023e4 <__libc_init_array+0x48>)
  4023ba:	4d0b      	ldr	r5, [pc, #44]	; (4023e8 <__libc_init_array+0x4c>)
  4023bc:	1b76      	subs	r6, r6, r5
  4023be:	f000 f9ff 	bl	4027c0 <_init>
  4023c2:	10b6      	asrs	r6, r6, #2
  4023c4:	bf18      	it	ne
  4023c6:	2400      	movne	r4, #0
  4023c8:	d006      	beq.n	4023d8 <__libc_init_array+0x3c>
  4023ca:	3401      	adds	r4, #1
  4023cc:	f855 3b04 	ldr.w	r3, [r5], #4
  4023d0:	4798      	blx	r3
  4023d2:	42a6      	cmp	r6, r4
  4023d4:	d1f9      	bne.n	4023ca <__libc_init_array+0x2e>
  4023d6:	bd70      	pop	{r4, r5, r6, pc}
  4023d8:	bd70      	pop	{r4, r5, r6, pc}
  4023da:	bf00      	nop
  4023dc:	004027cc 	.word	0x004027cc
  4023e0:	004027cc 	.word	0x004027cc
  4023e4:	004027d4 	.word	0x004027d4
  4023e8:	004027cc 	.word	0x004027cc

004023ec <memcpy>:
  4023ec:	4684      	mov	ip, r0
  4023ee:	ea41 0300 	orr.w	r3, r1, r0
  4023f2:	f013 0303 	ands.w	r3, r3, #3
  4023f6:	d16d      	bne.n	4024d4 <memcpy+0xe8>
  4023f8:	3a40      	subs	r2, #64	; 0x40
  4023fa:	d341      	bcc.n	402480 <memcpy+0x94>
  4023fc:	f851 3b04 	ldr.w	r3, [r1], #4
  402400:	f840 3b04 	str.w	r3, [r0], #4
  402404:	f851 3b04 	ldr.w	r3, [r1], #4
  402408:	f840 3b04 	str.w	r3, [r0], #4
  40240c:	f851 3b04 	ldr.w	r3, [r1], #4
  402410:	f840 3b04 	str.w	r3, [r0], #4
  402414:	f851 3b04 	ldr.w	r3, [r1], #4
  402418:	f840 3b04 	str.w	r3, [r0], #4
  40241c:	f851 3b04 	ldr.w	r3, [r1], #4
  402420:	f840 3b04 	str.w	r3, [r0], #4
  402424:	f851 3b04 	ldr.w	r3, [r1], #4
  402428:	f840 3b04 	str.w	r3, [r0], #4
  40242c:	f851 3b04 	ldr.w	r3, [r1], #4
  402430:	f840 3b04 	str.w	r3, [r0], #4
  402434:	f851 3b04 	ldr.w	r3, [r1], #4
  402438:	f840 3b04 	str.w	r3, [r0], #4
  40243c:	f851 3b04 	ldr.w	r3, [r1], #4
  402440:	f840 3b04 	str.w	r3, [r0], #4
  402444:	f851 3b04 	ldr.w	r3, [r1], #4
  402448:	f840 3b04 	str.w	r3, [r0], #4
  40244c:	f851 3b04 	ldr.w	r3, [r1], #4
  402450:	f840 3b04 	str.w	r3, [r0], #4
  402454:	f851 3b04 	ldr.w	r3, [r1], #4
  402458:	f840 3b04 	str.w	r3, [r0], #4
  40245c:	f851 3b04 	ldr.w	r3, [r1], #4
  402460:	f840 3b04 	str.w	r3, [r0], #4
  402464:	f851 3b04 	ldr.w	r3, [r1], #4
  402468:	f840 3b04 	str.w	r3, [r0], #4
  40246c:	f851 3b04 	ldr.w	r3, [r1], #4
  402470:	f840 3b04 	str.w	r3, [r0], #4
  402474:	f851 3b04 	ldr.w	r3, [r1], #4
  402478:	f840 3b04 	str.w	r3, [r0], #4
  40247c:	3a40      	subs	r2, #64	; 0x40
  40247e:	d2bd      	bcs.n	4023fc <memcpy+0x10>
  402480:	3230      	adds	r2, #48	; 0x30
  402482:	d311      	bcc.n	4024a8 <memcpy+0xbc>
  402484:	f851 3b04 	ldr.w	r3, [r1], #4
  402488:	f840 3b04 	str.w	r3, [r0], #4
  40248c:	f851 3b04 	ldr.w	r3, [r1], #4
  402490:	f840 3b04 	str.w	r3, [r0], #4
  402494:	f851 3b04 	ldr.w	r3, [r1], #4
  402498:	f840 3b04 	str.w	r3, [r0], #4
  40249c:	f851 3b04 	ldr.w	r3, [r1], #4
  4024a0:	f840 3b04 	str.w	r3, [r0], #4
  4024a4:	3a10      	subs	r2, #16
  4024a6:	d2ed      	bcs.n	402484 <memcpy+0x98>
  4024a8:	320c      	adds	r2, #12
  4024aa:	d305      	bcc.n	4024b8 <memcpy+0xcc>
  4024ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4024b0:	f840 3b04 	str.w	r3, [r0], #4
  4024b4:	3a04      	subs	r2, #4
  4024b6:	d2f9      	bcs.n	4024ac <memcpy+0xc0>
  4024b8:	3204      	adds	r2, #4
  4024ba:	d008      	beq.n	4024ce <memcpy+0xe2>
  4024bc:	07d2      	lsls	r2, r2, #31
  4024be:	bf1c      	itt	ne
  4024c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4024c4:	f800 3b01 	strbne.w	r3, [r0], #1
  4024c8:	d301      	bcc.n	4024ce <memcpy+0xe2>
  4024ca:	880b      	ldrh	r3, [r1, #0]
  4024cc:	8003      	strh	r3, [r0, #0]
  4024ce:	4660      	mov	r0, ip
  4024d0:	4770      	bx	lr
  4024d2:	bf00      	nop
  4024d4:	2a08      	cmp	r2, #8
  4024d6:	d313      	bcc.n	402500 <memcpy+0x114>
  4024d8:	078b      	lsls	r3, r1, #30
  4024da:	d08d      	beq.n	4023f8 <memcpy+0xc>
  4024dc:	f010 0303 	ands.w	r3, r0, #3
  4024e0:	d08a      	beq.n	4023f8 <memcpy+0xc>
  4024e2:	f1c3 0304 	rsb	r3, r3, #4
  4024e6:	1ad2      	subs	r2, r2, r3
  4024e8:	07db      	lsls	r3, r3, #31
  4024ea:	bf1c      	itt	ne
  4024ec:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4024f0:	f800 3b01 	strbne.w	r3, [r0], #1
  4024f4:	d380      	bcc.n	4023f8 <memcpy+0xc>
  4024f6:	f831 3b02 	ldrh.w	r3, [r1], #2
  4024fa:	f820 3b02 	strh.w	r3, [r0], #2
  4024fe:	e77b      	b.n	4023f8 <memcpy+0xc>
  402500:	3a04      	subs	r2, #4
  402502:	d3d9      	bcc.n	4024b8 <memcpy+0xcc>
  402504:	3a01      	subs	r2, #1
  402506:	f811 3b01 	ldrb.w	r3, [r1], #1
  40250a:	f800 3b01 	strb.w	r3, [r0], #1
  40250e:	d2f9      	bcs.n	402504 <memcpy+0x118>
  402510:	780b      	ldrb	r3, [r1, #0]
  402512:	7003      	strb	r3, [r0, #0]
  402514:	784b      	ldrb	r3, [r1, #1]
  402516:	7043      	strb	r3, [r0, #1]
  402518:	788b      	ldrb	r3, [r1, #2]
  40251a:	7083      	strb	r3, [r0, #2]
  40251c:	4660      	mov	r0, ip
  40251e:	4770      	bx	lr

00402520 <memset>:
  402520:	b470      	push	{r4, r5, r6}
  402522:	0786      	lsls	r6, r0, #30
  402524:	d046      	beq.n	4025b4 <memset+0x94>
  402526:	1e54      	subs	r4, r2, #1
  402528:	2a00      	cmp	r2, #0
  40252a:	d041      	beq.n	4025b0 <memset+0x90>
  40252c:	b2ca      	uxtb	r2, r1
  40252e:	4603      	mov	r3, r0
  402530:	e002      	b.n	402538 <memset+0x18>
  402532:	f114 34ff 	adds.w	r4, r4, #4294967295
  402536:	d33b      	bcc.n	4025b0 <memset+0x90>
  402538:	f803 2b01 	strb.w	r2, [r3], #1
  40253c:	079d      	lsls	r5, r3, #30
  40253e:	d1f8      	bne.n	402532 <memset+0x12>
  402540:	2c03      	cmp	r4, #3
  402542:	d92e      	bls.n	4025a2 <memset+0x82>
  402544:	b2cd      	uxtb	r5, r1
  402546:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40254a:	2c0f      	cmp	r4, #15
  40254c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402550:	d919      	bls.n	402586 <memset+0x66>
  402552:	f103 0210 	add.w	r2, r3, #16
  402556:	4626      	mov	r6, r4
  402558:	3e10      	subs	r6, #16
  40255a:	2e0f      	cmp	r6, #15
  40255c:	f842 5c10 	str.w	r5, [r2, #-16]
  402560:	f842 5c0c 	str.w	r5, [r2, #-12]
  402564:	f842 5c08 	str.w	r5, [r2, #-8]
  402568:	f842 5c04 	str.w	r5, [r2, #-4]
  40256c:	f102 0210 	add.w	r2, r2, #16
  402570:	d8f2      	bhi.n	402558 <memset+0x38>
  402572:	f1a4 0210 	sub.w	r2, r4, #16
  402576:	f022 020f 	bic.w	r2, r2, #15
  40257a:	f004 040f 	and.w	r4, r4, #15
  40257e:	3210      	adds	r2, #16
  402580:	2c03      	cmp	r4, #3
  402582:	4413      	add	r3, r2
  402584:	d90d      	bls.n	4025a2 <memset+0x82>
  402586:	461e      	mov	r6, r3
  402588:	4622      	mov	r2, r4
  40258a:	3a04      	subs	r2, #4
  40258c:	2a03      	cmp	r2, #3
  40258e:	f846 5b04 	str.w	r5, [r6], #4
  402592:	d8fa      	bhi.n	40258a <memset+0x6a>
  402594:	1f22      	subs	r2, r4, #4
  402596:	f022 0203 	bic.w	r2, r2, #3
  40259a:	3204      	adds	r2, #4
  40259c:	4413      	add	r3, r2
  40259e:	f004 0403 	and.w	r4, r4, #3
  4025a2:	b12c      	cbz	r4, 4025b0 <memset+0x90>
  4025a4:	b2c9      	uxtb	r1, r1
  4025a6:	441c      	add	r4, r3
  4025a8:	f803 1b01 	strb.w	r1, [r3], #1
  4025ac:	429c      	cmp	r4, r3
  4025ae:	d1fb      	bne.n	4025a8 <memset+0x88>
  4025b0:	bc70      	pop	{r4, r5, r6}
  4025b2:	4770      	bx	lr
  4025b4:	4614      	mov	r4, r2
  4025b6:	4603      	mov	r3, r0
  4025b8:	e7c2      	b.n	402540 <memset+0x20>
  4025ba:	bf00      	nop

004025bc <register_fini>:
  4025bc:	4b02      	ldr	r3, [pc, #8]	; (4025c8 <register_fini+0xc>)
  4025be:	b113      	cbz	r3, 4025c6 <register_fini+0xa>
  4025c0:	4802      	ldr	r0, [pc, #8]	; (4025cc <register_fini+0x10>)
  4025c2:	f000 b805 	b.w	4025d0 <atexit>
  4025c6:	4770      	bx	lr
  4025c8:	00000000 	.word	0x00000000
  4025cc:	004025dd 	.word	0x004025dd

004025d0 <atexit>:
  4025d0:	2300      	movs	r3, #0
  4025d2:	4601      	mov	r1, r0
  4025d4:	461a      	mov	r2, r3
  4025d6:	4618      	mov	r0, r3
  4025d8:	f000 b81e 	b.w	402618 <__register_exitproc>

004025dc <__libc_fini_array>:
  4025dc:	b538      	push	{r3, r4, r5, lr}
  4025de:	4c0a      	ldr	r4, [pc, #40]	; (402608 <__libc_fini_array+0x2c>)
  4025e0:	4d0a      	ldr	r5, [pc, #40]	; (40260c <__libc_fini_array+0x30>)
  4025e2:	1b64      	subs	r4, r4, r5
  4025e4:	10a4      	asrs	r4, r4, #2
  4025e6:	d00a      	beq.n	4025fe <__libc_fini_array+0x22>
  4025e8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4025ec:	3b01      	subs	r3, #1
  4025ee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4025f2:	3c01      	subs	r4, #1
  4025f4:	f855 3904 	ldr.w	r3, [r5], #-4
  4025f8:	4798      	blx	r3
  4025fa:	2c00      	cmp	r4, #0
  4025fc:	d1f9      	bne.n	4025f2 <__libc_fini_array+0x16>
  4025fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402602:	f000 b8e7 	b.w	4027d4 <_fini>
  402606:	bf00      	nop
  402608:	004027e4 	.word	0x004027e4
  40260c:	004027e0 	.word	0x004027e0

00402610 <__retarget_lock_acquire_recursive>:
  402610:	4770      	bx	lr
  402612:	bf00      	nop

00402614 <__retarget_lock_release_recursive>:
  402614:	4770      	bx	lr
  402616:	bf00      	nop

00402618 <__register_exitproc>:
  402618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40261c:	4d2c      	ldr	r5, [pc, #176]	; (4026d0 <__register_exitproc+0xb8>)
  40261e:	4606      	mov	r6, r0
  402620:	6828      	ldr	r0, [r5, #0]
  402622:	4698      	mov	r8, r3
  402624:	460f      	mov	r7, r1
  402626:	4691      	mov	r9, r2
  402628:	f7ff fff2 	bl	402610 <__retarget_lock_acquire_recursive>
  40262c:	4b29      	ldr	r3, [pc, #164]	; (4026d4 <__register_exitproc+0xbc>)
  40262e:	681c      	ldr	r4, [r3, #0]
  402630:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402634:	2b00      	cmp	r3, #0
  402636:	d03e      	beq.n	4026b6 <__register_exitproc+0x9e>
  402638:	685a      	ldr	r2, [r3, #4]
  40263a:	2a1f      	cmp	r2, #31
  40263c:	dc1c      	bgt.n	402678 <__register_exitproc+0x60>
  40263e:	f102 0e01 	add.w	lr, r2, #1
  402642:	b176      	cbz	r6, 402662 <__register_exitproc+0x4a>
  402644:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402648:	2401      	movs	r4, #1
  40264a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40264e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402652:	4094      	lsls	r4, r2
  402654:	4320      	orrs	r0, r4
  402656:	2e02      	cmp	r6, #2
  402658:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40265c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402660:	d023      	beq.n	4026aa <__register_exitproc+0x92>
  402662:	3202      	adds	r2, #2
  402664:	f8c3 e004 	str.w	lr, [r3, #4]
  402668:	6828      	ldr	r0, [r5, #0]
  40266a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40266e:	f7ff ffd1 	bl	402614 <__retarget_lock_release_recursive>
  402672:	2000      	movs	r0, #0
  402674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402678:	4b17      	ldr	r3, [pc, #92]	; (4026d8 <__register_exitproc+0xc0>)
  40267a:	b30b      	cbz	r3, 4026c0 <__register_exitproc+0xa8>
  40267c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402680:	f3af 8000 	nop.w
  402684:	4603      	mov	r3, r0
  402686:	b1d8      	cbz	r0, 4026c0 <__register_exitproc+0xa8>
  402688:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40268c:	6002      	str	r2, [r0, #0]
  40268e:	2100      	movs	r1, #0
  402690:	6041      	str	r1, [r0, #4]
  402692:	460a      	mov	r2, r1
  402694:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402698:	f04f 0e01 	mov.w	lr, #1
  40269c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4026a0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4026a4:	2e00      	cmp	r6, #0
  4026a6:	d0dc      	beq.n	402662 <__register_exitproc+0x4a>
  4026a8:	e7cc      	b.n	402644 <__register_exitproc+0x2c>
  4026aa:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4026ae:	430c      	orrs	r4, r1
  4026b0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4026b4:	e7d5      	b.n	402662 <__register_exitproc+0x4a>
  4026b6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4026ba:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4026be:	e7bb      	b.n	402638 <__register_exitproc+0x20>
  4026c0:	6828      	ldr	r0, [r5, #0]
  4026c2:	f7ff ffa7 	bl	402614 <__retarget_lock_release_recursive>
  4026c6:	f04f 30ff 	mov.w	r0, #4294967295
  4026ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4026ce:	bf00      	nop
  4026d0:	20000438 	.word	0x20000438
  4026d4:	004027bc 	.word	0x004027bc
  4026d8:	00000000 	.word	0x00000000
  4026dc:	732f2e2e 	.word	0x732f2e2e
  4026e0:	462f6372 	.word	0x462f6372
  4026e4:	52656572 	.word	0x52656572
  4026e8:	2f534f54 	.word	0x2f534f54
  4026ec:	74726f70 	.word	0x74726f70
  4026f0:	656c6261 	.word	0x656c6261
  4026f4:	4343472f 	.word	0x4343472f
  4026f8:	4d52412f 	.word	0x4d52412f
  4026fc:	344d435f 	.word	0x344d435f
  402700:	6f702f46 	.word	0x6f702f46
  402704:	632e7472 	.word	0x632e7472
  402708:	00000000 	.word	0x00000000
  40270c:	732f2e2e 	.word	0x732f2e2e
  402710:	462f6372 	.word	0x462f6372
  402714:	52656572 	.word	0x52656572
  402718:	2f534f54 	.word	0x2f534f54
  40271c:	74726f70 	.word	0x74726f70
  402720:	656c6261 	.word	0x656c6261
  402724:	6d654d2f 	.word	0x6d654d2f
  402728:	676e614d 	.word	0x676e614d
  40272c:	6165682f 	.word	0x6165682f
  402730:	2e355f70 	.word	0x2e355f70
  402734:	00000063 	.word	0x00000063
  402738:	732f2e2e 	.word	0x732f2e2e
  40273c:	462f6372 	.word	0x462f6372
  402740:	52656572 	.word	0x52656572
  402744:	2f534f54 	.word	0x2f534f54
  402748:	75657571 	.word	0x75657571
  40274c:	00632e65 	.word	0x00632e65
  402750:	454c4449 	.word	0x454c4449
  402754:	00000000 	.word	0x00000000
  402758:	732f2e2e 	.word	0x732f2e2e
  40275c:	462f6372 	.word	0x462f6372
  402760:	52656572 	.word	0x52656572
  402764:	2f534f54 	.word	0x2f534f54
  402768:	6b736174 	.word	0x6b736174
  40276c:	00632e73 	.word	0x00632e73
  402770:	51726d54 	.word	0x51726d54
  402774:	00000000 	.word	0x00000000
  402778:	20726d54 	.word	0x20726d54
  40277c:	00637653 	.word	0x00637653
  402780:	732f2e2e 	.word	0x732f2e2e
  402784:	462f6372 	.word	0x462f6372
  402788:	52656572 	.word	0x52656572
  40278c:	2f534f54 	.word	0x2f534f54
  402790:	656d6974 	.word	0x656d6974
  402794:	632e7372 	.word	0x632e7372
  402798:	00000000 	.word	0x00000000
  40279c:	4220794d 	.word	0x4220794d
  4027a0:	6f747475 	.word	0x6f747475
  4027a4:	6154206e 	.word	0x6154206e
  4027a8:	00006b73 	.word	0x00006b73
  4027ac:	732f2e2e 	.word	0x732f2e2e
  4027b0:	6d2f6372 	.word	0x6d2f6372
  4027b4:	2e6e6961 	.word	0x2e6e6961
  4027b8:	00000063 	.word	0x00000063

004027bc <_global_impure_ptr>:
  4027bc:	20000010                                ... 

004027c0 <_init>:
  4027c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4027c2:	bf00      	nop
  4027c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4027c6:	bc08      	pop	{r3}
  4027c8:	469e      	mov	lr, r3
  4027ca:	4770      	bx	lr

004027cc <__init_array_start>:
  4027cc:	004025bd 	.word	0x004025bd

004027d0 <__frame_dummy_init_array_entry>:
  4027d0:	0040011d                                ..@.

004027d4 <_fini>:
  4027d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4027d6:	bf00      	nop
  4027d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4027da:	bc08      	pop	{r3}
  4027dc:	469e      	mov	lr, r3
  4027de:	4770      	bx	lr

004027e0 <__fini_array_start>:
  4027e0:	004000f9 	.word	0x004000f9
